bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  new  JsonDescriptorException( "The  date  should  be  a  string  value. ");  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonDescriptorException( "The  date  should  be  a  string  value. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonDescriptorException( "The  date  should  be  a  string  value. ");	  new    JsonDescriptorException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
2	[BUG]  [BUGGY]  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.nextString());  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.nextString());	  new    JsonDescriptorException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
3	[BUG]  [BUGGY]  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in);  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in);	  new    JsonDescriptorException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
4	[BUG]  [BUGGY]  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.getClass());  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.getClass());	  new    JsonDescriptorException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
5	[BUG]  [BUGGY]  new  JsonDescriptorException( "The  date  should  be  a  string  value: ");  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonDescriptorException( "The  date  should  be  a  string  value: ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonDescriptorException( "The  date  should  be  a  string  value: ");	  new    JsonDescriptorException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
6	[BUG]  [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Please  check  that  this  value  is  not  valid.   ");  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  this  value  is  not  valid.   ");  [CE]  unreachable  statement  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Please  check  that  this  value  is  not  valid.   ");  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  this  value  is  not  valid.   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Please    check    that    this    value    is    not    valid.   ");    throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  this  value  is  not  valid.   ");	  	non-compiled	[CE]  unreachable  statement	48	None	add
7	[BUG]  [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Please  check  that  this  value  is  not  valid.   ");  Throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  this  value  is  not  valid.   ");  [CE]  not  a  statement  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Please  check  that  this  value  is  not  valid.   ");  Throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  this  value  is  not  valid.   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Please    check    that    this    value    is    not    valid.   ");    Throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  this  value  is  not  valid.   ");	  	non-compiled	[CE]  not  a  statement	48	None	add
8	[BUG]  [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Please  check  that  this  value  is  not  valid.   ");  JsonParseException(   "The  date  should  be  a  string  value.  Please  check  that  this  value  is  not  valid.   ");  [CE]  cannot  find  symbol  [FE]        JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Please  check  that  this  value  is  not  valid.   ");  JsonParseException(   "The  date  should  be  a  string  value.  Please  check  that  this  value  is  not  valid.   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Please    check    that    this    value    is    not    valid.   ");    JsonParseException(   "The  date  should  be  a  string  value.  Please  check  that  this  value  is  not  valid.   ");	  	non-compiled	[CE]  cannot  find  symbol	48	None	add
9	[BUG]  [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Please  check  that  this  value  is  not  valid.   ");  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  this  value  is  not  valid.. ");  [CE]  unreachable  statement  [FE]          JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Please  check  that  this  value  is  not  valid.   ");  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  this  value  is  not  valid.. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Please    check    that    this    value    is    not    valid.   ");    throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  this  value  is  not  valid.. ");	  	non-compiled	[CE]  unreachable  statement	48	None	add
10	[BUG]  [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Please  check  that  this  value  is  not  valid.   ");  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  this  value  is  not  valid. ".);  [CE]  <identifier>  expected  [FE]            JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Please  check  that  this  value  is  not  valid.   ");  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  this  value  is  not  valid. ".);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Please    check    that    this    value    is    not    valid.   ");    throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  this  value  is  not  valid. ".);	  	non-compiled	[CE]  <identifier>  expected	48	None	add
11	[BUG]  [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value. ",  in.getMessage());  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value. ",  in.getMessage());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonDescriptorException( "The  date  should  be  a  string  value. ",  in.getMessage());	  throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value   ",    in.getMessage());    	non-compiled	[CE]  cannot  find  symbol	165	None	replace
12	[BUG]  [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value   ",  in.toString());  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value   ",  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonDescriptorException( "The  date  should  be  a  string  value   ",  in.toString());	  throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value   ",    in.getMessage());    	non-compiled	[CE]  cannot  find  symbol	165	None	replace
13	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JsonToken.VALUE_NUMBER));  [CE]  cannot  find  symbol  VALUE_NUMBER  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JsonToken.VALUE_NUMBER));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JsonToken.VALUE_NUMBER));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString(),    JsonToken.VALUE_STRING));    	non-compiled	[CE]  cannot  find  symbol  VALUE_NUMBER	119	None	replace
14	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JsonToken.VALUE_NUMBER_INT));  [CE]  cannot  find  symbol  VALUE_NUMBER_INT  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JsonToken.VALUE_NUMBER_INT));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JsonToken.VALUE_NUMBER_INT));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString(),    JsonToken.VALUE_STRING));    	non-compiled	[CE]  cannot  find  symbol  VALUE_NUMBER_INT	119	None	replace
15	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JsonToken.VALUE_NULL));  [CE]  cannot  find  symbol  VALUE_NULL  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JsonToken.VALUE_NULL));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JsonToken.VALUE_NULL));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString(),    JsonToken.VALUE_STRING));    	non-compiled	[CE]  cannot  find  symbol  VALUE_NULL	119	None	replace
16	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JsonToken.VALUE_NAME));  [CE]  cannot  find  symbol  VALUE_NAME  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JsonToken.VALUE_NAME));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JsonToken.VALUE_NAME));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString(),    JsonToken.VALUE_STRING));    	non-compiled	[CE]  cannot  find  symbol  VALUE_NAME	119	None	replace
17	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JsonToken.VALUE_NUMBER_FLOAT));  [CE]  cannot  find  symbol  VALUE_NUMBER_FLOAT  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JsonToken.VALUE_NUMBER_FLOAT));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JsonToken.VALUE_NUMBER_FLOAT));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString(),    JsonToken.VALUE_STRING));    	non-compiled	[CE]  cannot  find  symbol  VALUE_NUMBER_FLOAT	119	None	replace
18	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JsonToken.FIELD_NAME));  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JsonToken.FIELD_NAME));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JsonToken.FIELD_NAME));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString(),    JsonToken.VALUE_STRING));    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	119	None	replace
19	[BUG]  [BUGGY]  Throw  new  JsonParseException( "This  date  should  be  a  string  value ");  [CE]  not  a  statement  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  Throw  new  JsonParseException( "This  date  should  be  a  string  value ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	Throw  new  JsonParseException( "This  date  should  be  a  string  value ");	  throw    new    JsonParseException(       "This    date    should    be    a    string    value       ");    Throw    new    JsonParseException(   "This    date    should    be    a    string    value       ");    	non-compiled	[CE]  not  a  statement	84	None	replace
20	[BUG]  [BUGGY]  throw  new  JsonTokenException( "This  date  should  be  a  string  value. ");  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "This  date  should  be  a  string  value. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "This  date  should  be  a  string  value. ");	  throw    new    JsonParseException(       "This    date    should    be    a    string    value       ");    Throw    new    JsonParseException(   "This    date    should    be    a    string    value       ");    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
21	[BUG]  [BUGGY]  Throw  new  JsonParseException( "This  date  should  be  a  string  value. ");  [CE]  not  a  statement  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  Throw  new  JsonParseException( "This  date  should  be  a  string  value. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	Throw  new  JsonParseException( "This  date  should  be  a  string  value. ");	  throw    new    JsonParseException(       "This    date    should    be    a    string    value       ");    Throw    new    JsonParseException(   "This    date    should    be    a    string    value       ");    	non-compiled	[CE]  not  a  statement	84	None	replace
22	[BUG]  [BUGGY]  Throwables.throw  new  JsonDescriptorException( "The  date  should  be  a  string  value. ");  [CE]  <identifier>  expected  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  Throwables.throw  new  JsonDescriptorException( "The  date  should  be  a  string  value. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	Throwables.throw  new  JsonDescriptorException( "The  date  should  be  a  string  value. ");	  Throwables.throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  <identifier>  expected	63	None	replace
23	[BUG]  [BUGGY]  Throwables.throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in);  [CE]  <identifier>  expected  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  Throwables.throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	Throwables.throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in);	  Throwables.throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  <identifier>  expected	63	None	replace
24	[BUG]  [BUGGY]  Throwables.throw  new  JsonDescriptorException( "The  date  should  be  a  string  value: "  +  in.getClass());  [CE]  <identifier>  expected  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  Throwables.throw  new  JsonDescriptorException( "The  date  should  be  a  string  value: "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	Throwables.throw  new  JsonDescriptorException( "The  date  should  be  a  string  value: "  +  in.getClass());	  Throwables.throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  <identifier>  expected	63	None	replace
25	[BUG]  [BUGGY]  Throwables.throw  new  JsonDescriptorException( "The  date  should  be  a  string  value: "  +  in.toString());  [CE]  <identifier>  expected  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  Throwables.throw  new  JsonDescriptorException( "The  date  should  be  a  string  value: "  +  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	Throwables.throw  new  JsonDescriptorException( "The  date  should  be  a  string  value: "  +  in.toString());	  Throwables.throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  <identifier>  expected	63	None	replace
26	[BUG]  [BUGGY]  Throwables.throw  new  JsonDescriptorException( "The  date  should  be  a  string  value! ");  [CE]  <identifier>  expected  [FE]                              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  Throwables.throw  new  JsonDescriptorException( "The  date  should  be  a  string  value! ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	Throwables.throw  new  JsonDescriptorException( "The  date  should  be  a  string  value! ");	  Throwables.throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  <identifier>  expected	63	None	replace
27	[BUG]  [BUGGY]  Throwables.throw  new  JsonDescriptorException( "The  date  should  be  a  string  value, ");  [CE]  <identifier>  expected  [FE]                                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  Throwables.throw  new  JsonDescriptorException( "The  date  should  be  a  string  value, ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	Throwables.throw  new  JsonDescriptorException( "The  date  should  be  a  string  value, ");	  Throwables.throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  <identifier>  expected	63	None	replace
28	[BUG]  [BUGGY]  throw  new  JsonTokenException( "This  date  should  be  a  string  value ",  in);  [CE]  cannot  find  symbol  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "This  date  should  be  a  string  value ",  in);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "This  date  should  be  a  string  value ",  in);	  throw    new    JsonTokenException(   "This    date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
29	[BUG]  [BUGGY]  throw  new  JsonTokenException( "This  date  should  be  a  string  value ",  in.nextString());  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "This  date  should  be  a  string  value ",  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "This  date  should  be  a  string  value ",  in.nextString());	  throw    new    JsonTokenException(   "This    date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
30	[BUG]  [BUGGY]  throw  new  JsonTokenException( "This  date  should  be  a  string  value: "  +  in.getClass());  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "This  date  should  be  a  string  value: "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "This  date  should  be  a  string  value: "  +  in.getClass());	  throw    new    JsonTokenException(   "This    date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
31	[BUG]  [BUGGY]  throw  new  JsonTokenException( "This  date  should  be  a  string  value ",  in.getClass());  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "This  date  should  be  a  string  value ",  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "This  date  should  be  a  string  value ",  in.getClass());	  throw    new    JsonTokenException(   "This    date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
32	[BUG]  [BUGGY]  throw  new  JsonTokenException( "This  date  should  be  a  string  value: ");  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "This  date  should  be  a  string  value: ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "This  date  should  be  a  string  value: ");	  throw    new    JsonTokenException(   "This    date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
33	[BUG]  [BUGGY]  JsonTokenException  in  =  new  JsonTokenException( "Unknown  string: "  +  in.getClass());  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonTokenException  in  =  new  JsonTokenException( "Unknown  string: "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonTokenException  in  =  new  JsonTokenException( "Unknown  string: "  +  in.getClass());	  throw    new    JsonTokenException(   "Unknown    string:   "    +    in.getClass());    	non-compiled	[CE]  cannot  find  symbol	152	None	replace
34	[BUG]  [BUGGY]  Throwables.throw  new  JsonTokenException( "Unknown  string: "  +  in.getClass());  [CE]  <identifier>  expected  [FE]                              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  Throwables.throw  new  JsonTokenException( "Unknown  string: "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	Throwables.throw  new  JsonTokenException( "Unknown  string: "  +  in.getClass());	  throw    new    JsonTokenException(   "Unknown    string:   "    +    in.getClass());    	non-compiled	[CE]  <identifier>  expected	152	None	replace
35	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Unknown  string: "  +  in.toString());  [CE]  cannot  find  symbol  [FE]                                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "Unknown  string: "  +  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Unknown  string: "  +  in.toString());	  throw    new    JsonTokenException(   "Unknown    string:   "    +    in.getClass());    	non-compiled	[CE]  cannot  find  symbol	152	None	replace
36	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Unknown  string: "  +  in,  in.getClass());  [CE]  cannot  find  symbol  [FE]                                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "Unknown  string: "  +  in,  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Unknown  string: "  +  in,  in.getClass());	  throw    new    JsonTokenException(   "Unknown    string:   "    +    in.getClass());    	non-compiled	[CE]  cannot  find  symbol	152	None	replace
37	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Unknown  String: "  +  in.getClass());  [CE]  cannot  find  symbol  [FE]                                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "Unknown  String: "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Unknown  String: "  +  in.getClass());	  throw    new    JsonTokenException(   "Unknown    string:   "    +    in.getClass());    	non-compiled	[CE]  cannot  find  symbol	152	None	replace
38	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value. ",  in);  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value. ",  in);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  date  should  be  a  string  value. ",  in);	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value   ",    in);    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
39	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value ",  in.toString());  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value ",  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  date  should  be  a  string  value ",  in.toString());	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value   ",    in);    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
40	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Unknown  string: "  +  in.getMessage());  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "Unknown  string: "  +  in.getMessage());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Unknown  string: "  +  in.getMessage());	  throw    new    JsonTokenException(   "Unknown    string:   ");    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
41	[BUG]  [BUGGY]  JsonTokenException  in  =  new  JsonTokenException( "Unknown  string: ");  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonTokenException  in  =  new  JsonTokenException( "Unknown  string: ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonTokenException  in  =  new  JsonTokenException( "Unknown  string: ");	  throw    new    JsonTokenException(   "Unknown    string:   ");    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
42	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Unknown  string: "  +  in.getValue());  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "Unknown  string: "  +  in.getValue());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Unknown  string: "  +  in.getValue());	  throw    new    JsonTokenException(   "Unknown    string:   ");    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
43	[BUG]  [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value. ",  in.getMessage());  [CE]  cannot  find  symbol  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value. ",  in.getMessage());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "This  date  should  be  a  string  value. ",  in.getMessage());	  throw    new    JsonParseException(   "This    date    should    be    a    string    value   ",    in.getMessage());    	non-compiled	[CE]  cannot  find  symbol	163	None	replace
44	[BUG]  [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value "  +  in.getMessage());  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value "  +  in.getMessage());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "This  date  should  be  a  string  value "  +  in.getMessage());	  throw    new    JsonParseException(   "This    date    should    be    a    string    value   ",    in.getMessage());    	non-compiled	[CE]  cannot  find  symbol	163	None	replace
45	[BUG]  [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value ", "Invalid  date  type: "  +  in.getMessage());  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value ", "Invalid  date  type: "  +  in.getMessage());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "This  date  should  be  a  string  value ", "Invalid  date  type: "  +  in.getMessage());	  throw    new    JsonParseException(   "This    date    should    be    a    string    value   ",    in.getMessage());    	non-compiled	[CE]  cannot  find  symbol	163	None	replace
46	[BUG]  [BUGGY]  JsonToken  throw  new  JsonParseException( "Date  should  be  a  string  value ");  [CE]  not  a  statement  [FE]        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  throw  new  JsonParseException( "Date  should  be  a  string  value ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  throw  new  JsonParseException( "Date  should  be  a  string  value ");	  throw    new    JsonParseException(       "Date    should    be    a    string    value       ");    JsonToken    throw    new    JsonParseException(   "Date    should    be    a    string    value       ");    	non-compiled	[CE]  not  a  statement	141	None	replace
47	[BUG]  [BUGGY]  JsonToken  throw  new  JsonParseException( "Date  should  be  a  string  value. ");  [CE]  not  a  statement  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  throw  new  JsonParseException( "Date  should  be  a  string  value. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  throw  new  JsonParseException( "Date  should  be  a  string  value. ");	  throw    new    JsonParseException(       "Date    should    be    a    string    value       ");    JsonToken    throw    new    JsonParseException(   "Date    should    be    a    string    value       ");    	non-compiled	[CE]  not  a  statement	141	None	replace
48	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()  ==  JsonToken.STRING)  {  throw  new  JsonParseException( "Date  should  be  a  string  value ");  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	if(in.peek()  ==  JsonToken.STRING)  {  throw  new  JsonParseException( "Date  should  be  a  string  value ");  }	  throw    new    JsonParseException(       "Date    should    be    a    string    value       ");    JsonToken    throw    new    JsonParseException(   "Date    should    be    a    string    value       ");    	compilable	  [FE]  IllegalStateException  	141	1	replace
49	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.STRING)  {  throw  new  JsonParseException( "Date  should  be  a  string  value ");  }  [FE]  IllegalStateException  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()  ==  JsonToken.STRING)  {  throw  new  JsonParseException( "Date  should  be  a  string  value ");  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()  ==  JsonToken.STRING)  {  throw  new  JsonParseException( "Date  should  be  a  string  value ");  }	  throw    new    JsonParseException(       "Date    should    be    a    string    value       ");    JsonToken    throw    new    JsonParseException(   "Date    should    be    a    string    value       ");    	compilable	  [FE]  IllegalStateException  	141	1	replace
50	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()  ==  JsonToken.STRING)  {  throw  new  JsonParseException( "Date  should  be  a  string  value. ");  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	if(in.peek()  ==  JsonToken.STRING)  {  throw  new  JsonParseException( "Date  should  be  a  string  value. ");  }	  throw    new    JsonParseException(       "Date    should    be    a    string    value       ");    JsonToken    throw    new    JsonParseException(   "Date    should    be    a    string    value       ");    	compilable	  [FE]  IllegalStateException  	141	1	replace
51	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.STRING)  {  throw  new  JsonParseException( "Date  should  be  a  string  value. ");  }  [FE]  IllegalStateException  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()  ==  JsonToken.STRING)  {  throw  new  JsonParseException( "Date  should  be  a  string  value. ");  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()  ==  JsonToken.STRING)  {  throw  new  JsonParseException( "Date  should  be  a  string  value. ");  }	  throw    new    JsonParseException(       "Date    should    be    a    string    value       ");    JsonToken    throw    new    JsonParseException(   "Date    should    be    a    string    value       ");    	compilable	  [FE]  IllegalStateException  	141	1	replace
52	[BUG]  [BUGGY]  String  datePattern  =  JsonToken.FIELD_NAME,  in.readString();  [CE]  ';'  expected  [FE]                  IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  String  datePattern  =  JsonToken.FIELD_NAME,  in.readString();  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	String  datePattern  =  JsonToken.FIELD_NAME,  in.readString();	          String    datePattern    =    in.readString();    	non-compiled	[CE]  ';'  expected	28	None	replace
53	[BUG]  [BUGGY]  String  datePattern  =  this.in.readString();  [CE]  cannot  find  symbol  in  [FE]                    IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  String  datePattern  =  this.in.readString();  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	String  datePattern  =  this.in.readString();	          String    datePattern    =    in.readString();    	non-compiled	[CE]  cannot  find  symbol  in	28	None	replace
54	[BUG]  [BUGGY]  String  datePattern  =  Integer.toString(in.readString());  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  String  datePattern  =  Integer.toString(in.readString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	String  datePattern  =  Integer.toString(in.readString());	          String    datePattern    =    in.readString();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
55	[BUG]  [BUGGY]  String  datePattern  =  in,  in.readString();  [CE]  ';'  expected  [FE]                        IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  String  datePattern  =  in,  in.readString();  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	String  datePattern  =  in,  in.readString();	          String    datePattern    =    in.readString();    	non-compiled	[CE]  ';'  expected	28	None	replace
56	[BUG]  [BUGGY]  String  datePattern  =  JsonToken.VALUE_STRING.readString();  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                          IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  String  datePattern  =  JsonToken.VALUE_STRING.readString();  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	String  datePattern  =  JsonToken.VALUE_STRING.readString();	          String    datePattern    =    in.readString();    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	28	None	replace
57	[BUG]  [BUGGY]  String  datePattern  =  JsonToken.STRING_NAME.readString();  [CE]  cannot  find  symbol  STRING_NAME  [FE]                            IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  String  datePattern  =  JsonToken.STRING_NAME.readString();  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	String  datePattern  =  JsonToken.STRING_NAME.readString();	          String    datePattern    =    in.readString();    	non-compiled	[CE]  cannot  find  symbol  STRING_NAME	28	None	replace
58	[BUG]  [BUGGY]  Throw  new  JsonParseException( "Date  should  be  a  string  value ");  [CE]  not  a  statement  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  Throw  new  JsonParseException( "Date  should  be  a  string  value ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	Throw  new  JsonParseException( "Date  should  be  a  string  value ");	  throw    new    JsonParseException(       "Date    should    be    a    string    value       ");    Throw    new    JsonParseException(   "Date    should    be    a    string    value       ");    	non-compiled	[CE]  not  a  statement	57	None	replace
59	[BUG]  [BUGGY]  Throw  new  JsonParseException( "Date  should  be  a  string  value. ");  [CE]  not  a  statement  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  Throw  new  JsonParseException( "Date  should  be  a  string  value. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	Throw  new  JsonParseException( "Date  should  be  a  string  value. ");	  throw    new    JsonParseException(       "Date    should    be    a    string    value       ");    Throw    new    JsonParseException(   "Date    should    be    a    string    value       ");    	non-compiled	[CE]  not  a  statement	57	None	replace
60	[BUG]  [BUGGY]  JsonToken  throw  new  JsonParseException( "This  date  should  be  a  string  value ");  [CE]  not  a  statement  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  throw  new  JsonParseException( "This  date  should  be  a  string  value ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  throw  new  JsonParseException( "This  date  should  be  a  string  value ");	  throw    new    JsonParseException(       "This    date    should    be    a    string    value       ");    JsonToken    throw    new    JsonParseException(   "This    date    should    be    a    string    value       ");    	non-compiled	[CE]  not  a  statement	85	None	replace
61	[BUG]  [BUGGY]  JsonToken  throw  new  JsonParseException( "This  date  should  be  a  string  value. ");  [CE]  not  a  statement  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  throw  new  JsonParseException( "This  date  should  be  a  string  value. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  throw  new  JsonParseException( "This  date  should  be  a  string  value. ");	  throw    new    JsonParseException(       "This    date    should    be    a    string    value       ");    JsonToken    throw    new    JsonParseException(   "This    date    should    be    a    string    value       ");    	non-compiled	[CE]  not  a  statement	85	None	replace
62	[BUG]  [BUGGY]  JsonToken  throw  new  JsonParseException( "The  date  should  be  a  string  value ");  [CE]  not  a  statement  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  throw  new  JsonParseException( "The  date  should  be  a  string  value ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  throw  new  JsonParseException( "The  date  should  be  a  string  value ");	  throw    new    JsonParseException(       "This    date    should    be    a    string    value       ");    JsonToken    throw    new    JsonParseException(   "This    date    should    be    a    string    value       ");    	non-compiled	[CE]  not  a  statement	85	None	replace
63	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getKey()),  JsonToken.VALUE_STRING);  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getKey()),  JsonToken.VALUE_STRING);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getKey()),  JsonToken.VALUE_STRING);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.getValue()),    JsonToken.VALUE_STRING);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
64	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue(),  JsonToken.VALUE_STRING));  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue(),  JsonToken.VALUE_STRING));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue(),  JsonToken.VALUE_STRING));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.getValue()),    JsonToken.VALUE_STRING);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
65	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue()),  JsonToken.VALUE_STRING,  deserialize);  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue()),  JsonToken.VALUE_STRING,  deserialize);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue()),  JsonToken.VALUE_STRING,  deserialize);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.getValue()),    JsonToken.VALUE_STRING);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
66	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue()),  JsonToken.VALUE_STRING);  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue()),  JsonToken.VALUE_STRING);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue()),  JsonToken.VALUE_STRING);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.getValue()),    JsonToken.VALUE_STRING);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	54	None	replace
67	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue()),  JsonToken.VALUE_STRING,  SIMPLE_NAME);  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue()),  JsonToken.VALUE_STRING,  SIMPLE_NAME);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue()),  JsonToken.VALUE_STRING,  SIMPLE_NAME);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.getValue()),    JsonToken.VALUE_STRING);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
68	[BUG]  [BUGGY]  String  datePattern  =  in.readString();  return  new  Date(datePattern);  [CE]  cannot  find  symbol  [FE]        IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  String  datePattern  =  in.readString();  return  new  Date(datePattern);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	String  datePattern  =  in.readString();  return  new  Date(datePattern);	  if(in.peek()    ==    JsonToken.VALUE_STRING)    {    String    datePattern    =    in.readString();    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
69	[BUG]  [BUGGY]  in.peek()  ==  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  [CE]  not  a  statement  [FE]          IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  in.peek()  ==  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	in.peek()  ==  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }	  if(in.peek()    ==    JsonToken.VALUE_STRING)    {    String    datePattern    =    in.readString();    return    new    Date(datePattern);    }    	non-compiled	[CE]  not  a  statement	106	None	replace
70	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_NUMBER_INT)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  VALUE_NUMBER_INT  [FE]            IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_NUMBER_INT)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()  ==  JsonToken.VALUE_NUMBER_INT)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }	  if(in.peek()    ==    JsonToken.VALUE_STRING)    {    String    datePattern    =    in.readString();    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol  VALUE_NUMBER_INT	106	None	replace
71	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.VALUE_NUMBER_INT)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  VALUE_NUMBER_INT  [FE]              IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()!=  JsonToken.VALUE_NUMBER_INT)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()!=  JsonToken.VALUE_NUMBER_INT)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }	  if(in.peek()    ==    JsonToken.VALUE_STRING)    {    String    datePattern    =    in.readString();    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol  VALUE_NUMBER_INT	106	None	replace
72	[BUG]  [BUGGY]  in.peek()  ==  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  [CE]  not  a  statement  [FE]                IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  in.peek()  ==  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	in.peek()  ==  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);	  if(in.peek()    ==    JsonToken.VALUE_STRING)    {    String    datePattern    =    in.readString();    return    new    Date(datePattern);    }    	non-compiled	[CE]  not  a  statement	106	None	replace
73	[BUG]  [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value. ",  in.nextString());  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value. ",  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonDescriptorException( "The  date  should  be  a  string  value. ",  in.nextString());	  throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value   ",    in.nextString());    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
74	[BUG]  [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value "  +  in.nextString());  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value "  +  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonDescriptorException( "The  date  should  be  a  string  value "  +  in.nextString());	  throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value   ",    in.nextString());    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
75	[BUG]  [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ", "Serialize  in.nextString());  [CE]  unclosed  string  literal  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ", "Serialize  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ", "Serialize  in.nextString());	  throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value   ",    in.nextString());    	non-compiled	[CE]  unclosed  string  literal	62	None	replace
76	[BUG]  [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.getValue());  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.getValue());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.getValue());	  throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value   ",    in.nextString());    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
77	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value.n ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "This  date  should  be  a  string  value.n ");	  throw    new    JsonParseException(   "This    date    should    be    a    string    value.   ");    	compilable	  [FE]  JsonParseException  	87	2	replace
78	[BUG]  [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value.n ");  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value.n ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "This  date  should  be  a  string  value.n ");	  throw    new    JsonParseException(   "This    date    should    be    a    string    value.   ");    	compilable	  [FE]  JsonParseException  	87	2	replace
79	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value.  Please  check  that  the  date  is  null. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "This  date  should  be  a  string  value.  Please  check  that  the  date  is  null. ");	  throw    new    JsonParseException(   "This    date    should    be    a    string    value.   ");    	compilable	  [FE]  JsonParseException  	87	2	replace
80	[BUG]  [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value.  Please  check  that  the  date  is  null. ");  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value.  Please  check  that  the  date  is  null. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "This  date  should  be  a  string  value.  Please  check  that  the  date  is  null. ");	  throw    new    JsonParseException(   "This    date    should    be    a    string    value.   ");    	compilable	  [FE]  JsonParseException  	87	2	replace
81	[BUG]  [BUGGY]  String  datePattern  =  in.peek();  return  new  Date(datePattern);  [CE]  incompatible  types  [FE]                      IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  String  datePattern  =  in.peek();  return  new  Date(datePattern);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	String  datePattern  =  in.peek();  return  new  Date(datePattern);	          if(in.peek()    ==    JsonToken.STRING)    {    String    datePattern    =    in.getValue();    return    new    Date(datePattern);    }    	non-compiled	[CE]  incompatible  types	31	None	replace
82	[BUG]  [BUGGY]  String  datePattern  =  in.getValue();  return  new  Date(datePattern);  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  String  datePattern  =  in.getValue();  return  new  Date(datePattern);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	String  datePattern  =  in.getValue();  return  new  Date(datePattern);	          if(in.peek()    ==    JsonToken.STRING)    {    String    datePattern    =    in.getValue();    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
83	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.STRING)  {  String  datePattern  =  in.getValue();  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()!=  JsonToken.STRING)  {  String  datePattern  =  in.getValue();  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()!=  JsonToken.STRING)  {  String  datePattern  =  in.getValue();  return  new  Date(datePattern);  }	          if(in.peek()    ==    JsonToken.STRING)    {    String    datePattern    =    in.getValue();    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
84	[BUG]  [BUGGY]  in.peek()  ==  JsonToken.STRING)  {  String  datePattern  =  in.getValue();  return  new  Date(datePattern);  }  [CE]  not  a  statement  [FE]                            IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  in.peek()  ==  JsonToken.STRING)  {  String  datePattern  =  in.getValue();  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	in.peek()  ==  JsonToken.STRING)  {  String  datePattern  =  in.getValue();  return  new  Date(datePattern);  }	          if(in.peek()    ==    JsonToken.STRING)    {    String    datePattern    =    in.getValue();    return    new    Date(datePattern);    }    	non-compiled	[CE]  not  a  statement	31	None	replace
85	[BUG]  [BUGGY]  String  datePattern  =  in.peek();  [CE]  incompatible  types  [FE]                              IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  String  datePattern  =  in.peek();  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	String  datePattern  =  in.peek();	          if(in.peek()    ==    JsonToken.STRING)    {    String    datePattern    =    in.getValue();    return    new    Date(datePattern);    }    	non-compiled	[CE]  incompatible  types	31	None	replace
86	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.getValue();  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                                IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.getValue();  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()  ==  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.getValue();  return  new  Date(datePattern);  }	          if(in.peek()    ==    JsonToken.STRING)    {    String    datePattern    =    in.getValue();    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	31	None	replace
87	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()!=  JsonToken.STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()!=  JsonToken.STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }	  if(in.peek()    ==    JsonToken.STRING)    {    String    datePattern    =    in.readString();    return    new    Date(datePattern);    }    else    {    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
88	[BUG]  [BUGGY]  in.peek()  ==  JsonToken.STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  [CE]  not  a  statement  [FE]                IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  in.peek()  ==  JsonToken.STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	in.peek()  ==  JsonToken.STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);	  if(in.peek()    ==    JsonToken.STRING)    {    String    datePattern    =    in.readString();    return    new    Date(datePattern);    }    else    {    return    new    Date(datePattern);    }    	non-compiled	[CE]  not  a  statement	110	None	replace
89	[BUG]  [BUGGY]  in.peek()  ==  JsonToken.STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [CE]  not  a  statement  [FE]                  IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  in.peek()  ==  JsonToken.STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	in.peek()  ==  JsonToken.STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }	  if(in.peek()    ==    JsonToken.STRING)    {    String    datePattern    =    in.readString();    return    new    Date(datePattern);    }    else    {    return    new    Date(datePattern);    }    	non-compiled	[CE]  not  a  statement	110	None	replace
90	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()!=  JsonToken.STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()!=  JsonToken.STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }	  if(in.peek()    ==    JsonToken.STRING)    {    String    datePattern    =    in.readString();    return    new    Date(datePattern);    }    else    {    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
91	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in,  in.getKey()));  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in,  in.getKey()));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in,  in.getKey()));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.getKey()));    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
92	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value. "  +  Integer.toHexString(in.getKey()));  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value. "  +  Integer.toHexString(in.getKey()));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value. "  +  Integer.toHexString(in.getKey()));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.getKey()));    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
93	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getKey()),  JsonToken.STRING);  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getKey()),  JsonToken.STRING);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getKey()),  JsonToken.STRING);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.getKey()));    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
94	[BUG]  [BUGGY]  Throw  new  JsonParseException( "The  Date  should  be  a  string  value ");  [CE]  not  a  statement  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  Throw  new  JsonParseException( "The  Date  should  be  a  string  value ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	Throw  new  JsonParseException( "The  Date  should  be  a  string  value ");	  throw    new    JsonParseException(       "The    Date    should    be    a    string    value       ");    Throw    new    JsonParseException(   "The    Date    should    be    a    string    value       ");    	non-compiled	[CE]  not  a  statement	18	None	replace
95	[BUG]  [BUGGY]  Throw  new  JsonParseException( "The  Date  should  be  a  string  value. ");  [CE]  not  a  statement  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  Throw  new  JsonParseException( "The  Date  should  be  a  string  value. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	Throw  new  JsonParseException( "The  Date  should  be  a  string  value. ");	  throw    new    JsonParseException(       "The    Date    should    be    a    string    value       ");    Throw    new    JsonParseException(   "The    Date    should    be    a    string    value       ");    	non-compiled	[CE]  not  a  statement	18	None	replace
96	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  Date  should  be  a  string  value. ");  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "The  Date  should  be  a  string  value. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  Date  should  be  a  string  value. ");	  throw    new    JsonParseException(       "The    Date    should    be    a    string    value       ");    Throw    new    JsonParseException(   "The    Date    should    be    a    string    value       ");    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
97	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value. ",  in.nextString());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,String)  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value. ",  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  Date  should  be  a  string  value. ",  in.nextString());	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value   ",    in.nextString());    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,String)	144	None	replace
98	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value "  + ",  in.nextString());  [CE]  unclosed  string  literal  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value "  + ",  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  Date  should  be  a  string  value "  + ",  in.nextString());	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value   ",    in.nextString());    	non-compiled	[CE]  unclosed  string  literal	144	None	replace
99	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value   ",  in.getValue());  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value   ",  in.getValue());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  Date  should  be  a  string  value   ",  in.getValue());	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value   ",    in.nextString());    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
100	[BUG]  [BUGGY]  JsonTokenException.throw  new  JsonTokenException( "The  date  should  be  a  string  value, ");  [CE]  <identifier>  expected  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonTokenException.throw  new  JsonTokenException( "The  date  should  be  a  string  value, ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonTokenException.throw  new  JsonTokenException( "The  date  should  be  a  string  value, ");	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value,   ");    	non-compiled	[CE]  <identifier>  expected	161	None	replace
101	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value, ",  in);  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value, ",  in);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  date  should  be  a  string  value, ",  in);	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value,   ");    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
102	[BUG]  [BUGGY]  Throwables.throw  new  JsonTokenException( "The  date  should  be  a  string  value, ");  [CE]  <identifier>  expected  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  Throwables.throw  new  JsonTokenException( "The  date  should  be  a  string  value, ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	Throwables.throw  new  JsonTokenException( "The  date  should  be  a  string  value, ");	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value,   ");    	non-compiled	[CE]  <identifier>  expected	161	None	replace
103	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value, "  +  in.getClass());  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value, "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  date  should  be  a  string  value, "  +  in.getClass());	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value,   ");    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
104	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value, "  +  in.nextString());  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value, "  +  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  date  should  be  a  string  value, "  +  in.nextString());	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value,   ");    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
105	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Date  should  be  a  string  value. ");  [CE]  cannot  find  symbol  [FE]        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "Date  should  be  a  string  value. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Date  should  be  a  string  value. ");	  throw    new    JsonParseException(       "Date    should    be    a    string    value       ");    throw    new    JsonParseException(   "Date    should    be    a    string    value       ");    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
106	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Try  again! ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "The  date  should  be  a  string  value.  Try  again! ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Try    again.   ");    	compilable	  [FE]  JsonParseException  	168	2	replace
107	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Try  again! ");  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Try  again! ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value.  Try  again! ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Try    again.   ");    	compilable	  [FE]  JsonParseException  	168	2	replace
108	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Try  again: "  +  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "The  date  should  be  a  string  value.  Try  again: "  +  in.toString());	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Try    again.   ");    	compilable	  [FE]  JsonParseException  	168	2	replace
109	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Try  again: "  +  in.toString());  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Try  again: "  +  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value.  Try  again: "  +  in.toString());	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Try    again.   ");    	compilable	  [FE]  JsonParseException  	168	2	replace
110	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]        JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Try  again: "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "The  date  should  be  a  string  value.  Try  again: "  +  in.getClass());	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Try    again.   ");    	compilable	  [FE]  JsonParseException  	168	2	replace
111	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Try  again: "  +  in.getClass());  [FE]  JsonParseException  [FE]        JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Try  again: "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value.  Try  again: "  +  in.getClass());	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Try    again.   ");    	compilable	  [FE]  JsonParseException  	168	2	replace
112	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]          JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Try  again? ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "The  date  should  be  a  string  value.  Try  again? ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Try    again.   ");    	compilable	  [FE]  JsonParseException  	168	2	replace
113	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Try  again? ");  [FE]  JsonParseException  [FE]          JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Try  again? ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value.  Try  again? ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Try    again.   ");    	compilable	  [FE]  JsonParseException  	168	2	replace
114	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]            JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value,  try  again. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "The  date  should  be  a  string  value,  try  again. ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Try    again.   ");    	compilable	  [FE]  JsonParseException  	168	2	replace
115	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value,  try  again. ");  [FE]  JsonParseException  [FE]            JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value,  try  again. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value,  try  again. ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Try    again.   ");    	compilable	  [FE]  JsonParseException  	168	2	replace
116	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value ",  in,  in);  [CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader,JsonReader)  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value ",  in,  in);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value ",  in,  in);	  return    new    JsonParseException(   "The    date    should    be    a    string    value   ",    in);    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader,JsonReader)	12	None	replace
117	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value "  +  String.valueOf(in));  [CE]  incompatible  types  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value "  +  String.valueOf(in));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value "  +  String.valueOf(in));	  return    new    JsonParseException(   "The    date    should    be    a    string    value   ",    in);    	non-compiled	[CE]  incompatible  types	12	None	replace
118	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value. ",  in);  [CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader)  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value. ",  in);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value. ",  in);	  return    new    JsonParseException(   "The    date    should    be    a    string    value   ",    in);    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader)	12	None	replace
119	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value ",  in,  localFormat);  [CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader,DateFormat)  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value ",  in,  localFormat);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value ",  in,  localFormat);	  return    new    JsonParseException(   "The    date    should    be    a    string    value   ",    in);    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader,DateFormat)	12	None	replace
120	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value "  +  String.valueOf(in),  in);  [CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader)  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value "  +  String.valueOf(in),  in);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value "  +  String.valueOf(in),  in);	  return    new    JsonParseException(   "The    date    should    be    a    string    value   ",    in);    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader)	12	None	replace
121	[BUG]  [BUGGY]  JsonToken  t  =  this.in.readFrom(JsonToken.STRING);  [CE]  cannot  find  symbol  in  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  t  =  this.in.readFrom(JsonToken.STRING);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  t  =  this.in.readFrom(JsonToken.STRING);	  JsonToken    t    =    in.readFrom(JsonToken.STRING);    	non-compiled	[CE]  cannot  find  symbol  in	125	None	replace
122	[BUG]  [BUGGY]  JsonToken  t  =  in.readFrom(JsonToken.START_OBJECT);  [CE]  cannot  find  symbol  START_OBJECT  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  t  =  in.readFrom(JsonToken.START_OBJECT);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  t  =  in.readFrom(JsonToken.START_OBJECT);	  JsonToken    t    =    in.readFrom(JsonToken.STRING);    	non-compiled	[CE]  cannot  find  symbol  START_OBJECT	125	None	replace
123	[BUG]  [BUGGY]  JsonToken  t  =  in.readFrom(JsonToken.STANDARD);  [CE]  cannot  find  symbol  STANDARD  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  t  =  in.readFrom(JsonToken.STANDARD);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  t  =  in.readFrom(JsonToken.STANDARD);	  JsonToken    t    =    in.readFrom(JsonToken.STRING);    	non-compiled	[CE]  cannot  find  symbol  STANDARD	125	None	replace
124	[BUG]  [BUGGY]  JsonToken  t  =  in.readFrom(JsonToken.START_TYPE);  [CE]  cannot  find  symbol  START_TYPE  [FE]                              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  t  =  in.readFrom(JsonToken.START_TYPE);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  t  =  in.readFrom(JsonToken.START_TYPE);	  JsonToken    t    =    in.readFrom(JsonToken.STRING);    	non-compiled	[CE]  cannot  find  symbol  START_TYPE	125	None	replace
125	[BUG]  [BUGGY]  JsonToken  t  =  in.readFrom(JsonToken.TRUE);  [CE]  cannot  find  symbol  TRUE  [FE]                                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  t  =  in.readFrom(JsonToken.TRUE);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  t  =  in.readFrom(JsonToken.TRUE);	  JsonToken    t    =    in.readFrom(JsonToken.STRING);    	non-compiled	[CE]  cannot  find  symbol  TRUE	125	None	replace
126	[BUG]  [BUGGY]  JsonToken  t  =  in.readFrom(JsonToken.TEST);  [CE]  cannot  find  symbol  TEST  [FE]                                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  t  =  in.readFrom(JsonToken.TEST);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  t  =  in.readFrom(JsonToken.TEST);	  JsonToken    t    =    in.readFrom(JsonToken.STRING);    	non-compiled	[CE]  cannot  find  symbol  TEST	125	None	replace
127	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value. ",  in.nextString());  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value. ",  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  date  should  be  a  string  value. ",  in.nextString());	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value   ",    in.nextString());    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
128	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value "  +  in.nextString());  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value "  +  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  date  should  be  a  string  value "  +  in.nextString());	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value   ",    in.nextString());    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
129	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value ",  in.getValue());  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value ",  in.getValue());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  date  should  be  a  string  value ",  in.getValue());	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value   ",    in.nextString());    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
130	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value ", "Serialize  in.nextString());  [CE]  unclosed  string  literal  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value ", "Serialize  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  date  should  be  a  string  value ", "Serialize  in.nextString());	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value   ",    in.nextString());    	non-compiled	[CE]  unclosed  string  literal	95	None	replace
131	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.getValue());  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.getValue());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.getValue());	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value:   "    +    in.nextString());    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
132	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.getKey());  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.getKey());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.getKey());	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value:   "    +    in.nextString());    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
133	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.getMessage());  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.getMessage());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.getMessage());	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value:   "    +    in.nextString());    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
134	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.getPattern());  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.getPattern());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.getPattern());	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value:   "    +    in.nextString());    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
135	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]          if(in.peek()  ==  JsonToken.STRING)  {  throw  new  IllegalStateException(   "   ");  }  if(in.peek()  ==  JsonToken.STRING)  {  throw  new  IllegalStateException(   "   ");  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	                if(in.peek()    ==    JsonToken.STRING)    {    throw    new    IllegalStateException(   "   ");    }    if(in.peek()  ==  JsonToken.STRING)  {  throw  new  IllegalStateException(   "   ");  }	  	compilable	  [FE]  JsonParseException  	20	2	add
136	[BUG]  [BUGGY]          if(in.peek()  ==  JsonToken.STRING)  {  throw  new  IllegalStateException(   "   ");  }  if(in.peek()  ==  JsonToken.STRING)  {  throw  new  IllegalStateException(   "   ");  }  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]          if(in.peek()  ==  JsonToken.STRING)  {  throw  new  IllegalStateException(   "   ");  }  if(in.peek()  ==  JsonToken.STRING)  {  throw  new  IllegalStateException(   "   ");  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	                if(in.peek()    ==    JsonToken.STRING)    {    throw    new    IllegalStateException(   "   ");    }    if(in.peek()  ==  JsonToken.STRING)  {  throw  new  IllegalStateException(   "   ");  }	  	compilable	  [FE]  JsonParseException  	20	2	add
137	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]          if(in.peek()  ==  JsonToken.STRING)  {  throw  new  IllegalStateException(   "   ");  }  if(in.peek()!=  JsonToken.STRING)  {  throw  new  IllegalStateException(   "   ");  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	                if(in.peek()    ==    JsonToken.STRING)    {    throw    new    IllegalStateException(   "   ");    }    if(in.peek()!=  JsonToken.STRING)  {  throw  new  IllegalStateException(   "   ");  }	  	compilable	  [FE]  IllegalStateException  	20	1	add
138	[BUG]  [BUGGY]          if(in.peek()  ==  JsonToken.STRING)  {  throw  new  IllegalStateException(   "   ");  }  if(in.peek()!=  JsonToken.STRING)  {  throw  new  IllegalStateException(   "   ");  }  [FE]  IllegalStateException  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]          if(in.peek()  ==  JsonToken.STRING)  {  throw  new  IllegalStateException(   "   ");  }  if(in.peek()!=  JsonToken.STRING)  {  throw  new  IllegalStateException(   "   ");  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	                if(in.peek()    ==    JsonToken.STRING)    {    throw    new    IllegalStateException(   "   ");    }    if(in.peek()!=  JsonToken.STRING)  {  throw  new  IllegalStateException(   "   ");  }	  	compilable	  [FE]  IllegalStateException  	20	1	add
139	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]        JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]          if(in.peek()  ==  JsonToken.STRING)  {  throw  new  IllegalStateException(   "   ");  }  if(in.peek()  ==  JsonToken.STRING)  {  throw  new  IllegalStateException( ".   ");  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	                if(in.peek()    ==    JsonToken.STRING)    {    throw    new    IllegalStateException(   "   ");    }    if(in.peek()  ==  JsonToken.STRING)  {  throw  new  IllegalStateException( ".   ");  }	  	compilable	  [FE]  JsonParseException  	20	2	add
140	[BUG]  [BUGGY]          if(in.peek()  ==  JsonToken.STRING)  {  throw  new  IllegalStateException(   "   ");  }  if(in.peek()  ==  JsonToken.STRING)  {  throw  new  IllegalStateException( ".   ");  }  [FE]  JsonParseException  [FE]        JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]          if(in.peek()  ==  JsonToken.STRING)  {  throw  new  IllegalStateException(   "   ");  }  if(in.peek()  ==  JsonToken.STRING)  {  throw  new  IllegalStateException( ".   ");  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	                if(in.peek()    ==    JsonToken.STRING)    {    throw    new    IllegalStateException(   "   ");    }    if(in.peek()  ==  JsonToken.STRING)  {  throw  new  IllegalStateException( ".   ");  }	  	compilable	  [FE]  JsonParseException  	20	2	add
141	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value.n ");  [CE]  incompatible  types  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value.n ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value.n ");	  return    new    JsonParseException(   "The    date    should    be    a    string    value.   ");    	non-compiled	[CE]  incompatible  types	11	None	replace
142	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value.   "  +  Integer.toHexString(in.nextString()));  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value.   "  +  Integer.toHexString(in.nextString()));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value.   "  +  Integer.toHexString(in.nextString()));	  return    new    JsonParseException(   "The    date    should    be    a    string    value.   ");    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	11	None	replace
143	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value.   "  +  Integer.toHexString(in.peek()));  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value.   "  +  Integer.toHexString(in.peek()));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value.   "  +  Integer.toHexString(in.peek()));	  return    new    JsonParseException(   "The    date    should    be    a    string    value.   ");    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	11	None	replace
144	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value.   "  +  in.toString());  [CE]  incompatible  types  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value.   "  +  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value.   "  +  in.toString());	  return    new    JsonParseException(   "The    date    should    be    a    string    value.   ");    	non-compiled	[CE]  incompatible  types	11	None	replace
145	[BUG]  [BUGGY]  throw  new  JsonParseException(   "The  Date  should  be  a  string  value.   ");  throw  new  JsonParseException( "The  Date  should  be  a  string  value.   ");  [CE]  unreachable  statement  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "The  Date  should  be  a  string  value.   ");  throw  new  JsonParseException( "The  Date  should  be  a  string  value.   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "The    Date    should    be    a    string    value.   ");    throw  new  JsonParseException( "The  Date  should  be  a  string  value.   ");	  	non-compiled	[CE]  unreachable  statement	65	None	add
146	[BUG]  [BUGGY]  throw  new  JsonParseException(   "The  Date  should  be  a  string  value.   ");  Throw  new  JsonParseException( "The  Date  should  be  a  string  value.   ");  [CE]  not  a  statement  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "The  Date  should  be  a  string  value.   ");  Throw  new  JsonParseException( "The  Date  should  be  a  string  value.   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "The    Date    should    be    a    string    value.   ");    Throw  new  JsonParseException( "The  Date  should  be  a  string  value.   ");	  	non-compiled	[CE]  not  a  statement	65	None	add
147	[BUG]  [BUGGY]  throw  new  JsonParseException(   "The  Date  should  be  a  string  value.   ");  JsonParseException(   "The  Date  should  be  a  string  value.   ");  [CE]  cannot  find  symbol  [FE]        JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "The  Date  should  be  a  string  value.   ");  JsonParseException(   "The  Date  should  be  a  string  value.   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "The    Date    should    be    a    string    value.   ");    JsonParseException(   "The  Date  should  be  a  string  value.   ");	  	non-compiled	[CE]  cannot  find  symbol	65	None	add
148	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.   "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_STRING);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.   "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_STRING);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value.   "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_STRING);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.   "    +    Integer.toHexString(in.nextString()));    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	5	None	replace
149	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.n "  +  Integer.toHexString(in.nextString()));  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.n "  +  Integer.toHexString(in.nextString()));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value.n "  +  Integer.toHexString(in.nextString()));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.   "    +    Integer.toHexString(in.nextString()));    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	5	None	replace
150	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.   "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NULL);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.   "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NULL);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value.   "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NULL);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.   "    +    Integer.toHexString(in.nextString()));    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	5	None	replace
151	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.   "  +  Integer.toHexString(in.nextString()),  JSON_TYPE);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.   "  +  Integer.toHexString(in.nextString()),  JSON_TYPE);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value.   "  +  Integer.toHexString(in.nextString()),  JSON_TYPE);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.   "    +    Integer.toHexString(in.nextString()));    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	5	None	replace
152	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.   "  +  Integer.toHexString(in.nextString()),  JSONToken.VALUE_STRING);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.   "  +  Integer.toHexString(in.nextString()),  JSONToken.VALUE_STRING);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value.   "  +  Integer.toHexString(in.nextString()),  JSONToken.VALUE_STRING);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.   "    +    Integer.toHexString(in.nextString()));    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	5	None	replace
153	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException(   "Date  should  be  a  string  value   ");  new  JsonParseException( "Date  should  be  a  string  value   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	new    JsonParseException(   "Date    should    be    a    string    value   ");    new  JsonParseException( "Date  should  be  a  string  value   ");	  	compilable	  [FE]  JsonParseException  	99	2	add
154	[BUG]  [BUGGY]  new  JsonParseException(   "Date  should  be  a  string  value   ");  new  JsonParseException( "Date  should  be  a  string  value   ");  [FE]  JsonParseException  [FE]    IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException(   "Date  should  be  a  string  value   ");  new  JsonParseException( "Date  should  be  a  string  value   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new    JsonParseException(   "Date    should    be    a    string    value   ");    new  JsonParseException( "Date  should  be  a  string  value   ");	  	compilable	  [FE]  JsonParseException  	99	2	add
155	[BUG]  [BUGGY]  new  JsonParseException(   "Date  should  be  a  string  value   ");  new  JsonParseException(, "Date  should  be  a  string  value   ");  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException(   "Date  should  be  a  string  value   ");  new  JsonParseException(, "Date  should  be  a  string  value   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new    JsonParseException(   "Date    should    be    a    string    value   ");    new  JsonParseException(, "Date  should  be  a  string  value   ");	  	non-compiled	[CE]  illegal  start  of  expression	99	None	add
156	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]        IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException(   "Date  should  be  a  string  value   ");  new  JsonParseException( ",Date  should  be  a  string  value   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	new    JsonParseException(   "Date    should    be    a    string    value   ");    new  JsonParseException( ",Date  should  be  a  string  value   ");	  	compilable	  [FE]  JsonParseException  	99	2	add
157	[BUG]  [BUGGY]  new  JsonParseException(   "Date  should  be  a  string  value   ");  new  JsonParseException( ",Date  should  be  a  string  value   ");  [FE]  JsonParseException  [FE]        IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException(   "Date  should  be  a  string  value   ");  new  JsonParseException( ",Date  should  be  a  string  value   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new    JsonParseException(   "Date    should    be    a    string    value   ");    new  JsonParseException( ",Date  should  be  a  string  value   ");	  	compilable	  [FE]  JsonParseException  	99	2	add
158	[BUG]  [BUGGY]  new  JsonParseException(   "Date  should  be  a  string  value   ");  new  JsonParseException( "Date  should  be  a  string  value ",);  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException(   "Date  should  be  a  string  value   ");  new  JsonParseException( "Date  should  be  a  string  value ",);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new    JsonParseException(   "Date    should    be    a    string    value   ");    new  JsonParseException( "Date  should  be  a  string  value ",);	  	non-compiled	[CE]  illegal  start  of  expression	99	None	add
159	[BUG]  [BUGGY]  new  JsonParseException(   "Date  should  be  a  string  value   ");  new  JsonParseException(... "Date  should  be  a  string  value   ");  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException(   "Date  should  be  a  string  value   ");  new  JsonParseException(... "Date  should  be  a  string  value   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new    JsonParseException(   "Date    should    be    a    string    value   ");    new  JsonParseException(... "Date  should  be  a  string  value   ");	  	non-compiled	[CE]  illegal  start  of  expression	99	None	add
160	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]              IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException(   "Date  should  be  a  string  value   ");  new  JsonParseException( "Date  should  be  an  string  value   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	new    JsonParseException(   "Date    should    be    a    string    value   ");    new  JsonParseException( "Date  should  be  an  string  value   ");	  	compilable	  [FE]  JsonParseException  	99	2	add
161	[BUG]  [BUGGY]  new  JsonParseException(   "Date  should  be  a  string  value   ");  new  JsonParseException( "Date  should  be  an  string  value   ");  [FE]  JsonParseException  [FE]              IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException(   "Date  should  be  a  string  value   ");  new  JsonParseException( "Date  should  be  an  string  value   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new    JsonParseException(   "Date    should    be    a    string    value   ");    new  JsonParseException( "Date  should  be  an  string  value   ");	  	compilable	  [FE]  JsonParseException  	99	2	add
162	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalArgumentException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  IllegalStateException( " ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  IllegalStateException( " ");	  throw    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  IllegalStateException  	76	1	replace
163	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ");  [FE]  IllegalStateException  [FE]    IllegalArgumentException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  IllegalStateException( " ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  IllegalStateException( " ");	  throw    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  IllegalStateException  	76	1	replace
164	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(in.getClass()));  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(boolean)  [FE]      IllegalArgumentException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  IllegalArgumentException( " ".equals(in.getClass()));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  IllegalArgumentException( " ".equals(in.getClass()));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(boolean)	76	None	replace
165	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	Throwables.throw  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	76	None	replace
166	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".getMessage());  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  IllegalArgumentException( " ".getMessage());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  IllegalArgumentException( " ".getMessage());	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
167	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(in.nextString()));  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(boolean)  [FE]            IllegalArgumentException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  IllegalArgumentException( " ".equals(in.nextString()));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  IllegalArgumentException( " ".equals(in.nextString()));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(boolean)	76	None	replace
168	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(in.getValue()));  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  IllegalArgumentException( " ".equals(in.getValue()));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  IllegalArgumentException( " ".equals(in.getValue()));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
169	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  in.nextString()  +  1);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  in.nextString()  +  1);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  in.nextString()  +  1);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString())+    1);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	120	None	replace
170	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  2);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  2);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  2);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString())+    1);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	120	None	replace
171	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  in.nextString())+  1);  [CE]  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  in.nextString())+  1);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  in.nextString())+  1);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString())+    1);    	non-compiled	[CE]  	120	None	replace
172	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  in.getMillis()  +  1);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  in.getMillis()  +  1);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  in.getMillis()  +  1);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString())+    1);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	120	None	replace
173	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  1,  in.nextString());  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  1,  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  1,  in.nextString());	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString())+    1);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	120	None	replace
174	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  INVALID_DATE,  in.nextString())+  1);  [CE]  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  INVALID_DATE,  in.nextString())+  1);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  INVALID_DATE,  in.nextString())+  1);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString())+    1);    	non-compiled	[CE]  	120	None	replace
175	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException(   "This  date  should  be  a  string  value   ");  new  JsonParseException( "This  date  should  be  a  string  value   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	new    JsonParseException(   "This    date    should    be    a    string    value   ");    new  JsonParseException( "This  date  should  be  a  string  value   ");	  	compilable	  [FE]  JsonParseException  	117	2	add
176	[BUG]  [BUGGY]  new  JsonParseException(   "This  date  should  be  a  string  value   ");  new  JsonParseException( "This  date  should  be  a  string  value   ");  [FE]  JsonParseException  [FE]    IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException(   "This  date  should  be  a  string  value   ");  new  JsonParseException( "This  date  should  be  a  string  value   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new    JsonParseException(   "This    date    should    be    a    string    value   ");    new  JsonParseException( "This  date  should  be  a  string  value   ");	  	compilable	  [FE]  JsonParseException  	117	2	add
177	[BUG]  [BUGGY]  new  JsonParseException(   "This  date  should  be  a  string  value   ");  new  JsonParseException(, "This  date  should  be  a  string  value   ");  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException(   "This  date  should  be  a  string  value   ");  new  JsonParseException(, "This  date  should  be  a  string  value   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new    JsonParseException(   "This    date    should    be    a    string    value   ");    new  JsonParseException(, "This  date  should  be  a  string  value   ");	  	non-compiled	[CE]  illegal  start  of  expression	117	None	add
178	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]        IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException(   "This  date  should  be  a  string  value   ");  new  JsonParseException( ",This  date  should  be  a  string  value   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	new    JsonParseException(   "This    date    should    be    a    string    value   ");    new  JsonParseException( ",This  date  should  be  a  string  value   ");	  	compilable	  [FE]  JsonParseException  	117	2	add
179	[BUG]  [BUGGY]  new  JsonParseException(   "This  date  should  be  a  string  value   ");  new  JsonParseException( ",This  date  should  be  a  string  value   ");  [FE]  JsonParseException  [FE]        IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException(   "This  date  should  be  a  string  value   ");  new  JsonParseException( ",This  date  should  be  a  string  value   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new    JsonParseException(   "This    date    should    be    a    string    value   ");    new  JsonParseException( ",This  date  should  be  a  string  value   ");	  	compilable	  [FE]  JsonParseException  	117	2	add
180	[BUG]  [BUGGY]  new  JsonParseException(   "This  date  should  be  a  string  value   ");  new  JsonParseException( "This  date  should  be  a  string  value ",);  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException(   "This  date  should  be  a  string  value   ");  new  JsonParseException( "This  date  should  be  a  string  value ",);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new    JsonParseException(   "This    date    should    be    a    string    value   ");    new  JsonParseException( "This  date  should  be  a  string  value ",);	  	non-compiled	[CE]  illegal  start  of  expression	117	None	add
181	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]            IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException(   "This  date  should  be  a  string  value   ");  new  JsonParseException( "This  date  should  be  an  string  value   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	new    JsonParseException(   "This    date    should    be    a    string    value   ");    new  JsonParseException( "This  date  should  be  an  string  value   ");	  	compilable	  [FE]  JsonParseException  	117	2	add
182	[BUG]  [BUGGY]  new  JsonParseException(   "This  date  should  be  a  string  value   ");  new  JsonParseException( "This  date  should  be  an  string  value   ");  [FE]  JsonParseException  [FE]            IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException(   "This  date  should  be  a  string  value   ");  new  JsonParseException( "This  date  should  be  an  string  value   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new    JsonParseException(   "This    date    should    be    a    string    value   ");    new  JsonParseException( "This  date  should  be  an  string  value   ");	  	compilable	  [FE]  JsonParseException  	117	2	add
183	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SHORT_NAME));  [CE]  cannot  find  symbol  SHORT_NAME  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SHORT_NAME));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SHORT_NAME));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString(),    JSON_NAME));    	non-compiled	[CE]  cannot  find  symbol  SHORT_NAME	121	None	replace
184	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  LAST_VALID_NAME));  [CE]  cannot  find  symbol  LAST_VALID_NAME  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  LAST_VALID_NAME));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  LAST_VALID_NAME));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString(),    JSON_NAME));    	non-compiled	[CE]  cannot  find  symbol  LAST_VALID_NAME	121	None	replace
185	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  LONG_NAME));  [CE]  cannot  find  symbol  LONG_NAME  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  LONG_NAME));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  LONG_NAME));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString(),    JSON_NAME));    	non-compiled	[CE]  cannot  find  symbol  LONG_NAME	121	None	replace
186	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  DATE_NAME));  [CE]  cannot  find  symbol  DATE_NAME  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  DATE_NAME));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  DATE_NAME));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString(),    JSON_NAME));    	non-compiled	[CE]  cannot  find  symbol  DATE_NAME	121	None	replace
187	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JSON_TYPE,  deserialize);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JSON_TYPE,  deserialize);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JSON_TYPE,  deserialize);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JSON_TYPE);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	3	None	replace
188	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JSON_TYPE));  [CE]  cannot  find  symbol  JSON_TYPE  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JSON_TYPE));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JSON_TYPE));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JSON_TYPE);    	non-compiled	[CE]  cannot  find  symbol  JSON_TYPE	3	None	replace
189	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value: "  +  Integer.toHexString(in.nextString()),  JSON_TYPE);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value: "  +  Integer.toHexString(in.nextString()),  JSON_TYPE);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value: "  +  Integer.toHexString(in.nextString()),  JSON_TYPE);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JSON_TYPE);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	3	None	replace
190	[BUG]  [BUGGY]  throw  new  JsonParseException(in, "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JSON_TYPE);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(in, "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JSON_TYPE);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException(in, "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JSON_TYPE);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JSON_TYPE);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	3	None	replace
191	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JSON_TYPE,  INVALID_NUMBER_ERROR);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JSON_TYPE,  INVALID_NUMBER_ERROR);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JSON_TYPE,  INVALID_NUMBER_ERROR);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JSON_TYPE);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	3	None	replace
192	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JSON_TYPE,  DEFAULT_NAME);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JSON_TYPE,  DEFAULT_NAME);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JSON_TYPE,  DEFAULT_NAME);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JSON_TYPE);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	3	None	replace
193	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value ",  in.nextString(),  JSON_TYPE);  [CE]  cannot  find  symbol  JSON_TYPE  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value ",  in.nextString(),  JSON_TYPE);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value ",  in.nextString(),  JSON_TYPE);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JSON_TYPE);    	non-compiled	[CE]  cannot  find  symbol  JSON_TYPE	3	None	replace
194	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value.n ");  [CE]  cannot  find  symbol  [FE]        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value.n ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  date  should  be  a  string  value.n ");	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value.   ");    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
195	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value.. ");  [CE]  cannot  find  symbol  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value.. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  date  should  be  a  string  value.. ");	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value.   ");    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
196	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value.  Format: "  +  in.getClass());  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value.  Format: "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  date  should  be  a  string  value.  Format: "  +  in.getClass());	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value.   ");    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
197	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value.  Format: "  +  in.toString());  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value.  Format: "  +  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  date  should  be  a  string  value.  Format: "  +  in.toString());	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value.   ");    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
198	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value.  Format: "  +  in.getPattern());  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value.  Format: "  +  in.getPattern());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  date  should  be  a  string  value.  Format: "  +  in.getPattern());	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value.   ");    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
199	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Can  not  read  string: "  +  in.toString());  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "Can  not  read  string: "  +  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Can  not  read  string: "  +  in.toString());	  throw    new    JsonTokenException(   "Can    not    read    string:   ");    	non-compiled	[CE]  cannot  find  symbol	149	None	replace
200	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Can  not  read  string: "  +  in.getMessage());  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "Can  not  read  string: "  +  in.getMessage());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Can  not  read  string: "  +  in.getMessage());	  throw    new    JsonTokenException(   "Can    not    read    string:   ");    	non-compiled	[CE]  cannot  find  symbol	149	None	replace
201	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Can  not  read  string: "  +  in.readString());  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "Can  not  read  string: "  +  in.readString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Can  not  read  string: "  +  in.readString());	  throw    new    JsonTokenException(   "Can    not    read    string:   ");    	non-compiled	[CE]  cannot  find  symbol	149	None	replace
202	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Can  not  read  string: "  +  in.getValue());  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "Can  not  read  string: "  +  in.getValue());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Can  not  read  string: "  +  in.getValue());	  throw    new    JsonTokenException(   "Can    not    read    string:   ");    	non-compiled	[CE]  cannot  find  symbol	149	None	replace
203	[BUG]  [BUGGY]  return  new  JsonParseException( "The  Date  should  be  a  string  value. ");  [CE]  incompatible  types  [FE]        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  Date  should  be  a  string  value. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  Date  should  be  a  string  value. ");	  return    new    JsonParseException(   "The    Date    should    be    a    string    value   ");    	non-compiled	[CE]  incompatible  types	143	None	replace
204	[BUG]  [BUGGY]  return  new  JsonParseException( "The  Date  should  be  a  string  value ",  in);  [CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader)  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  Date  should  be  a  string  value ",  in);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  Date  should  be  a  string  value ",  in);	  return    new    JsonParseException(   "The    Date    should    be    a    string    value   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader)	143	None	replace
205	[BUG]  [BUGGY]  return  new  JsonParseException( "The  Date  should  be  a  string  value ",  in.nextString());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,String)  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  Date  should  be  a  string  value ",  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  Date  should  be  a  string  value ",  in.nextString());	  return    new    JsonParseException(   "The    Date    should    be    a    string    value   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,String)	143	None	replace
206	[BUG]  [BUGGY]  return  new  JsonParseException( "The  Date  should  be  a  string  value, ");  [CE]  incompatible  types  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  Date  should  be  a  string  value, ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  Date  should  be  a  string  value, ");	  return    new    JsonParseException(   "The    Date    should    be    a    string    value   ");    	non-compiled	[CE]  incompatible  types	143	None	replace
207	[BUG]  [BUGGY]  return  new  JsonParseException( "The  Date  should  be  a  string  value ",  in.getClass());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,Class<CAP#1>)  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  Date  should  be  a  string  value ",  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  Date  should  be  a  string  value ",  in.getClass());	  return    new    JsonParseException(   "The    Date    should    be    a    string    value   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,Class<CAP#1>)	143	None	replace
208	[BUG]  [BUGGY]  return  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.getClass());  [CE]  incompatible  types  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.getClass());	  return    new    JsonParseException(   "The    Date    should    be    a    string    value   ");    	non-compiled	[CE]  incompatible  types	143	None	replace
209	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "Date  should  be  a  string  value. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	new  JsonParseException( "Date  should  be  a  string  value. ");	  new    JsonParseException(   "Date    should    be    a    string    value   ");    	compilable	  [FE]  IllegalStateException  	100	1	replace
210	[BUG]  [BUGGY]  new  JsonParseException( "Date  should  be  a  string  value. ");  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "Date  should  be  a  string  value. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonParseException( "Date  should  be  a  string  value. ");	  new    JsonParseException(   "Date    should    be    a    string    value   ");    	compilable	  [FE]  IllegalStateException  	100	1	replace
211	[BUG]  [BUGGY]  new  JsonParseException( "Date  should  be  a  string  value ",  in.nextString());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,String)  [FE]      IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "Date  should  be  a  string  value ",  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonParseException( "Date  should  be  a  string  value ",  in.nextString());	  new    JsonParseException(   "Date    should    be    a    string    value   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,String)	100	None	replace
212	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "Date  should  be  a  string  value: "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	new  JsonParseException( "Date  should  be  a  string  value: "  +  in.getClass());	  new    JsonParseException(   "Date    should    be    a    string    value   ");    	compilable	  [FE]  IllegalStateException  	100	1	replace
213	[BUG]  [BUGGY]  new  JsonParseException( "Date  should  be  a  string  value: "  +  in.getClass());  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "Date  should  be  a  string  value: "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonParseException( "Date  should  be  a  string  value: "  +  in.getClass());	  new    JsonParseException(   "Date    should    be    a    string    value   ");    	compilable	  [FE]  IllegalStateException  	100	1	replace
214	[BUG]  [BUGGY]  new  JsonParseException( "Date  should  be  a  string  value ",  in);  [CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader)  [FE]          IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "Date  should  be  a  string  value ",  in);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonParseException( "Date  should  be  a  string  value ",  in);	  new    JsonParseException(   "Date    should    be    a    string    value   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader)	100	None	replace
215	[BUG]  [BUGGY]  new  JsonParseException( "Date  should  be  a  string  value ",  in.getClass());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,Class<CAP#1>)  [FE]            IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "Date  should  be  a  string  value ",  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonParseException( "Date  should  be  a  string  value ",  in.getClass());	  new    JsonParseException(   "Date    should    be    a    string    value   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,Class<CAP#1>)	100	None	replace
216	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "Date  should  be  a  string  value: "  +  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	new  JsonParseException( "Date  should  be  a  string  value: "  +  in.toString());	  new    JsonParseException(   "Date    should    be    a    string    value   ");    	compilable	  [FE]  IllegalStateException  	100	1	replace
217	[BUG]  [BUGGY]  new  JsonParseException( "Date  should  be  a  string  value: "  +  in.toString());  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "Date  should  be  a  string  value: "  +  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonParseException( "Date  should  be  a  string  value: "  +  in.toString());	  new    JsonParseException(   "Date    should    be    a    string    value   ");    	compilable	  [FE]  IllegalStateException  	100	1	replace
218	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Can  not  read  string: "  +  in.getCurrentName());  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "Can  not  read  string: "  +  in.getCurrentName());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Can  not  read  string: "  +  in.getCurrentName());	  throw    new    JsonTokenException(   "Can    not    read    string:   "    +    in.nextString());    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
219	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in,  localFormat.getValue()));  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in,  localFormat.getValue()));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in,  localFormat.getValue()));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in,    in.getValue()));    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
220	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in,  in.nextString()));  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in,  in.nextString()));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in,  in.nextString()));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in,    in.getValue()));    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	52	None	replace
221	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in,  in.getValue()));  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in,  in.getValue()));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in,  in.getValue()));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in,    in.getValue()));    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	52	None	replace
222	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value. "  +  Integer.toHexString(in,  in.getValue()));  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value. "  +  Integer.toHexString(in,  in.getValue()));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value. "  +  Integer.toHexString(in,  in.getValue()));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in,    in.getValue()));    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
223	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Unexpected  string: "  +  in.getValue());  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "Unexpected  string: "  +  in.getValue());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Unexpected  string: "  +  in.getValue());	  throw    new    JsonTokenException(   "Unexpected    string:   "    +    in.nextString());    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
224	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Unexpected  string: "  +  in.getKey());  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "Unexpected  string: "  +  in.getKey());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Unexpected  string: "  +  in.getKey());	  throw    new    JsonTokenException(   "Unexpected    string:   "    +    in.nextString());    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
225	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Unexpected  string: "  +  in.toString());  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "Unexpected  string: "  +  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Unexpected  string: "  +  in.toString());	  throw    new    JsonTokenException(   "Unexpected    string:   "    +    in.nextString());    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
226	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Unexpected  string: "  +  in.getCurrentName());  [CE]  cannot  find  symbol  [FE]                                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "Unexpected  string: "  +  in.getCurrentName());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Unexpected  string: "  +  in.getCurrentName());	  throw    new    JsonTokenException(   "Unexpected    string:   "    +    in.nextString());    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
227	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Unexpected  string: "  +  in.getMessage());  [CE]  cannot  find  symbol  [FE]                                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "Unexpected  string: "  +  in.getMessage());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Unexpected  string: "  +  in.getMessage());	  throw    new    JsonTokenException(   "Unexpected    string:   "    +    in.nextString());    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
228	[BUG]  [BUGGY]  throw  new  JsonParseException(   "Date  should  be  a  string  value:   "  +  in.getClass());  throw  new  JsonParseException( "Date  should  be  a  string  value:   "  +  in.getClass());  [CE]  unreachable  statement  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "Date  should  be  a  string  value:   "  +  in.getClass());  throw  new  JsonParseException( "Date  should  be  a  string  value:   "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "Date    should    be    a    string    value:   "    +    in.getClass());    throw  new  JsonParseException( "Date  should  be  a  string  value:   "  +  in.getClass());	  	non-compiled	[CE]  unreachable  statement	36	None	add
229	[BUG]  [BUGGY]  throw  new  JsonParseException(   "Date  should  be  a  string  value:   "  +  in.getClass());  JsonParseException(   "Date  should  be  a  string  value:   "  +  in.getClass());  [CE]  cannot  find  symbol  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "Date  should  be  a  string  value:   "  +  in.getClass());  JsonParseException(   "Date  should  be  a  string  value:   "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "Date    should    be    a    string    value:   "    +    in.getClass());    JsonParseException(   "Date  should  be  a  string  value:   "  +  in.getClass());	  	non-compiled	[CE]  cannot  find  symbol	36	None	add
230	[BUG]  [BUGGY]  throw  new  JsonParseException(   "Date  should  be  a  string  value:   "  +  in.getClass());  Throw  new  JsonParseException( "Date  should  be  a  string  value:   "  +  in.getClass());  [CE]  not  a  statement  [FE]        JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "Date  should  be  a  string  value:   "  +  in.getClass());  Throw  new  JsonParseException( "Date  should  be  a  string  value:   "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "Date    should    be    a    string    value:   "    +    in.getClass());    Throw  new  JsonParseException( "Date  should  be  a  string  value:   "  +  in.getClass());	  	non-compiled	[CE]  not  a  statement	36	None	add
231	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "The  date  should  be  a  string  value.. ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.n   ");    	compilable	  [FE]  JsonParseException  	43	2	replace
232	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.. ");  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value.. ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.n   ");    	compilable	  [FE]  JsonParseException  	43	2	replace
233	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value. ".);  [CE]  <identifier>  expected  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value. ".);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value. ".);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.n   ");    	non-compiled	[CE]  <identifier>  expected	43	None	replace
234	[BUG]  [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Try  again.   ");  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Try  again.   ");  [CE]  unreachable  statement  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Try  again.   ");  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Try  again.   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Try    again.   ");    throw  new  JsonParseException( "The  date  should  be  a  string  value.  Try  again.   ");	  	non-compiled	[CE]  unreachable  statement	167	None	add
235	[BUG]  [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Try  again.   ");  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Try  again.. ");  [CE]  unreachable  statement  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Try  again.   ");  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Try  again.. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Try    again.   ");    throw  new  JsonParseException( "The  date  should  be  a  string  value.  Try  again.. ");	  	non-compiled	[CE]  unreachable  statement	167	None	add
236	[BUG]  [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Try  again.   ");  Throw  new  JsonParseException( "The  date  should  be  a  string  value.  Try  again.   ");  [CE]  not  a  statement  [FE]        JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Try  again.   ");  Throw  new  JsonParseException( "The  date  should  be  a  string  value.  Try  again.   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Try    again.   ");    Throw  new  JsonParseException( "The  date  should  be  a  string  value.  Try  again.   ");	  	non-compiled	[CE]  not  a  statement	167	None	add
237	[BUG]  [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Try  again.   ");  JsonParseException(   "The  date  should  be  a  string  value.  Try  again.   ");  [CE]  cannot  find  symbol  [FE]          JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Try  again.   ");  JsonParseException(   "The  date  should  be  a  string  value.  Try  again.   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Try    again.   ");    JsonParseException(   "The  date  should  be  a  string  value.  Try  again.   ");	  	non-compiled	[CE]  cannot  find  symbol	167	None	add
238	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value. ",  in.getMessage());  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value. ",  in.getMessage());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  date  should  be  a  string  value. ",  in.getMessage());	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value   ",    in.getMessage());    	non-compiled	[CE]  cannot  find  symbol	160	None	replace
239	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value.n ");  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value.n ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value.n ");	  JsonParseException    in    =    new    JsonParseException(   "The    date    should    be    a    string    value.   ");    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	131	None	replace
240	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value.   ",  in);  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value.   ",  in);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value.   ",  in);	  JsonParseException    in    =    new    JsonParseException(   "The    date    should    be    a    string    value.   ");    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	131	None	replace
241	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value.  Format: "  +  in.getClass());  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value.  Format: "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value.  Format: "  +  in.getClass());	  JsonParseException    in    =    new    JsonParseException(   "The    date    should    be    a    string    value.   ");    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	131	None	replace
242	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value.  Format: "  +  in.toString());  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value.  Format: "  +  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value.  Format: "  +  in.toString());	  JsonParseException    in    =    new    JsonParseException(   "The    date    should    be    a    string    value.   ");    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	131	None	replace
243	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date  is  null. ");  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date  is  null. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date  is  null. ");	  JsonParseException    in    =    new    JsonParseException(   "The    date    should    be    a    string    value.   ");    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	131	None	replace
244	[BUG]  [BUGGY]  throw  new  JsonParseException(   "Date  should  be  a  string  value.   ");  throw  new  JsonParseException( "Date  should  be  a  string  value.   ");  [CE]  unreachable  statement  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "Date  should  be  a  string  value.   ");  throw  new  JsonParseException( "Date  should  be  a  string  value.   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "Date    should    be    a    string    value.   ");    throw  new  JsonParseException( "Date  should  be  a  string  value.   ");	  	non-compiled	[CE]  unreachable  statement	32	None	add
245	[BUG]  [BUGGY]  throw  new  JsonParseException(   "Date  should  be  a  string  value.   ");  JsonParseException(   "Date  should  be  a  string  value.   ");  [CE]  cannot  find  symbol  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "Date  should  be  a  string  value.   ");  JsonParseException(   "Date  should  be  a  string  value.   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "Date    should    be    a    string    value.   ");    JsonParseException(   "Date  should  be  a  string  value.   ");	  	non-compiled	[CE]  cannot  find  symbol	32	None	add
246	[BUG]  [BUGGY]  throw  new  JsonParseException(   "Date  should  be  a  string  value.   ");  Throw  new  JsonParseException( "Date  should  be  a  string  value.   ");  [CE]  not  a  statement  [FE]        JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "Date  should  be  a  string  value.   ");  Throw  new  JsonParseException( "Date  should  be  a  string  value.   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "Date    should    be    a    string    value.   ");    Throw  new  JsonParseException( "Date  should  be  a  string  value.   ");	  	non-compiled	[CE]  not  a  statement	32	None	add
247	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  INVALID_DATE,  deserialize);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  INVALID_DATE,  deserialize);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  INVALID_DATE,  deserialize);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    INVALID_DATE);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	122	None	replace
248	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  SIMPLE_NAME,  INVALID_DATE);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  SIMPLE_NAME,  INVALID_DATE);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  SIMPLE_NAME,  INVALID_DATE);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    INVALID_DATE);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	122	None	replace
249	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  1,  INVALID_DATE);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  1,  INVALID_DATE);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  1,  INVALID_DATE);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    INVALID_DATE);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	122	None	replace
250	[BUG]  [BUGGY]  throw  new  JsonParseException(in, "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  INVALID_DATE);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(in, "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  INVALID_DATE);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException(in, "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  INVALID_DATE);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    INVALID_DATE);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	122	None	replace
251	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value ",  in.nextString(),  INVALID_DATE);  [CE]  cannot  find  symbol  INVALID_DATE  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value ",  in.nextString(),  INVALID_DATE);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value ",  in.nextString(),  INVALID_DATE);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    INVALID_DATE);    	non-compiled	[CE]  cannot  find  symbol  INVALID_DATE	122	None	replace
252	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value "  +  String.valueOf(in.getClass()));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "Date  should  be  a  string  value "  +  String.valueOf(in.getClass()));	  throw    new    JsonParseException(   "Date    should    be    a    string    value   ",    in.getClass());    	compilable	  [FE]  JsonParseException  	154	2	replace
253	[BUG]  [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value "  +  String.valueOf(in.getClass()));  [FE]  JsonParseException  [FE]        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value "  +  String.valueOf(in.getClass()));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "Date  should  be  a  string  value "  +  String.valueOf(in.getClass()));	  throw    new    JsonParseException(   "Date    should    be    a    string    value   ",    in.getClass());    	compilable	  [FE]  JsonParseException  	154	2	replace
254	[BUG]  [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value. ",  in.getClass());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,Class<CAP#1>)  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value. ",  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "Date  should  be  a  string  value. ",  in.getClass());	  throw    new    JsonParseException(   "Date    should    be    a    string    value   ",    in.getClass());    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,Class<CAP#1>)	154	None	replace
255	[BUG]  [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value ",  in,  in.getClass());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader,Class<CAP#1>)  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value ",  in,  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "Date  should  be  a  string  value ",  in,  in.getClass());	  throw    new    JsonParseException(   "Date    should    be    a    string    value   ",    in.getClass());    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader,Class<CAP#1>)	154	None	replace
256	[BUG]  [BUGGY]  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getKey()));  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getKey()));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getKey()));	  JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.getValue()));    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
257	[BUG]  [BUGGY]  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in,  in.getValue()));  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in,  in.getValue()));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in,  in.getValue()));	  JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.getValue()));    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
258	[BUG]  [BUGGY]  JsonParseException( "The  date  should  be  a  string  value. "  +  Integer.toHexString(in.getValue()));  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException( "The  date  should  be  a  string  value. "  +  Integer.toHexString(in.getValue()));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException( "The  date  should  be  a  string  value. "  +  Integer.toHexString(in.getValue()));	  JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.getValue()));    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
259	[BUG]  [BUGGY]  JsonParseException( "The  date  should  be  a  string  value: "  +  Integer.toHexString(in.getValue()));  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException( "The  date  should  be  a  string  value: "  +  Integer.toHexString(in.getValue()));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException( "The  date  should  be  a  string  value: "  +  Integer.toHexString(in.getValue()));	  JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.getValue()));    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
260	[BUG]  [BUGGY]  Throwables.throw  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.toString());  [CE]  <identifier>  expected  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  Throwables.throw  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	Throwables.throw  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.toString());	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value:   "    +    in.toString());    	non-compiled	[CE]  <identifier>  expected	97	None	replace
261	[BUG]  [BUGGY]  JsonTokenException.throw  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.toString());  [CE]  <identifier>  expected  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonTokenException.throw  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonTokenException.throw  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.toString());	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value:   "    +    in.toString());    	non-compiled	[CE]  <identifier>  expected	97	None	replace
262	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in,  in.toString());  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in,  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in,  in.toString());	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value:   "    +    in.toString());    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
263	[BUG]  [BUGGY]  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.toString());  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonTokenException( "The  date  should  be  a  string  value: "  +  in.toString());	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value:   "    +    in.toString());    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
264	[BUG]  [BUGGY]  JsonTokenException  in  =  new  JsonTokenException( "Can  not  read  string: "  +  in.getClass());  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonTokenException  in  =  new  JsonTokenException( "Can  not  read  string: "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonTokenException  in  =  new  JsonTokenException( "Can  not  read  string: "  +  in.getClass());	  throw    new    JsonTokenException(   "Can    not    read    string:   "    +    in.getClass());    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
265	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Can  not  read  string: "  +  in,  in.getClass());  [CE]  cannot  find  symbol  [FE]                                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "Can  not  read  string: "  +  in,  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Can  not  read  string: "  +  in,  in.getClass());	  throw    new    JsonTokenException(   "Can    not    read    string:   "    +    in.getClass());    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
266	[BUG]  [BUGGY]  Throwables.throw  new  JsonTokenException( "Can  not  read  string: "  +  in.getClass());  [CE]  <identifier>  expected  [FE]                                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  Throwables.throw  new  JsonTokenException( "Can  not  read  string: "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	Throwables.throw  new  JsonTokenException( "Can  not  read  string: "  +  in.getClass());	  throw    new    JsonTokenException(   "Can    not    read    string:   "    +    in.getClass());    	non-compiled	[CE]  <identifier>  expected	153	None	replace
267	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Can  not  read  string: "  +  in.readClass());  [CE]  cannot  find  symbol  [FE]                                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "Can  not  read  string: "  +  in.readClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Can  not  read  string: "  +  in.readClass());	  throw    new    JsonTokenException(   "Can    not    read    string:   "    +    in.getClass());    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
268	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Can  not  read  String: "  +  in.getClass());  [CE]  cannot  find  symbol  [FE]                                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "Can  not  read  String: "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Can  not  read  String: "  +  in.getClass());	  throw    new    JsonTokenException(   "Can    not    read    string:   "    +    in.getClass());    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
269	[BUG]  [BUGGY]  throw  new  JsonParseException(   "This  date  should  be  a  string  value:   "  +  in.getClass());  throw  new  JsonParseException( "This  date  should  be  a  string  value:   "  +  in.getClass());  [CE]  unreachable  statement  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "This  date  should  be  a  string  value:   "  +  in.getClass());  throw  new  JsonParseException( "This  date  should  be  a  string  value:   "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "This    date    should    be    a    string    value:   "    +    in.getClass());    throw  new  JsonParseException( "This  date  should  be  a  string  value:   "  +  in.getClass());	  	non-compiled	[CE]  unreachable  statement	90	None	add
270	[BUG]  [BUGGY]  throw  new  JsonParseException(   "This  date  should  be  a  string  value:   "  +  in.getClass());  Throw  new  JsonParseException( "This  date  should  be  a  string  value:   "  +  in.getClass());  [CE]  not  a  statement  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "This  date  should  be  a  string  value:   "  +  in.getClass());  Throw  new  JsonParseException( "This  date  should  be  a  string  value:   "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "This    date    should    be    a    string    value:   "    +    in.getClass());    Throw  new  JsonParseException( "This  date  should  be  a  string  value:   "  +  in.getClass());	  	non-compiled	[CE]  not  a  statement	90	None	add
271	[BUG]  [BUGGY]  throw  new  JsonParseException(   "This  date  should  be  a  string  value:   "  +  in.getClass());  JsonParseException(   "This  date  should  be  a  string  value:   "  +  in.getClass());  [CE]  cannot  find  symbol  [FE]        JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "This  date  should  be  a  string  value:   "  +  in.getClass());  JsonParseException(   "This  date  should  be  a  string  value:   "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "This    date    should    be    a    string    value:   "    +    in.getClass());    JsonParseException(   "This  date  should  be  a  string  value:   "  +  in.getClass());	  	non-compiled	[CE]  cannot  find  symbol	90	None	add
272	[BUG]  [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value.n ");  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value.n ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonDescriptorException( "The  date  should  be  a  string  value.n ");	  throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value.   ");    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
273	[BUG]  [BUGGY]  JsonDescriptorException( "The  date  should  be  a  string  value. ");  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonDescriptorException( "The  date  should  be  a  string  value. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonDescriptorException( "The  date  should  be  a  string  value. ");	  throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value.   ");    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
274	[BUG]  [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value.. ");  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value.. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonDescriptorException( "The  date  should  be  a  string  value.. ");	  throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value.   ");    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
275	[BUG]  [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value.  Please  check  the  local  value. ");  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value.  Please  check  the  local  value. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonDescriptorException( "The  date  should  be  a  string  value.  Please  check  the  local  value. ");	  throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value.   ");    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
276	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  in.close();  return  null;  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	in.close();  return  null;	          if(in.peek()    ==    JsonToken.STRING)    {    in.close();    return    null;    }    	compilable	  [FE]  AssertionFailedError  	27	1	replace
277	[BUG]  [BUGGY]  in.close();  return  null;  [FE]  AssertionFailedError  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  in.close();  return  null;  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	in.close();  return  null;	          if(in.peek()    ==    JsonToken.STRING)    {    in.close();    return    null;    }    	compilable	  [FE]  AssertionFailedError  	27	1	replace
278	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.START_OBJECT)  {  in.close();  return  null;  }  [CE]  cannot  find  symbol  START_OBJECT  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()  ==  JsonToken.START_OBJECT)  {  in.close();  return  null;  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()  ==  JsonToken.START_OBJECT)  {  in.close();  return  null;  }	          if(in.peek()    ==    JsonToken.STRING)    {    in.close();    return    null;    }    	non-compiled	[CE]  cannot  find  symbol  START_OBJECT	27	None	replace
279	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_NULL)  {  in.close();  return  null;  }  [CE]  cannot  find  symbol  VALUE_NULL  [FE]        JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_NULL)  {  in.close();  return  null;  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()  ==  JsonToken.VALUE_NULL)  {  in.close();  return  null;  }	          if(in.peek()    ==    JsonToken.STRING)    {    in.close();    return    null;    }    	non-compiled	[CE]  cannot  find  symbol  VALUE_NULL	27	None	replace
280	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_NUMBER_INT)  {  in.close();  return  null;  }  [CE]  cannot  find  symbol  VALUE_NUMBER_INT  [FE]          JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_NUMBER_INT)  {  in.close();  return  null;  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()  ==  JsonToken.VALUE_NUMBER_INT)  {  in.close();  return  null;  }	          if(in.peek()    ==    JsonToken.STRING)    {    in.close();    return    null;    }    	non-compiled	[CE]  cannot  find  symbol  VALUE_NUMBER_INT	27	None	replace
281	[BUG]  [BUGGY]  Integer  in.peek()  ==  JsonToken.STRING)  {  in.close();  return  null;  }  [CE]  ';'  expected  [FE]            JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  Integer  in.peek()  ==  JsonToken.STRING)  {  in.close();  return  null;  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	Integer  in.peek()  ==  JsonToken.STRING)  {  in.close();  return  null;  }	          if(in.peek()    ==    JsonToken.STRING)    {    in.close();    return    null;    }    	non-compiled	[CE]  ';'  expected	27	None	replace
282	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING)  {  in.close();  return  null;  }  [CE]  cannot  find  symbol  VALUE_STRING  [FE]              JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING)  {  in.close();  return  null;  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()  ==  JsonToken.VALUE_STRING)  {  in.close();  return  null;  }	          if(in.peek()    ==    JsonToken.STRING)    {    in.close();    return    null;    }    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	27	None	replace
283	[BUG]  [BUGGY]  [FE]  com.google.gson.JsonParseException:    [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( ",Date  should  be  a  string  value ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( ",Date  should  be  a  string  value ");	  throw    new    JsonParseException(       "Date    should    be    a    string    value       ");    throw    new    JsonParseException(,   "Date    should    be    a    string    value       ");    	compilable	  [FE]  com.google.gson.JsonParseException:    	58	2	replace
284	[BUG]  [BUGGY]  throw  new  JsonParseException( ",Date  should  be  a  string  value ");  [FE]  com.google.gson.JsonParseException:    [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( ",Date  should  be  a  string  value ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( ",Date  should  be  a  string  value ");	  throw    new    JsonParseException(       "Date    should    be    a    string    value       ");    throw    new    JsonParseException(,   "Date    should    be    a    string    value       ");    	compilable	  [FE]  com.google.gson.JsonParseException:    	58	2	replace
285	[BUG]  [BUGGY]  JsonTokenException  in  =  new  JsonTokenException( "Unexpected  String  name: "  +  in.getClass());  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonTokenException  in  =  new  JsonTokenException( "Unexpected  String  name: "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonTokenException  in  =  new  JsonTokenException( "Unexpected  String  name: "  +  in.getClass());	  throw    new    JsonTokenException(   "Unexpected    String    name:   "    +    in.getClass());    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
286	[BUG]  [BUGGY]  Throwables.throw  new  JsonTokenException( "Unexpected  String  name: "  +  in.getClass());  [CE]  <identifier>  expected  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  Throwables.throw  new  JsonTokenException( "Unexpected  String  name: "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	Throwables.throw  new  JsonTokenException( "Unexpected  String  name: "  +  in.getClass());	  throw    new    JsonTokenException(   "Unexpected    String    name:   "    +    in.getClass());    	non-compiled	[CE]  <identifier>  expected	77	None	replace
287	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Unexpected  String  name: "  +  in.getName());  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "Unexpected  String  name: "  +  in.getName());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Unexpected  String  name: "  +  in.getName());	  throw    new    JsonTokenException(   "Unexpected    String    name:   "    +    in.getClass());    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
288	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Unexpected  String  name: "  +  in,  in.getClass());  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "Unexpected  String  name: "  +  in,  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Unexpected  String  name: "  +  in,  in.getClass());	  throw    new    JsonTokenException(   "Unexpected    String    name:   "    +    in.getClass());    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
289	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Unexpected  String  name: "  +  in.toString());  [CE]  cannot  find  symbol  [FE]                                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "Unexpected  String  name: "  +  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Unexpected  String  name: "  +  in.toString());	  throw    new    JsonTokenException(   "Unexpected    String    name:   "    +    in.getClass());    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
290	[BUG]  [BUGGY]  return  new  JsonParseException( "Date  should  be  a  string  value. ");  [CE]  incompatible  types  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "Date  should  be  a  string  value. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "Date  should  be  a  string  value. ");	  return    new    JsonParseException(   "Date    should    be    a    string    value   ");    	non-compiled	[CE]  incompatible  types	155	None	replace
291	[BUG]  [BUGGY]  return  new  JsonParseException( "Date  should  be  a  string  value ",  in);  [CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader)  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "Date  should  be  a  string  value ",  in);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "Date  should  be  a  string  value ",  in);	  return    new    JsonParseException(   "Date    should    be    a    string    value   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader)	155	None	replace
292	[BUG]  [BUGGY]  return  new  JsonParseException( "Date  should  be  a  string  value ",  in.nextString());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,String)  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "Date  should  be  a  string  value ",  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "Date  should  be  a  string  value ",  in.nextString());	  return    new    JsonParseException(   "Date    should    be    a    string    value   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,String)	155	None	replace
293	[BUG]  [BUGGY]  return  new  JsonParseException( "Date  should  be  a  string  value, ");  [CE]  incompatible  types  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "Date  should  be  a  string  value, ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "Date  should  be  a  string  value, ");	  return    new    JsonParseException(   "Date    should    be    a    string    value   ");    	non-compiled	[CE]  incompatible  types	155	None	replace
294	[BUG]  [BUGGY]  return  new  JsonParseException( "Date  should  be  a  string  value ",  in.getClass());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,Class<CAP#1>)  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "Date  should  be  a  string  value ",  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "Date  should  be  a  string  value ",  in.getClass());	  return    new    JsonParseException(   "Date    should    be    a    string    value   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,Class<CAP#1>)	155	None	replace
295	[BUG]  [BUGGY]  return  new  JsonParseException( "Date  should  be  a  string  value: "  +  in.getClass());  [CE]  incompatible  types  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "Date  should  be  a  string  value: "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "Date  should  be  a  string  value: "  +  in.getClass());	  return    new    JsonParseException(   "Date    should    be    a    string    value   ");    	non-compiled	[CE]  incompatible  types	155	None	replace
296	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value,  Please  check  that  the  date. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "The  date  should  be  a  string  value,  Please  check  that  the  date. ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Please    check    that    the    date.   ");    	compilable	  [FE]  JsonParseException  	47	2	replace
297	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value,  Please  check  that  the  date. ");  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value,  Please  check  that  the  date. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value,  Please  check  that  the  date. ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Please    check    that    the    date.   ");    	compilable	  [FE]  JsonParseException  	47	2	replace
298	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value.  Please  check  that  the  date. ");  [CE]  cannot  find  symbol  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value.  Please  check  that  the  date. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  date  should  be  a  string  value.  Please  check  that  the  date. ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Please    check    that    the    date.   ");    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
299	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date. ");  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]        JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date. ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Please    check    that    the    date.   ");    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	47	None	replace
300	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]          JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value,  please  check  that  the  date. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "The  date  should  be  a  string  value,  please  check  that  the  date. ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Please    check    that    the    date.   ");    	compilable	  [FE]  JsonParseException  	47	2	replace
301	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value,  please  check  that  the  date. ");  [FE]  JsonParseException  [FE]          JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value,  please  check  that  the  date. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value,  please  check  that  the  date. ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Please    check    that    the    date.   ");    	compilable	  [FE]  JsonParseException  	47	2	replace
302	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value.   "  +  Integer.toHexString(in.getValue()));  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value.   "  +  Integer.toHexString(in.getValue()));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value.   "  +  Integer.toHexString(in.getValue()));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.   "    +    Integer.toHexString(in.getValue()));    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	53	None	replace
303	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.n "  +  Integer.toHexString(in.getValue()));  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.n "  +  Integer.toHexString(in.getValue()));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value.n "  +  Integer.toHexString(in.getValue()));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.   "    +    Integer.toHexString(in.getValue()));    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
304	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.   "  +  Integer.toHexString(in.getValue()),  JsonToken.VALUE_STRING);  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.   "  +  Integer.toHexString(in.getValue()),  JsonToken.VALUE_STRING);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value.   "  +  Integer.toHexString(in.getValue()),  JsonToken.VALUE_STRING);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.   "    +    Integer.toHexString(in.getValue()));    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
305	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Date  should  be  a  string  value ",  in);  [CE]  cannot  find  symbol  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "Date  should  be  a  string  value ",  in);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Date  should  be  a  string  value ",  in);	  throw    new    JsonTokenException(   "Date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
306	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Date  should  be  a  string  value ",  in.nextString());  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "Date  should  be  a  string  value ",  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Date  should  be  a  string  value ",  in.nextString());	  throw    new    JsonTokenException(   "Date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
307	[BUG]  [BUGGY]  JsonTokenException.from(in, "Date  should  be  a  string  value ");  [CE]  cannot  find  symbol  JsonTokenException  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonTokenException.from(in, "Date  should  be  a  string  value ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonTokenException.from(in, "Date  should  be  a  string  value ");	  throw    new    JsonTokenException(   "Date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol  JsonTokenException	34	None	replace
308	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Date  should  be  a  string  value: "  +  in.getClass());  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "Date  should  be  a  string  value: "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Date  should  be  a  string  value: "  +  in.getClass());	  throw    new    JsonTokenException(   "Date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
309	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Date  should  be  a  string  value ",  in.getClass());  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "Date  should  be  a  string  value ",  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Date  should  be  a  string  value ",  in.getClass());	  throw    new    JsonTokenException(   "Date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
310	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value: "  +  in.toString());  [CE]  incompatible  types  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value: "  +  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value: "  +  in.toString());	  return    new    JsonParseException(   "The    date    should    be    a    string    value:   "    +    in.getClass());    	non-compiled	[CE]  incompatible  types	16	None	replace
311	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value: "  +  in,  in.getClass());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,Class<CAP#1>)  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value: "  +  in,  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value: "  +  in,  in.getClass());	  return    new    JsonParseException(   "The    date    should    be    a    string    value:   "    +    in.getClass());    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,Class<CAP#1>)	16	None	replace
312	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value: "  +  in.nextString());  [CE]  incompatible  types  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value: "  +  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value: "  +  in.nextString());	  return    new    JsonParseException(   "The    date    should    be    a    string    value:   "    +    in.getClass());    	non-compiled	[CE]  incompatible  types	16	None	replace
313	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value: "  +  in.readClass());  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value: "  +  in.readClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value: "  +  in.readClass());	  return    new    JsonParseException(   "The    date    should    be    a    string    value:   "    +    in.getClass());    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
314	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value: "  +  in.getMessage());  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value: "  +  in.getMessage());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value: "  +  in.getMessage());	  return    new    JsonParseException(   "The    date    should    be    a    string    value:   "    +    in.getClass());    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
315	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Unexpected  String  name: "  +  in.getValue());  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "Unexpected  String  name: "  +  in.getValue());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Unexpected  String  name: "  +  in.getValue());	  throw    new    JsonTokenException(   "Unexpected    String    name:   "    +    in.nextString());    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
316	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Unexpected  String  name: "  +  in.getKey());  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "Unexpected  String  name: "  +  in.getKey());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Unexpected  String  name: "  +  in.getKey());	  throw    new    JsonTokenException(   "Unexpected    String    name:   "    +    in.nextString());    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
317	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Unexpected  String  name: "  +  in.getPattern());  [CE]  cannot  find  symbol  [FE]                                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "Unexpected  String  name: "  +  in.getPattern());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Unexpected  String  name: "  +  in.getPattern());	  throw    new    JsonTokenException(   "Unexpected    String    name:   "    +    in.nextString());    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
318	[BUG]  [BUGGY]  throw  new  JsonParseException(   "This  date  should  be  a  string  value.   ");  throw  new  JsonParseException( "This  date  should  be  a  string  value.   ");  [CE]  unreachable  statement  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "This  date  should  be  a  string  value.   ");  throw  new  JsonParseException( "This  date  should  be  a  string  value.   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "This    date    should    be    a    string    value.   ");    throw  new  JsonParseException( "This  date  should  be  a  string  value.   ");	  	non-compiled	[CE]  unreachable  statement	86	None	add
319	[BUG]  [BUGGY]  throw  new  JsonParseException(   "This  date  should  be  a  string  value.   ");  JsonParseException(   "This  date  should  be  a  string  value.   ");  [CE]  cannot  find  symbol  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "This  date  should  be  a  string  value.   ");  JsonParseException(   "This  date  should  be  a  string  value.   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "This    date    should    be    a    string    value.   ");    JsonParseException(   "This  date  should  be  a  string  value.   ");	  	non-compiled	[CE]  cannot  find  symbol	86	None	add
320	[BUG]  [BUGGY]  throw  new  JsonParseException(   "This  date  should  be  a  string  value.   ");  Throw  new  JsonParseException( "This  date  should  be  a  string  value.   ");  [CE]  not  a  statement  [FE]        JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "This  date  should  be  a  string  value.   ");  Throw  new  JsonParseException( "This  date  should  be  a  string  value.   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "This    date    should    be    a    string    value.   ");    Throw  new  JsonParseException( "This  date  should  be  a  string  value.   ");	  	non-compiled	[CE]  not  a  statement	86	None	add
321	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]          if(in.peek()  ==  JsonToken.STRING)  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.peek()  ==  JsonToken.STRING)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	                if(in.peek()    ==    JsonToken.STRING)    {    throw    new    IllegalArgumentException(   "   ");    }    if(in.peek()  ==  JsonToken.STRING)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  JsonParseException  	22	2	add
322	[BUG]  [BUGGY]          if(in.peek()  ==  JsonToken.STRING)  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.peek()  ==  JsonToken.STRING)  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]          if(in.peek()  ==  JsonToken.STRING)  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.peek()  ==  JsonToken.STRING)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	                if(in.peek()    ==    JsonToken.STRING)    {    throw    new    IllegalArgumentException(   "   ");    }    if(in.peek()  ==  JsonToken.STRING)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  JsonParseException  	22	2	add
323	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]          if(in.peek()  ==  JsonToken.STRING)  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.peek()!=  JsonToken.STRING)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	                if(in.peek()    ==    JsonToken.STRING)    {    throw    new    IllegalArgumentException(   "   ");    }    if(in.peek()!=  JsonToken.STRING)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	22	2	add
324	[BUG]  [BUGGY]          if(in.peek()  ==  JsonToken.STRING)  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.peek()!=  JsonToken.STRING)  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]          if(in.peek()  ==  JsonToken.STRING)  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.peek()!=  JsonToken.STRING)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	                if(in.peek()    ==    JsonToken.STRING)    {    throw    new    IllegalArgumentException(   "   ");    }    if(in.peek()!=  JsonToken.STRING)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	22	2	add
325	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]        JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]          if(in.peek()  ==  JsonToken.STRING)  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.peek()  ==  JsonToken.STRING)  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	                if(in.peek()    ==    JsonToken.STRING)    {    throw    new    IllegalArgumentException(   "   ");    }    if(in.peek()  ==  JsonToken.STRING)  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  JsonParseException  	22	2	add
326	[BUG]  [BUGGY]          if(in.peek()  ==  JsonToken.STRING)  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.peek()  ==  JsonToken.STRING)  {  throw  new  IllegalArgumentException( ".   ");  }  [FE]  JsonParseException  [FE]        JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]          if(in.peek()  ==  JsonToken.STRING)  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.peek()  ==  JsonToken.STRING)  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	                if(in.peek()    ==    JsonToken.STRING)    {    throw    new    IllegalArgumentException(   "   ");    }    if(in.peek()  ==  JsonToken.STRING)  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  JsonParseException  	22	2	add
327	[BUG]  [BUGGY]  String  datePattern  =  in.getString();  return  new  Date(datePattern);  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  String  datePattern  =  in.getString();  return  new  Date(datePattern);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	String  datePattern  =  in.getString();  return  new  Date(datePattern);	          if(in.peek()    ==    JsonToken.STRING)    {    String    datePattern    =    in.getString();    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
328	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.STRING)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()!=  JsonToken.STRING)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()!=  JsonToken.STRING)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }	          if(in.peek()    ==    JsonToken.STRING)    {    String    datePattern    =    in.getString();    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
329	[BUG]  [BUGGY]  in.peek()  ==  JsonToken.STRING)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  [CE]  not  a  statement  [FE]                IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  in.peek()  ==  JsonToken.STRING)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	in.peek()  ==  JsonToken.STRING)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }	          if(in.peek()    ==    JsonToken.STRING)    {    String    datePattern    =    in.getString();    return    new    Date(datePattern);    }    	non-compiled	[CE]  not  a  statement	24	None	replace
330	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value,  Please  check  that  the  date  is  null. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "The  date  should  be  a  string  value,  Please  check  that  the  date  is  null. ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Please    check    that    the    date    is    null.   ");    	compilable	  [FE]  JsonParseException  	45	2	replace
331	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value,  Please  check  that  the  date  is  null. ");  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value,  Please  check  that  the  date  is  null. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value,  Please  check  that  the  date  is  null. ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Please    check    that    the    date    is    null.   ");    	compilable	  [FE]  JsonParseException  	45	2	replace
332	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value.  Please  check  that  the  date  is  null. ");  [CE]  cannot  find  symbol  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value.  Please  check  that  the  date  is  null. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  date  should  be  a  string  value.  Please  check  that  the  date  is  null. ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Please    check    that    the    date    is    null.   ");    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
333	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]        JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value,  please  check  that  the  date  is  null. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "The  date  should  be  a  string  value,  please  check  that  the  date  is  null. ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Please    check    that    the    date    is    null.   ");    	compilable	  [FE]  JsonParseException  	45	2	replace
334	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value,  please  check  that  the  date  is  null. ");  [FE]  JsonParseException  [FE]        JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value,  please  check  that  the  date  is  null. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value,  please  check  that  the  date  is  null. ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Please    check    that    the    date    is    null.   ");    	compilable	  [FE]  JsonParseException  	45	2	replace
335	[BUG]  [BUGGY]  JsonToken  t  =  in.readFrom(JsonToken.END_ARRAY,  JsonToken.END_NAME);  [CE]  cannot  find  symbol  END_NAME  [FE]                                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  t  =  in.readFrom(JsonToken.END_ARRAY,  JsonToken.END_NAME);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  t  =  in.readFrom(JsonToken.END_ARRAY,  JsonToken.END_NAME);	  JsonToken    t    =    in.readFrom(JsonToken.END_ARRAY);    	non-compiled	[CE]  cannot  find  symbol  END_NAME	129	None	replace
336	[BUG]  [BUGGY]  JsonToken  t  =  this.in.readFrom(JsonToken.END_ARRAY);  [CE]  cannot  find  symbol  in  [FE]                                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  t  =  this.in.readFrom(JsonToken.END_ARRAY);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  t  =  this.in.readFrom(JsonToken.END_ARRAY);	  JsonToken    t    =    in.readFrom(JsonToken.END_ARRAY);    	non-compiled	[CE]  cannot  find  symbol  in	129	None	replace
337	[BUG]  [BUGGY]  JsonToken  t  =  in.readFrom(JsonToken.END_ARRAY,  JsonToken.END_OBJECT);  [CE]  cannot  find  symbol  [FE]                                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  t  =  in.readFrom(JsonToken.END_ARRAY,  JsonToken.END_OBJECT);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  t  =  in.readFrom(JsonToken.END_ARRAY,  JsonToken.END_OBJECT);	  JsonToken    t    =    in.readFrom(JsonToken.END_ARRAY);    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
338	[BUG]  [BUGGY]  JsonToken  t  =  in.readFrom(JsonToken.END_ARRAY,  JsonToken.START_OBJECT);  [CE]  cannot  find  symbol  START_OBJECT  [FE]                                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  t  =  in.readFrom(JsonToken.END_ARRAY,  JsonToken.START_OBJECT);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  t  =  in.readFrom(JsonToken.END_ARRAY,  JsonToken.START_OBJECT);	  JsonToken    t    =    in.readFrom(JsonToken.END_ARRAY);    	non-compiled	[CE]  cannot  find  symbol  START_OBJECT	129	None	replace
339	[BUG]  [BUGGY]  JsonToken  t  =  in,  in.readFrom(JsonToken.END_ARRAY);  [CE]  ';'  expected  [FE]                                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  t  =  in,  in.readFrom(JsonToken.END_ARRAY);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  t  =  in,  in.readFrom(JsonToken.END_ARRAY);	  JsonToken    t    =    in.readFrom(JsonToken.END_ARRAY);    	non-compiled	[CE]  ';'  expected	129	None	replace
340	[BUG]  [BUGGY]  JsonToken  t  =  in.readFrom(JsonToken.END_ARRAY,  JsonToken.FIELD_NAME);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  t  =  in.readFrom(JsonToken.END_ARRAY,  JsonToken.FIELD_NAME);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  t  =  in.readFrom(JsonToken.END_ARRAY,  JsonToken.FIELD_NAME);	  JsonToken    t    =    in.readFrom(JsonToken.END_ARRAY);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	129	None	replace
341	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JSONToken.VALUE_STRING,  deserialize);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JSONToken.VALUE_STRING,  deserialize);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JSONToken.VALUE_STRING,  deserialize);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JSONToken.VALUE_STRING);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	4	None	replace
342	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JSONToken.VALUE_NAME);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JSONToken.VALUE_NAME);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JSONToken.VALUE_NAME);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JSONToken.VALUE_STRING);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	4	None	replace
343	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JSONToken.VALUE_STRING));  [CE]  cannot  find  symbol  JSONToken  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JSONToken.VALUE_STRING));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JSONToken.VALUE_STRING));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JSONToken.VALUE_STRING);    	non-compiled	[CE]  cannot  find  symbol  JSONToken	4	None	replace
344	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JSONToken.VALUE_NUMBER_INT);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JSONToken.VALUE_NUMBER_INT);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JSONToken.VALUE_NUMBER_INT);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JSONToken.VALUE_STRING);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	4	None	replace
345	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JSONToken.VALUE_NAME,  JSONToken.VALUE_STRING);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JSONToken.VALUE_NAME,  JSONToken.VALUE_STRING);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JSONToken.VALUE_NAME,  JSONToken.VALUE_STRING);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JSONToken.VALUE_STRING);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	4	None	replace
346	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  1,  JSONToken.VALUE_STRING);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  1,  JSONToken.VALUE_STRING);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  1,  JSONToken.VALUE_STRING);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JSONToken.VALUE_STRING);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	4	None	replace
347	[BUG]  [BUGGY]  throw  new  JsonParseException(in, "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JSONToken.VALUE_STRING);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(in, "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JSONToken.VALUE_STRING);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException(in, "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JSONToken.VALUE_STRING);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JSONToken.VALUE_STRING);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	4	None	replace
348	[BUG]  [BUGGY]  JsonTokenException.from(in,  in, "The  date  should  be  a  string  value ");  [CE]  cannot  find  symbol  JsonTokenException  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonTokenException.from(in,  in, "The  date  should  be  a  string  value ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonTokenException.from(in,  in, "The  date  should  be  a  string  value ");	  JsonTokenException.from(in,   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol  JsonTokenException	104	None	replace
349	[BUG]  [BUGGY]  JsonTokenException.from(in,  localFormat, "The  date  should  be  a  string  value ");  [CE]  cannot  find  symbol  JsonTokenException  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonTokenException.from(in,  localFormat, "The  date  should  be  a  string  value ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonTokenException.from(in,  localFormat, "The  date  should  be  a  string  value ");	  JsonTokenException.from(in,   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol  JsonTokenException	104	None	replace
350	[BUG]  [BUGGY]  JsonTokenException.from(in,  in, "The  date  should  be  a  string  value. ");  [CE]  cannot  find  symbol  JsonTokenException  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonTokenException.from(in,  in, "The  date  should  be  a  string  value. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonTokenException.from(in,  in, "The  date  should  be  a  string  value. ");	  JsonTokenException.from(in,   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol  JsonTokenException	104	None	replace
351	[BUG]  [BUGGY]  JsonTokenException.from(in,  this, "The  date  should  be  a  string  value ");  [CE]  cannot  find  symbol  JsonTokenException  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonTokenException.from(in,  this, "The  date  should  be  a  string  value ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonTokenException.from(in,  this, "The  date  should  be  a  string  value ");	  JsonTokenException.from(in,   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol  JsonTokenException	104	None	replace
352	[BUG]  [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Please  check  that  the  date.   ");  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date.   ");  [CE]  unreachable  statement  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Please  check  that  the  date.   ");  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date.   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Please    check    that    the    date.   ");    throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date.   ");	  	non-compiled	[CE]  unreachable  statement	46	None	add
353	[BUG]  [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Please  check  that  the  date.   ");  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date.. ");  [CE]  unreachable  statement  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Please  check  that  the  date.   ");  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date.. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Please    check    that    the    date.   ");    throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date.. ");	  	non-compiled	[CE]  unreachable  statement	46	None	add
354	[BUG]  [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Please  check  that  the  date.   ");  Throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date.   ");  [CE]  not  a  statement  [FE]        JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Please  check  that  the  date.   ");  Throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date.   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Please    check    that    the    date.   ");    Throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date.   ");	  	non-compiled	[CE]  not  a  statement	46	None	add
355	[BUG]  [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Please  check  that  the  date.   ");  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date. ".);  [CE]  <identifier>  expected  [FE]          JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Please  check  that  the  date.   ");  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date. ".);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Please    check    that    the    date.   ");    throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date. ".);	  	non-compiled	[CE]  <identifier>  expected	46	None	add
356	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException(   "The  Date  should  be  a  string  value   ");  new  JsonParseException( "The  Date  should  be  a  string  value   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	new    JsonParseException(   "The    Date    should    be    a    string    value   ");    new  JsonParseException( "The  Date  should  be  a  string  value   ");	  	compilable	  [FE]  JsonParseException  	136	2	add
357	[BUG]  [BUGGY]  new  JsonParseException(   "The  Date  should  be  a  string  value   ");  new  JsonParseException( "The  Date  should  be  a  string  value   ");  [FE]  JsonParseException  [FE]    IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException(   "The  Date  should  be  a  string  value   ");  new  JsonParseException( "The  Date  should  be  a  string  value   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new    JsonParseException(   "The    Date    should    be    a    string    value   ");    new  JsonParseException( "The  Date  should  be  a  string  value   ");	  	compilable	  [FE]  JsonParseException  	136	2	add
358	[BUG]  [BUGGY]  new  JsonParseException(   "The  Date  should  be  a  string  value   ");  new  JsonParseException(, "The  Date  should  be  a  string  value   ");  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException(   "The  Date  should  be  a  string  value   ");  new  JsonParseException(, "The  Date  should  be  a  string  value   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new    JsonParseException(   "The    Date    should    be    a    string    value   ");    new  JsonParseException(, "The  Date  should  be  a  string  value   ");	  	non-compiled	[CE]  illegal  start  of  expression	136	None	add
359	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]        IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException(   "The  Date  should  be  a  string  value   ");  new  JsonParseException( ",The  Date  should  be  a  string  value   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	new    JsonParseException(   "The    Date    should    be    a    string    value   ");    new  JsonParseException( ",The  Date  should  be  a  string  value   ");	  	compilable	  [FE]  JsonParseException  	136	2	add
360	[BUG]  [BUGGY]  new  JsonParseException(   "The  Date  should  be  a  string  value   ");  new  JsonParseException( ",The  Date  should  be  a  string  value   ");  [FE]  JsonParseException  [FE]        IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException(   "The  Date  should  be  a  string  value   ");  new  JsonParseException( ",The  Date  should  be  a  string  value   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new    JsonParseException(   "The    Date    should    be    a    string    value   ");    new  JsonParseException( ",The  Date  should  be  a  string  value   ");	  	compilable	  [FE]  JsonParseException  	136	2	add
361	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]          IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException(   "The  Date  should  be  a  string  value   ");  new  JsonParseException( "The  Date  should  be  an  string  value   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	new    JsonParseException(   "The    Date    should    be    a    string    value   ");    new  JsonParseException( "The  Date  should  be  an  string  value   ");	  	compilable	  [FE]  JsonParseException  	136	2	add
362	[BUG]  [BUGGY]  new  JsonParseException(   "The  Date  should  be  a  string  value   ");  new  JsonParseException( "The  Date  should  be  an  string  value   ");  [FE]  JsonParseException  [FE]          IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException(   "The  Date  should  be  a  string  value   ");  new  JsonParseException( "The  Date  should  be  an  string  value   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new    JsonParseException(   "The    Date    should    be    a    string    value   ");    new  JsonParseException( "The  Date  should  be  an  string  value   ");	  	compilable	  [FE]  JsonParseException  	136	2	add
363	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value ",  in);  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value ",  in);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value ",  in);	  JsonParseException    in    =    new    JsonParseException(   "Date    should    be    a    string    value   ");    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	35	None	replace
364	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value, ");  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value, ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value, ");	  JsonParseException    in    =    new    JsonParseException(   "Date    should    be    a    string    value   ");    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	35	None	replace
365	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value: "  +  in.getClass());  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value: "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value: "  +  in.getClass());	  JsonParseException    in    =    new    JsonParseException(   "Date    should    be    a    string    value   ");    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	35	None	replace
366	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value: "  +  in.toString());  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value: "  +  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value: "  +  in.toString());	  JsonParseException    in    =    new    JsonParseException(   "Date    should    be    a    string    value   ");    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	35	None	replace
367	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value: ");  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value: ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value: ");	  JsonParseException    in    =    new    JsonParseException(   "Date    should    be    a    string    value   ");    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	35	None	replace
368	[BUG]  [BUGGY]  while(in.peek()!=  JsonToken.STRING)  {  in.close();  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  while(in.peek()!=  JsonToken.STRING)  {  in.close();  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	while(in.peek()!=  JsonToken.STRING)  {  in.close();	          if(in.peek()    ==    JsonToken.STRING)    {    in.close();    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
369	[BUG]  [BUGGY]  Integer  in  =  in.peek();  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  Integer  in  =  in.peek();  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	Integer  in  =  in.peek();	          if(in.peek()    ==    JsonToken.STRING)    {    in.close();    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	30	None	replace
370	[BUG]  [BUGGY]  Integer  in  =  in.parseInt(JsonToken.START_INDEX);  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]        JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  Integer  in  =  in.parseInt(JsonToken.START_INDEX);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	Integer  in  =  in.parseInt(JsonToken.START_INDEX);	          if(in.peek()    ==    JsonToken.STRING)    {    in.close();    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	30	None	replace
371	[BUG]  [BUGGY]  Integer  in  =  in.readInt();  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]          JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  Integer  in  =  in.readInt();  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	Integer  in  =  in.readInt();	          if(in.peek()    ==    JsonToken.STRING)    {    in.close();    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	30	None	replace
372	[BUG]  [BUGGY]  Integer  in  =  in.parseInt(JsonToken.FIELD_NAME);  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]            JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  Integer  in  =  in.parseInt(JsonToken.FIELD_NAME);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	Integer  in  =  in.parseInt(JsonToken.FIELD_NAME);	          if(in.peek()    ==    JsonToken.STRING)    {    in.close();    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	30	None	replace
373	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+ ",  in.nextString());  [CE]  unclosed  string  literal  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+ ",  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+ ",  in.nextString());	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    in.nextString());    	non-compiled	[CE]  unclosed  string  literal	159	None	replace
374	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value: "  +  Integer.toHexString(in.nextString()),  in.nextString());  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value: "  +  Integer.toHexString(in.nextString()),  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value: "  +  Integer.toHexString(in.nextString()),  in.nextString());	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    in.nextString());    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	159	None	replace
375	[BUG]  [BUGGY]  throw  new  JsonParseException(in, "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  in.nextString());  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(in, "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException(in, "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  in.nextString());	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    in.nextString());    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	159	None	replace
376	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getKey()),  in.nextString());  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getKey()),  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getKey()),  in.nextString());	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    in.nextString());    	non-compiled	[CE]  cannot  find  symbol	159	None	replace
377	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value. "  +  Integer.toHexString(in.nextString()),  in.nextString());  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value. "  +  Integer.toHexString(in.nextString()),  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value. "  +  Integer.toHexString(in.nextString()),  in.nextString());	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    in.nextString());    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	159	None	replace
378	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value ",  in.nextString(),  in.nextString());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,String,String)  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value ",  in.nextString(),  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value ",  in.nextString(),  in.nextString());	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    in.nextString());    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,String,String)	159	None	replace
379	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value.n ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "Date  should  be  a  string  value.n ");	  throw    new    JsonParseException(   "Date    should    be    a    string    value.   ");    	compilable	  [FE]  JsonParseException  	33	2	replace
380	[BUG]  [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value.n ");  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value.n ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "Date  should  be  a  string  value.n ");	  throw    new    JsonParseException(   "Date    should    be    a    string    value.   ");    	compilable	  [FE]  JsonParseException  	33	2	replace
381	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.VALUE_NUMBER_INT)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  VALUE_NUMBER_INT  [FE]            IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()!=  JsonToken.VALUE_NUMBER_INT)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()!=  JsonToken.VALUE_NUMBER_INT)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }	  if(in.peek()!=    JsonToken.VALUE_STRING)    {    String    datePattern    =    in.readString();    return    new    Date(datePattern);    }    else    {    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol  VALUE_NUMBER_INT	147	None	replace
382	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.VALUE_NULL)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  VALUE_NULL  [FE]              IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()!=  JsonToken.VALUE_NULL)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()!=  JsonToken.VALUE_NULL)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }	  if(in.peek()!=    JsonToken.VALUE_STRING)    {    String    datePattern    =    in.readString();    return    new    Date(datePattern);    }    else    {    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol  VALUE_NULL	147	None	replace
383	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.VALUE_NUMBER)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  VALUE_NUMBER  [FE]                IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()!=  JsonToken.VALUE_NUMBER)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()!=  JsonToken.VALUE_NUMBER)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }	  if(in.peek()!=    JsonToken.VALUE_STRING)    {    String    datePattern    =    in.readString();    return    new    Date(datePattern);    }    else    {    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol  VALUE_NUMBER	147	None	replace
384	[BUG]  [BUGGY]  JsonParseException( "The  Date  should  be  a  string  value ");  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException( "The  Date  should  be  a  string  value ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException( "The  Date  should  be  a  string  value ");	  throw    new    JsonParseException(       "The    Date    should    be    a    string    value       ");    JsonParseException(       "The    Date    should    be    a    string    value       ");    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
385	[BUG]  [BUGGY]  JsonParseException( "The  Date  should  be  a  string  value. ");  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException( "The  Date  should  be  a  string  value. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException( "The  Date  should  be  a  string  value. ");	  throw    new    JsonParseException(       "The    Date    should    be    a    string    value       ");    JsonParseException(       "The    Date    should    be    a    string    value       ");    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
386	[BUG]  [BUGGY]  JsonParseException( "The  Date  should  be  a  string  value ",  in);  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException( "The  Date  should  be  a  string  value ",  in);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException( "The  Date  should  be  a  string  value ",  in);	  throw    new    JsonParseException(       "The    Date    should    be    a    string    value       ");    JsonParseException(       "The    Date    should    be    a    string    value       ");    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
387	[BUG]  [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value: "  +  in.getValue());  [CE]  cannot  find  symbol  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value: "  +  in.getValue());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "This  date  should  be  a  string  value: "  +  in.getValue());	  throw    new    JsonParseException(   "This    date    should    be    a    string    value:   "    +    in.toString());    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
388	[BUG]  [BUGGY]  throw  new  JsonTokenException( "This  date  should  be  a  string  value: "  +  in.toString());  [CE]  cannot  find  symbol  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "This  date  should  be  a  string  value: "  +  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "This  date  should  be  a  string  value: "  +  in.toString());	  throw    new    JsonParseException(   "This    date    should    be    a    string    value:   "    +    in.toString());    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
389	[BUG]  [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value: "  +  in.getMessage());  [CE]  cannot  find  symbol  [FE]        JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value: "  +  in.getMessage());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "This  date  should  be  a  string  value: "  +  in.getMessage());	  throw    new    JsonParseException(   "This    date    should    be    a    string    value:   "    +    in.toString());    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
390	[BUG]  [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value: "  +  in.getKey());  [CE]  cannot  find  symbol  [FE]          JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value: "  +  in.getKey());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "This  date  should  be  a  string  value: "  +  in.getKey());	  throw    new    JsonParseException(   "This    date    should    be    a    string    value:   "    +    in.toString());    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
391	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value: "  +  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "This  date  should  be  a  string  value: "  +  in.nextString());	  throw    new    JsonParseException(   "This    date    should    be    a    string    value:   "    +    in.toString());    	compilable	  [FE]  IllegalStateException  	93	1	replace
392	[BUG]  [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value: "  +  in.nextString());  [FE]  IllegalStateException  [FE]            JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value: "  +  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "This  date  should  be  a  string  value: "  +  in.nextString());	  throw    new    JsonParseException(   "This    date    should    be    a    string    value:   "    +    in.toString());    	compilable	  [FE]  IllegalStateException  	93	1	replace
393	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value.n ");  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value.n ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value.n ");	  JsonParseException    in    =    new    JsonParseException(   "Date    should    be    a    string    value.   ");    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	101	None	replace
394	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value.   ",  in);  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value.   ",  in);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value.   ",  in);	  JsonParseException    in    =    new    JsonParseException(   "Date    should    be    a    string    value.   ");    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	101	None	replace
395	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value.  Format: "  +  in.getClass());  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value.  Format: "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value.  Format: "  +  in.getClass());	  JsonParseException    in    =    new    JsonParseException(   "Date    should    be    a    string    value.   ");    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	101	None	replace
396	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value.  Format: "  +  in.toString());  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value.  Format: "  +  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value.  Format: "  +  in.toString());	  JsonParseException    in    =    new    JsonParseException(   "Date    should    be    a    string    value.   ");    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	101	None	replace
397	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value.  Format: "  +  in.getMessage());  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value.  Format: "  +  in.getMessage());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value.  Format: "  +  in.getMessage());	  JsonParseException    in    =    new    JsonParseException(   "Date    should    be    a    string    value.   ");    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	101	None	replace
398	[BUG]  [BUGGY]  in.peek()!=  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  [CE]  not  a  statement  [FE]        IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  in.peek()!=  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	in.peek()!=  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }	  if(in.peek()!=    JsonToken.VALUE_STRING)    {    String    datePattern    =    in.readString();    return    new    Date(datePattern);    }    	non-compiled	[CE]  not  a  statement	145	None	replace
399	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.VALUE_NULL)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  VALUE_NULL  [FE]          IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()!=  JsonToken.VALUE_NULL)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()!=  JsonToken.VALUE_NULL)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }	  if(in.peek()!=    JsonToken.VALUE_STRING)    {    String    datePattern    =    in.readString();    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol  VALUE_NULL	145	None	replace
400	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.VALUE_NUMBER)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  VALUE_NUMBER  [FE]            IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()!=  JsonToken.VALUE_NUMBER)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()!=  JsonToken.VALUE_NUMBER)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }	  if(in.peek()!=    JsonToken.VALUE_STRING)    {    String    datePattern    =    in.readString();    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol  VALUE_NUMBER	145	None	replace
401	[BUG]  [BUGGY]  in.peek()!=  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  [CE]  not  a  statement  [FE]              IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  in.peek()!=  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	in.peek()!=  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);	  if(in.peek()!=    JsonToken.VALUE_STRING)    {    String    datePattern    =    in.readString();    return    new    Date(datePattern);    }    	non-compiled	[CE]  not  a  statement	145	None	replace
402	[BUG]  [BUGGY]  JsonParseException( "Date  should  be  a  string  value ");  [CE]  cannot  find  symbol  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException( "Date  should  be  a  string  value ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException( "Date  should  be  a  string  value ");	  throw    new    JsonParseException(       "Date    should    be    a    string    value       ");    JsonParseException(       "Date    should    be    a    string    value       ");    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
403	[BUG]  [BUGGY]  JsonParseException( "Date  should  be  a  string  value. ");  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException( "Date  should  be  a  string  value. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException( "Date  should  be  a  string  value. ");	  throw    new    JsonParseException(       "Date    should    be    a    string    value       ");    JsonParseException(       "Date    should    be    a    string    value       ");    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
404	[BUG]  [BUGGY]  JsonParseException( "Date  should  be  a  string  value ",  in);  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException( "Date  should  be  a  string  value ",  in);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException( "Date  should  be  a  string  value ",  in);	  throw    new    JsonParseException(       "Date    should    be    a    string    value       ");    JsonParseException(       "Date    should    be    a    string    value       ");    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
405	[BUG]  [BUGGY]  JsonParseException( "Date  should  be  a  string  value ",  in.nextString());  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException( "Date  should  be  a  string  value ",  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException( "Date  should  be  a  string  value ",  in.nextString());	  throw    new    JsonParseException(       "Date    should    be    a    string    value       ");    JsonParseException(       "Date    should    be    a    string    value       ");    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
406	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value. ",  in.getClass());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,Class<CAP#1>)  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value. ",  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value. ",  in.getClass());	  return    new    JsonParseException(   "The    date    should    be    a    string    value   ",    in.getClass());    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,Class<CAP#1>)	15	None	replace
407	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value ",  in,  in.getClass());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader,Class<CAP#1>)  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value ",  in,  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value ",  in,  in.getClass());	  return    new    JsonParseException(   "The    date    should    be    a    string    value   ",    in.getClass());    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader,Class<CAP#1>)	15	None	replace
408	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value "  +  String.valueOf(in.getClass()));  [CE]  incompatible  types  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value "  +  String.valueOf(in.getClass()));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value "  +  String.valueOf(in.getClass()));	  return    new    JsonParseException(   "The    date    should    be    a    string    value   ",    in.getClass());    	non-compiled	[CE]  incompatible  types	15	None	replace
409	[BUG]  [BUGGY]  return  new  JsonParseException(String.format( "The  date  should  be  a  string  value ",  in.getClass()));  [CE]  incompatible  types  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException(String.format( "The  date  should  be  a  string  value ",  in.getClass()));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException(String.format( "The  date  should  be  a  string  value ",  in.getClass()));	  return    new    JsonParseException(   "The    date    should    be    a    string    value   ",    in.getClass());    	non-compiled	[CE]  incompatible  types	15	None	replace
410	[BUG]  [BUGGY]  throw  new  JsonParseException(   "This  date  should  be  a  string  value:   "  +  in.toString());  throw  new  JsonParseException( "This  date  should  be  a  string  value:   "  +  in.toString());  [CE]  unreachable  statement  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "This  date  should  be  a  string  value:   "  +  in.toString());  throw  new  JsonParseException( "This  date  should  be  a  string  value:   "  +  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "This    date    should    be    a    string    value:   "    +    in.toString());    throw  new  JsonParseException( "This  date  should  be  a  string  value:   "  +  in.toString());	  	non-compiled	[CE]  unreachable  statement	92	None	add
411	[BUG]  [BUGGY]  throw  new  JsonParseException(   "This  date  should  be  a  string  value:   "  +  in.toString());  Throw  new  JsonParseException( "This  date  should  be  a  string  value:   "  +  in.toString());  [CE]  not  a  statement  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "This  date  should  be  a  string  value:   "  +  in.toString());  Throw  new  JsonParseException( "This  date  should  be  a  string  value:   "  +  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "This    date    should    be    a    string    value:   "    +    in.toString());    Throw  new  JsonParseException( "This  date  should  be  a  string  value:   "  +  in.toString());	  	non-compiled	[CE]  not  a  statement	92	None	add
412	[BUG]  [BUGGY]  throw  new  JsonParseException(   "This  date  should  be  a  string  value:   "  +  in.toString());  JsonParseException( "This  date  should  be  a  string  value:   "  +  in.toString());  [CE]  cannot  find  symbol  [FE]        JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "This  date  should  be  a  string  value:   "  +  in.toString());  JsonParseException( "This  date  should  be  a  string  value:   "  +  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "This    date    should    be    a    string    value:   "    +    in.toString());    JsonParseException( "This  date  should  be  a  string  value:   "  +  in.toString());	  	non-compiled	[CE]  cannot  find  symbol	92	None	add
413	[BUG]  [BUGGY]  throw  new  JsonParseException(   "The  Date  should  be  a  string  value:   "  +  in.nextString());  throw  new  JsonParseException( "The  Date  should  be  a  string  value:   "  +  in.nextString());  [CE]  unreachable  statement  [FE]    IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "The  Date  should  be  a  string  value:   "  +  in.nextString());  throw  new  JsonParseException( "The  Date  should  be  a  string  value:   "  +  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "The    Date    should    be    a    string    value:   "    +    in.nextString());    throw  new  JsonParseException( "The  Date  should  be  a  string  value:   "  +  in.nextString());	  	non-compiled	[CE]  unreachable  statement	73	None	add
414	[BUG]  [BUGGY]  throw  new  JsonParseException(   "The  Date  should  be  a  string  value:   "  +  in.nextString());  Throw  new  JsonParseException( "The  Date  should  be  a  string  value:   "  +  in.nextString());  [CE]  not  a  statement  [FE]      IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "The  Date  should  be  a  string  value:   "  +  in.nextString());  Throw  new  JsonParseException( "The  Date  should  be  a  string  value:   "  +  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "The    Date    should    be    a    string    value:   "    +    in.nextString());    Throw  new  JsonParseException( "The  Date  should  be  a  string  value:   "  +  in.nextString());	  	non-compiled	[CE]  not  a  statement	73	None	add
415	[BUG]  [BUGGY]  throw  new  JsonParseException(   "The  Date  should  be  a  string  value:   "  +  in.nextString());  JsonParseException( "The  Date  should  be  a  string  value:   "  +  in.nextString());  [CE]  cannot  find  symbol  [FE]        IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "The  Date  should  be  a  string  value:   "  +  in.nextString());  JsonParseException( "The  Date  should  be  a  string  value:   "  +  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "The    Date    should    be    a    string    value:   "    +    in.nextString());    JsonParseException( "The  Date  should  be  a  string  value:   "  +  in.nextString());	  	non-compiled	[CE]  cannot  find  symbol	73	None	add
416	[BUG]  [BUGGY]  JsonTokenException  in  =  new  JsonTokenException( "The  date  should  be  a  string  value. ");  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonTokenException  in  =  new  JsonTokenException( "The  date  should  be  a  string  value. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonTokenException  in  =  new  JsonTokenException( "The  date  should  be  a  string  value. ");	  JsonTokenException    in    =    new    JsonTokenException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
417	[BUG]  [BUGGY]  JsonTokenException  in  =  new  JsonTokenException( "The  date  should  be  a  string  value ",  in);  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonTokenException  in  =  new  JsonTokenException( "The  date  should  be  a  string  value ",  in);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonTokenException  in  =  new  JsonTokenException( "The  date  should  be  a  string  value ",  in);	  JsonTokenException    in    =    new    JsonTokenException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
418	[BUG]  [BUGGY]  JsonTokenException  in  =  new  JsonTokenException( "The  date  should  be  a  string  value: ");  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonTokenException  in  =  new  JsonTokenException( "The  date  should  be  a  string  value: ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonTokenException  in  =  new  JsonTokenException( "The  date  should  be  a  string  value: ");	  JsonTokenException    in    =    new    JsonTokenException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
419	[BUG]  [BUGGY]  JsonTokenException  in  =  new  JsonTokenException( "The  date  should  be  a  string  value, ");  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonTokenException  in  =  new  JsonTokenException( "The  date  should  be  a  string  value, ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonTokenException  in  =  new  JsonTokenException( "The  date  should  be  a  string  value, ");	  JsonTokenException    in    =    new    JsonTokenException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
420	[BUG]  [BUGGY]  JsonTokenException  in  =  new  JsonTokenException( "The  date  should  be  a  string  value ",  in.nextString());  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonTokenException  in  =  new  JsonTokenException( "The  date  should  be  a  string  value ",  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonTokenException  in  =  new  JsonTokenException( "The  date  should  be  a  string  value ",  in.nextString());	  JsonTokenException    in    =    new    JsonTokenException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
421	[BUG]  [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value ",  in,  in);  [CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader,JsonReader)  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value ",  in,  in);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "This  date  should  be  a  string  value ",  in,  in);	  throw    new    JsonParseException(   "This    date    should    be    a    string    value   ",    in);    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader,JsonReader)	89	None	replace
422	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value "  +  String.valueOf(in));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "This  date  should  be  a  string  value "  +  String.valueOf(in));	  throw    new    JsonParseException(   "This    date    should    be    a    string    value   ",    in);    	compilable	  [FE]  JsonParseException  	89	2	replace
423	[BUG]  [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value "  +  String.valueOf(in));  [FE]  JsonParseException  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value "  +  String.valueOf(in));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "This  date  should  be  a  string  value "  +  String.valueOf(in));	  throw    new    JsonParseException(   "This    date    should    be    a    string    value   ",    in);    	compilable	  [FE]  JsonParseException  	89	2	replace
424	[BUG]  [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value. ",  in);  [CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader)  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value. ",  in);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "This  date  should  be  a  string  value. ",  in);	  throw    new    JsonParseException(   "This    date    should    be    a    string    value   ",    in);    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader)	89	None	replace
425	[BUG]  [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value "  +  String.valueOf(in),  in);  [CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader)  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value "  +  String.valueOf(in),  in);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "This  date  should  be  a  string  value "  +  String.valueOf(in),  in);	  throw    new    JsonParseException(   "This    date    should    be    a    string    value   ",    in);    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader)	89	None	replace
426	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getKey()));  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getKey()));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getKey()));	  JsonParseException    in    =    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.getValue()));    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	51	None	replace
427	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue()),  JSON_TYPE);  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue()),  JSON_TYPE);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue()),  JSON_TYPE);	  JsonParseException    in    =    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.getValue()));    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	51	None	replace
428	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getClass()));  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getClass()));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getClass()));	  JsonParseException    in    =    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.getValue()));    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	51	None	replace
429	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue()),  JSONToken.VALUE_STRING);  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue()),  JSONToken.VALUE_STRING);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue()),  JSONToken.VALUE_STRING);	  JsonParseException    in    =    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.getValue()));    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	51	None	replace
430	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue()),  JSONToken.VALUE_NULL);  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue()),  JSONToken.VALUE_NULL);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue()),  JSONToken.VALUE_NULL);	  JsonParseException    in    =    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.getValue()));    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	51	None	replace
431	[BUG]  [BUGGY]  JsonTokenException.throw  new  JsonTokenException( "The  date  should  be  a  string  value. ");  [CE]  <identifier>  expected  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonTokenException.throw  new  JsonTokenException( "The  date  should  be  a  string  value. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonTokenException.throw  new  JsonTokenException( "The  date  should  be  a  string  value. ");	  JsonTokenException.throw    new    JsonTokenException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  <identifier>  expected	102	None	replace
432	[BUG]  [BUGGY]  JsonTokenException.throw  new  JsonTokenException( "The  date  should  be  a  string  value ",  in);  [CE]  <identifier>  expected  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonTokenException.throw  new  JsonTokenException( "The  date  should  be  a  string  value ",  in);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonTokenException.throw  new  JsonTokenException( "The  date  should  be  a  string  value ",  in);	  JsonTokenException.throw    new    JsonTokenException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  <identifier>  expected	102	None	replace
433	[BUG]  [BUGGY]  JsonTokenException.throw  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.getClass());  [CE]  <identifier>  expected  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonTokenException.throw  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonTokenException.throw  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.getClass());	  JsonTokenException.throw    new    JsonTokenException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  <identifier>  expected	102	None	replace
434	[BUG]  [BUGGY]  JsonTokenException.throw  new  JsonTokenException( "The  date  should  be  a  string  value: ");  [CE]  <identifier>  expected  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonTokenException.throw  new  JsonTokenException( "The  date  should  be  a  string  value: ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonTokenException.throw  new  JsonTokenException( "The  date  should  be  a  string  value: ");	  JsonTokenException.throw    new    JsonTokenException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  <identifier>  expected	102	None	replace
435	[BUG]  [BUGGY]  JsonTokenException.throw  new  JsonTokenException( "Date  should  be  a  string  value ");  [CE]  <identifier>  expected  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonTokenException.throw  new  JsonTokenException( "Date  should  be  a  string  value ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonTokenException.throw  new  JsonTokenException( "Date  should  be  a  string  value ");	  JsonTokenException.throw    new    JsonTokenException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  <identifier>  expected	102	None	replace
436	[BUG]  [BUGGY]  JsonToken  t  =  this.in.readFromString(JsonToken.STRING);  [CE]  cannot  find  symbol  in  [FE]                              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  t  =  this.in.readFromString(JsonToken.STRING);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  t  =  this.in.readFromString(JsonToken.STRING);	  JsonToken    t    =    in.readFromString(JsonToken.STRING);    	non-compiled	[CE]  cannot  find  symbol  in	128	None	replace
437	[BUG]  [BUGGY]  JsonToken  t  =  in.readFromString(JsonToken.STRING,  JsonToken.FIELD_NAME);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  t  =  in.readFromString(JsonToken.STRING,  JsonToken.FIELD_NAME);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  t  =  in.readFromString(JsonToken.STRING,  JsonToken.FIELD_NAME);	  JsonToken    t    =    in.readFromString(JsonToken.STRING);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	128	None	replace
438	[BUG]  [BUGGY]  JsonToken  t  =  in.readFromString(JsonToken.STRING,  JsonToken.START_OBJECT);  [CE]  cannot  find  symbol  START_OBJECT  [FE]                                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  t  =  in.readFromString(JsonToken.STRING,  JsonToken.START_OBJECT);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  t  =  in.readFromString(JsonToken.STRING,  JsonToken.START_OBJECT);	  JsonToken    t    =    in.readFromString(JsonToken.STRING);    	non-compiled	[CE]  cannot  find  symbol  START_OBJECT	128	None	replace
439	[BUG]  [BUGGY]  JsonToken  t  =  in.readFromString(JsonToken.STRING,  JsonToken.END_OBJECT);  [CE]  cannot  find  symbol  [FE]                                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  t  =  in.readFromString(JsonToken.STRING,  JsonToken.END_OBJECT);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  t  =  in.readFromString(JsonToken.STRING,  JsonToken.END_OBJECT);	  JsonToken    t    =    in.readFromString(JsonToken.STRING);    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
440	[BUG]  [BUGGY]  JsonToken  t  =  in,  in.readFromString(JsonToken.STRING);  [CE]  ';'  expected  [FE]                                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  t  =  in,  in.readFromString(JsonToken.STRING);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  t  =  in,  in.readFromString(JsonToken.STRING);	  JsonToken    t    =    in.readFromString(JsonToken.STRING);    	non-compiled	[CE]  ';'  expected	128	None	replace
441	[BUG]  [BUGGY]  JsonToken  t  =  in.readFromString(JsonToken.STRING,  JsonToken.VALUE_NUMBER);  [CE]  cannot  find  symbol  VALUE_NUMBER  [FE]                                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  t  =  in.readFromString(JsonToken.STRING,  JsonToken.VALUE_NUMBER);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  t  =  in.readFromString(JsonToken.STRING,  JsonToken.VALUE_NUMBER);	  JsonToken    t    =    in.readFromString(JsonToken.STRING);    	non-compiled	[CE]  cannot  find  symbol  VALUE_NUMBER	128	None	replace
442	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(in);  [CE]  method  setContextClassLoader  in  class  Thread  cannot  be  applied  to  given  types;  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(in);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	Thread.currentThread().setContextClassLoader(in);	          if(in.peek()    ==    JsonToken.STRING)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  method  setContextClassLoader  in  class  Thread  cannot  be  applied  to  given  types;	21	None	replace
443	[BUG]  [BUGGY]  while(in.peek()!=  JsonToken.STRING)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  while(in.peek()!=  JsonToken.STRING)  {  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	while(in.peek()!=  JsonToken.STRING)  {	          if(in.peek()    ==    JsonToken.STRING)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
444	[BUG]  [BUGGY]  while(in.next()!=  JsonToken.STRING)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  while(in.next()!=  JsonToken.STRING)  {  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	while(in.next()!=  JsonToken.STRING)  {	          if(in.peek()    ==    JsonToken.STRING)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
445	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(this);  [CE]  method  setContextClassLoader  in  class  Thread  cannot  be  applied  to  given  types;  [FE]          JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(this);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	Thread.currentThread().setContextClassLoader(this);	          if(in.peek()    ==    JsonToken.STRING)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  method  setContextClassLoader  in  class  Thread  cannot  be  applied  to  given  types;	21	None	replace
446	[BUG]  [BUGGY]  while(in.next()  ==  JsonToken.STRING)  {  [CE]  illegal  start  of  expression  [FE]            JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  while(in.next()  ==  JsonToken.STRING)  {  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	while(in.next()  ==  JsonToken.STRING)  {	          if(in.peek()    ==    JsonToken.STRING)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
447	[BUG]  [BUGGY]  [FE]    [FE]              JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  Thread.currentThread().interrupt();  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	Thread.currentThread().interrupt();	          if(in.peek()    ==    JsonToken.STRING)    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]    	21	1	replace
448	[BUG]  [BUGGY]  Thread.currentThread().interrupt();  [FE]    [FE]              JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  Thread.currentThread().interrupt();  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	Thread.currentThread().interrupt();	          if(in.peek()    ==    JsonToken.STRING)    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]    	21	1	replace
449	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NULL,  deserialize);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NULL,  deserialize);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NULL,  deserialize);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JsonToken.VALUE_NULL);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	2	None	replace
450	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NULL);  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NULL);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NULL);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JsonToken.VALUE_NULL);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	2	None	replace
451	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  1,  JsonToken.VALUE_NULL);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  1,  JsonToken.VALUE_NULL);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  1,  JsonToken.VALUE_NULL);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JsonToken.VALUE_NULL);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	2	None	replace
452	[BUG]  [BUGGY]  throw  new  JsonParseException(in, "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NULL);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(in, "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NULL);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException(in, "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NULL);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JsonToken.VALUE_NULL);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	2	None	replace
453	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value: "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NULL);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value: "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NULL);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value: "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NULL);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JsonToken.VALUE_NULL);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	2	None	replace
454	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NULL,  dateType);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NULL,  dateType);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NULL,  dateType);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JsonToken.VALUE_NULL);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	2	None	replace
455	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  in.close();  in.close();  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	in.close();    in.close();	  	compilable	  [FE]  JsonParseException  	108	2	add
456	[BUG]  [BUGGY]  in.close();  in.close();  [FE]  JsonParseException  [FE]    IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  in.close();  in.close();  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	in.close();    in.close();	  	compilable	  [FE]  JsonParseException  	108	2	add
457	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  in.close();  if(in.peek()!=  JsonToken.STRING)  {  in.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	in.close();    if(in.peek()!=  JsonToken.STRING)  {  in.close();  }  else  {  throw  new  IllegalStateException( " ");  }	  	compilable	  [FE]  IllegalStateException  	108	1	add
458	[BUG]  [BUGGY]  in.close();  if(in.peek()!=  JsonToken.STRING)  {  in.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  in.close();  if(in.peek()!=  JsonToken.STRING)  {  in.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	in.close();    if(in.peek()!=  JsonToken.STRING)  {  in.close();  }  else  {  throw  new  IllegalStateException( " ");  }	  	compilable	  [FE]  IllegalStateException  	108	1	add
459	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  in.close();  if(in.peek()!=  JsonToken.STRING)  {  in.close();  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	in.close();    if(in.peek()!=  JsonToken.STRING)  {  in.close();  }	  	compilable	  [FE]  IllegalStateException  	108	1	add
460	[BUG]  [BUGGY]  in.close();  if(in.peek()!=  JsonToken.STRING)  {  in.close();  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  in.close();  if(in.peek()!=  JsonToken.STRING)  {  in.close();  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	in.close();    if(in.peek()!=  JsonToken.STRING)  {  in.close();  }	  	compilable	  [FE]  IllegalStateException  	108	1	add
461	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  in.close();  if(in.peek()!=  JsonToken.STRING)  {  in.close();  }  else  {  return  new  Date(in.nextString());  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	in.close();    if(in.peek()!=  JsonToken.STRING)  {  in.close();  }  else  {  return  new  Date(in.nextString());  }	  	compilable	  [FE]  IllegalStateException  	108	1	add
462	[BUG]  [BUGGY]  in.close();  if(in.peek()!=  JsonToken.STRING)  {  in.close();  }  else  {  return  new  Date(in.nextString());  }  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  in.close();  if(in.peek()!=  JsonToken.STRING)  {  in.close();  }  else  {  return  new  Date(in.nextString());  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	in.close();    if(in.peek()!=  JsonToken.STRING)  {  in.close();  }  else  {  return  new  Date(in.nextString());  }	  	compilable	  [FE]  IllegalStateException  	108	1	add
463	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  in.close();  if(in.peek()  ==  JsonToken.STRING)  {  in.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	in.close();    if(in.peek()  ==  JsonToken.STRING)  {  in.close();  }  else  {  throw  new  IllegalStateException( " ");  }	  	compilable	  [FE]  IllegalStateException  	108	1	add
464	[BUG]  [BUGGY]  in.close();  if(in.peek()  ==  JsonToken.STRING)  {  in.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  in.close();  if(in.peek()  ==  JsonToken.STRING)  {  in.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	in.close();    if(in.peek()  ==  JsonToken.STRING)  {  in.close();  }  else  {  throw  new  IllegalStateException( " ");  }	  	compilable	  [FE]  IllegalStateException  	108	1	add
465	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  in.close();  if(in.peek()  ==  JsonToken.STRING)  {  in.close();  }  else  {  return  new  Date(in.nextString());  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	in.close();    if(in.peek()  ==  JsonToken.STRING)  {  in.close();  }  else  {  return  new  Date(in.nextString());  }	  	compilable	  [FE]  IllegalStateException  	108	1	add
466	[BUG]  [BUGGY]  in.close();  if(in.peek()  ==  JsonToken.STRING)  {  in.close();  }  else  {  return  new  Date(in.nextString());  }  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  in.close();  if(in.peek()  ==  JsonToken.STRING)  {  in.close();  }  else  {  return  new  Date(in.nextString());  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	in.close();    if(in.peek()  ==  JsonToken.STRING)  {  in.close();  }  else  {  return  new  Date(in.nextString());  }	  	compilable	  [FE]  IllegalStateException  	108	1	add
467	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  in.close();  if(in.peek()  ==  JsonToken.STRING)  {  in.close();  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	in.close();    if(in.peek()  ==  JsonToken.STRING)  {  in.close();  }	  	compilable	  [FE]  IllegalStateException  	108	1	add
468	[BUG]  [BUGGY]  in.close();  if(in.peek()  ==  JsonToken.STRING)  {  in.close();  }  [FE]  IllegalStateException  [FE]                IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  in.close();  if(in.peek()  ==  JsonToken.STRING)  {  in.close();  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	in.close();    if(in.peek()  ==  JsonToken.STRING)  {  in.close();  }	  	compilable	  [FE]  IllegalStateException  	108	1	add
469	[BUG]  [BUGGY]  in.close();  if(in.peek()!=  JsonToken.STRING)  {  in.close();  }  else  {  return  new  Date(in.getTime());  }  [CE]  cannot  find  symbol  [FE]                  IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  in.close();  if(in.peek()!=  JsonToken.STRING)  {  in.close();  }  else  {  return  new  Date(in.getTime());  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	in.close();    if(in.peek()!=  JsonToken.STRING)  {  in.close();  }  else  {  return  new  Date(in.getTime());  }	  	non-compiled	[CE]  cannot  find  symbol	108	None	add
470	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.STRING,  deserialize);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.STRING,  deserialize);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.STRING,  deserialize);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JsonToken.STRING);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	6	None	replace
471	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JsonToken.STRING));  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JsonToken.STRING));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JsonToken.STRING));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JsonToken.STRING);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	6	None	replace
472	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.STRING,  SIMPLE_NAME);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.STRING,  SIMPLE_NAME);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.STRING,  SIMPLE_NAME);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JsonToken.STRING);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	6	None	replace
473	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.STRING,  localFormat);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.STRING,  localFormat);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.STRING,  localFormat);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JsonToken.STRING);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	6	None	replace
474	[BUG]  [BUGGY]  throw  new  JsonParseException(in, "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.STRING);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(in, "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.STRING);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException(in, "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.STRING);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JsonToken.STRING);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	6	None	replace
475	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value: "  +  Integer.toHexString(in.nextString()),  JsonToken.STRING);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value: "  +  Integer.toHexString(in.nextString()),  JsonToken.STRING);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value: "  +  Integer.toHexString(in.nextString()),  JsonToken.STRING);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JsonToken.STRING);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	6	None	replace
476	[BUG]  [BUGGY]  JsonParseException( "The  date  should  be  a  string  value. ");  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException( "The  date  should  be  a  string  value. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException( "The  date  should  be  a  string  value. ");	  throw    new    JsonParseException(       "The    date    should    be    a    string    value.       ");    JsonParseException(       "The    date    should    be    a    string    value.       ");    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
477	[BUG]  [BUGGY]  JsonParseException( "The  date  should  be  a  string  value.n ");  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException( "The  date  should  be  a  string  value.n ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException( "The  date  should  be  a  string  value.n ");	  throw    new    JsonParseException(       "The    date    should    be    a    string    value.       ");    JsonParseException(       "The    date    should    be    a    string    value.       ");    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
478	[BUG]  [BUGGY]  JsonParseException( "The  date  should  be  a  string  value.. ");  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException( "The  date  should  be  a  string  value.. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException( "The  date  should  be  a  string  value.. ");	  throw    new    JsonParseException(       "The    date    should    be    a    string    value.       ");    JsonParseException(       "The    date    should    be    a    string    value.       ");    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
479	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  in.nextString());  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  in.nextString());	  return    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()));    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	139	None	replace
480	[BUG]  [BUGGY]  return  new  JsonParseException(in, "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()));  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException(in, "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException(in, "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()));	  return    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()));    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	139	None	replace
481	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_STRING);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_STRING);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_STRING);	  return    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()));    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	139	None	replace
482	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NULL);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NULL);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NULL);	  return    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()));    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	139	None	replace
483	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  in.getMillis());  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  in.getMillis());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  in.getMillis());	  return    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()));    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	139	None	replace
484	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  in.localFormat);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  in.localFormat);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  in.localFormat);	  return    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()));    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	139	None	replace
485	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  in.stringValue());  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  in.stringValue());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  in.stringValue());	  return    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()));    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	139	None	replace
486	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_STRING,  deserialize);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_STRING,  deserialize);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_STRING,  deserialize);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JsonToken.VALUE_STRING);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	1	None	replace
487	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NAME);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NAME);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NAME);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JsonToken.VALUE_STRING);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	1	None	replace
488	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NAME,  JsonToken.VALUE_STRING);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NAME,  JsonToken.VALUE_STRING);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NAME,  JsonToken.VALUE_STRING);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JsonToken.VALUE_STRING);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	1	None	replace
489	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  1,  JsonToken.VALUE_STRING);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  1,  JsonToken.VALUE_STRING);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  1,  JsonToken.VALUE_STRING);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JsonToken.VALUE_STRING);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	1	None	replace
490	[BUG]  [BUGGY]  throw  new  JsonParseException(in, "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_STRING);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(in, "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_STRING);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException(in, "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_STRING);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JsonToken.VALUE_STRING);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	1	None	replace
491	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]          if(in.peek()  ==  JsonToken.STRING)  {  in.close();  }  if(in.peek()  ==  JsonToken.STRING)  {  in.close();  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	                if(in.peek()    ==    JsonToken.STRING)    {    in.close();    }    if(in.peek()  ==  JsonToken.STRING)  {  in.close();  }	  	compilable	  [FE]  JsonParseException  	29	2	add
492	[BUG]  [BUGGY]          if(in.peek()  ==  JsonToken.STRING)  {  in.close();  }  if(in.peek()  ==  JsonToken.STRING)  {  in.close();  }  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]          if(in.peek()  ==  JsonToken.STRING)  {  in.close();  }  if(in.peek()  ==  JsonToken.STRING)  {  in.close();  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	                if(in.peek()    ==    JsonToken.STRING)    {    in.close();    }    if(in.peek()  ==  JsonToken.STRING)  {  in.close();  }	  	compilable	  [FE]  JsonParseException  	29	2	add
493	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]          if(in.peek()  ==  JsonToken.STRING)  {  in.close();  }  if(in.peek()!=  JsonToken.STRING)  {  in.close();  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	                if(in.peek()    ==    JsonToken.STRING)    {    in.close();    }    if(in.peek()!=  JsonToken.STRING)  {  in.close();  }	  	compilable	  [FE]  JsonParseException  	29	2	add
494	[BUG]  [BUGGY]          if(in.peek()  ==  JsonToken.STRING)  {  in.close();  }  if(in.peek()!=  JsonToken.STRING)  {  in.close();  }  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]          if(in.peek()  ==  JsonToken.STRING)  {  in.close();  }  if(in.peek()!=  JsonToken.STRING)  {  in.close();  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	                if(in.peek()    ==    JsonToken.STRING)    {    in.close();    }    if(in.peek()!=  JsonToken.STRING)  {  in.close();  }	  	compilable	  [FE]  JsonParseException  	29	2	add
495	[BUG]  [BUGGY]          if(in.peek()  ==  JsonToken.STRING)  {  in.close();  }  if(in.peek()  >=  JsonToken.STRING)  {  in.close();  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]          if(in.peek()  ==  JsonToken.STRING)  {  in.close();  }  if(in.peek()  >=  JsonToken.STRING)  {  in.close();  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	                if(in.peek()    ==    JsonToken.STRING)    {    in.close();    }    if(in.peek()  >=  JsonToken.STRING)  {  in.close();  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	29	None	add
496	[BUG]  [BUGGY]          if(in.peek()  ==  JsonToken.STRING)  {  in.close();  }  if(in.parse()  ==  JsonToken.STRING)  {  in.close();  }  [CE]  cannot  find  symbol  [FE]          JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]          if(in.peek()  ==  JsonToken.STRING)  {  in.close();  }  if(in.parse()  ==  JsonToken.STRING)  {  in.close();  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	                if(in.peek()    ==    JsonToken.STRING)    {    in.close();    }    if(in.parse()  ==  JsonToken.STRING)  {  in.close();  }	  	non-compiled	[CE]  cannot  find  symbol	29	None	add
497	[BUG]  [BUGGY]          if(in.peek()  ==  JsonToken.STRING)  {  in.close();  }  If(in.peek()  ==  JsonToken.STRING)  {  in.close();  }  [CE]  ';'  expected  [FE]            JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]          if(in.peek()  ==  JsonToken.STRING)  {  in.close();  }  If(in.peek()  ==  JsonToken.STRING)  {  in.close();  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	                if(in.peek()    ==    JsonToken.STRING)    {    in.close();    }    If(in.peek()  ==  JsonToken.STRING)  {  in.close();  }	  	non-compiled	[CE]  ';'  expected	29	None	add
498	[BUG]  [BUGGY]          if(in.peek()  ==  JsonToken.STRING)  {  in.close();  }  if(in.close()  ==  JsonToken.STRING)  {  in.close();  }  [CE]  'void'  type  not  allowed  here  [FE]              JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]          if(in.peek()  ==  JsonToken.STRING)  {  in.close();  }  if(in.close()  ==  JsonToken.STRING)  {  in.close();  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	                if(in.peek()    ==    JsonToken.STRING)    {    in.close();    }    if(in.close()  ==  JsonToken.STRING)  {  in.close();  }	  	non-compiled	[CE]  'void'  type  not  allowed  here	29	None	add
499	[BUG]  [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value: "  +  in.getMessage());  [CE]  cannot  find  symbol  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value: "  +  in.getMessage());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "Date  should  be  a  string  value: "  +  in.getMessage());	  throw    new    JsonParseException(   "Date    should    be    a    string    value:   "    +    in.getClass());    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
500	[BUG]  [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value: "  +  in.getValue());  [CE]  cannot  find  symbol  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value: "  +  in.getValue());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "Date  should  be  a  string  value: "  +  in.getValue());	  throw    new    JsonParseException(   "Date    should    be    a    string    value:   "    +    in.getClass());    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
501	[BUG]  [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value: "  +  in.readClass());  [CE]  cannot  find  symbol  [FE]        JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value: "  +  in.readClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "Date  should  be  a  string  value: "  +  in.readClass());	  throw    new    JsonParseException(   "Date    should    be    a    string    value:   "    +    in.getClass());    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
502	[BUG]  [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value: "  +  in.getKey());  [CE]  cannot  find  symbol  [FE]          JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value: "  +  in.getKey());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "Date  should  be  a  string  value: "  +  in.getKey());	  throw    new    JsonParseException(   "Date    should    be    a    string    value:   "    +    in.getClass());    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
503	[BUG]  [BUGGY]  JsonToken  throw  new  JsonParseException( "The  date  should  be  a  string  value. ");  [CE]  not  a  statement  [FE]        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  throw  new  JsonParseException( "The  date  should  be  a  string  value. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  throw  new  JsonParseException( "The  date  should  be  a  string  value. ");	  throw    new    JsonParseException(       "The    date    should    be    a    string    value.       ");    JsonToken    throw    new    JsonParseException(   "The    date    should    be    a    string    value.       ");    	non-compiled	[CE]  not  a  statement	148	None	replace
504	[BUG]  [BUGGY]  JsonToken  throw  new  JsonParseException( "The  date  should  be  a  string  value.n ");  [CE]  not  a  statement  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  throw  new  JsonParseException( "The  date  should  be  a  string  value.n ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  throw  new  JsonParseException( "The  date  should  be  a  string  value.n ");	  throw    new    JsonParseException(       "The    date    should    be    a    string    value.       ");    JsonToken    throw    new    JsonParseException(   "The    date    should    be    a    string    value.       ");    	non-compiled	[CE]  not  a  statement	148	None	replace
505	[BUG]  [BUGGY]  throw  new  JsonParseException(   "The  Date  should  be  a  string  value:   "  +  in.toString());  throw  new  JsonParseException( "The  Date  should  be  a  string  value:   "  +  in.toString());  [CE]  unreachable  statement  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "The  Date  should  be  a  string  value:   "  +  in.toString());  throw  new  JsonParseException( "The  Date  should  be  a  string  value:   "  +  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "The    Date    should    be    a    string    value:   "    +    in.toString());    throw  new  JsonParseException( "The  Date  should  be  a  string  value:   "  +  in.toString());	  	non-compiled	[CE]  unreachable  statement	70	None	add
506	[BUG]  [BUGGY]  throw  new  JsonParseException(   "The  Date  should  be  a  string  value:   "  +  in.toString());  Throw  new  JsonParseException( "The  Date  should  be  a  string  value:   "  +  in.toString());  [CE]  not  a  statement  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "The  Date  should  be  a  string  value:   "  +  in.toString());  Throw  new  JsonParseException( "The  Date  should  be  a  string  value:   "  +  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "The    Date    should    be    a    string    value:   "    +    in.toString());    Throw  new  JsonParseException( "The  Date  should  be  a  string  value:   "  +  in.toString());	  	non-compiled	[CE]  not  a  statement	70	None	add
507	[BUG]  [BUGGY]  throw  new  JsonParseException(   "The  Date  should  be  a  string  value:   "  +  in.toString());  JsonParseException(   "The  Date  should  be  a  string  value:   "  +  in.toString());  [CE]  cannot  find  symbol  [FE]        JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "The  Date  should  be  a  string  value:   "  +  in.toString());  JsonParseException(   "The  Date  should  be  a  string  value:   "  +  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "The    Date    should    be    a    string    value:   "    +    in.toString());    JsonParseException(   "The  Date  should  be  a  string  value:   "  +  in.toString());	  	non-compiled	[CE]  cannot  find  symbol	70	None	add
508	[BUG]  [BUGGY]  String  datePattern  =  in.getString();  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  String  datePattern  =  in.getString();  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	String  datePattern  =  in.getString();	  if(in.peek()    ==    JsonToken.VALUE_STRING)    {    String    datePattern    =    in.getString();    return    new    Date(datePattern);    }    else    {    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
509	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                  IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()!=  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()!=  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }	  if(in.peek()    ==    JsonToken.VALUE_STRING)    {    String    datePattern    =    in.getString();    return    new    Date(datePattern);    }    else    {    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	111	None	replace
510	[BUG]  [BUGGY]  in.peek()  ==  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [CE]  not  a  statement  [FE]                    IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  in.peek()  ==  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	in.peek()  ==  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }	  if(in.peek()    ==    JsonToken.VALUE_STRING)    {    String    datePattern    =    in.getString();    return    new    Date(datePattern);    }    else    {    return    new    Date(datePattern);    }    	non-compiled	[CE]  not  a  statement	111	None	replace
511	[BUG]  [BUGGY]  in.peek()  ==  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  else  {  return  new  Date  [CE]  not  a  statement  [FE]                      IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  in.peek()  ==  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  else  {  return  new  Date  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	in.peek()  ==  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  else  {  return  new  Date	  if(in.peek()    ==    JsonToken.VALUE_STRING)    {    String    datePattern    =    in.getString();    return    new    Date(datePattern);    }    else    {    return    new    Date(datePattern);    }    	non-compiled	[CE]  not  a  statement	111	None	replace
512	[BUG]  [BUGGY]  in.peek()!=  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [CE]  not  a  statement  [FE]                        IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  in.peek()!=  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	in.peek()!=  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }	  if(in.peek()    ==    JsonToken.VALUE_STRING)    {    String    datePattern    =    in.getString();    return    new    Date(datePattern);    }    else    {    return    new    Date(datePattern);    }    	non-compiled	[CE]  not  a  statement	111	None	replace
513	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_NUMBER_INT)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  VALUE_NUMBER_INT  [FE]                          IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_NUMBER_INT)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()  ==  JsonToken.VALUE_NUMBER_INT)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }	  if(in.peek()    ==    JsonToken.VALUE_STRING)    {    String    datePattern    =    in.getString();    return    new    Date(datePattern);    }    else    {    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol  VALUE_NUMBER_INT	111	None	replace
514	[BUG]  [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value. ",  in.getClass());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,Class<CAP#1>)  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value. ",  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "This  date  should  be  a  string  value. ",  in.getClass());	  throw    new    JsonParseException(   "This    date    should    be    a    string    value   ",    in.getClass());    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,Class<CAP#1>)	116	None	replace
515	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value "  +  String.valueOf(in.getClass()));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "This  date  should  be  a  string  value "  +  String.valueOf(in.getClass()));	  throw    new    JsonParseException(   "This    date    should    be    a    string    value   ",    in.getClass());    	compilable	  [FE]  JsonParseException  	116	2	replace
516	[BUG]  [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value "  +  String.valueOf(in.getClass()));  [FE]  JsonParseException  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value "  +  String.valueOf(in.getClass()));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "This  date  should  be  a  string  value "  +  String.valueOf(in.getClass()));	  throw    new    JsonParseException(   "This    date    should    be    a    string    value   ",    in.getClass());    	compilable	  [FE]  JsonParseException  	116	2	replace
517	[BUG]  [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value ",  in,  in.getClass());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader,Class<CAP#1>)  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value ",  in,  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "This  date  should  be  a  string  value ",  in,  in.getClass());	  throw    new    JsonParseException(   "This    date    should    be    a    string    value   ",    in.getClass());    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader,Class<CAP#1>)	116	None	replace
518	[BUG]  [BUGGY]  JsonToken  t  =  in.readFrom(JsonToken.START_OBJECT,  JsonToken.START_ARRAY);  [CE]  cannot  find  symbol  START_OBJECT  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  t  =  in.readFrom(JsonToken.START_OBJECT,  JsonToken.START_ARRAY);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  t  =  in.readFrom(JsonToken.START_OBJECT,  JsonToken.START_ARRAY);	  JsonToken    t    =    in.readFrom(JsonToken.START_ARRAY);    	non-compiled	[CE]  cannot  find  symbol  START_OBJECT	124	None	replace
519	[BUG]  [BUGGY]  JsonToken  t  =  in.readFrom(JsonToken.START_ARRAY,  JsonToken.START_OBJECT);  [CE]  cannot  find  symbol  START_ARRAY  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  t  =  in.readFrom(JsonToken.START_ARRAY,  JsonToken.START_OBJECT);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  t  =  in.readFrom(JsonToken.START_ARRAY,  JsonToken.START_OBJECT);	  JsonToken    t    =    in.readFrom(JsonToken.START_ARRAY);    	non-compiled	[CE]  cannot  find  symbol  START_ARRAY	124	None	replace
520	[BUG]  [BUGGY]  JsonToken  t  =  in.readFrom(JsonToken.START_ARRAY,  JsonToken.END_OBJECT);  [CE]  cannot  find  symbol  START_ARRAY  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  t  =  in.readFrom(JsonToken.START_ARRAY,  JsonToken.END_OBJECT);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  t  =  in.readFrom(JsonToken.START_ARRAY,  JsonToken.END_OBJECT);	  JsonToken    t    =    in.readFrom(JsonToken.START_ARRAY);    	non-compiled	[CE]  cannot  find  symbol  START_ARRAY	124	None	replace
521	[BUG]  [BUGGY]  JsonToken  t  =  in.readFrom(JsonToken.START_ARRAY,  JsonToken.FIELD_NAME);  [CE]  cannot  find  symbol  START_ARRAY  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  t  =  in.readFrom(JsonToken.START_ARRAY,  JsonToken.FIELD_NAME);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  t  =  in.readFrom(JsonToken.START_ARRAY,  JsonToken.FIELD_NAME);	  JsonToken    t    =    in.readFrom(JsonToken.START_ARRAY);    	non-compiled	[CE]  cannot  find  symbol  START_ARRAY	124	None	replace
522	[BUG]  [BUGGY]  JsonToken  t  =  in.readFrom(JsonToken.START_ARRAY,  JsonToken.START_NAME);  [CE]  cannot  find  symbol  START_ARRAY  [FE]                              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  t  =  in.readFrom(JsonToken.START_ARRAY,  JsonToken.START_NAME);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  t  =  in.readFrom(JsonToken.START_ARRAY,  JsonToken.START_NAME);	  JsonToken    t    =    in.readFrom(JsonToken.START_ARRAY);    	non-compiled	[CE]  cannot  find  symbol  START_ARRAY	124	None	replace
523	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SIMPLE_NAME,  datePattern));  [CE]  cannot  find  symbol  datePattern  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SIMPLE_NAME,  datePattern));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SIMPLE_NAME,  datePattern));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString(),    SIMPLE_NAME));    	non-compiled	[CE]  cannot  find  symbol  datePattern	158	None	replace
524	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SIMPLE_NAME),  in.nextString());  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SIMPLE_NAME),  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SIMPLE_NAME),  in.nextString());	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString(),    SIMPLE_NAME));    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	158	None	replace
525	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value: "  +  Integer.toHexString(in.nextString(),  SIMPLE_NAME));  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value: "  +  Integer.toHexString(in.nextString(),  SIMPLE_NAME));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value: "  +  Integer.toHexString(in.nextString(),  SIMPLE_NAME));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString(),    SIMPLE_NAME));    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	158	None	replace
526	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SIMPLE_NAME,  dateType));  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SIMPLE_NAME,  dateType));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SIMPLE_NAME,  dateType));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString(),    SIMPLE_NAME));    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	158	None	replace
527	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SIMPLE_NAME),  localFormat);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SIMPLE_NAME),  localFormat);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SIMPLE_NAME),  localFormat);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString(),    SIMPLE_NAME));    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	158	None	replace
528	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SIMPLE_NAME),  eventPattern);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SIMPLE_NAME),  eventPattern);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SIMPLE_NAME),  eventPattern);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString(),    SIMPLE_NAME));    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	158	None	replace
529	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SIMPLE_NAME),  JSONToken.VALUE_STRING);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SIMPLE_NAME),  JSONToken.VALUE_STRING);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SIMPLE_NAME),  JSONToken.VALUE_STRING);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString(),    SIMPLE_NAME));    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	158	None	replace
530	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value. ",  in.toString());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,String)  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value. ",  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value. ",  in.toString());	  return    new    JsonParseException(   "The    date    should    be    a    string    value   ",    in.toString());    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,String)	140	None	replace
531	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value "  +  String.valueOf(in.toString()));  [CE]  incompatible  types  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value "  +  String.valueOf(in.toString()));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value "  +  String.valueOf(in.toString()));	  return    new    JsonParseException(   "The    date    should    be    a    string    value   ",    in.toString());    	non-compiled	[CE]  incompatible  types	140	None	replace
532	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value "+Integer.toHexString(in.toString()));  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value "+Integer.toHexString(in.toString()));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value "+Integer.toHexString(in.toString()));	  return    new    JsonParseException(   "The    date    should    be    a    string    value   ",    in.toString());    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	140	None	replace
533	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value "  + ",  in.toString());  [CE]  unclosed  string  literal  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value "  + ",  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value "  + ",  in.toString());	  return    new    JsonParseException(   "The    date    should    be    a    string    value   ",    in.toString());    	non-compiled	[CE]  unclosed  string  literal	140	None	replace
534	[BUG]  [BUGGY]  JsonToken  t  =  this.in.readFromString();  [CE]  cannot  find  symbol  in  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  t  =  this.in.readFromString();  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  t  =  this.in.readFromString();	  JsonToken    t    =    in.readFromString();    	non-compiled	[CE]  cannot  find  symbol  in	126	None	replace
535	[BUG]  [BUGGY]  JsonToken  t  =  in,  in.readFromString();  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  t  =  in,  in.readFromString();  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  t  =  in,  in.readFromString();	  JsonToken    t    =    in.readFromString();    	non-compiled	[CE]  ';'  expected	126	None	replace
536	[BUG]  [BUGGY]  JsonToken  t  =  in.readFromString(in.nextString());  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  t  =  in.readFromString(in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  t  =  in.readFromString(in.nextString());	  JsonToken    t    =    in.readFromString();    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
537	[BUG]  [BUGGY]  JsonToken  t  =  out.readFromString();  [CE]  cannot  find  symbol  out  [FE]                                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  t  =  out.readFromString();  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  t  =  out.readFromString();	  JsonToken    t    =    in.readFromString();    	non-compiled	[CE]  cannot  find  symbol  out	126	None	replace
538	[BUG]  [BUGGY]  JsonToken  t  =  is.readFromString();  [CE]  cannot  find  symbol  is  [FE]                                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  t  =  is.readFromString();  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  t  =  is.readFromString();	  JsonToken    t    =    in.readFromString();    	non-compiled	[CE]  cannot  find  symbol  is	126	None	replace
539	[BUG]  [BUGGY]  JsonToken  t  =  as.readFromString();  [CE]  cannot  find  symbol  as  [FE]                                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  t  =  as.readFromString();  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  t  =  as.readFromString();	  JsonToken    t    =    in.readFromString();    	non-compiled	[CE]  cannot  find  symbol  as	126	None	replace
540	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  throw  new  IllegalArgumentException(   "   ");  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  IllegalArgumentException(   "   ");  throw  new  IllegalArgumentException(   "   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    IllegalArgumentException(   "   ");    throw  new  IllegalArgumentException(   "   ");	  	non-compiled	[CE]  unreachable  statement	75	None	add
541	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throw  new  IllegalArgumentException(   "   ");  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throw  new  IllegalArgumentException(   "   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    IllegalArgumentException(   "   ");    Throw  new  IllegalArgumentException(   "   ");	  	non-compiled	[CE]  not  a  statement	75	None	add
542	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  JsonToken  throw  new  IllegalArgumentException( "   ");  [CE]  not  a  statement  [FE]        IllegalArgumentException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  IllegalArgumentException(   "   ");  JsonToken  throw  new  IllegalArgumentException( "   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    IllegalArgumentException(   "   ");    JsonToken  throw  new  IllegalArgumentException( "   ");	  	non-compiled	[CE]  not  a  statement	75	None	add
543	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  throw  new  IllegalArgumentException( ",   ");  [CE]  unreachable  statement  [FE]          IllegalArgumentException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  IllegalArgumentException(   "   ");  throw  new  IllegalArgumentException( ",   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    IllegalArgumentException(   "   ");    throw  new  IllegalArgumentException( ",   ");	  	non-compiled	[CE]  unreachable  statement	75	None	add
544	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value: "  +  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "Date  should  be  a  string  value: "  +  in.nextString());	  throw    new    JsonParseException(   "Date    should    be    a    string    value:   "    +    in.toString());    	compilable	  [FE]  IllegalStateException  	40	1	replace
545	[BUG]  [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value: "  +  in.nextString());  [FE]  IllegalStateException  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value: "  +  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "Date  should  be  a  string  value: "  +  in.nextString());	  throw    new    JsonParseException(   "Date    should    be    a    string    value:   "    +    in.toString());    	compilable	  [FE]  IllegalStateException  	40	1	replace
546	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Date  should  be  a  string  value: "  +  in.toString());  [CE]  cannot  find  symbol  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "Date  should  be  a  string  value: "  +  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Date  should  be  a  string  value: "  +  in.toString());	  throw    new    JsonParseException(   "Date    should    be    a    string    value:   "    +    in.toString());    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
547	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  Date  should  be  a  string  value ",  in);  [CE]  cannot  find  symbol  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "The  Date  should  be  a  string  value ",  in);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  Date  should  be  a  string  value ",  in);	  throw    new    JsonTokenException(   "The    Date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
548	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  Date  should  be  a  string  value: "  +  in.getClass());  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "The  Date  should  be  a  string  value: "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  Date  should  be  a  string  value: "  +  in.getClass());	  throw    new    JsonTokenException(   "The    Date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
549	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  Date  should  be  a  string  value ",  in.nextString());  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "The  Date  should  be  a  string  value ",  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  Date  should  be  a  string  value ",  in.nextString());	  throw    new    JsonTokenException(   "The    Date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
550	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  Date  should  be  a  string  value: "  +  in.nextString());  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "The  Date  should  be  a  string  value: "  +  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  Date  should  be  a  string  value: "  +  in.nextString());	  throw    new    JsonTokenException(   "The    Date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
551	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  Date  should  be  a  string  value: "  +  in.toString());  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "The  Date  should  be  a  string  value: "  +  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  Date  should  be  a  string  value: "  +  in.toString());	  throw    new    JsonTokenException(   "The    Date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
552	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value ",  in,  in);  [CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader,JsonReader)  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value ",  in,  in);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  Date  should  be  a  string  value ",  in,  in);	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value   ",    in);    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader,JsonReader)	72	None	replace
553	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value. ",  in);  [CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader)  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value. ",  in);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  Date  should  be  a  string  value. ",  in);	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value   ",    in);    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader)	72	None	replace
554	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value "  +  String.valueOf(in));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "The  Date  should  be  a  string  value "  +  String.valueOf(in));	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value   ",    in);    	compilable	  [FE]  JsonParseException  	72	2	replace
555	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value "  +  String.valueOf(in));  [FE]  JsonParseException  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value "  +  String.valueOf(in));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  Date  should  be  a  string  value "  +  String.valueOf(in));	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value   ",    in);    	compilable	  [FE]  JsonParseException  	72	2	replace
556	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value "  +  String.valueOf(in),  in);  [CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader)  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value "  +  String.valueOf(in),  in);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  Date  should  be  a  string  value "  +  String.valueOf(in),  in);	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value   ",    in);    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader)	72	None	replace
557	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.getMessage());  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.getMessage());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.getMessage());	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value   ",    in);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
558	[BUG]  [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value: "  +  in.toString());  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value: "  +  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonDescriptorException( "The  date  should  be  a  string  value: "  +  in.toString());	  throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value:   "    +    in.getClass());    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
559	[BUG]  [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value: "  +  in,  in.getClass());  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value: "  +  in,  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonDescriptorException( "The  date  should  be  a  string  value: "  +  in,  in.getClass());	  throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value:   "    +    in.getClass());    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
560	[BUG]  [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value: "  +  in.nextString());  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value: "  +  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonDescriptorException( "The  date  should  be  a  string  value: "  +  in.nextString());	  throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value:   "    +    in.getClass());    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
561	[BUG]  [BUGGY]  JsonDescriptorException( "The  date  should  be  a  string  value: "  +  in.getClass());  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonDescriptorException( "The  date  should  be  a  string  value: "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonDescriptorException( "The  date  should  be  a  string  value: "  +  in.getClass());	  throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value:   "    +    in.getClass());    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
562	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.getValue());  [CE]  cannot  find  symbol  [FE]    IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.getValue());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.getValue());	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value:   "    +    in.nextString());    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
563	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.getKey());  [CE]  cannot  find  symbol  [FE]      IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.getKey());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.getKey());	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value:   "    +    in.nextString());    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
564	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.getPeek());  [CE]  cannot  find  symbol  [FE]        IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.getPeek());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.getPeek());	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value:   "    +    in.nextString());    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
565	[BUG]  [BUGGY]  Throw  new  JsonParseException( "The  date  should  be  a  string  value. ");  [CE]  not  a  statement  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  Throw  new  JsonParseException( "The  date  should  be  a  string  value. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	Throw  new  JsonParseException( "The  date  should  be  a  string  value. ");	  throw    new    JsonParseException(       "The    date    should    be    a    string    value.       ");    Throw    new    JsonParseException(   "The    date    should    be    a    string    value.       ");    	non-compiled	[CE]  not  a  statement	9	None	replace
566	[BUG]  [BUGGY]  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.nextString());  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonDescriptorException( "The  date  should  be  a  string  value ",  in.nextString());	  JsonDescriptorException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
567	[BUG]  [BUGGY]  JsonDescriptorException( "The  date  should  be  a  string  value ",  in);  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonDescriptorException( "The  date  should  be  a  string  value ",  in);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonDescriptorException( "The  date  should  be  a  string  value ",  in);	  JsonDescriptorException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
568	[BUG]  [BUGGY]  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.getClass());  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonDescriptorException( "The  date  should  be  a  string  value ",  in.getClass());	  JsonDescriptorException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
569	[BUG]  [BUGGY]  JsonDescriptorException( "The  date  should  be  a  string  value: "  +  in.toString());  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonDescriptorException( "The  date  should  be  a  string  value: "  +  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonDescriptorException( "The  date  should  be  a  string  value: "  +  in.toString());	  JsonDescriptorException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
570	[BUG]  [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.n   ");  throw  new  JsonParseException(   "The  date  should  be  a  string  value.n   ");  [CE]  unreachable  statement  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.n   ");  throw  new  JsonParseException(   "The  date  should  be  a  string  value.n   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "The    date    should    be    a    string    value.n   ");    throw  new  JsonParseException(   "The  date  should  be  a  string  value.n   ");	  	non-compiled	[CE]  unreachable  statement	42	None	add
571	[BUG]  [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.n   ");  JsonParseException(   "The  date  should  be  a  string  value.n   ");  [CE]  cannot  find  symbol  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.n   ");  JsonParseException(   "The  date  should  be  a  string  value.n   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "The    date    should    be    a    string    value.n   ");    JsonParseException(   "The  date  should  be  a  string  value.n   ");	  	non-compiled	[CE]  cannot  find  symbol	42	None	add
572	[BUG]  [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.n   ");  Throw  new  JsonParseException( "The  date  should  be  a  string  value.n   ");  [CE]  not  a  statement  [FE]        JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.n   ");  Throw  new  JsonParseException( "The  date  should  be  a  string  value.n   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "The    date    should    be    a    string    value.n   ");    Throw  new  JsonParseException( "The  date  should  be  a  string  value.n   ");	  	non-compiled	[CE]  not  a  statement	42	None	add
573	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value,  Please  check  that  this  value  is  not  valid. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "The  date  should  be  a  string  value,  Please  check  that  this  value  is  not  valid. ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Please    check    that    this    value    is    not    valid.   ");    	compilable	  [FE]  JsonParseException  	49	2	replace
574	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value,  Please  check  that  this  value  is  not  valid. ");  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value,  Please  check  that  this  value  is  not  valid. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value,  Please  check  that  this  value  is  not  valid. ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Please    check    that    this    value    is    not    valid.   ");    	compilable	  [FE]  JsonParseException  	49	2	replace
575	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  this  value  is  not  valid. ");  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  this  value  is  not  valid. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  this  value  is  not  valid. ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Please    check    that    this    value    is    not    valid.   ");    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	49	None	replace
576	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]        JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value,  please  check  that  this  value  is  not  valid. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "The  date  should  be  a  string  value,  please  check  that  this  value  is  not  valid. ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Please    check    that    this    value    is    not    valid.   ");    	compilable	  [FE]  JsonParseException  	49	2	replace
577	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value,  please  check  that  this  value  is  not  valid. ");  [FE]  JsonParseException  [FE]        JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value,  please  check  that  this  value  is  not  valid. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value,  please  check  that  this  value  is  not  valid. ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Please    check    that    this    value    is    not    valid.   ");    	compilable	  [FE]  JsonParseException  	49	2	replace
578	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value.  Please  check  that  this  value  is  not  valid. ");  [CE]  cannot  find  symbol  [FE]          JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value.  Please  check  that  this  value  is  not  valid. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  date  should  be  a  string  value.  Please  check  that  this  value  is  not  valid. ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Please    check    that    this    value    is    not    valid.   ");    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
579	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value "  +  String.valueOf(in));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "Date  should  be  a  string  value "  +  String.valueOf(in));	  throw    new    JsonParseException(   "Date    should    be    a    string    value   ",    in);    	compilable	  [FE]  JsonParseException  	38	2	replace
580	[BUG]  [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value "  +  String.valueOf(in));  [FE]  JsonParseException  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value "  +  String.valueOf(in));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "Date  should  be  a  string  value "  +  String.valueOf(in));	  throw    new    JsonParseException(   "Date    should    be    a    string    value   ",    in);    	compilable	  [FE]  JsonParseException  	38	2	replace
581	[BUG]  [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value ",  in,  in);  [CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader,JsonReader)  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value ",  in,  in);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "Date  should  be  a  string  value ",  in,  in);	  throw    new    JsonParseException(   "Date    should    be    a    string    value   ",    in);    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader,JsonReader)	38	None	replace
582	[BUG]  [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value. ",  in);  [CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader)  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value. ",  in);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "Date  should  be  a  string  value. ",  in);	  throw    new    JsonParseException(   "Date    should    be    a    string    value   ",    in);    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader)	38	None	replace
583	[BUG]  [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value "  +  String.valueOf(in),  in);  [CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader)  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value "  +  String.valueOf(in),  in);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "Date  should  be  a  string  value "  +  String.valueOf(in),  in);	  throw    new    JsonParseException(   "Date    should    be    a    string    value   ",    in);    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader)	38	None	replace
584	[BUG]  [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value "  + ",  in);  [CE]  unclosed  string  literal  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value "  + ",  in);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "Date  should  be  a  string  value "  + ",  in);	  throw    new    JsonParseException(   "Date    should    be    a    string    value   ",    in);    	non-compiled	[CE]  unclosed  string  literal	38	None	replace
585	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "This  date  should  be  a  string  value. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	new  JsonParseException( "This  date  should  be  a  string  value. ");	  new    JsonParseException(   "This    date    should    be    a    string    value   ");    	compilable	  [FE]  IllegalStateException  	118	1	replace
586	[BUG]  [BUGGY]  new  JsonParseException( "This  date  should  be  a  string  value. ");  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "This  date  should  be  a  string  value. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonParseException( "This  date  should  be  a  string  value. ");	  new    JsonParseException(   "This    date    should    be    a    string    value   ");    	compilable	  [FE]  IllegalStateException  	118	1	replace
587	[BUG]  [BUGGY]  new  JsonParseException( "This  date  should  be  a  string  value ",  in);  [CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader)  [FE]      IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "This  date  should  be  a  string  value ",  in);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonParseException( "This  date  should  be  a  string  value ",  in);	  new    JsonParseException(   "This    date    should    be    a    string    value   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader)	118	None	replace
588	[BUG]  [BUGGY]  new  JsonParseException( "This  date  should  be  a  string  value ",  in.nextString());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,String)  [FE]        IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "This  date  should  be  a  string  value ",  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonParseException( "This  date  should  be  a  string  value ",  in.nextString());	  new    JsonParseException(   "This    date    should    be    a    string    value   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,String)	118	None	replace
589	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "This  date  should  be  a  string  value: "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	new  JsonParseException( "This  date  should  be  a  string  value: "  +  in.getClass());	  new    JsonParseException(   "This    date    should    be    a    string    value   ");    	compilable	  [FE]  IllegalStateException  	118	1	replace
590	[BUG]  [BUGGY]  new  JsonParseException( "This  date  should  be  a  string  value: "  +  in.getClass());  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "This  date  should  be  a  string  value: "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonParseException( "This  date  should  be  a  string  value: "  +  in.getClass());	  new    JsonParseException(   "This    date    should    be    a    string    value   ");    	compilable	  [FE]  IllegalStateException  	118	1	replace
591	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "This  date  should  be  a  string  value: "  +  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	new  JsonParseException( "This  date  should  be  a  string  value: "  +  in.toString());	  new    JsonParseException(   "This    date    should    be    a    string    value   ");    	compilable	  [FE]  IllegalStateException  	118	1	replace
592	[BUG]  [BUGGY]  new  JsonParseException( "This  date  should  be  a  string  value: "  +  in.toString());  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "This  date  should  be  a  string  value: "  +  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonParseException( "This  date  should  be  a  string  value: "  +  in.toString());	  new    JsonParseException(   "This    date    should    be    a    string    value   ");    	compilable	  [FE]  IllegalStateException  	118	1	replace
593	[BUG]  [BUGGY]  new  JsonParseException( "This  date  should  be  a  string  value ",  in.getClass());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,Class<CAP#1>)  [FE]              IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "This  date  should  be  a  string  value ",  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonParseException( "This  date  should  be  a  string  value ",  in.getClass());	  new    JsonParseException(   "This    date    should    be    a    string    value   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,Class<CAP#1>)	118	None	replace
594	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIOException( " ");  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  aughtExceptionHandler.throwAsIOException( " ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	aughtExceptionHandler.throwAsIOException( " ");	          if(in.peek()    ==    JsonToken.STRING)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	23	None	replace
595	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "The  Date  should  be  a  string  value. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	new  JsonParseException( "The  Date  should  be  a  string  value. ");	  new    JsonParseException(   "The    Date    should    be    a    string    value   ");    	compilable	  [FE]  IllegalStateException  	137	1	replace
596	[BUG]  [BUGGY]  new  JsonParseException( "The  Date  should  be  a  string  value. ");  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "The  Date  should  be  a  string  value. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonParseException( "The  Date  should  be  a  string  value. ");	  new    JsonParseException(   "The    Date    should    be    a    string    value   ");    	compilable	  [FE]  IllegalStateException  	137	1	replace
597	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.getClass());	  new    JsonParseException(   "The    Date    should    be    a    string    value   ");    	compilable	  [FE]  IllegalStateException  	137	1	replace
598	[BUG]  [BUGGY]  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.getClass());  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.getClass());	  new    JsonParseException(   "The    Date    should    be    a    string    value   ");    	compilable	  [FE]  IllegalStateException  	137	1	replace
599	[BUG]  [BUGGY]  new  JsonParseException( "The  Date  should  be  a  string  value ",  in);  [CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader)  [FE]        IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "The  Date  should  be  a  string  value ",  in);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonParseException( "The  Date  should  be  a  string  value ",  in);	  new    JsonParseException(   "The    Date    should    be    a    string    value   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader)	137	None	replace
600	[BUG]  [BUGGY]  new  JsonParseException( "The  Date  should  be  a  string  value ",  in.nextString());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,String)  [FE]          IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "The  Date  should  be  a  string  value ",  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonParseException( "The  Date  should  be  a  string  value ",  in.nextString());	  new    JsonParseException(   "The    Date    should    be    a    string    value   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,String)	137	None	replace
601	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.toString());	  new    JsonParseException(   "The    Date    should    be    a    string    value   ");    	compilable	  [FE]  IllegalStateException  	137	1	replace
602	[BUG]  [BUGGY]  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.toString());  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.toString());	  new    JsonParseException(   "The    Date    should    be    a    string    value   ");    	compilable	  [FE]  IllegalStateException  	137	1	replace
603	[BUG]  [BUGGY]  new  JsonParseException( "The  Date  should  be  a  string  value ",  in.getClass());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,Class<CAP#1>)  [FE]              IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "The  Date  should  be  a  string  value ",  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonParseException( "The  Date  should  be  a  string  value ",  in.getClass());	  new    JsonParseException(   "The    Date    should    be    a    string    value   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,Class<CAP#1>)	137	None	replace
604	[BUG]  [BUGGY]  Throw  new  JsonDescriptorException( "The  date  should  be  a  string  value. ");  [CE]  not  a  statement  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  Throw  new  JsonDescriptorException( "The  date  should  be  a  string  value. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	Throw  new  JsonDescriptorException( "The  date  should  be  a  string  value. ");	  Throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  not  a  statement	114	None	replace
605	[BUG]  [BUGGY]  Throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in);  [CE]  not  a  statement  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  Throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	Throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in);	  Throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  not  a  statement	114	None	replace
606	[BUG]  [BUGGY]  Throw  new  JsonDescriptorException( "The  date  should  be  a  string  value: "  +  in.getClass());  [CE]  not  a  statement  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  Throw  new  JsonDescriptorException( "The  date  should  be  a  string  value: "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	Throw  new  JsonDescriptorException( "The  date  should  be  a  string  value: "  +  in.getClass());	  Throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  not  a  statement	114	None	replace
607	[BUG]  [BUGGY]  Throw  new  JsonDescriptorException( "The  date  should  be  a  string  value: "  +  in.toString());  [CE]  not  a  statement  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  Throw  new  JsonDescriptorException( "The  date  should  be  a  string  value: "  +  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	Throw  new  JsonDescriptorException( "The  date  should  be  a  string  value: "  +  in.toString());	  Throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  not  a  statement	114	None	replace
608	[BUG]  [BUGGY]  Throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.getClass());  [CE]  not  a  statement  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  Throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	Throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.getClass());	  Throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  not  a  statement	114	None	replace
609	[BUG]  [BUGGY]  Throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.nextString());  [CE]  not  a  statement  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  Throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	Throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.nextString());	  Throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  not  a  statement	114	None	replace
610	[BUG]  [BUGGY]  throw  new  JsonParseException(   "The  Date  should  be  a  string  value:   "  +  in.getClass());  throw  new  JsonParseException( "The  Date  should  be  a  string  value:   "  +  in.getClass());  [CE]  unreachable  statement  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "The  Date  should  be  a  string  value:   "  +  in.getClass());  throw  new  JsonParseException( "The  Date  should  be  a  string  value:   "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "The    Date    should    be    a    string    value:   "    +    in.getClass());    throw  new  JsonParseException( "The  Date  should  be  a  string  value:   "  +  in.getClass());	  	non-compiled	[CE]  unreachable  statement	68	None	add
611	[BUG]  [BUGGY]  throw  new  JsonParseException(   "The  Date  should  be  a  string  value:   "  +  in.getClass());  Throw  new  JsonParseException( "The  Date  should  be  a  string  value:   "  +  in.getClass());  [CE]  not  a  statement  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "The  Date  should  be  a  string  value:   "  +  in.getClass());  Throw  new  JsonParseException( "The  Date  should  be  a  string  value:   "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "The    Date    should    be    a    string    value:   "    +    in.getClass());    Throw  new  JsonParseException( "The  Date  should  be  a  string  value:   "  +  in.getClass());	  	non-compiled	[CE]  not  a  statement	68	None	add
612	[BUG]  [BUGGY]  throw  new  JsonParseException(   "The  Date  should  be  a  string  value:   "  +  in.getClass());  JsonParseException(   "The  Date  should  be  a  string  value:   "  +  in.getClass());  [CE]  cannot  find  symbol  [FE]        JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "The  Date  should  be  a  string  value:   "  +  in.getClass());  JsonParseException(   "The  Date  should  be  a  string  value:   "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "The    Date    should    be    a    string    value:   "    +    in.getClass());    JsonParseException(   "The  Date  should  be  a  string  value:   "  +  in.getClass());	  	non-compiled	[CE]  cannot  find  symbol	68	None	add
613	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in,  in.getClass());  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in,  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in,  in.getClass());	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value:   "    +    in.getClass());    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
614	[BUG]  [BUGGY]  Throwables.throw  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.getClass());  [CE]  <identifier>  expected  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  Throwables.throw  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	Throwables.throw  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.getClass());	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value:   "    +    in.getClass());    	non-compiled	[CE]  <identifier>  expected	96	None	replace
615	[BUG]  [BUGGY]  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.getClass());  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonTokenException( "The  date  should  be  a  string  value: "  +  in.getClass());	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value:   "    +    in.getClass());    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
616	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value. ",  in.nextString());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,String)  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value. ",  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value. ",  in.nextString());	  return    new    JsonParseException(   "The    date    should    be    a    string    value   ",    in.nextString());    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,String)	13	None	replace
617	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value "  + ",  in.nextString());  [CE]  unclosed  string  literal  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value "  + ",  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value "  + ",  in.nextString());	  return    new    JsonParseException(   "The    date    should    be    a    string    value   ",    in.nextString());    	non-compiled	[CE]  unclosed  string  literal	13	None	replace
618	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value ",  in.getValue());  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value ",  in.getValue());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value ",  in.getValue());	  return    new    JsonParseException(   "The    date    should    be    a    string    value   ",    in.nextString());    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
619	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value ",  in.getKey());  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value ",  in.getKey());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value ",  in.getKey());	  return    new    JsonParseException(   "The    date    should    be    a    string    value   ",    in.nextString());    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
620	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NUMBER_INT,  deserialize);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NUMBER_INT,  deserialize);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NUMBER_INT,  deserialize);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JsonToken.VALUE_NUMBER_INT);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	7	None	replace
621	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NUMBER_INT);  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NUMBER_INT);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NUMBER_INT);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JsonToken.VALUE_NUMBER_INT);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	7	None	replace
622	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NUMBER_INT,  SIMPLE_NAME);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NUMBER_INT,  SIMPLE_NAME);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NUMBER_INT,  SIMPLE_NAME);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JsonToken.VALUE_NUMBER_INT);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	7	None	replace
623	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NUMBER_INT,  localFormat);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NUMBER_INT,  localFormat);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NUMBER_INT,  localFormat);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JsonToken.VALUE_NUMBER_INT);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	7	None	replace
624	[BUG]  [BUGGY]  throw  new  JsonParseException(in, "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NUMBER_INT);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(in, "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NUMBER_INT);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException(in, "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NUMBER_INT);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JsonToken.VALUE_NUMBER_INT);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	7	None	replace
625	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  1,  JsonToken.VALUE_NUMBER_INT);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  1,  JsonToken.VALUE_NUMBER_INT);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  1,  JsonToken.VALUE_NUMBER_INT);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JsonToken.VALUE_NUMBER_INT);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	7	None	replace
626	[BUG]  [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value: "  +  in.readClass());  [CE]  cannot  find  symbol  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value: "  +  in.readClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "This  date  should  be  a  string  value: "  +  in.readClass());	  throw    new    JsonParseException(   "This    date    should    be    a    string    value:   "    +    in.getClass());    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
627	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "This  date  should  be  a  string  value. ");  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "This  date  should  be  a  string  value. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "This  date  should  be  a  string  value. ");	  JsonParseException    in    =    new    JsonParseException(   "This    date    should    be    a    string    value   ");    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	115	None	replace
628	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "This  date  should  be  a  string  value ",  in);  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "This  date  should  be  a  string  value ",  in);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "This  date  should  be  a  string  value ",  in);	  JsonParseException    in    =    new    JsonParseException(   "This    date    should    be    a    string    value   ");    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	115	None	replace
629	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "This  date  should  be  a  string  value, ");  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "This  date  should  be  a  string  value, ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "This  date  should  be  a  string  value, ");	  JsonParseException    in    =    new    JsonParseException(   "This    date    should    be    a    string    value   ");    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	115	None	replace
630	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value ");  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value ");	  JsonParseException    in    =    new    JsonParseException(   "This    date    should    be    a    string    value   ");    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	115	None	replace
631	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "This  date  should  be  a  string  value: "  +  in.getClass());  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "This  date  should  be  a  string  value: "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "This  date  should  be  a  string  value: "  +  in.getClass());	  JsonParseException    in    =    new    JsonParseException(   "This    date    should    be    a    string    value   ");    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	115	None	replace
632	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "This  date  should  be  a  string  value: "  +  in.toString());  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "This  date  should  be  a  string  value: "  +  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "This  date  should  be  a  string  value: "  +  in.toString());	  JsonParseException    in    =    new    JsonParseException(   "This    date    should    be    a    string    value   ");    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	115	None	replace
633	[BUG]  [BUGGY]  JsonTokenException  in  =  new  JsonTokenException( "Unexpected  string: "  +  in.getClass());  [CE]  cannot  find  symbol  [FE]                                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonTokenException  in  =  new  JsonTokenException( "Unexpected  string: "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonTokenException  in  =  new  JsonTokenException( "Unexpected  string: "  +  in.getClass());	  throw    new    JsonTokenException(   "Unexpected    string:   "    +    in.getClass());    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
634	[BUG]  [BUGGY]  Throwables.throw  new  JsonTokenException( "Unexpected  string: "  +  in.getClass());  [CE]  <identifier>  expected  [FE]                                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  Throwables.throw  new  JsonTokenException( "Unexpected  string: "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	Throwables.throw  new  JsonTokenException( "Unexpected  string: "  +  in.getClass());	  throw    new    JsonTokenException(   "Unexpected    string:   "    +    in.getClass());    	non-compiled	[CE]  <identifier>  expected	81	None	replace
635	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Unexpected  string: "  +  in,  in.getClass());  [CE]  cannot  find  symbol  [FE]                                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "Unexpected  string: "  +  in,  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Unexpected  string: "  +  in,  in.getClass());	  throw    new    JsonTokenException(   "Unexpected    string:   "    +    in.getClass());    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
636	[BUG]  [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value. ",  in.getClass());  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value. ",  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonDescriptorException( "The  date  should  be  a  string  value. ",  in.getClass());	  throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value   ",    in.getClass());    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
637	[BUG]  [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ", "Unknown  class: "  +  in.getClass());  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ", "Unknown  class: "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ", "Unknown  class: "  +  in.getClass());	  throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value   ",    in.getClass());    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
638	[BUG]  [BUGGY]  in.peek()  ==  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  [CE]  not  a  statement  [FE]          IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  in.peek()  ==  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	in.peek()  ==  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }	  if(in.peek()    ==    JsonToken.VALUE_STRING)    {    String    datePattern    =    in.getString();    return    new    Date(datePattern);    }    	non-compiled	[CE]  not  a  statement	107	None	replace
639	[BUG]  [BUGGY]  in.peek()!=  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  [CE]  not  a  statement  [FE]            IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  in.peek()!=  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	in.peek()!=  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }	  if(in.peek()    ==    JsonToken.VALUE_STRING)    {    String    datePattern    =    in.getString();    return    new    Date(datePattern);    }    	non-compiled	[CE]  not  a  statement	107	None	replace
640	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_NUMBER_INT)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  VALUE_NUMBER_INT  [FE]              IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_NUMBER_INT)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()  ==  JsonToken.VALUE_NUMBER_INT)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }	  if(in.peek()    ==    JsonToken.VALUE_STRING)    {    String    datePattern    =    in.getString();    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol  VALUE_NUMBER_INT	107	None	replace
641	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_NULL)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  VALUE_NULL  [FE]                IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_NULL)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()  ==  JsonToken.VALUE_NULL)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }	  if(in.peek()    ==    JsonToken.VALUE_STRING)    {    String    datePattern    =    in.getString();    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol  VALUE_NULL	107	None	replace
642	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.VALUE_NUMBER_INT)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  VALUE_NUMBER_INT  [FE]          IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()!=  JsonToken.VALUE_NUMBER_INT)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()!=  JsonToken.VALUE_NUMBER_INT)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }	  if(in.peek()!=    JsonToken.VALUE_STRING)    {    String    datePattern    =    in.getString();    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol  VALUE_NUMBER_INT	146	None	replace
643	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.VALUE_NULL)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  VALUE_NULL  [FE]            IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()!=  JsonToken.VALUE_NULL)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()!=  JsonToken.VALUE_NULL)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }	  if(in.peek()!=    JsonToken.VALUE_STRING)    {    String    datePattern    =    in.getString();    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol  VALUE_NULL	146	None	replace
644	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.VALUE_NUMBER)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  VALUE_NUMBER  [FE]              IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()!=  JsonToken.VALUE_NUMBER)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()!=  JsonToken.VALUE_NUMBER)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }	  if(in.peek()!=    JsonToken.VALUE_STRING)    {    String    datePattern    =    in.getString();    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol  VALUE_NUMBER	146	None	replace
645	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "The  date  should  be  a  string  value.n ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	new  JsonParseException( "The  date  should  be  a  string  value.n ");	  new    JsonParseException(   "The    date    should    be    a    string    value.   ");    	compilable	  [FE]  IllegalStateException  	133	1	replace
646	[BUG]  [BUGGY]  new  JsonParseException( "The  date  should  be  a  string  value.n ");  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "The  date  should  be  a  string  value.n ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonParseException( "The  date  should  be  a  string  value.n ");	  new    JsonParseException(   "The    date    should    be    a    string    value.   ");    	compilable	  [FE]  IllegalStateException  	133	1	replace
647	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date  is  null. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date  is  null. ");	  new    JsonParseException(   "The    date    should    be    a    string    value.   ");    	compilable	  [FE]  IllegalStateException  	133	1	replace
648	[BUG]  [BUGGY]  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date  is  null. ");  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date  is  null. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date  is  null. ");	  new    JsonParseException(   "The    date    should    be    a    string    value.   ");    	compilable	  [FE]  IllegalStateException  	133	1	replace
649	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date. ");	  new    JsonParseException(   "The    date    should    be    a    string    value.   ");    	compilable	  [FE]  IllegalStateException  	133	1	replace
650	[BUG]  [BUGGY]  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date. ");  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date. ");	  new    JsonParseException(   "The    date    should    be    a    string    value.   ");    	compilable	  [FE]  IllegalStateException  	133	1	replace
651	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  the  local  value. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  the  local  value. ");	  new    JsonParseException(   "The    date    should    be    a    string    value.   ");    	compilable	  [FE]  IllegalStateException  	133	1	replace
652	[BUG]  [BUGGY]  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  the  local  value. ");  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  the  local  value. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  the  local  value. ");	  new    JsonParseException(   "The    date    should    be    a    string    value.   ");    	compilable	  [FE]  IllegalStateException  	133	1	replace
653	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  this  value  is  not  valid. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  this  value  is  not  valid. ");	  new    JsonParseException(   "The    date    should    be    a    string    value.   ");    	compilable	  [FE]  IllegalStateException  	133	1	replace
654	[BUG]  [BUGGY]  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  this  value  is  not  valid. ");  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  this  value  is  not  valid. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  this  value  is  not  valid. ");	  new    JsonParseException(   "The    date    should    be    a    string    value.   ");    	compilable	  [FE]  IllegalStateException  	133	1	replace
655	[BUG]  [BUGGY]  throw  new  JsonParseException(   "Date  should  be  a  string  value:   "  +  in.toString());  throw  new  JsonParseException( "Date  should  be  a  string  value:   "  +  in.toString());  [CE]  unreachable  statement  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "Date  should  be  a  string  value:   "  +  in.toString());  throw  new  JsonParseException( "Date  should  be  a  string  value:   "  +  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "Date    should    be    a    string    value:   "    +    in.toString());    throw  new  JsonParseException( "Date  should  be  a  string  value:   "  +  in.toString());	  	non-compiled	[CE]  unreachable  statement	39	None	add
656	[BUG]  [BUGGY]  throw  new  JsonParseException(   "Date  should  be  a  string  value:   "  +  in.toString());  JsonParseException( "Date  should  be  a  string  value:   "  +  in.toString());  [CE]  cannot  find  symbol  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "Date  should  be  a  string  value:   "  +  in.toString());  JsonParseException( "Date  should  be  a  string  value:   "  +  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "Date    should    be    a    string    value:   "    +    in.toString());    JsonParseException( "Date  should  be  a  string  value:   "  +  in.toString());	  	non-compiled	[CE]  cannot  find  symbol	39	None	add
657	[BUG]  [BUGGY]  throw  new  JsonParseException(   "Date  should  be  a  string  value:   "  +  in.toString());  Throw  new  JsonParseException( "Date  should  be  a  string  value:   "  +  in.toString());  [CE]  not  a  statement  [FE]        JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "Date  should  be  a  string  value:   "  +  in.toString());  Throw  new  JsonParseException( "Date  should  be  a  string  value:   "  +  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "Date    should    be    a    string    value:   "    +    in.toString());    Throw  new  JsonParseException( "Date  should  be  a  string  value:   "  +  in.toString());	  	non-compiled	[CE]  not  a  statement	39	None	add
658	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  String  value. ");  [CE]  incompatible  types  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  String  value. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  String  value. ");	  return    new    JsonParseException(   "The    date    should    be    a    String    value   ");    	non-compiled	[CE]  incompatible  types	142	None	replace
659	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  String  value ",  in);  [CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader)  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  String  value ",  in);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  String  value ",  in);	  return    new    JsonParseException(   "The    date    should    be    a    String    value   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader)	142	None	replace
660	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  String  value ",  in.getClass());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,Class<CAP#1>)  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  String  value ",  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  String  value ",  in.getClass());	  return    new    JsonParseException(   "The    date    should    be    a    String    value   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,Class<CAP#1>)	142	None	replace
661	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  String  value: "  +  in.getClass());  [CE]  incompatible  types  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  String  value: "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  String  value: "  +  in.getClass());	  return    new    JsonParseException(   "The    date    should    be    a    String    value   ");    	non-compiled	[CE]  incompatible  types	142	None	replace
662	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  String  value, ");  [CE]  incompatible  types  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  String  value, ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  String  value, ");	  return    new    JsonParseException(   "The    date    should    be    a    String    value   ");    	non-compiled	[CE]  incompatible  types	142	None	replace
663	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  String  value ",  in.nextString());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,String)  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  String  value ",  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  String  value ",  in.nextString());	  return    new    JsonParseException(   "The    date    should    be    a    String    value   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,String)	142	None	replace
664	[BUG]  [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value "+Integer.toHexString(in.nextString()));  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value "+Integer.toHexString(in.nextString()));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "Date  should  be  a  string  value "+Integer.toHexString(in.nextString()));	  throw    new    JsonParseException(   "Date    should    be    a    string    value   ",    in.nextString());    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	156	None	replace
665	[BUG]  [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value. ",  in.nextString());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,String)  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value. ",  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "Date  should  be  a  string  value. ",  in.nextString());	  throw    new    JsonParseException(   "Date    should    be    a    string    value   ",    in.nextString());    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,String)	156	None	replace
666	[BUG]  [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value "  + ",  in.nextString());  [CE]  unclosed  string  literal  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value "  + ",  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "Date  should  be  a  string  value "  + ",  in.nextString());	  throw    new    JsonParseException(   "Date    should    be    a    string    value   ",    in.nextString());    	non-compiled	[CE]  unclosed  string  literal	156	None	replace
667	[BUG]  [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value ", "Date  should  be  a  string  value ",  in.nextString());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,String,String)  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value ", "Date  should  be  a  string  value ",  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "Date  should  be  a  string  value ", "Date  should  be  a  string  value ",  in.nextString());	  throw    new    JsonParseException(   "Date    should    be    a    string    value   ",    in.nextString());    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,String,String)	156	None	replace
668	[BUG]  [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value "+Integer.toString(in.nextString()));  [CE]  no  suitable  method  found  for  toString(String)  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value "+Integer.toString(in.nextString()));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "Date  should  be  a  string  value "+Integer.toString(in.nextString()));	  throw    new    JsonParseException(   "Date    should    be    a    string    value   ",    in.nextString());    	non-compiled	[CE]  no  suitable  method  found  for  toString(String)	156	None	replace
669	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getKey()),  JsonToken.VALUE_NULL);  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getKey()),  JsonToken.VALUE_NULL);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getKey()),  JsonToken.VALUE_NULL);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.getValue()),    JsonToken.VALUE_NULL);    	non-compiled	[CE]  cannot  find  symbol	164	None	replace
670	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue(),  JsonToken.VALUE_NULL));  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue(),  JsonToken.VALUE_NULL));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue(),  JsonToken.VALUE_NULL));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.getValue()),    JsonToken.VALUE_NULL);    	non-compiled	[CE]  cannot  find  symbol	164	None	replace
671	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue()),  JsonToken.VALUE_NULL);  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue()),  JsonToken.VALUE_NULL);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue()),  JsonToken.VALUE_NULL);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.getValue()),    JsonToken.VALUE_NULL);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	164	None	replace
672	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue(),  JsonToken.VALUE_NULL);  [CE]  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue(),  JsonToken.VALUE_NULL);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue(),  JsonToken.VALUE_NULL);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.getValue()),    JsonToken.VALUE_NULL);    	non-compiled	[CE]  	164	None	replace
673	[BUG]  [BUGGY]  JsonParseException( "This  date  should  be  a  string  value ");  [CE]  cannot  find  symbol  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException( "This  date  should  be  a  string  value ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException( "This  date  should  be  a  string  value ");	  throw    new    JsonParseException(       "This    date    should    be    a    string    value       ");    JsonParseException(       "This    date    should    be    a    string    value       ");    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
674	[BUG]  [BUGGY]  JsonParseException( "This  date  should  be  a  string  value. ");  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException( "This  date  should  be  a  string  value. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException( "This  date  should  be  a  string  value. ");	  throw    new    JsonParseException(       "This    date    should    be    a    string    value       ");    JsonParseException(       "This    date    should    be    a    string    value       ");    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
675	[BUG]  [BUGGY]  JsonParseException( "This  date  should  be  a  string  value ",  in);  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException( "This  date  should  be  a  string  value ",  in);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException( "This  date  should  be  a  string  value ",  in);	  throw    new    JsonParseException(       "This    date    should    be    a    string    value       ");    JsonParseException(       "This    date    should    be    a    string    value       ");    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
676	[BUG]  [BUGGY]  JsonTokenException  in  =  new  JsonTokenException( "Unexpected  String  value: "  +  in.getValue());  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonTokenException  in  =  new  JsonTokenException( "Unexpected  String  value: "  +  in.getValue());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonTokenException  in  =  new  JsonTokenException( "Unexpected  String  value: "  +  in.getValue());	  throw    new    JsonTokenException(   "Unexpected    String    value:   "    +    in.getValue());    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
677	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Unexpected  String  value: "  +  in.getKey());  [CE]  cannot  find  symbol  [FE]                                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "Unexpected  String  value: "  +  in.getKey());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Unexpected  String  value: "  +  in.getKey());	  throw    new    JsonTokenException(   "Unexpected    String    value:   "    +    in.getValue());    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
678	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Unexpected  String  value: "  +  in.getString());  [CE]  cannot  find  symbol  [FE]                                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "Unexpected  String  value: "  +  in.getString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Unexpected  String  value: "  +  in.getString());	  throw    new    JsonTokenException(   "Unexpected    String    value:   "    +    in.getValue());    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
679	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Unexpected  String  value: "  +  in,  in.getValue());  [CE]  cannot  find  symbol  [FE]                                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "Unexpected  String  value: "  +  in,  in.getValue());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Unexpected  String  value: "  +  in,  in.getValue());	  throw    new    JsonTokenException(   "Unexpected    String    value:   "    +    in.getValue());    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
680	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Unexpected  String  value: "  +  in.toString());  [CE]  cannot  find  symbol  [FE]                                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "Unexpected  String  value: "  +  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Unexpected  String  value: "  +  in.toString());	  throw    new    JsonTokenException(   "Unexpected    String    value:   "    +    in.getValue());    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
681	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException(   "The  date  should  be  a  string  value.   ");  new  JsonParseException( "The  date  should  be  a  string  value.   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	new    JsonParseException(   "The    date    should    be    a    string    value.   ");    new  JsonParseException( "The  date  should  be  a  string  value.   ");	  	compilable	  [FE]  JsonParseException  	132	2	add
682	[BUG]  [BUGGY]  new  JsonParseException(   "The  date  should  be  a  string  value.   ");  new  JsonParseException( "The  date  should  be  a  string  value.   ");  [FE]  JsonParseException  [FE]    IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException(   "The  date  should  be  a  string  value.   ");  new  JsonParseException( "The  date  should  be  a  string  value.   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new    JsonParseException(   "The    date    should    be    a    string    value.   ");    new  JsonParseException( "The  date  should  be  a  string  value.   ");	  	compilable	  [FE]  JsonParseException  	132	2	add
683	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException(   "The  date  should  be  a  string  value.   ");  new  JsonParseException( "The  date  should  be  an  string  value.   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	new    JsonParseException(   "The    date    should    be    a    string    value.   ");    new  JsonParseException( "The  date  should  be  an  string  value.   ");	  	compilable	  [FE]  JsonParseException  	132	2	add
684	[BUG]  [BUGGY]  new  JsonParseException(   "The  date  should  be  a  string  value.   ");  new  JsonParseException( "The  date  should  be  an  string  value.   ");  [FE]  JsonParseException  [FE]      IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException(   "The  date  should  be  a  string  value.   ");  new  JsonParseException( "The  date  should  be  an  string  value.   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new    JsonParseException(   "The    date    should    be    a    string    value.   ");    new  JsonParseException( "The  date  should  be  an  string  value.   ");	  	compilable	  [FE]  JsonParseException  	132	2	add
685	[BUG]  [BUGGY]  in.peek()  ==  JsonToken.STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  [CE]  not  a  statement  [FE]              IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  in.peek()  ==  JsonToken.STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	in.peek()  ==  JsonToken.STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }	          if(in.peek()    ==    JsonToken.STRING)    {    String    datePattern    =    in.readString();    return    new    Date(datePattern);    }    	non-compiled	[CE]  not  a  statement	25	None	replace
686	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.STRING)  {  String  datePattern  =  Integer.toString(in.readString());  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()  ==  JsonToken.STRING)  {  String  datePattern  =  Integer.toString(in.readString());  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()  ==  JsonToken.STRING)  {  String  datePattern  =  Integer.toString(in.readString());  return  new  Date(datePattern);  }	          if(in.peek()    ==    JsonToken.STRING)    {    String    datePattern    =    in.readString();    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
687	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value. ",  in.getClass());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,Class<CAP#1>)  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value. ",  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  Date  should  be  a  string  value. ",  in.getClass());	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value   ",    in.getClass());    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,Class<CAP#1>)	138	None	replace
688	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value "  +  String.valueOf(in.getClass()));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "The  Date  should  be  a  string  value "  +  String.valueOf(in.getClass()));	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value   ",    in.getClass());    	compilable	  [FE]  JsonParseException  	138	2	replace
689	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value "  +  String.valueOf(in.getClass()));  [FE]  JsonParseException  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value "  +  String.valueOf(in.getClass()));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  Date  should  be  a  string  value "  +  String.valueOf(in.getClass()));	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value   ",    in.getClass());    	compilable	  [FE]  JsonParseException  	138	2	replace
690	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value ",  in,  in.getClass());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader,Class<CAP#1>)  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value ",  in,  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  Date  should  be  a  string  value ",  in,  in.getClass());	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value   ",    in.getClass());    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader,Class<CAP#1>)	138	None	replace
691	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]          if(in.peek()  ==  JsonToken.STRING)  {  in.close();  return  null;  }  if(in.peek()  ==  JsonToken.STRING)  {  in.close();  return  null;  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	                if(in.peek()    ==    JsonToken.STRING)    {    in.close();    return    null;    }    if(in.peek()  ==  JsonToken.STRING)  {  in.close();  return  null;  }	  	compilable	  [FE]  JsonParseException  	26	2	add
692	[BUG]  [BUGGY]          if(in.peek()  ==  JsonToken.STRING)  {  in.close();  return  null;  }  if(in.peek()  ==  JsonToken.STRING)  {  in.close();  return  null;  }  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]          if(in.peek()  ==  JsonToken.STRING)  {  in.close();  return  null;  }  if(in.peek()  ==  JsonToken.STRING)  {  in.close();  return  null;  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	                if(in.peek()    ==    JsonToken.STRING)    {    in.close();    return    null;    }    if(in.peek()  ==  JsonToken.STRING)  {  in.close();  return  null;  }	  	compilable	  [FE]  JsonParseException  	26	2	add
693	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]          if(in.peek()  ==  JsonToken.STRING)  {  in.close();  return  null;  }  if(in.peek()!=  JsonToken.STRING)  {  in.close();  return  null;  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	                if(in.peek()    ==    JsonToken.STRING)    {    in.close();    return    null;    }    if(in.peek()!=  JsonToken.STRING)  {  in.close();  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	26	1	add
694	[BUG]  [BUGGY]          if(in.peek()  ==  JsonToken.STRING)  {  in.close();  return  null;  }  if(in.peek()!=  JsonToken.STRING)  {  in.close();  return  null;  }  [FE]  AssertionFailedError  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]          if(in.peek()  ==  JsonToken.STRING)  {  in.close();  return  null;  }  if(in.peek()!=  JsonToken.STRING)  {  in.close();  return  null;  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	                if(in.peek()    ==    JsonToken.STRING)    {    in.close();    return    null;    }    if(in.peek()!=  JsonToken.STRING)  {  in.close();  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	26	1	add
695	[BUG]  [BUGGY]          if(in.peek()  ==  JsonToken.STRING)  {  in.close();  return  null;  }  if(in.peek()  >=  JsonToken.STRING)  {  in.close();  return  null;  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]          if(in.peek()  ==  JsonToken.STRING)  {  in.close();  return  null;  }  if(in.peek()  >=  JsonToken.STRING)  {  in.close();  return  null;  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	                if(in.peek()    ==    JsonToken.STRING)    {    in.close();    return    null;    }    if(in.peek()  >=  JsonToken.STRING)  {  in.close();  return  null;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	26	None	add
696	[BUG]  [BUGGY]          if(in.peek()  ==  JsonToken.STRING)  {  in.close();  return  null;  }  if(in.parse()  ==  JsonToken.STRING)  {  in.close();  return  null;  }  [CE]  cannot  find  symbol  [FE]          JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]          if(in.peek()  ==  JsonToken.STRING)  {  in.close();  return  null;  }  if(in.parse()  ==  JsonToken.STRING)  {  in.close();  return  null;  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	                if(in.peek()    ==    JsonToken.STRING)    {    in.close();    return    null;    }    if(in.parse()  ==  JsonToken.STRING)  {  in.close();  return  null;  }	  	non-compiled	[CE]  cannot  find  symbol	26	None	add
697	[BUG]  [BUGGY]          if(in.peek()  ==  JsonToken.STRING)  {  in.close();  return  null;  }  If(in.peek()  ==  JsonToken.STRING)  {  in.close();  return  null;  }  [CE]  ';'  expected  [FE]            JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]          if(in.peek()  ==  JsonToken.STRING)  {  in.close();  return  null;  }  If(in.peek()  ==  JsonToken.STRING)  {  in.close();  return  null;  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	                if(in.peek()    ==    JsonToken.STRING)    {    in.close();    return    null;    }    If(in.peek()  ==  JsonToken.STRING)  {  in.close();  return  null;  }	  	non-compiled	[CE]  ';'  expected	26	None	add
698	[BUG]  [BUGGY]          if(in.peek()  ==  JsonToken.STRING)  {  in.close();  return  null;  }  if(in.close()  ==  JsonToken.STRING)  {  in.close();  return  null;  }  [CE]  'void'  type  not  allowed  here  [FE]              JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]          if(in.peek()  ==  JsonToken.STRING)  {  in.close();  return  null;  }  if(in.close()  ==  JsonToken.STRING)  {  in.close();  return  null;  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	                if(in.peek()    ==    JsonToken.STRING)    {    in.close();    return    null;    }    if(in.close()  ==  JsonToken.STRING)  {  in.close();  return  null;  }	  	non-compiled	[CE]  'void'  type  not  allowed  here	26	None	add
699	[BUG]  [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value. ",  in);  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value. ",  in);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonDescriptorException( "The  date  should  be  a  string  value. ",  in);	  throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value   ",    in);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
700	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  Date  should  be  a  string  value. ");  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  Date  should  be  a  string  value. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "The  Date  should  be  a  string  value. ");	  JsonParseException    in    =    new    JsonParseException(   "The    Date    should    be    a    string    value   ");    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	135	None	replace
701	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  Date  should  be  a  string  value ",  in);  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  Date  should  be  a  string  value ",  in);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "The  Date  should  be  a  string  value ",  in);	  JsonParseException    in    =    new    JsonParseException(   "The    Date    should    be    a    string    value   ");    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	135	None	replace
702	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.getClass());  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.getClass());	  JsonParseException    in    =    new    JsonParseException(   "The    Date    should    be    a    string    value   ");    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	135	None	replace
703	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  Date  should  be  a  string  value, ");  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  Date  should  be  a  string  value, ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "The  Date  should  be  a  string  value, ");	  JsonParseException    in    =    new    JsonParseException(   "The    Date    should    be    a    string    value   ");    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	135	None	replace
704	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.toString());  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.toString());	  JsonParseException    in    =    new    JsonParseException(   "The    Date    should    be    a    string    value   ");    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	135	None	replace
705	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  Date  should  be  a  string  value: ");  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  Date  should  be  a  string  value: ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "The  Date  should  be  a  string  value: ");	  JsonParseException    in    =    new    JsonParseException(   "The    Date    should    be    a    string    value   ");    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	135	None	replace
706	[BUG]  [BUGGY]  JsonTokenException  in  =  new  JsonTokenException( "Unknown  string: "  +  in.nextString());  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonTokenException  in  =  new  JsonTokenException( "Unknown  string: "  +  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonTokenException  in  =  new  JsonTokenException( "Unknown  string: "  +  in.nextString());	  throw    new    JsonTokenException(   "Unknown    string:   "    +    in.nextString());    	non-compiled	[CE]  cannot  find  symbol	151	None	replace
707	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Unknown  string: "  +  in.getKey());  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "Unknown  string: "  +  in.getKey());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Unknown  string: "  +  in.getKey());	  throw    new    JsonTokenException(   "Unknown    string:   "    +    in.nextString());    	non-compiled	[CE]  cannot  find  symbol	151	None	replace
708	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Unknown  string: "  +  in.getCurrentName());  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "Unknown  string: "  +  in.getCurrentName());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Unknown  string: "  +  in.getCurrentName());	  throw    new    JsonTokenException(   "Unknown    string:   "    +    in.nextString());    	non-compiled	[CE]  cannot  find  symbol	151	None	replace
709	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value.n ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "The  Date  should  be  a  string  value.n ");	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value.   ");    	compilable	  [FE]  JsonParseException  	66	2	replace
710	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value.n ");  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value.n ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  Date  should  be  a  string  value.n ");	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value.   ");    	compilable	  [FE]  JsonParseException  	66	2	replace
711	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value.  Please  check  that  the  date  is  null. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "The  Date  should  be  a  string  value.  Please  check  that  the  date  is  null. ");	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value.   ");    	compilable	  [FE]  JsonParseException  	66	2	replace
712	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value.  Please  check  that  the  date  is  null. ");  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value.  Please  check  that  the  date  is  null. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  Date  should  be  a  string  value.  Please  check  that  the  date  is  null. ");	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value.   ");    	compilable	  [FE]  JsonParseException  	66	2	replace
713	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]        JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value.  Please  check  the  length  of  the  date. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "The  Date  should  be  a  string  value.  Please  check  the  length  of  the  date. ");	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value.   ");    	compilable	  [FE]  JsonParseException  	66	2	replace
714	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value.  Please  check  the  length  of  the  date. ");  [FE]  JsonParseException  [FE]        JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value.  Please  check  the  length  of  the  date. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  Date  should  be  a  string  value.  Please  check  the  length  of  the  date. ");	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value.   ");    	compilable	  [FE]  JsonParseException  	66	2	replace
715	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]          JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value.  Please  check  that  this  value  is  not  valid. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "The  Date  should  be  a  string  value.  Please  check  that  this  value  is  not  valid. ");	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value.   ");    	compilable	  [FE]  JsonParseException  	66	2	replace
716	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value.  Please  check  that  this  value  is  not  valid. ");  [FE]  JsonParseException  [FE]          JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value.  Please  check  that  this  value  is  not  valid. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  Date  should  be  a  string  value.  Please  check  that  this  value  is  not  valid. ");	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value.   ");    	compilable	  [FE]  JsonParseException  	66	2	replace
717	[BUG]  [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value, ",  in);  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value, ",  in);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonDescriptorException( "The  date  should  be  a  string  value, ",  in);	  throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value,   ");    	non-compiled	[CE]  cannot  find  symbol	166	None	replace
718	[BUG]  [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value, "  +  in.getClass());  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value, "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonDescriptorException( "The  date  should  be  a  string  value, "  +  in.getClass());	  throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value,   ");    	non-compiled	[CE]  cannot  find  symbol	166	None	replace
719	[BUG]  [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value, "  +  in.nextString());  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value, "  +  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonDescriptorException( "The  date  should  be  a  string  value, "  +  in.nextString());	  throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value,   ");    	non-compiled	[CE]  cannot  find  symbol	166	None	replace
720	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value. ",  in.getClass());  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value. ",  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  date  should  be  a  string  value. ",  in.getClass());	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value   ",    in.getClass());    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
721	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value ", "Unknown  class: "  +  in.getClass());  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value ", "Unknown  class: "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  date  should  be  a  string  value ", "Unknown  class: "  +  in.getClass());	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value   ",    in.getClass());    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
722	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()!=  JsonToken.STRING)  {  in.close();  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	if(in.peek()!=  JsonToken.STRING)  {  in.close();  }	  in.close();    	compilable	  [FE]  IllegalStateException  	109	1	replace
723	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.STRING)  {  in.close();  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()!=  JsonToken.STRING)  {  in.close();  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()!=  JsonToken.STRING)  {  in.close();  }	  in.close();    	compilable	  [FE]  IllegalStateException  	109	1	replace
724	[BUG]  [BUGGY]  if(in.next()  ==  JsonToken.STRING)  {  in.close();  }  [CE]  cannot  find  symbol  [FE]      IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.next()  ==  JsonToken.STRING)  {  in.close();  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.next()  ==  JsonToken.STRING)  {  in.close();  }	  in.close();    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
725	[BUG]  [BUGGY]  if(in.next()!=  JsonToken.STRING)  {  in.close();  }  [CE]  cannot  find  symbol  [FE]        IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.next()!=  JsonToken.STRING)  {  in.close();  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.next()!=  JsonToken.STRING)  {  in.close();  }	  in.close();    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
726	[BUG]  [BUGGY]  if(in.nextString()!=  JsonToken.STRING)  {  in.close();  }  [CE]  incomparable  types:  String  and  JsonToken  [FE]          IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.nextString()!=  JsonToken.STRING)  {  in.close();  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.nextString()!=  JsonToken.STRING)  {  in.close();  }	  in.close();    	non-compiled	[CE]  incomparable  types:  String  and  JsonToken	109	None	replace
727	[BUG]  [BUGGY]  if(in.nextString()  ==  JsonToken.STRING)  {  in.close();  }  [CE]  incomparable  types:  String  and  JsonToken  [FE]            IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.nextString()  ==  JsonToken.STRING)  {  in.close();  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.nextString()  ==  JsonToken.STRING)  {  in.close();  }	  in.close();    	non-compiled	[CE]  incomparable  types:  String  and  JsonToken	109	None	replace
728	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  SIMPLE_NAME,  datePattern);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  SIMPLE_NAME,  datePattern);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  SIMPLE_NAME,  datePattern);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    SIMPLE_NAME);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	157	None	replace
729	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value: "  +  Integer.toHexString(in.nextString()),  SIMPLE_NAME);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value: "  +  Integer.toHexString(in.nextString()),  SIMPLE_NAME);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value: "  +  Integer.toHexString(in.nextString()),  SIMPLE_NAME);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    SIMPLE_NAME);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	157	None	replace
730	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  SIMPLE_NAME);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  SIMPLE_NAME);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  SIMPLE_NAME);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    SIMPLE_NAME);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	157	None	replace
731	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  SIMPLE_NAME,  dateType);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  SIMPLE_NAME,  dateType);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  SIMPLE_NAME,  dateType);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    SIMPLE_NAME);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	157	None	replace
732	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  SIMPLE_NAME,  deserialize);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  SIMPLE_NAME,  deserialize);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  SIMPLE_NAME,  deserialize);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    SIMPLE_NAME);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	157	None	replace
733	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  SIMPLE_NAME,  in.nextString());  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  SIMPLE_NAME,  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  SIMPLE_NAME,  in.nextString());	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    SIMPLE_NAME);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	157	None	replace
734	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value,   "  +  in.getClass());  [CE]  incompatible  types  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value,   "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value,   "  +  in.getClass());	  return    new    JsonParseException(   "The    date    should    be    a    string    value,   ");    	non-compiled	[CE]  incompatible  types	14	None	replace
735	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value,   "  +  in.toString());  [CE]  incompatible  types  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value,   "  +  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value,   "  +  in.toString());	  return    new    JsonParseException(   "The    date    should    be    a    string    value,   ");    	non-compiled	[CE]  incompatible  types	14	None	replace
736	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value, ",  in);  [CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader)  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value, ",  in);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value, ",  in);	  return    new    JsonParseException(   "The    date    should    be    a    string    value,   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader)	14	None	replace
737	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.readClass());  [CE]  cannot  find  symbol  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.readClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.readClass());	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value:   "    +    in.getClass());    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
738	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.getName());  [CE]  cannot  find  symbol  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.getName());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.getName());	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value:   "    +    in.getClass());    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
739	[BUG]  [BUGGY]  JsonToken  throw  new  JsonParseException( "The  Date  should  be  a  string  value ");  [CE]  not  a  statement  [FE]        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  throw  new  JsonParseException( "The  Date  should  be  a  string  value ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  throw  new  JsonParseException( "The  Date  should  be  a  string  value ");	  throw    new    JsonParseException(       "The    Date    should    be    a    string    value       ");    JsonToken    throw    new    JsonParseException(   "The    Date    should    be    a    string    value       ");    	non-compiled	[CE]  not  a  statement	123	None	replace
740	[BUG]  [BUGGY]  JsonToken  throw  new  JsonParseException( "The  Date  should  be  a  string  value. ");  [CE]  not  a  statement  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  throw  new  JsonParseException( "The  Date  should  be  a  string  value. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  throw  new  JsonParseException( "The  Date  should  be  a  string  value. ");	  throw    new    JsonParseException(       "The    Date    should    be    a    string    value       ");    JsonToken    throw    new    JsonParseException(   "The    Date    should    be    a    string    value       ");    	non-compiled	[CE]  not  a  statement	123	None	replace
741	[BUG]  [BUGGY]  JsonToken  throw  new  JsonParseException( "The  Date  should  be  a  string  value ",  in);  [CE]  not  a  statement  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  throw  new  JsonParseException( "The  Date  should  be  a  string  value ",  in);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  throw  new  JsonParseException( "The  Date  should  be  a  string  value ",  in);	  throw    new    JsonParseException(       "The    Date    should    be    a    string    value       ");    JsonToken    throw    new    JsonParseException(   "The    Date    should    be    a    string    value       ");    	non-compiled	[CE]  not  a  statement	123	None	replace
742	[BUG]  [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value. ",  in.nextString());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,String)  [FE]        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value. ",  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "This  date  should  be  a  string  value. ",  in.nextString());	  throw    new    JsonParseException(   "This    date    should    be    a    string    value   ",    in.nextString());    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,String)	162	None	replace
743	[BUG]  [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value "+Integer.toHexString(in.nextString()));  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value "+Integer.toHexString(in.nextString()));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "This  date  should  be  a  string  value "+Integer.toHexString(in.nextString()));	  throw    new    JsonParseException(   "This    date    should    be    a    string    value   ",    in.nextString());    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	162	None	replace
744	[BUG]  [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value "  + ",  in.nextString());  [CE]  unclosed  string  literal  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value "  + ",  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "This  date  should  be  a  string  value "  + ",  in.nextString());	  throw    new    JsonParseException(   "This    date    should    be    a    string    value   ",    in.nextString());    	non-compiled	[CE]  unclosed  string  literal	162	None	replace
745	[BUG]  [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value "+Integer.toString(in.nextString()));  [CE]  no  suitable  method  found  for  toString(String)  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value "+Integer.toString(in.nextString()));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "This  date  should  be  a  string  value "+Integer.toString(in.nextString()));	  throw    new    JsonParseException(   "This    date    should    be    a    string    value   ",    in.nextString());    	non-compiled	[CE]  no  suitable  method  found  for  toString(String)	162	None	replace
746	[BUG]  [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Please  check  that  the  date  is  null.   ");  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date  is  null.   ");  [CE]  unreachable  statement  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Please  check  that  the  date  is  null.   ");  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date  is  null.   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Please    check    that    the    date    is    null.   ");    throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date  is  null.   ");	  	non-compiled	[CE]  unreachable  statement	44	None	add
747	[BUG]  [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Please  check  that  the  date  is  null.   ");  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date  is  null.. ");  [CE]  unreachable  statement  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Please  check  that  the  date  is  null.   ");  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date  is  null.. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Please    check    that    the    date    is    null.   ");    throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date  is  null.. ");	  	non-compiled	[CE]  unreachable  statement	44	None	add
748	[BUG]  [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Please  check  that  the  date  is  null.   ");  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date  is  null. ".);  [CE]  <identifier>  expected  [FE]        JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Please  check  that  the  date  is  null.   ");  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date  is  null. ".);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Please    check    that    the    date    is    null.   ");    throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date  is  null. ".);	  	non-compiled	[CE]  <identifier>  expected	44	None	add
749	[BUG]  [BUGGY]  in.peek()  ==  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [CE]  not  a  statement  [FE]        IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  in.peek()  ==  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	in.peek()  ==  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }	          if(in.peek()    ==    JsonToken.VALUE_STRING)    {    String    datePattern    =    in.readString();    return    new    Date(datePattern);    }    else    {    return    new    Date(datePattern);    }    	non-compiled	[CE]  not  a  statement	130	None	replace
750	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_NUMBER_INT)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  VALUE_NUMBER_INT  [FE]          IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_NUMBER_INT)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()  ==  JsonToken.VALUE_NUMBER_INT)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }	          if(in.peek()    ==    JsonToken.VALUE_STRING)    {    String    datePattern    =    in.readString();    return    new    Date(datePattern);    }    else    {    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol  VALUE_NUMBER_INT	130	None	replace
751	[BUG]  [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.getKey());  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.getKey());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.getKey());	  throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value   ",    in.nextString());    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
752	[BUG]  [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ", "serialize  to  a  string  value ",  in.nextString());  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ", "serialize  to  a  string  value ",  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ", "serialize  to  a  string  value ",  in.nextString());	  throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value   ",    in.nextString());    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
753	[BUG]  [BUGGY]  if(dateType  ==  String.class)  {  throw  new  JsonParseException( "This  date  should  be  a  string  value ");  }  [CE]  incomparable  types:  Class<CAP#1>  and  Class<String>  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(dateType  ==  String.class)  {  throw  new  JsonParseException( "This  date  should  be  a  string  value ");  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(dateType  ==  String.class)  {  throw  new  JsonParseException( "This  date  should  be  a  string  value ");  }	  throw    new    JsonParseException(       "This    date    should    be    a    string    value       ");    JsonToken    throw    new    JsonParseException(   "This    date    should    be    a    string    value       ");    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<String>	85	None	replace
754	[BUG]  [BUGGY]  if(date.getType()  ==  Token.STRING)  {  throw  new  JsonParseException( "This  date  should  be  a  string  value ");  }  [CE]  cannot  find  symbol  date  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(date.getType()  ==  Token.STRING)  {  throw  new  JsonParseException( "This  date  should  be  a  string  value ");  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(date.getType()  ==  Token.STRING)  {  throw  new  JsonParseException( "This  date  should  be  a  string  value ");  }	  throw    new    JsonParseException(       "This    date    should    be    a    string    value       ");    JsonToken    throw    new    JsonParseException(   "This    date    should    be    a    string    value       ");    	non-compiled	[CE]  cannot  find  symbol  date	85	None	replace
755	[BUG]  [BUGGY]  if(date.getType()  ==  Token.STRING)  {  throw  new  JsonParseException( "This  date  should  be  a  string  value. ");  }  [CE]  cannot  find  symbol  date  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(date.getType()  ==  Token.STRING)  {  throw  new  JsonParseException( "This  date  should  be  a  string  value. ");  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(date.getType()  ==  Token.STRING)  {  throw  new  JsonParseException( "This  date  should  be  a  string  value. ");  }	  throw    new    JsonParseException(       "This    date    should    be    a    string    value       ");    JsonToken    throw    new    JsonParseException(   "This    date    should    be    a    string    value       ");    	non-compiled	[CE]  cannot  find  symbol  date	85	None	replace
756	[BUG]  [BUGGY]  throw  new  JsonParseException(   "This  date  should  be  a  string  value.   ");  JsonToken  throw  new  JsonParseException( "This  date  should  be  a  string  value.   ");  [CE]  not  a  statement  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "This  date  should  be  a  string  value.   ");  JsonToken  throw  new  JsonParseException( "This  date  should  be  a  string  value.   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "This    date    should    be    a    string    value.   ");    JsonToken  throw  new  JsonParseException( "This  date  should  be  a  string  value.   ");	  	non-compiled	[CE]  not  a  statement	86	None	add
757	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  32),  JsonToken.VALUE_NUMBER_INT);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  32),  JsonToken.VALUE_NUMBER_INT);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  32),  JsonToken.VALUE_NUMBER_INT);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JsonToken.VALUE_NUMBER_INT);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	7	None	replace
758	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  16),  JsonToken.VALUE_NUMBER_INT);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  16),  JsonToken.VALUE_NUMBER_INT);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  16),  JsonToken.VALUE_NUMBER_INT);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JsonToken.VALUE_NUMBER_INT);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	7	None	replace
759	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  SIMPLE_NAME,  JsonToken.VALUE_NUMBER_INT);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  SIMPLE_NAME,  JsonToken.VALUE_NUMBER_INT);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  SIMPLE_NAME,  JsonToken.VALUE_NUMBER_INT);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JsonToken.VALUE_NUMBER_INT);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	7	None	replace
760	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  128),  JsonToken.VALUE_NUMBER_INT);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  128),  JsonToken.VALUE_NUMBER_INT);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  128),  JsonToken.VALUE_NUMBER_INT);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JsonToken.VALUE_NUMBER_INT);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	7	None	replace
761	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  2),  JsonToken.VALUE_NUMBER_INT);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  2),  JsonToken.VALUE_NUMBER_INT);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  2),  JsonToken.VALUE_NUMBER_INT);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JsonToken.VALUE_NUMBER_INT);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	7	None	replace
762	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "This  date  should  be  a  string  value ",  in.nextString());  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "This  date  should  be  a  string  value ",  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "This  date  should  be  a  string  value ",  in.nextString());	  throw    new    JsonParseException(   "This    date    should    be    a    string    value   ",    in.nextString());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	162	None	replace
763	[BUG]  [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value "  +, "The  date  should  be  a  string  value ",  in.nextString());  [CE]  illegal  start  of  expression  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value "  +, "The  date  should  be  a  string  value ",  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "This  date  should  be  a  string  value "  +, "The  date  should  be  a  string  value ",  in.nextString());	  throw    new    JsonParseException(   "This    date    should    be    a    string    value   ",    in.nextString());    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
764	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value "  +  SIMPLE_NAME,  in.nextString());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,String)  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value "  +  SIMPLE_NAME,  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value "  +  SIMPLE_NAME,  in.nextString());	  return    new    JsonParseException(   "The    date    should    be    a    string    value   ",    in.nextString());    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,String)	13	None	replace
765	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value ",  in.getPattern());  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value ",  in.getPattern());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value ",  in.getPattern());	  return    new    JsonParseException(   "The    date    should    be    a    string    value   ",    in.nextString());    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
766	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  Date  should  be  a  string  value ",  in.getClass());  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  Date  should  be  a  string  value ",  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "The  Date  should  be  a  string  value ",  in.getClass());	  JsonParseException    in    =    new    JsonParseException(   "The    Date    should    be    a    string    value   ");    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	135	None	replace
767	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.START_OBJECT)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  START_OBJECT  [FE]        IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()  ==  JsonToken.START_OBJECT)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()  ==  JsonToken.START_OBJECT)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }	  if(in.peek()    ==    JsonToken.VALUE_STRING)    {    String    datePattern    =    in.readString();    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol  START_OBJECT	106	None	replace
768	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_NULL)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  VALUE_NULL  [FE]          IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_NULL)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()  ==  JsonToken.VALUE_NULL)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }	  if(in.peek()    ==    JsonToken.VALUE_STRING)    {    String    datePattern    =    in.readString();    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol  VALUE_NULL	106	None	replace
769	[BUG]  [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value,  or  a  string  value ");  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value,  or  a  string  value ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonDescriptorException( "The  date  should  be  a  string  value,  or  a  string  value ");	  throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value,   ");    	non-compiled	[CE]  cannot  find  symbol	166	None	replace
770	[BUG]  [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value, "  +  in.toString());  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value, "  +  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonDescriptorException( "The  date  should  be  a  string  value, "  +  in.toString());	  throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value,   ");    	non-compiled	[CE]  cannot  find  symbol	166	None	replace
771	[BUG]  [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value,  but ");  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value,  but ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonDescriptorException( "The  date  should  be  a  string  value,  but ");	  throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value,   ");    	non-compiled	[CE]  cannot  find  symbol	166	None	replace
772	[BUG]  [BUGGY]  read()  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  read()  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	read()  {  throw  new  IllegalStateException( " ");  }	          if(in.peek()    ==    JsonToken.STRING)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	21	None	replace
773	[BUG]  [BUGGY]  while(in.nextString()!=  JsonToken.STRING)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  while(in.nextString()!=  JsonToken.STRING)  {  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	while(in.nextString()!=  JsonToken.STRING)  {	          if(in.peek()    ==    JsonToken.STRING)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
774	[BUG]  [BUGGY]  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()));  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()));	  JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.getValue()));    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	134	None	replace
775	[BUG]  [BUGGY]  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue()),  JsonToken.VALUE_STRING);  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue()),  JsonToken.VALUE_STRING);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue()),  JsonToken.VALUE_STRING);	  JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.getValue()));    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
776	[BUG]  [BUGGY]  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue()),  JSONToken.VALUE_STRING);  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue()),  JSONToken.VALUE_STRING);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue()),  JSONToken.VALUE_STRING);	  JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.getValue()));    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
777	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value ", "serialize  a  string  value ",  in.getMessage());  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value ", "serialize  a  string  value ",  in.getMessage());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  date  should  be  a  string  value ", "serialize  a  string  value ",  in.getMessage());	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value   ",    in.getMessage());    	non-compiled	[CE]  cannot  find  symbol	160	None	replace
778	[BUG]  [BUGGY]  JsonTokenException  t  =  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.toString());  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonTokenException  t  =  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonTokenException  t  =  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.toString());	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value:   "    +    in.toString());    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
779	[BUG]  [BUGGY]  Throw  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.toString());  [CE]  not  a  statement  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  Throw  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	Throw  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.toString());	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value:   "    +    in.toString());    	non-compiled	[CE]  not  a  statement	97	None	replace
780	[BUG]  [BUGGY]  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.toString());  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.toString());	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value:   "    +    in.toString());    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
781	[BUG]  [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Try  again.   ");  throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Try  again.  Try  again.   ");  [CE]  unreachable  statement  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Try  again.   ");  throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Try  again.  Try  again.   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Try    again.   ");    throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Try  again.  Try  again.   ");	  	non-compiled	[CE]  unreachable  statement	167	None	add
782	[BUG]  [BUGGY]          if(in.peek()  ==  JsonToken.STRING)  {  in.close();  }  if(in.print()  ==  JsonToken.STRING)  {  in.close();  }  [CE]  cannot  find  symbol  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]          if(in.peek()  ==  JsonToken.STRING)  {  in.close();  }  if(in.print()  ==  JsonToken.STRING)  {  in.close();  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	                if(in.peek()    ==    JsonToken.STRING)    {    in.close();    }    if(in.print()  ==  JsonToken.STRING)  {  in.close();  }	  	non-compiled	[CE]  cannot  find  symbol	29	None	add
783	[BUG]  [BUGGY]  throw  new  JsonParseException(   "This  date  should  be  a  string  value:   "  +  in.toString());  JsonToken  throw  new  JsonParseException( "This  date  should  be  a  string  value:   "  +  in.toString());  [CE]  not  a  statement  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "This  date  should  be  a  string  value:   "  +  in.toString());  JsonToken  throw  new  JsonParseException( "This  date  should  be  a  string  value:   "  +  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "This    date    should    be    a    string    value:   "    +    in.toString());    JsonToken  throw  new  JsonParseException( "This  date  should  be  a  string  value:   "  +  in.toString());	  	non-compiled	[CE]  not  a  statement	92	None	add
784	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  Date  should  be  a  string  value   ",  in.nextString());  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  Date  should  be  a  string  value   ",  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "The  Date  should  be  a  string  value   ",  in.nextString());	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value   ",    in.nextString());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	144	None	replace
785	[BUG]  [BUGGY]  JsonParseException  in  =  in.nextString();  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  in.nextString();  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  in.nextString();	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value   ",    in.nextString());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	144	None	replace
786	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value   ",  in.getKey());  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value   ",  in.getKey());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  Date  should  be  a  string  value   ",  in.getKey());	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value   ",    in.nextString());    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
787	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "This  date  should  be  a  string  value ",  in.getClass());  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "This  date  should  be  a  string  value ",  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "This  date  should  be  a  string  value ",  in.getClass());	  throw    new    JsonParseException(   "This    date    should    be    a    string    value   ",    in.getClass());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	116	None	replace
788	[BUG]  [BUGGY]  if(dateType  ==  String.class)  {  throw  new  JsonParseException( "The  date  should  be  a  string  value. ");  }  [CE]  incomparable  types:  Class<CAP#1>  and  Class<String>  [FE]        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(dateType  ==  String.class)  {  throw  new  JsonParseException( "The  date  should  be  a  string  value. ");  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(dateType  ==  String.class)  {  throw  new  JsonParseException( "The  date  should  be  a  string  value. ");  }	  throw    new    JsonParseException(       "The    date    should    be    a    string    value.       ");    JsonToken    throw    new    JsonParseException(   "The    date    should    be    a    string    value.       ");    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<String>	148	None	replace
789	[BUG]  [BUGGY]  JsonToken  throw  new  JsonParseException( "String  value  should  be  a  string  value. ");  [CE]  not  a  statement  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  throw  new  JsonParseException( "String  value  should  be  a  string  value. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  throw  new  JsonParseException( "String  value  should  be  a  string  value. ");	  throw    new    JsonParseException(       "The    date    should    be    a    string    value.       ");    JsonToken    throw    new    JsonParseException(   "The    date    should    be    a    string    value.       ");    	non-compiled	[CE]  not  a  statement	148	None	replace
790	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "String  value  should  be  a  string  value ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "String  value  should  be  a  string  value ");	  throw    new    JsonParseException(       "Date    should    be    a    string    value       ");    throw    new    JsonParseException(,   "Date    should    be    a    string    value       ");    	compilable	  [FE]  JsonParseException  	58	2	replace
791	[BUG]  [BUGGY]  throw  new  JsonParseException( "String  value  should  be  a  string  value ");  [FE]  JsonParseException  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "String  value  should  be  a  string  value ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "String  value  should  be  a  string  value ");	  throw    new    JsonParseException(       "Date    should    be    a    string    value       ");    throw    new    JsonParseException(,   "Date    should    be    a    string    value       ");    	compilable	  [FE]  JsonParseException  	58	2	replace
792	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in  ==  null)  {  throw  new  JsonParseException( "Date  should  be  a  string  value ");  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	if(in  ==  null)  {  throw  new  JsonParseException( "Date  should  be  a  string  value ");  }	  throw    new    JsonParseException(       "Date    should    be    a    string    value       ");    throw    new    JsonParseException(,   "Date    should    be    a    string    value       ");    	compilable	  [FE]  IllegalStateException  	58	1	replace
793	[BUG]  [BUGGY]  if(in  ==  null)  {  throw  new  JsonParseException( "Date  should  be  a  string  value ");  }  [FE]  IllegalStateException  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in  ==  null)  {  throw  new  JsonParseException( "Date  should  be  a  string  value ");  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in  ==  null)  {  throw  new  JsonParseException( "Date  should  be  a  string  value ");  }	  throw    new    JsonParseException(       "Date    should    be    a    string    value       ");    throw    new    JsonParseException(,   "Date    should    be    a    string    value       ");    	compilable	  [FE]  IllegalStateException  	58	1	replace
794	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "String  should  be  a  string  value ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "String  should  be  a  string  value ");	  throw    new    JsonParseException(       "Date    should    be    a    string    value       ");    throw    new    JsonParseException(,   "Date    should    be    a    string    value       ");    	compilable	  [FE]  JsonParseException  	58	2	replace
795	[BUG]  [BUGGY]  throw  new  JsonParseException( "String  should  be  a  string  value ");  [FE]  JsonParseException  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "String  should  be  a  string  value ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "String  should  be  a  string  value ");	  throw    new    JsonParseException(       "Date    should    be    a    string    value       ");    throw    new    JsonParseException(,   "Date    should    be    a    string    value       ");    	compilable	  [FE]  JsonParseException  	58	2	replace
796	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "String  value  must  be  a  string  value ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "String  value  must  be  a  string  value ");	  throw    new    JsonParseException(       "Date    should    be    a    string    value       ");    throw    new    JsonParseException(,   "Date    should    be    a    string    value       ");    	compilable	  [FE]  JsonParseException  	58	2	replace
797	[BUG]  [BUGGY]  throw  new  JsonParseException( "String  value  must  be  a  string  value ");  [FE]  JsonParseException  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "String  value  must  be  a  string  value ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "String  value  must  be  a  string  value ");	  throw    new    JsonParseException(       "Date    should    be    a    string    value       ");    throw    new    JsonParseException(,   "Date    should    be    a    string    value       ");    	compilable	  [FE]  JsonParseException  	58	2	replace
798	[BUG]  [BUGGY]  JsonToken  t  =  in.readFromString(in);  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  t  =  in.readFromString(in);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  t  =  in.readFromString(in);	  JsonToken    t    =    in.readFromString();    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
799	[BUG]  [BUGGY]  new  JsonTokenException( "Can  not  read  string: "  +  in.getClass());  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonTokenException( "Can  not  read  string: "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonTokenException( "Can  not  read  string: "  +  in.getClass());	  throw    new    JsonTokenException(   "Can    not    read    string:   "    +    in.getClass());    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
800	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value ",  in.getClass(),  SIMPLE_NAME);  [CE]  no  suitable  constructor  found  for  JsonParseException(String,Class<CAP#1>,String)  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value ",  in.getClass(),  SIMPLE_NAME);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value ",  in.getClass(),  SIMPLE_NAME);	  return    new    JsonParseException(   "The    date    should    be    a    string    value   ",    in.getClass());    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,Class<CAP#1>,String)	15	None	replace
801	[BUG]  [BUGGY]  new  JsonParseException(   "The  Date  should  be  a  string  value   ");  new  JsonParseException(   "The  Date  should  be  a  string  value ",);  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException(   "The  Date  should  be  a  string  value   ");  new  JsonParseException(   "The  Date  should  be  a  string  value ",);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new    JsonParseException(   "The    Date    should    be    a    string    value   ");    new  JsonParseException(   "The  Date  should  be  a  string  value ",);	  	non-compiled	[CE]  illegal  start  of  expression	136	None	add
802	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Can  not  read  string: "  +  in.getString());  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "Can  not  read  string: "  +  in.getString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Can  not  read  string: "  +  in.getString());	  throw    new    JsonTokenException(   "Can    not    read    string:   ");    	non-compiled	[CE]  cannot  find  symbol	149	None	replace
803	[BUG]  [BUGGY]  JsonTokenException  in  =  new  JsonTokenException( "Can  not  read  string: ");  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonTokenException  in  =  new  JsonTokenException( "Can  not  read  string: ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonTokenException  in  =  new  JsonTokenException( "Can  not  read  string: ");	  throw    new    JsonTokenException(   "Can    not    read    string:   ");    	non-compiled	[CE]  cannot  find  symbol	149	None	replace
804	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Can  not  read  string: "  +  in.getPeek());  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "Can  not  read  string: "  +  in.getPeek());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Can  not  read  string: "  +  in.getPeek());	  throw    new    JsonTokenException(   "Can    not    read    string:   ");    	non-compiled	[CE]  cannot  find  symbol	149	None	replace
805	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value.  Try  again. ");  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value.  Try  again. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value.  Try  again. ");	  JsonParseException    in    =    new    JsonParseException(   "The    date    should    be    a    string    value.   ");    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	131	None	replace
806	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date  type  does  not  exist. ");  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date  type  does  not  exist. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date  type  does  not  exist. ");	  JsonParseException    in    =    new    JsonParseException(   "The    date    should    be    a    string    value.   ");    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	131	None	replace
807	[BUG]  [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value: "  +  in.getPattern());  [CE]  cannot  find  symbol  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value: "  +  in.getPattern());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "This  date  should  be  a  string  value: "  +  in.getPattern());	  throw    new    JsonParseException(   "This    date    should    be    a    string    value:   "    +    in.toString());    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
808	[BUG]  [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value: "  +  in.getText());  [CE]  cannot  find  symbol  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value: "  +  in.getText());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "This  date  should  be  a  string  value: "  +  in.getText());	  throw    new    JsonParseException(   "This    date    should    be    a    string    value:   "    +    in.toString());    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
809	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date  type  does  not  exist. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date  type  does  not  exist. ");	  new    JsonParseException(   "The    date    should    be    a    string    value.   ");    	compilable	  [FE]  IllegalStateException  	133	1	replace
810	[BUG]  [BUGGY]  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date  type  does  not  exist. ");  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date  type  does  not  exist. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date  type  does  not  exist. ");	  new    JsonParseException(   "The    date    should    be    a    string    value.   ");    	compilable	  [FE]  IllegalStateException  	133	1	replace
811	[BUG]  [BUGGY]  new  JsonToken( "The  date  should  be  a  string  value. ");  [CE]  enum  types  may  not  be  instantiated  [FE]      IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonToken( "The  date  should  be  a  string  value. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonToken( "The  date  should  be  a  string  value. ");	  new    JsonParseException(   "The    date    should    be    a    string    value.   ");    	non-compiled	[CE]  enum  types  may  not  be  instantiated	133	None	replace
812	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date  is  numeric. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date  is  numeric. ");	  new    JsonParseException(   "The    date    should    be    a    string    value.   ");    	compilable	  [FE]  IllegalStateException  	133	1	replace
813	[BUG]  [BUGGY]  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date  is  numeric. ");  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date  is  numeric. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date  is  numeric. ");	  new    JsonParseException(   "The    date    should    be    a    string    value.   ");    	compilable	  [FE]  IllegalStateException  	133	1	replace
814	[BUG]  [BUGGY]  if(in!=  null  ||  in.peek()  ==  JsonToken.STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in!=  null  ||  in.peek()  ==  JsonToken.STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in!=  null  ||  in.peek()  ==  JsonToken.STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }	  if(in.peek()    ==    JsonToken.STRING)    {    String    datePattern    =    in.readString();    return    new    Date(datePattern);    }    else    {    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
815	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value: "  +  in.getValue());  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value: "  +  in.getValue());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value: "  +  in.getValue());	  return    new    JsonParseException(   "The    date    should    be    a    string    value:   "    +    in.getClass());    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
816	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.START_OBJECT)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  START_OBJECT  [FE]        IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()!=  JsonToken.START_OBJECT)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()!=  JsonToken.START_OBJECT)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }	          if(in.peek()    ==    JsonToken.VALUE_STRING)    {    String    datePattern    =    in.readString();    return    new    Date(datePattern);    }    else    {    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol  START_OBJECT	130	None	replace
817	[BUG]  [BUGGY]  if(in.read()  ==  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  [FE]          IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.read()  ==  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.read()  ==  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }	          if(in.peek()    ==    JsonToken.VALUE_STRING)    {    String    datePattern    =    in.readString();    return    new    Date(datePattern);    }    else    {    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
818	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value.   "  +  String.valueOf(datePattern));  [CE]  cannot  find  symbol  datePattern  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value.   "  +  String.valueOf(datePattern));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value.   "  +  String.valueOf(datePattern));	  return    new    JsonParseException(   "The    date    should    be    a    string    value.   ");    	non-compiled	[CE]  cannot  find  symbol  datePattern	11	None	replace
819	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value.   "  +  String.valueOf(in.nextString()));  [CE]  incompatible  types  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value.   "  +  String.valueOf(in.nextString()));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value.   "  +  String.valueOf(in.nextString()));	  return    new    JsonParseException(   "The    date    should    be    a    string    value.   ");    	non-compiled	[CE]  incompatible  types	11	None	replace
820	[BUG]  [BUGGY]  JsonTokenException  in  =  new  JsonTokenException( "Date  should  be  a  string  value ");  [CE]  cannot  find  symbol  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonTokenException  in  =  new  JsonTokenException( "Date  should  be  a  string  value ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonTokenException  in  =  new  JsonTokenException( "Date  should  be  a  string  value ");	  throw    new    JsonTokenException(   "Date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
821	[BUG]  [BUGGY]  JsonTokenException.wrap( "Date  should  be  a  string  value ");  [CE]  cannot  find  symbol  JsonTokenException  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonTokenException.wrap( "Date  should  be  a  string  value ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonTokenException.wrap( "Date  should  be  a  string  value ");	  throw    new    JsonTokenException(   "Date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol  JsonTokenException	34	None	replace
822	[BUG]  [BUGGY]  Throwables.throw  new  JsonParseException( "The  date  should  be  a  string  value. ");  [CE]  <identifier>  expected  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  Throwables.throw  new  JsonParseException( "The  date  should  be  a  string  value. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	Throwables.throw  new  JsonParseException( "The  date  should  be  a  string  value. ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.n   ");    	non-compiled	[CE]  <identifier>  expected	43	None	replace
823	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  3);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  3);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  3);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString())+    1);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	120	None	replace
824	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  4);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  4);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  4);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString())+    1);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	120	None	replace
825	[BUG]  [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value: "  +  in.getPattern());  [CE]  cannot  find  symbol  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value: "  +  in.getPattern());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "Date  should  be  a  string  value: "  +  in.getPattern());	  throw    new    JsonParseException(   "Date    should    be    a    string    value:   "    +    in.toString());    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
826	[BUG]  [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value: "  +  in.getPeek());  [CE]  cannot  find  symbol  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value: "  +  in.getPeek());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "Date  should  be  a  string  value: "  +  in.getPeek());	  throw    new    JsonParseException(   "Date    should    be    a    string    value:   "    +    in.toString());    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
827	[BUG]  [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value: "  +  in.getText());  [CE]  cannot  find  symbol  [FE]        JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value: "  +  in.getText());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "Date  should  be  a  string  value: "  +  in.getText());	  throw    new    JsonParseException(   "Date    should    be    a    string    value:   "    +    in.toString());    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
828	[BUG]  [BUGGY]  Throw  new  JsonTokenException( "This  date  should  be  a  string  value ");  [CE]  not  a  statement  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  Throw  new  JsonTokenException( "This  date  should  be  a  string  value ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	Throw  new  JsonTokenException( "This  date  should  be  a  string  value ");	  throw    new    JsonParseException(       "This    date    should    be    a    string    value       ");    Throw    new    JsonParseException(   "This    date    should    be    a    string    value       ");    	non-compiled	[CE]  not  a  statement	84	None	replace
829	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "The  Date  should  be  a  string  value: ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	new  JsonParseException( "The  Date  should  be  a  string  value: ");	  new    JsonParseException(   "The    Date    should    be    a    string    value   ");    	compilable	  [FE]  IllegalStateException  	137	1	replace
830	[BUG]  [BUGGY]  new  JsonParseException( "The  Date  should  be  a  string  value: ");  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "The  Date  should  be  a  string  value: ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonParseException( "The  Date  should  be  a  string  value: ");	  new    JsonParseException(   "The    Date    should    be    a    string    value   ");    	compilable	  [FE]  IllegalStateException  	137	1	replace
831	[BUG]  [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ", "Serialize  in  a  string  value ",  in.getMessage());  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ", "Serialize  in  a  string  value ",  in.getMessage());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ", "Serialize  in  a  string  value ",  in.getMessage());	  throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value   ",    in.getMessage());    	non-compiled	[CE]  cannot  find  symbol	165	None	replace
832	[BUG]  [BUGGY]  Throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.getMessage());  [CE]  not  a  statement  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  Throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.getMessage());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	Throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.getMessage());	  Throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  not  a  statement	114	None	replace
833	[BUG]  [BUGGY]  Throwables.throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  this  value  is  not  valid. ");  [CE]  <identifier>  expected  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  Throwables.throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  this  value  is  not  valid. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	Throwables.throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  this  value  is  not  valid. ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Please    check    that    this    value    is    not    valid.   ");    	non-compiled	[CE]  <identifier>  expected	49	None	replace
834	[BUG]  [BUGGY]  JsonTokenException  in  =  new  JsonTokenException( "Unexpected  string: "  +  in.nextString());  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonTokenException  in  =  new  JsonTokenException( "Unexpected  string: "  +  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonTokenException  in  =  new  JsonTokenException( "Unexpected  string: "  +  in.nextString());	  throw    new    JsonTokenException(   "Unexpected    string:   "    +    in.nextString());    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
835	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Unexpected  string: "  +  in.getString());  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "Unexpected  string: "  +  in.getString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Unexpected  string: "  +  in.getString());	  throw    new    JsonTokenException(   "Unexpected    string:   "    +    in.nextString());    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
836	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Unexpected  string: "  +  in.nextString(),  JsonToken.END_ARRAY);  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "Unexpected  string: "  +  in.nextString(),  JsonToken.END_ARRAY);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Unexpected  string: "  +  in.nextString(),  JsonToken.END_ARRAY);	  throw    new    JsonTokenException(   "Unexpected    string:   "    +    in.nextString());    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
837	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value "  +  SIMPLE_NAME,  in.toString());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,String)  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value "  +  SIMPLE_NAME,  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value "  +  SIMPLE_NAME,  in.toString());	  return    new    JsonParseException(   "The    date    should    be    a    string    value   ",    in.toString());    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,String)	140	None	replace
838	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value ",  in,  in.toString());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader,String)  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value ",  in,  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value ",  in,  in.toString());	  return    new    JsonParseException(   "The    date    should    be    a    string    value   ",    in.toString());    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader,String)	140	None	replace
839	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JSON_TYPE),  SIMPLE_NAME);  [CE]  cannot  find  symbol  JSON_TYPE  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JSON_TYPE),  SIMPLE_NAME);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JSON_TYPE),  SIMPLE_NAME);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JSON_TYPE);    	non-compiled	[CE]  cannot  find  symbol  JSON_TYPE	3	None	replace
840	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JSON_TYPE,  SIMPLE_NAME);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JSON_TYPE,  SIMPLE_NAME);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JSON_TYPE,  SIMPLE_NAME);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JSON_TYPE);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	3	None	replace
841	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SHORT_NAME),  JSON_TYPE);  [CE]  cannot  find  symbol  SHORT_NAME  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SHORT_NAME),  JSON_TYPE);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SHORT_NAME),  JSON_TYPE);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JSON_TYPE);    	non-compiled	[CE]  cannot  find  symbol  SHORT_NAME	3	None	replace
842	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  1,  JSON_TYPE);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  1,  JSON_TYPE);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  1,  JSON_TYPE);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JSON_TYPE);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	3	None	replace
843	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  SIMPLE_NAME,  JSON_TYPE);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  SIMPLE_NAME,  JSON_TYPE);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  SIMPLE_NAME,  JSON_TYPE);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JSON_TYPE);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	3	None	replace
844	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value ",  in,  in.getClass());  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value ",  in,  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  date  should  be  a  string  value ",  in,  in.getClass());	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value   ",    in.getClass());    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
845	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value ",  in.class());  [CE]  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value ",  in.class());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  date  should  be  a  string  value ",  in.class());	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value   ",    in.getClass());    	non-compiled	[CE]  	105	None	replace
846	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NULL,  JsonToken.END_OBJECT);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NULL,  JsonToken.END_OBJECT);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NULL,  JsonToken.END_OBJECT);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JsonToken.VALUE_NULL);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	2	None	replace
847	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  1L,  JsonToken.VALUE_NULL);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  1L,  JsonToken.VALUE_NULL);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  1L,  JsonToken.VALUE_NULL);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JsonToken.VALUE_NULL);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	2	None	replace
848	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  SIMPLE_NAME,  JsonToken.VALUE_NULL);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  SIMPLE_NAME,  JsonToken.VALUE_NULL);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  SIMPLE_NAME,  JsonToken.VALUE_NULL);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JsonToken.VALUE_NULL);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	2	None	replace
849	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  new  IllegalArgumentException(   "   ");  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  IllegalArgumentException(   "   ");  new  IllegalArgumentException(   "   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    IllegalArgumentException(   "   ");    new  IllegalArgumentException(   "   ");	  	non-compiled	[CE]  unreachable  statement	75	None	add
850	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  10  +  SIMPLE_NAME));  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  10  +  SIMPLE_NAME));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  10  +  SIMPLE_NAME));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString(),    SIMPLE_NAME));    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	158	None	replace
851	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  128));  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  128));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  128));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString(),    SIMPLE_NAME));    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	158	None	replace
852	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  10),  SIMPLE_NAME));  [CE]  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  10),  SIMPLE_NAME));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  10),  SIMPLE_NAME));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString(),    SIMPLE_NAME));    	non-compiled	[CE]  	158	None	replace
853	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  100));  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  100));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  100));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString(),    SIMPLE_NAME));    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	158	None	replace
854	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  DEFAULT_DATE_NAME));  [CE]  cannot  find  symbol  DEFAULT_DATE_NAME  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  DEFAULT_DATE_NAME));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  DEFAULT_DATE_NAME));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString(),    SIMPLE_NAME));    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DATE_NAME	158	None	replace
855	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  SIMPLE_NAME,  JsonToken.STRING);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  SIMPLE_NAME,  JsonToken.STRING);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  SIMPLE_NAME,  JsonToken.STRING);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JsonToken.STRING);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	6	None	replace
856	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  1,  JsonToken.STRING);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  1,  JsonToken.STRING);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  1,  JsonToken.STRING);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JsonToken.STRING);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	6	None	replace
857	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JsonToken.STRING),  SIMPLE_NAME);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JsonToken.STRING),  SIMPLE_NAME);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JsonToken.STRING),  SIMPLE_NAME);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JsonToken.STRING);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	6	None	replace
858	[BUG]  [BUGGY]  if(in!=  null  ||  in.peek()  ==  JsonToken.STRING)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in!=  null  ||  in.peek()  ==  JsonToken.STRING)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in!=  null  ||  in.peek()  ==  JsonToken.STRING)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }	          if(in.peek()    ==    JsonToken.STRING)    {    String    datePattern    =    in.getString();    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
859	[BUG]  [BUGGY]  if(in  ==  null  ||  in.peek()  ==  JsonToken.STRING)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in  ==  null  ||  in.peek()  ==  JsonToken.STRING)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in  ==  null  ||  in.peek()  ==  JsonToken.STRING)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }	          if(in.peek()    ==    JsonToken.STRING)    {    String    datePattern    =    in.getString();    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
860	[BUG]  [BUGGY]  while(in.peek()  ==  JsonToken.STRING)  {  datePattern  =  in.getString();  return  new  Date(datePattern);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  while(in.peek()  ==  JsonToken.STRING)  {  datePattern  =  in.getString();  return  new  Date(datePattern);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	while(in.peek()  ==  JsonToken.STRING)  {  datePattern  =  in.getString();  return  new  Date(datePattern);	          if(in.peek()    ==    JsonToken.STRING)    {    String    datePattern    =    in.getString();    return    new    Date(datePattern);    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
861	[BUG]  [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value "+Integer.toHexString(in.getClass()));  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value "+Integer.toHexString(in.getClass()));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "Date  should  be  a  string  value "+Integer.toHexString(in.getClass()));	  throw    new    JsonParseException(   "Date    should    be    a    string    value   ",    in.getClass());    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	154	None	replace
862	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value ",  in.getClass());  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value ",  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value ",  in.getClass());	  throw    new    JsonParseException(   "Date    should    be    a    string    value   ",    in.getClass());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	154	None	replace
863	[BUG]  [BUGGY]  JsonTokenException  in  =  new  JsonTokenException( "Can  not  read  string: "  +  in.nextString());  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonTokenException  in  =  new  JsonTokenException( "Can  not  read  string: "  +  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonTokenException  in  =  new  JsonTokenException( "Can  not  read  string: "  +  in.nextString());	  throw    new    JsonTokenException(   "Can    not    read    string:   "    +    in.nextString());    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
864	[BUG]  [BUGGY]  new  JsonTokenException( "Can  not  read  string: "  +  in.nextString());  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonTokenException( "Can  not  read  string: "  +  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonTokenException( "Can  not  read  string: "  +  in.nextString());	  throw    new    JsonTokenException(   "Can    not    read    string:   "    +    in.nextString());    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
865	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JSONToken.VALUE_STRING,  SIMPLE_NAME);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JSONToken.VALUE_STRING,  SIMPLE_NAME);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JSONToken.VALUE_STRING,  SIMPLE_NAME);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JSONToken.VALUE_STRING);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	4	None	replace
866	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  SIMPLE_NAME,  JSONToken.VALUE_STRING);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  SIMPLE_NAME,  JSONToken.VALUE_STRING);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  SIMPLE_NAME,  JSONToken.VALUE_STRING);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JSONToken.VALUE_STRING);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	4	None	replace
867	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  32),  JSONToken.VALUE_STRING);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  32),  JSONToken.VALUE_STRING);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  32),  JSONToken.VALUE_STRING);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JSONToken.VALUE_STRING);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	4	None	replace
868	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SHORT_NAME),  JSONToken.VALUE_STRING);  [CE]  cannot  find  symbol  SHORT_NAME  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SHORT_NAME),  JSONToken.VALUE_STRING);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SHORT_NAME),  JSONToken.VALUE_STRING);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JSONToken.VALUE_STRING);    	non-compiled	[CE]  cannot  find  symbol  SHORT_NAME	4	None	replace
869	[BUG]  [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Please  check  that  the  date  is  null.   ");  JsonParseException(   "The  date  should  be  a  string  value.  Please  check  that  the  date  is  null.   ");  [CE]  cannot  find  symbol  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Please  check  that  the  date  is  null.   ");  JsonParseException(   "The  date  should  be  a  string  value.  Please  check  that  the  date  is  null.   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Please    check    that    the    date    is    null.   ");    JsonParseException(   "The  date  should  be  a  string  value.  Please  check  that  the  date  is  null.   ");	  	non-compiled	[CE]  cannot  find  symbol	44	None	add
870	[BUG]  [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Please  check  that  the  date  is  null.   ");  Throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date  is  null.   ");  [CE]  not  a  statement  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Please  check  that  the  date  is  null.   ");  Throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date  is  null.   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Please    check    that    the    date    is    null.   ");    Throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date  is  null.   ");	  	non-compiled	[CE]  not  a  statement	44	None	add
871	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  String.class));  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  String.class));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  String.class));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString(),    JSON_NAME));    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	121	None	replace
872	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JSON_PREFIX));  [CE]  cannot  find  symbol  JSON_PREFIX  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JSON_PREFIX));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JSON_PREFIX));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString(),    JSON_NAME));    	non-compiled	[CE]  cannot  find  symbol  JSON_PREFIX	121	None	replace
873	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  12));  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  12));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  12));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString(),    JSON_NAME));    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	121	None	replace
874	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value "  +  String.valueOf(in.nextString()));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "Date  should  be  a  string  value "  +  String.valueOf(in.nextString()));	  throw    new    JsonParseException(   "Date    should    be    a    string    value   ",    in.nextString());    	compilable	  [FE]  IllegalStateException  	156	1	replace
875	[BUG]  [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value "  +  String.valueOf(in.nextString()));  [FE]  IllegalStateException  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value "  +  String.valueOf(in.nextString()));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "Date  should  be  a  string  value "  +  String.valueOf(in.nextString()));	  throw    new    JsonParseException(   "Date    should    be    a    string    value   ",    in.nextString());    	compilable	  [FE]  IllegalStateException  	156	1	replace
876	[BUG]  [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value ", "Date  should  be  a  string  value "  +  in.nextString());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,String)  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value ", "Date  should  be  a  string  value "  +  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "Date  should  be  a  string  value ", "Date  should  be  a  string  value "  +  in.nextString());	  throw    new    JsonParseException(   "Date    should    be    a    string    value   ",    in.nextString());    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,String)	156	None	replace
877	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Unknown  string: "  +  in.getString());  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "Unknown  string: "  +  in.getString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Unknown  string: "  +  in.getString());	  throw    new    JsonTokenException(   "Unknown    string:   ");    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
878	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  localFormat),  in.nextString());  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  localFormat),  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  localFormat),  in.nextString());	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    in.nextString());    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	159	None	replace
879	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SHORT_NAME),  in.nextString());  [CE]  cannot  find  symbol  SHORT_NAME  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SHORT_NAME),  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SHORT_NAME),  in.nextString());	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    in.nextString());    	non-compiled	[CE]  cannot  find  symbol  SHORT_NAME	159	None	replace
880	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  128),  in.nextString());  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  128),  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  128),  in.nextString());	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    in.nextString());    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	159	None	replace
881	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Unknown  string: "  +  in.nextString(),  JsonToken.END_ARRAY);  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "Unknown  string: "  +  in.nextString(),  JsonToken.END_ARRAY);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Unknown  string: "  +  in.nextString(),  JsonToken.END_ARRAY);	  throw    new    JsonTokenException(   "Unknown    string:   "    +    in.nextString());    	non-compiled	[CE]  cannot  find  symbol	151	None	replace
882	[BUG]  [BUGGY]  new  JsonTokenException( "Unknown  string: "  +  in.nextString());  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonTokenException( "Unknown  string: "  +  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonTokenException( "Unknown  string: "  +  in.nextString());	  throw    new    JsonTokenException(   "Unknown    string:   "    +    in.nextString());    	non-compiled	[CE]  cannot  find  symbol	151	None	replace
883	[BUG]  [BUGGY]  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.toString());  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonDescriptorException( "The  date  should  be  a  string  value ",  in.toString());	  JsonDescriptorException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
884	[BUG]  [BUGGY]  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.getValue());  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.getValue());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonDescriptorException( "The  date  should  be  a  string  value ",  in.getValue());	  JsonDescriptorException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
885	[BUG]  [BUGGY]  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue()),  JsonToken.VALUE_NULL);  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue()),  JsonToken.VALUE_NULL);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue()),  JsonToken.VALUE_NULL);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.getValue()),    JsonToken.VALUE_NULL);    	non-compiled	[CE]  cannot  find  symbol	164	None	replace
886	[BUG]  [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.read());  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.read());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.read());	  throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value   ",    in);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
887	[BUG]  [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.readString());  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.readString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.readString());	  throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value   ",    in);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
888	[BUG]  [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in,  in);  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in,  in);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in,  in);	  throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value   ",    in);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
889	[BUG]  [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Please  check  that  the  date.   ");  JsonParseException(   "The  date  should  be  a  string  value.  Please  check  that  the  date.   ");  [CE]  cannot  find  symbol  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Please  check  that  the  date.   ");  JsonParseException(   "The  date  should  be  a  string  value.  Please  check  that  the  date.   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Please    check    that    the    date.   ");    JsonParseException(   "The  date  should  be  a  string  value.  Please  check  that  the  date.   ");	  	non-compiled	[CE]  cannot  find  symbol	46	None	add
890	[BUG]  [BUGGY]  throw  new  JsonParseException(   "The  Date  should  be  a  string  value:   "  +  in.getClass());  JsonToken  throw  new  JsonParseException( "The  Date  should  be  a  string  value:   "  +  in.getClass());  [CE]  not  a  statement  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "The  Date  should  be  a  string  value:   "  +  in.getClass());  JsonToken  throw  new  JsonParseException( "The  Date  should  be  a  string  value:   "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "The    Date    should    be    a    string    value:   "    +    in.getClass());    JsonToken  throw  new  JsonParseException( "The  Date  should  be  a  string  value:   "  +  in.getClass());	  	non-compiled	[CE]  not  a  statement	68	None	add
891	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  String  value ",  in.toString());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,String)  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  String  value ",  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  String  value ",  in.toString());	  return    new    JsonParseException(   "The    date    should    be    a    String    value   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,String)	142	None	replace
892	[BUG]  [BUGGY]  return  new  JsonParseException( "The  Date  should  be  a  String  value ");  [CE]  incompatible  types  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  Date  should  be  a  String  value ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  Date  should  be  a  String  value ");	  return    new    JsonParseException(   "The    date    should    be    a    String    value   ");    	non-compiled	[CE]  incompatible  types	142	None	replace
893	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SHORT_NAME),  SIMPLE_NAME);  [CE]  cannot  find  symbol  SHORT_NAME  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SHORT_NAME),  SIMPLE_NAME);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SHORT_NAME),  SIMPLE_NAME);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    SIMPLE_NAME);    	non-compiled	[CE]  cannot  find  symbol  SHORT_NAME	157	None	replace
894	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  2),  SIMPLE_NAME);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  2),  SIMPLE_NAME);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  2),  SIMPLE_NAME);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    SIMPLE_NAME);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	157	None	replace
895	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  128),  SIMPLE_NAME);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  128),  SIMPLE_NAME);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  128),  SIMPLE_NAME);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    SIMPLE_NAME);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	157	None	replace
896	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  DEFAULT_TIME_NAME),  SIMPLE_NAME);  [CE]  cannot  find  symbol  DEFAULT_TIME_NAME  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  DEFAULT_TIME_NAME),  SIMPLE_NAME);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  DEFAULT_TIME_NAME),  SIMPLE_NAME);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    SIMPLE_NAME);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_TIME_NAME	157	None	replace
897	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  DEFAULT_DATE_NAME),  SIMPLE_NAME);  [CE]  cannot  find  symbol  DEFAULT_DATE_NAME  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  DEFAULT_DATE_NAME),  SIMPLE_NAME);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  DEFAULT_DATE_NAME),  SIMPLE_NAME);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    SIMPLE_NAME);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DATE_NAME	157	None	replace
898	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SHORT_NAME),  INVALID_DATE);  [CE]  cannot  find  symbol  SHORT_NAME  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SHORT_NAME),  INVALID_DATE);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SHORT_NAME),  INVALID_DATE);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    INVALID_DATE);    	non-compiled	[CE]  cannot  find  symbol  SHORT_NAME	122	None	replace
899	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  2),  INVALID_DATE);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  2),  INVALID_DATE);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  2),  INVALID_DATE);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    INVALID_DATE);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	122	None	replace
900	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  100),  INVALID_DATE);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  100),  INVALID_DATE);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  100),  INVALID_DATE);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    INVALID_DATE);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	122	None	replace
901	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SHORT_DATE),  INVALID_DATE);  [CE]  cannot  find  symbol  SHORT_DATE  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SHORT_DATE),  INVALID_DATE);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SHORT_DATE),  INVALID_DATE);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    INVALID_DATE);    	non-compiled	[CE]  cannot  find  symbol  SHORT_DATE	122	None	replace
902	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  DATE_NAME),  INVALID_DATE);  [CE]  cannot  find  symbol  DATE_NAME  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  DATE_NAME),  INVALID_DATE);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  DATE_NAME),  INVALID_DATE);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    INVALID_DATE);    	non-compiled	[CE]  cannot  find  symbol  DATE_NAME	122	None	replace
903	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value,  or  a  string  value ");  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value,  or  a  string  value ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  date  should  be  a  string  value,  or  a  string  value ");	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value,   ");    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
904	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value,  but ");  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value,  but ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  date  should  be  a  string  value,  but ");	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value,   ");    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
905	[BUG]  [BUGGY]  throw  new  JsonParseException(   "The  Date  should  be  a  string  value:   "  +  in.nextString());  JsonToken  throw  new  JsonParseException( "The  Date  should  be  a  string  value:   "  +  in.nextString());  [CE]  not  a  statement  [FE]    IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "The  Date  should  be  a  string  value:   "  +  in.nextString());  JsonToken  throw  new  JsonParseException( "The  Date  should  be  a  string  value:   "  +  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "The    Date    should    be    a    string    value:   "    +    in.nextString());    JsonToken  throw  new  JsonParseException( "The  Date  should  be  a  string  value:   "  +  in.nextString());	  	non-compiled	[CE]  not  a  statement	73	None	add
906	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.START_OBJECT)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  START_OBJECT  [FE]          IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()  ==  JsonToken.START_OBJECT)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()  ==  JsonToken.START_OBJECT)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }	  if(in.peek()    ==    JsonToken.VALUE_STRING)    {    String    datePattern    =    in.getString();    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol  START_OBJECT	107	None	replace
907	[BUG]  [BUGGY]  if(in!=  null  ||  in.peek()  ==  JsonToken.STRING)  {  String  datePattern  =  in.getValue();  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in!=  null  ||  in.peek()  ==  JsonToken.STRING)  {  String  datePattern  =  in.getValue();  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in!=  null  ||  in.peek()  ==  JsonToken.STRING)  {  String  datePattern  =  in.getValue();  return  new  Date(datePattern);  }	          if(in.peek()    ==    JsonToken.STRING)    {    String    datePattern    =    in.getValue();    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
908	[BUG]  [BUGGY]  while(in.peek()  ==  JsonToken.STRING)  {  datePattern  =  in.getValue();  return  new  Date(datePattern);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  while(in.peek()  ==  JsonToken.STRING)  {  datePattern  =  in.getValue();  return  new  Date(datePattern);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	while(in.peek()  ==  JsonToken.STRING)  {  datePattern  =  in.getValue();  return  new  Date(datePattern);	          if(in.peek()    ==    JsonToken.STRING)    {    String    datePattern    =    in.getValue();    return    new    Date(datePattern);    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
909	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Try  again, ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "The  date  should  be  a  string  value.  Try  again, ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Try    again.   ");    	compilable	  [FE]  JsonParseException  	168	2	replace
910	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Try  again, ");  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Try  again, ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value.  Try  again, ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Try    again.   ");    	compilable	  [FE]  JsonParseException  	168	2	replace
911	[BUG]  [BUGGY]  return  new  JsonTokenException( "Unexpected  string: "  +  in.getClass());  [CE]  cannot  find  symbol  [FE]                                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonTokenException( "Unexpected  string: "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonTokenException( "Unexpected  string: "  +  in.getClass());	  throw    new    JsonTokenException(   "Unexpected    string:   "    +    in.getClass());    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
912	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "The  date  should  be  a  string  value ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	new  JsonParseException( "The  date  should  be  a  string  value ");	  new    JsonParseException(   "This    date    should    be    a    string    value   ");    	compilable	  [FE]  IllegalStateException  	118	1	replace
913	[BUG]  [BUGGY]  new  JsonParseException( "The  date  should  be  a  string  value ");  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "The  date  should  be  a  string  value ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonParseException( "The  date  should  be  a  string  value ");	  new    JsonParseException(   "This    date    should    be    a    string    value   ");    	compilable	  [FE]  IllegalStateException  	118	1	replace
914	[BUG]  [BUGGY]  new  JsonParseException( "This  date  should  be  a  string  value ",  in.toString());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,String)  [FE]      IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "This  date  should  be  a  string  value ",  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonParseException( "This  date  should  be  a  string  value ",  in.toString());	  new    JsonParseException(   "This    date    should    be    a    string    value   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,String)	118	None	replace
915	[BUG]  [BUGGY]  if(in.nextString()!=  JsonToken.STRING)  {  in.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  incomparable  types:  String  and  JsonToken  [FE]    IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.nextString()!=  JsonToken.STRING)  {  in.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.nextString()!=  JsonToken.STRING)  {  in.close();  }  else  {  throw  new  IllegalStateException( " ");  }	  in.close();    	non-compiled	[CE]  incomparable  types:  String  and  JsonToken	109	None	replace
916	[BUG]  [BUGGY]  if(in.nextString()  ==  JsonToken.STRING)  {  in.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  incomparable  types:  String  and  JsonToken  [FE]      IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.nextString()  ==  JsonToken.STRING)  {  in.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.nextString()  ==  JsonToken.STRING)  {  in.close();  }  else  {  throw  new  IllegalStateException( " ");  }	  in.close();    	non-compiled	[CE]  incomparable  types:  String  and  JsonToken	109	None	replace
917	[BUG]  [BUGGY]  if(in.next()!=  JsonToken.STRING)  {  in.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  [FE]        IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.next()!=  JsonToken.STRING)  {  in.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.next()!=  JsonToken.STRING)  {  in.close();  }  else  {  throw  new  IllegalStateException( " ");  }	  in.close();    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
918	[BUG]  [BUGGY]  if(in.next()  ==  JsonToken.STRING)  {  in.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  [FE]          IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.next()  ==  JsonToken.STRING)  {  in.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.next()  ==  JsonToken.STRING)  {  in.close();  }  else  {  throw  new  IllegalStateException( " ");  }	  in.close();    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
919	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()!=  JsonToken.STRING)  {  in.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	if(in.peek()!=  JsonToken.STRING)  {  in.close();  }  else  {  throw  new  IllegalStateException( " ");  }	  in.close();    	compilable	  [FE]  IllegalStateException  	109	1	replace
920	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.STRING)  {  in.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()!=  JsonToken.STRING)  {  in.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()!=  JsonToken.STRING)  {  in.close();  }  else  {  throw  new  IllegalStateException( " ");  }	  in.close();    	compilable	  [FE]  IllegalStateException  	109	1	replace
921	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.   "  +  Integer.toHexString(in.nextString(),  JsonToken.VALUE_STRING));  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.   "  +  Integer.toHexString(in.nextString(),  JsonToken.VALUE_STRING));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value.   "  +  Integer.toHexString(in.nextString(),  JsonToken.VALUE_STRING));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.   "    +    Integer.toHexString(in.nextString()));    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	5	None	replace
922	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value.   "  +  Integer.toHexString(in.nextString()));  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value.   "  +  Integer.toHexString(in.nextString()));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value.   "  +  Integer.toHexString(in.nextString()));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.   "    +    Integer.toHexString(in.nextString()));    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	5	None	replace
923	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.   "  +  Integer.toHexString(in.nextString(),  JSON_NAME));  [CE]  cannot  find  symbol  JSON_NAME  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.   "  +  Integer.toHexString(in.nextString(),  JSON_NAME));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value.   "  +  Integer.toHexString(in.nextString(),  JSON_NAME));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.   "    +    Integer.toHexString(in.nextString()));    	non-compiled	[CE]  cannot  find  symbol  JSON_NAME	5	None	replace
924	[BUG]  [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Please  check  that  this  value  is  not  valid.   ");  JsonToken  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  this  value  is  not  valid.   ");  [CE]  not  a  statement  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Please  check  that  this  value  is  not  valid.   ");  JsonToken  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  this  value  is  not  valid.   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Please    check    that    this    value    is    not    valid.   ");    JsonToken  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  this  value  is  not  valid.   ");	  	non-compiled	[CE]  not  a  statement	48	None	add
925	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value.  Try  again. ");  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value.  Try  again. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value.  Try  again. ");	  JsonParseException    in    =    new    JsonParseException(   "Date    should    be    a    string    value.   ");    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	101	None	replace
926	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value.  Please  check  that  the  date  is  null. ");  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value.  Please  check  that  the  date  is  null. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value.  Please  check  that  the  date  is  null. ");	  JsonParseException    in    =    new    JsonParseException(   "Date    should    be    a    string    value.   ");    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	101	None	replace
927	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value.  Please  check  that  the  date  type  does  not  exist. ");  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value.  Please  check  that  the  date  type  does  not  exist. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value.  Please  check  that  the  date  type  does  not  exist. ");	  JsonParseException    in    =    new    JsonParseException(   "Date    should    be    a    string    value.   ");    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	101	None	replace
928	[BUG]  [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in,  in.getClass());  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in,  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in,  in.getClass());	  throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value   ",    in.getClass());    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
929	[BUG]  [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.class());  [CE]  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.class());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.class());	  throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value   ",    in.getClass());    	non-compiled	[CE]  	64	None	replace
930	[BUG]  [BUGGY]  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in,  in.getValue()));  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in,  in.getValue()));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in,  in.getValue()));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in,    in.getValue()));    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
931	[BUG]  [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value ",  in.toString());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,String)  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value ",  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "This  date  should  be  a  string  value ",  in.toString());	  throw    new    JsonParseException(   "This    date    should    be    a    string    value   ",    in.getMessage());    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,String)	163	None	replace
932	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.START_OBJECT)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  START_OBJECT  [FE]          IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()!=  JsonToken.START_OBJECT)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()!=  JsonToken.START_OBJECT)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }	  if(in.peek()!=    JsonToken.VALUE_STRING)    {    String    datePattern    =    in.getString();    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol  START_OBJECT	146	None	replace
933	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.FIELD_NAME)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  FIELD_NAME  [FE]            IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()!=  JsonToken.FIELD_NAME)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()!=  JsonToken.FIELD_NAME)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }	  if(in.peek()!=    JsonToken.VALUE_STRING)    {    String    datePattern    =    in.getString();    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	146	None	replace
934	[BUG]  [BUGGY]  new  JsonParseException( "Date  should  be  a  string  value ",  in.toString());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,String)  [FE]    IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "Date  should  be  a  string  value ",  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonParseException( "Date  should  be  a  string  value ",  in.toString());	  new    JsonParseException(   "Date    should    be    a    string    value   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,String)	100	None	replace
935	[BUG]  [BUGGY]  JsonToken  t  =  in.readFrom(JsonToken.START_STRING);  [CE]  cannot  find  symbol  START_STRING  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  t  =  in.readFrom(JsonToken.START_STRING);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  t  =  in.readFrom(JsonToken.START_STRING);	  JsonToken    t    =    in.readFrom(JsonToken.START_ARRAY);    	non-compiled	[CE]  cannot  find  symbol  START_STRING	124	None	replace
936	[BUG]  [BUGGY]  new  JsonDescriptorException( "The  date  should  be  a  string  value: "  +  in.getClass());  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonDescriptorException( "The  date  should  be  a  string  value: "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonDescriptorException( "The  date  should  be  a  string  value: "  +  in.getClass());	  throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value:   "    +    in.getClass());    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
937	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value "  +  SIMPLE_NAME,  in);  [CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader)  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value "  +  SIMPLE_NAME,  in);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value "  +  SIMPLE_NAME,  in);	  return    new    JsonParseException(   "The    date    should    be    a    string    value   ",    in);    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader)	12	None	replace
938	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue())+  1);  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue())+  1);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue())+  1);	  JsonParseException    in    =    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.getValue()));    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	51	None	replace
939	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()));  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()));	  JsonParseException    in    =    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.getValue()));    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	51	None	replace
940	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getLongValue()));  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getLongValue()));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getLongValue()));	  JsonParseException    in    =    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.getValue()));    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	51	None	replace
941	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date.n ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date.n ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Please    check    that    the    date.   ");    	compilable	  [FE]  JsonParseException  	47	2	replace
942	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date.n ");  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date.n ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date.n ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Please    check    that    the    date.   ");    	compilable	  [FE]  JsonParseException  	47	2	replace
943	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  e  =  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	JsonParseException  e  =  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date. ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Please    check    that    the    date.   ");    	compilable	  [FE]  IllegalStateException  	47	1	replace
944	[BUG]  [BUGGY]  JsonParseException  e  =  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date. ");  [FE]  IllegalStateException  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  e  =  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  e  =  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date. ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Please    check    that    the    date.   ");    	compilable	  [FE]  IllegalStateException  	47	1	replace
945	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.VALUE_NUMBER_INT)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  VALUE_NUMBER_INT  [FE]                IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()!=  JsonToken.VALUE_NUMBER_INT)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()!=  JsonToken.VALUE_NUMBER_INT)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }	  if(in.peek()    ==    JsonToken.VALUE_STRING)    {    String    datePattern    =    in.getString();    return    new    Date(datePattern);    }    else    {    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol  VALUE_NUMBER_INT	111	None	replace
946	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.START_OBJECT)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  START_OBJECT  [FE]                  IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()!=  JsonToken.START_OBJECT)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()!=  JsonToken.START_OBJECT)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }	  if(in.peek()    ==    JsonToken.VALUE_STRING)    {    String    datePattern    =    in.getString();    return    new    Date(datePattern);    }    else    {    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol  START_OBJECT	111	None	replace
947	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.VALUE_NULL)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  VALUE_NULL  [FE]                    IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()!=  JsonToken.VALUE_NULL)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()!=  JsonToken.VALUE_NULL)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }	  if(in.peek()    ==    JsonToken.VALUE_STRING)    {    String    datePattern    =    in.getString();    return    new    Date(datePattern);    }    else    {    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol  VALUE_NULL	111	None	replace
948	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.START_OBJECT)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  START_OBJECT  [FE]                      IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()  ==  JsonToken.START_OBJECT)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()  ==  JsonToken.START_OBJECT)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }	  if(in.peek()    ==    JsonToken.VALUE_STRING)    {    String    datePattern    =    in.getString();    return    new    Date(datePattern);    }    else    {    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol  START_OBJECT	111	None	replace
949	[BUG]  [BUGGY]  String  datePattern  =  getDatePattern(in.readString());  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  String  datePattern  =  getDatePattern(in.readString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	String  datePattern  =  getDatePattern(in.readString());	          String    datePattern    =    in.readString();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
950	[BUG]  [BUGGY]  String  datePattern  =  JsonToken.readString(in.readString());  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  String  datePattern  =  JsonToken.readString(in.readString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	String  datePattern  =  JsonToken.readString(in.readString());	          String    datePattern    =    in.readString();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
951	[BUG]  [BUGGY]  String  datePattern  =  readString(in.readString());  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  String  datePattern  =  readString(in.readString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	String  datePattern  =  readString(in.readString());	          String    datePattern    =    in.readString();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
952	[BUG]  [BUGGY]  String  datePattern  =  getDatePattern(in).readString();  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  String  datePattern  =  getDatePattern(in).readString();  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	String  datePattern  =  getDatePattern(in).readString();	          String    datePattern    =    in.readString();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
953	[BUG]  [BUGGY]  JsonToken  t  =  out.readFrom(JsonToken.STRING);  [CE]  cannot  find  symbol  out  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  t  =  out.readFrom(JsonToken.STRING);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  t  =  out.readFrom(JsonToken.STRING);	  JsonToken    t    =    in.readFrom(JsonToken.STRING);    	non-compiled	[CE]  cannot  find  symbol  out	125	None	replace
954	[BUG]  [BUGGY]  JsonToken  t  =  sourceFile.readFrom(JsonToken.STRING);  [CE]  cannot  find  symbol  sourceFile  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  t  =  sourceFile.readFrom(JsonToken.STRING);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  t  =  sourceFile.readFrom(JsonToken.STRING);	  JsonToken    t    =    in.readFrom(JsonToken.STRING);    	non-compiled	[CE]  cannot  find  symbol  sourceFile	125	None	replace
955	[BUG]  [BUGGY]  JsonToken  t  =  in,  in.readFrom(JsonToken.STRING);  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  t  =  in,  in.readFrom(JsonToken.STRING);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  t  =  in,  in.readFrom(JsonToken.STRING);	  JsonToken    t    =    in.readFrom(JsonToken.STRING);    	non-compiled	[CE]  ';'  expected	125	None	replace
956	[BUG]  [BUGGY]  JsonToken  t  =  readFrom(in,  JsonToken.STRING);  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  t  =  readFrom(in,  JsonToken.STRING);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  t  =  readFrom(in,  JsonToken.STRING);	  JsonToken    t    =    in.readFrom(JsonToken.STRING);    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
957	[BUG]  [BUGGY]  JsonToken  t  =  in.readFrom(JsonToken.STRING,  in.read());  [CE]  cannot  find  symbol  [FE]                                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  t  =  in.readFrom(JsonToken.STRING,  in.read());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  t  =  in.readFrom(JsonToken.STRING,  in.read());	  JsonToken    t    =    in.readFrom(JsonToken.STRING);    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
958	[BUG]  [BUGGY]  if(in.read()!=  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.read()!=  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.read()!=  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }	  if(in.peek()!=    JsonToken.VALUE_STRING)    {    String    datePattern    =    in.readString();    return    new    Date(datePattern);    }    else    {    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol	147	None	replace
959	[BUG]  [BUGGY]  JsonToken  t  =  out.readFrom(JsonToken.END_ARRAY);  [CE]  cannot  find  symbol  out  [FE]                                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  t  =  out.readFrom(JsonToken.END_ARRAY);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  t  =  out.readFrom(JsonToken.END_ARRAY);	  JsonToken    t    =    in.readFrom(JsonToken.END_ARRAY);    	non-compiled	[CE]  cannot  find  symbol  out	129	None	replace
960	[BUG]  [BUGGY]  JsonToken  t  =  in.readFrom(JsonToken.END_OBJECT);  [CE]  cannot  find  symbol  [FE]                                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  t  =  in.readFrom(JsonToken.END_OBJECT);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  t  =  in.readFrom(JsonToken.END_OBJECT);	  JsonToken    t    =    in.readFrom(JsonToken.END_ARRAY);    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
961	[BUG]  [BUGGY]  JsonToken  t  =,  in.readFrom(JsonToken.END_ARRAY);  [CE]  illegal  start  of  expression  [FE]                                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  t  =,  in.readFrom(JsonToken.END_ARRAY);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  t  =,  in.readFrom(JsonToken.END_ARRAY);	  JsonToken    t    =    in.readFrom(JsonToken.END_ARRAY);    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
962	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  e  =  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date  is  null. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	JsonParseException  e  =  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date  is  null. ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Please    check    that    the    date    is    null.   ");    	compilable	  [FE]  IllegalStateException  	45	1	replace
963	[BUG]  [BUGGY]  JsonParseException  e  =  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date  is  null. ");  [FE]  IllegalStateException  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  e  =  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date  is  null. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  e  =  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date  is  null. ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Please    check    that    the    date    is    null.   ");    	compilable	  [FE]  IllegalStateException  	45	1	replace
964	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date  may  be  null. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date  may  be  null. ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Please    check    that    the    date    is    null.   ");    	compilable	  [FE]  JsonParseException  	45	2	replace
965	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date  may  be  null. ");  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date  may  be  null. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date  may  be  null. ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Please    check    that    the    date    is    null.   ");    	compilable	  [FE]  JsonParseException  	45	2	replace
966	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "This  date  should  be  a  string  value: ");  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "This  date  should  be  a  string  value: ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "This  date  should  be  a  string  value: ");	  JsonParseException    in    =    new    JsonParseException(   "This    date    should    be    a    string    value   ");    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	115	None	replace
967	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "String  value  should  be  a  string  value. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "String  value  should  be  a  string  value. ");	  throw    new    JsonParseException(       "The    date    should    be    a    string    value.       ");    Throw    new    JsonParseException(   "The    date    should    be    a    string    value.       ");    	compilable	  [FE]  JsonParseException  	9	2	replace
968	[BUG]  [BUGGY]  throw  new  JsonParseException( "String  value  should  be  a  string  value. ");  [FE]  JsonParseException  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "String  value  should  be  a  string  value. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "String  value  should  be  a  string  value. ");	  throw    new    JsonParseException(       "The    date    should    be    a    string    value.       ");    Throw    new    JsonParseException(   "The    date    should    be    a    string    value.       ");    	compilable	  [FE]  JsonParseException  	9	2	replace
969	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "String  value  must  be  a  string  value. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "String  value  must  be  a  string  value. ");	  throw    new    JsonParseException(       "The    date    should    be    a    string    value.       ");    Throw    new    JsonParseException(   "The    date    should    be    a    string    value.       ");    	compilable	  [FE]  JsonParseException  	9	2	replace
970	[BUG]  [BUGGY]  throw  new  JsonParseException( "String  value  must  be  a  string  value. ");  [FE]  JsonParseException  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "String  value  must  be  a  string  value. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "String  value  must  be  a  string  value. ");	  throw    new    JsonParseException(       "The    date    should    be    a    string    value.       ");    Throw    new    JsonParseException(   "The    date    should    be    a    string    value.       ");    	compilable	  [FE]  JsonParseException  	9	2	replace
971	[BUG]  [BUGGY]  if(in!=  null  ||  in.peek()  ==  JsonToken.STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in!=  null  ||  in.peek()  ==  JsonToken.STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in!=  null  ||  in.peek()  ==  JsonToken.STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }	          if(in.peek()    ==    JsonToken.STRING)    {    String    datePattern    =    in.readString();    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
972	[BUG]  [BUGGY]  if(in  ==  null  ||  in.peek()  ==  JsonToken.STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in  ==  null  ||  in.peek()  ==  JsonToken.STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in  ==  null  ||  in.peek()  ==  JsonToken.STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }	          if(in.peek()    ==    JsonToken.STRING)    {    String    datePattern    =    in.readString();    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
973	[BUG]  [BUGGY]  JsonParseException( "This  date  should  be  a  string  value ",  in.nextString());  [CE]  cannot  find  symbol  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException( "This  date  should  be  a  string  value ",  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException( "This  date  should  be  a  string  value ",  in.nextString());	  throw    new    JsonParseException(       "This    date    should    be    a    string    value       ");    JsonParseException(       "This    date    should    be    a    string    value       ");    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
974	[BUG]  [BUGGY]  JsonToken  token  =  new  JsonToken( "This  date  should  be  a  string  value ");  [CE]  enum  types  may  not  be  instantiated  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  token  =  new  JsonToken( "This  date  should  be  a  string  value ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  token  =  new  JsonToken( "This  date  should  be  a  string  value ");	  throw    new    JsonParseException(       "This    date    should    be    a    string    value       ");    JsonParseException(       "This    date    should    be    a    string    value       ");    	non-compiled	[CE]  enum  types  may  not  be  instantiated	83	None	replace
975	[BUG]  [BUGGY]  JsonTokenException  in  =  new  JsonTokenException( "Unexpected  String  name: "  +  in.nextString());  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonTokenException  in  =  new  JsonTokenException( "Unexpected  String  name: "  +  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonTokenException  in  =  new  JsonTokenException( "Unexpected  String  name: "  +  in.nextString());	  throw    new    JsonTokenException(   "Unexpected    String    name:   "    +    in.nextString());    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
976	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Unexpected  String  name: "  +  in.getString());  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "Unexpected  String  name: "  +  in.getString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Unexpected  String  name: "  +  in.getString());	  throw    new    JsonTokenException(   "Unexpected    String    name:   "    +    in.nextString());    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
977	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value,  or  a  string  value ");  [CE]  incompatible  types  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value,  or  a  string  value ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value,  or  a  string  value ");	  return    new    JsonParseException(   "The    date    should    be    a    string    value,   ");    	non-compiled	[CE]  incompatible  types	14	None	replace
978	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value,  but ");  [CE]  incompatible  types  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value,  but ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value,  but ");	  return    new    JsonParseException(   "The    date    should    be    a    string    value,   ");    	non-compiled	[CE]  incompatible  types	14	None	replace
979	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value,   "  +  in.getPattern());  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value,   "  +  in.getPattern());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value,   "  +  in.getPattern());	  return    new    JsonParseException(   "The    date    should    be    a    string    value,   ");    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
980	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value,   "  +  in.getPeek());  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value,   "  +  in.getPeek());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value,   "  +  in.getPeek());	  return    new    JsonParseException(   "The    date    should    be    a    string    value,   ");    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
981	[BUG]  [BUGGY]  throw  new  JsonParseException(   "This  date  should  be  a  string  value:   "  +  in.getClass());  JsonToken  throw  new  JsonParseException( "This  date  should  be  a  string  value:   "  +  in.getClass());  [CE]  not  a  statement  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "This  date  should  be  a  string  value:   "  +  in.getClass());  JsonToken  throw  new  JsonParseException( "This  date  should  be  a  string  value:   "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "This    date    should    be    a    string    value:   "    +    in.getClass());    JsonToken  throw  new  JsonParseException( "This  date  should  be  a  string  value:   "  +  in.getClass());	  	non-compiled	[CE]  not  a  statement	90	None	add
982	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value "  +  SIMPLE_NAME,  in.nextString());  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value "  +  SIMPLE_NAME,  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  date  should  be  a  string  value "  +  SIMPLE_NAME,  in.nextString());	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value   ",    in.nextString());    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
983	[BUG]  [BUGGY]  JsonTokenException.throw  new  JsonTokenException( "The  date  should  be  a  string  value ",  in.nextString());  [CE]  <identifier>  expected  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonTokenException.throw  new  JsonTokenException( "The  date  should  be  a  string  value ",  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonTokenException.throw  new  JsonTokenException( "The  date  should  be  a  string  value ",  in.nextString());	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value   ",    in.nextString());    	non-compiled	[CE]  <identifier>  expected	95	None	replace
984	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value ",  in.getKey());  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value ",  in.getKey());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  date  should  be  a  string  value ",  in.getKey());	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value   ",    in.nextString());    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
985	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value ",  in.readString());  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value ",  in.readString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  date  should  be  a  string  value ",  in.readString());	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value   ",    in);    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
986	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value ",  in.read());  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value ",  in.read());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  date  should  be  a  string  value ",  in.read());	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value   ",    in);    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
987	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JsonToken.END_OBJECT));  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JsonToken.END_OBJECT));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JsonToken.END_OBJECT));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString(),    JsonToken.VALUE_STRING));    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	119	None	replace
988	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JsonToken.END_ARRAY));  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JsonToken.END_ARRAY));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JsonToken.END_ARRAY));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString(),    JsonToken.VALUE_STRING));    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	119	None	replace
989	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JsonToken.START_NAME));  [CE]  cannot  find  symbol  START_NAME  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JsonToken.START_NAME));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JsonToken.START_NAME));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString(),    JsonToken.VALUE_STRING));    	non-compiled	[CE]  cannot  find  symbol  START_NAME	119	None	replace
990	[BUG]  [BUGGY]  Throwables.throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.getClass());  [CE]  <identifier>  expected  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  Throwables.throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	Throwables.throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.getClass());	  Throwables.throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  <identifier>  expected	63	None	replace
991	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.getString());  [CE]  cannot  find  symbol  [FE]    IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.getString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.getString());	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value:   "    +    in.nextString());    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
992	[BUG]  [BUGGY]  return  new  JsonParseException( "The  Date  should  be  a  string  value ",  in.toString());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,String)  [FE]        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  Date  should  be  a  string  value ",  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  Date  should  be  a  string  value ",  in.toString());	  return    new    JsonParseException(   "The    Date    should    be    a    string    value   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,String)	143	None	replace
993	[BUG]  [BUGGY]  JsonToken  t  =  out.readFromString(JsonToken.STRING);  [CE]  cannot  find  symbol  out  [FE]                              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  t  =  out.readFromString(JsonToken.STRING);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  t  =  out.readFromString(JsonToken.STRING);	  JsonToken    t    =    in.readFromString(JsonToken.STRING);    	non-compiled	[CE]  cannot  find  symbol  out	128	None	replace
994	[BUG]  [BUGGY]  JsonToken  t  =  in,  localFormat.readFromString(JsonToken.STRING);  [CE]  ';'  expected  [FE]                                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  t  =  in,  localFormat.readFromString(JsonToken.STRING);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  t  =  in,  localFormat.readFromString(JsonToken.STRING);	  JsonToken    t    =    in.readFromString(JsonToken.STRING);    	non-compiled	[CE]  ';'  expected	128	None	replace
995	[BUG]  [BUGGY]  JsonToken  t  =  sourceFile.readFromString(JsonToken.STRING);  [CE]  cannot  find  symbol  sourceFile  [FE]                                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  t  =  sourceFile.readFromString(JsonToken.STRING);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  t  =  sourceFile.readFromString(JsonToken.STRING);	  JsonToken    t    =    in.readFromString(JsonToken.STRING);    	non-compiled	[CE]  cannot  find  symbol  sourceFile	128	None	replace
996	[BUG]  [BUGGY]  JsonToken  t  =  readFromString(in,  JsonToken.STRING);  [CE]  cannot  find  symbol  [FE]                                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  t  =  readFromString(in,  JsonToken.STRING);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  t  =  readFromString(in,  JsonToken.STRING);	  JsonToken    t    =    in.readFromString(JsonToken.STRING);    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
997	[BUG]  [BUGGY]  JsonTokenException.throw  new  JsonTokenException( "The  Date  should  be  a  string  value ");  [CE]  <identifier>  expected  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonTokenException.throw  new  JsonTokenException( "The  Date  should  be  a  string  value ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonTokenException.throw  new  JsonTokenException( "The  Date  should  be  a  string  value ");	  throw    new    JsonTokenException(   "The    Date    should    be    a    string    value   ");    	non-compiled	[CE]  <identifier>  expected	67	None	replace
998	[BUG]  [BUGGY]  JsonTokenException  in  =  new  JsonTokenException( "The  Date  should  be  a  string  value ");  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonTokenException  in  =  new  JsonTokenException( "The  Date  should  be  a  string  value ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonTokenException  in  =  new  JsonTokenException( "The  Date  should  be  a  string  value ");	  throw    new    JsonTokenException(   "The    Date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
999	[BUG]  [BUGGY]  JsonTokenException.from(in, "The  Date  should  be  a  string  value ");  [CE]  cannot  find  symbol  JsonTokenException  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonTokenException.from(in, "The  Date  should  be  a  string  value ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonTokenException.from(in, "The  Date  should  be  a  string  value ");	  throw    new    JsonTokenException(   "The    Date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol  JsonTokenException	67	None	replace
1000	[BUG]  [BUGGY]  new  JsonParseException(   "This  date  should  be  a  string  value   ");  new  JsonParseException(  this  date  should  be  a  string  value   ");  [CE]  [FE]    IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException(   "This  date  should  be  a  string  value   ");  new  JsonParseException(  this  date  should  be  a  string  value   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new    JsonParseException(   "This    date    should    be    a    string    value   ");    new  JsonParseException(  this  date  should  be  a  string  value   ");	  	non-compiled	[CE]  	117	None	add
1001	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  1);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  1);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  1);	  return    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()));    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	139	None	replace
1002	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  INVALID_DATE);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  INVALID_DATE);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  INVALID_DATE);	  return    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()));    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	139	None	replace
1003	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  in.version);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  in.version);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  in.version);	  return    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()));    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	139	None	replace
1004	[BUG]  [BUGGY]  JsonTokenException.throw  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.nextString());  [CE]  <identifier>  expected  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonTokenException.throw  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonTokenException.throw  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.nextString());	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value:   "    +    in.nextString());    	non-compiled	[CE]  <identifier>  expected	98	None	replace
1005	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.getString());  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.getString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.getString());	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value:   "    +    in.nextString());    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
1006	[BUG]  [BUGGY]  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.nextString());  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonTokenException( "The  date  should  be  a  string  value: "  +  in.nextString());	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value:   "    +    in.nextString());    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
1007	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.START_OBJECT)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  START_OBJECT  [FE]        IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()!=  JsonToken.START_OBJECT)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()!=  JsonToken.START_OBJECT)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }	  if(in.peek()!=    JsonToken.VALUE_STRING)    {    String    datePattern    =    in.readString();    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol  START_OBJECT	145	None	replace
1008	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.FIELD_NAME)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  FIELD_NAME  [FE]          IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()!=  JsonToken.FIELD_NAME)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()!=  JsonToken.FIELD_NAME)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }	  if(in.peek()!=    JsonToken.VALUE_STRING)    {    String    datePattern    =    in.readString();    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	145	None	replace
1009	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.START_NAME)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  START_NAME  [FE]            IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()!=  JsonToken.START_NAME)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()!=  JsonToken.START_NAME)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }	  if(in.peek()!=    JsonToken.VALUE_STRING)    {    String    datePattern    =    in.readString();    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol  START_NAME	145	None	replace
1010	[BUG]  [BUGGY]  JsonParseException( "The  Date  should  be  a  string  value ",  in.nextString());  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException( "The  Date  should  be  a  string  value ",  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException( "The  Date  should  be  a  string  value ",  in.nextString());	  throw    new    JsonParseException(       "The    Date    should    be    a    string    value       ");    JsonParseException(       "The    Date    should    be    a    string    value       ");    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
1011	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Unexpected  String  value: "  +  in.getText());  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "Unexpected  String  value: "  +  in.getText());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Unexpected  String  value: "  +  in.getText());	  throw    new    JsonTokenException(   "Unexpected    String    value:   "    +    in.getValue());    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
1012	[BUG]  [BUGGY]  JsonTokenException.from(in, "The  date  should  be  a  string  value. ");  [CE]  cannot  find  symbol  JsonTokenException  [FE]        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonTokenException.from(in, "The  date  should  be  a  string  value. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonTokenException.from(in, "The  date  should  be  a  string  value. ");	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value.   ");    	non-compiled	[CE]  cannot  find  symbol  JsonTokenException	41	None	replace
1013	[BUG]  [BUGGY]          if(in.peek()  ==  JsonToken.STRING)  {  in.close();  return  null;  }  if(in.push()  ==  JsonToken.STRING)  {  in.close();  return  null;  }  [CE]  method  push  in  class  JsonReader  cannot  be  applied  to  given  types;  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]          if(in.peek()  ==  JsonToken.STRING)  {  in.close();  return  null;  }  if(in.push()  ==  JsonToken.STRING)  {  in.close();  return  null;  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	                if(in.peek()    ==    JsonToken.STRING)    {    in.close();    return    null;    }    if(in.push()  ==  JsonToken.STRING)  {  in.close();  return  null;  }	  	non-compiled	[CE]  method  push  in  class  JsonReader  cannot  be  applied  to  given  types;	26	None	add
1014	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.getPattern());  [CE]  cannot  find  symbol  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.getPattern());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.getPattern());	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value:   "    +    in.toString());    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
1015	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.getText());  [CE]  cannot  find  symbol  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.getText());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.getText());	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value:   "    +    in.toString());    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
1016	[BUG]  [BUGGY]  new  JsonParseException(   "Date  should  be  a  string  value   ");  new  JsonParseException(. "Date  should  be  a  string  value   ");  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException(   "Date  should  be  a  string  value   ");  new  JsonParseException(. "Date  should  be  a  string  value   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new    JsonParseException(   "Date    should    be    a    string    value   ");    new  JsonParseException(. "Date  should  be  a  string  value   ");	  	non-compiled	[CE]  illegal  start  of  expression	99	None	add
1017	[BUG]  [BUGGY]  read()  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  read()  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	read()  {  throw  new  IllegalArgumentException( " ");  }	          if(in.peek()    ==    JsonToken.STRING)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	23	None	replace
1018	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(getClass().getClassLoader());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	Thread.currentThread().setContextClassLoader(getClass().getClassLoader());	          if(in.peek()    ==    JsonToken.STRING)    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalStateException  	23	1	replace
1019	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(getClass().getClassLoader());  [FE]  IllegalStateException  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(getClass().getClassLoader());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	Thread.currentThread().setContextClassLoader(getClass().getClassLoader());	          if(in.peek()    ==    JsonToken.STRING)    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalStateException  	23	1	replace
1020	[BUG]  [BUGGY]  while(in.peek()!=  JsonToken.STRING)  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  while(in.peek()!=  JsonToken.STRING)  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	while(in.peek()!=  JsonToken.STRING)  {  throw  new  IllegalArgumentException( " ");	          if(in.peek()    ==    JsonToken.STRING)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
1021	[BUG]  [BUGGY]  Throw  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.getClass());  [CE]  not  a  statement  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  Throw  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	Throw  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.getClass());	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value:   "    +    in.getClass());    	non-compiled	[CE]  not  a  statement	96	None	replace
1022	[BUG]  [BUGGY]  Throwables.throw  new  JsonParseException( "The  Date  should  be  a  string  value ");  [CE]  <identifier>  expected  [FE]        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  Throwables.throw  new  JsonParseException( "The  Date  should  be  a  string  value ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	Throwables.throw  new  JsonParseException( "The  Date  should  be  a  string  value ");	  throw    new    JsonParseException(       "The    Date    should    be    a    string    value       ");    JsonToken    throw    new    JsonParseException(   "The    Date    should    be    a    string    value       ");    	non-compiled	[CE]  <identifier>  expected	123	None	replace
1023	[BUG]  [BUGGY]  JsonToken  throw  new  JsonParseException( "String  value  should  be  a  string  value ");  [CE]  not  a  statement  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  throw  new  JsonParseException( "String  value  should  be  a  string  value ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  throw  new  JsonParseException( "String  value  should  be  a  string  value ");	  throw    new    JsonParseException(       "The    Date    should    be    a    string    value       ");    JsonToken    throw    new    JsonParseException(   "The    Date    should    be    a    string    value       ");    	non-compiled	[CE]  not  a  statement	123	None	replace
1024	[BUG]  [BUGGY]  JsonToken  throw  new  JsonParseException( "This  Date  should  be  a  string  value ");  [CE]  not  a  statement  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  throw  new  JsonParseException( "This  Date  should  be  a  string  value ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  throw  new  JsonParseException( "This  Date  should  be  a  string  value ");	  throw    new    JsonParseException(       "The    Date    should    be    a    string    value       ");    JsonToken    throw    new    JsonParseException(   "The    Date    should    be    a    string    value       ");    	non-compiled	[CE]  not  a  statement	123	None	replace
1025	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in  ==  null)  {  throw  new  JsonParseException( "The  Date  should  be  a  string  value ");  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	if(in  ==  null)  {  throw  new  JsonParseException( "The  Date  should  be  a  string  value ");  }	  throw    new    JsonParseException(       "The    Date    should    be    a    string    value       ");    throw    new    JsonParseException(   "The    Date    should    be    a    string    value       ");    	compilable	  [FE]  IllegalStateException  	17	1	replace
1026	[BUG]  [BUGGY]  if(in  ==  null)  {  throw  new  JsonParseException( "The  Date  should  be  a  string  value ");  }  [FE]  IllegalStateException  [FE]        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in  ==  null)  {  throw  new  JsonParseException( "The  Date  should  be  a  string  value ");  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in  ==  null)  {  throw  new  JsonParseException( "The  Date  should  be  a  string  value ");  }	  throw    new    JsonParseException(       "The    Date    should    be    a    string    value       ");    throw    new    JsonParseException(   "The    Date    should    be    a    string    value       ");    	compilable	  [FE]  IllegalStateException  	17	1	replace
1027	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in  ==  null)  {  throw  new  JsonParseException( "The  Date  should  be  a  string  value. ");  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	if(in  ==  null)  {  throw  new  JsonParseException( "The  Date  should  be  a  string  value. ");  }	  throw    new    JsonParseException(       "The    Date    should    be    a    string    value       ");    throw    new    JsonParseException(   "The    Date    should    be    a    string    value       ");    	compilable	  [FE]  IllegalStateException  	17	1	replace
1028	[BUG]  [BUGGY]  if(in  ==  null)  {  throw  new  JsonParseException( "The  Date  should  be  a  string  value. ");  }  [FE]  IllegalStateException  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in  ==  null)  {  throw  new  JsonParseException( "The  Date  should  be  a  string  value. ");  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in  ==  null)  {  throw  new  JsonParseException( "The  Date  should  be  a  string  value. ");  }	  throw    new    JsonParseException(       "The    Date    should    be    a    string    value       ");    throw    new    JsonParseException(   "The    Date    should    be    a    string    value       ");    	compilable	  [FE]  IllegalStateException  	17	1	replace
1029	[BUG]  [BUGGY]  if(date.getType()  ==  Token.NAME)  {  throw  new  JsonParseException( "This  date  should  be  a  string  value ");  }  [CE]  cannot  find  symbol  date  [FE]        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(date.getType()  ==  Token.NAME)  {  throw  new  JsonParseException( "This  date  should  be  a  string  value ");  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(date.getType()  ==  Token.NAME)  {  throw  new  JsonParseException( "This  date  should  be  a  string  value ");  }	  throw    new    JsonParseException(       "This    date    should    be    a    string    value       ");    throw    new    JsonParseException(   "This    date    should    be    a    string    value       ");    	non-compiled	[CE]  cannot  find  symbol  date	82	None	replace
1030	[BUG]  [BUGGY]  JsonTokenException.throw  new  JsonTokenException( "This  date  should  be  a  string  value ");  [CE]  <identifier>  expected  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonTokenException.throw  new  JsonTokenException( "This  date  should  be  a  string  value ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonTokenException.throw  new  JsonTokenException( "This  date  should  be  a  string  value ");	  throw    new    JsonTokenException(   "This    date    should    be    a    string    value   ");    	non-compiled	[CE]  <identifier>  expected	88	None	replace
1031	[BUG]  [BUGGY]  JsonTokenException  in  =  new  JsonTokenException( "This  date  should  be  a  string  value ");  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonTokenException  in  =  new  JsonTokenException( "This  date  should  be  a  string  value ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonTokenException  in  =  new  JsonTokenException( "This  date  should  be  a  string  value ");	  throw    new    JsonTokenException(   "This    date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
1032	[BUG]  [BUGGY]  JsonTokenException.throw  new  JsonTokenException( "This  date  should  be  a  string  value. ");  [CE]  <identifier>  expected  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonTokenException.throw  new  JsonTokenException( "This  date  should  be  a  string  value. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonTokenException.throw  new  JsonTokenException( "This  date  should  be  a  string  value. ");	  throw    new    JsonTokenException(   "This    date    should    be    a    string    value   ");    	non-compiled	[CE]  <identifier>  expected	88	None	replace
1033	[BUG]  [BUGGY]  JsonToken  throw  new  JsonParseException( "String  value  must  be  a  string  value ");  [CE]  not  a  statement  [FE]        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  throw  new  JsonParseException( "String  value  must  be  a  string  value ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  throw  new  JsonParseException( "String  value  must  be  a  string  value ");	  throw    new    JsonParseException(       "Date    should    be    a    string    value       ");    JsonToken    throw    new    JsonParseException(   "Date    should    be    a    string    value       ");    	non-compiled	[CE]  not  a  statement	141	None	replace
1034	[BUG]  [BUGGY]  JsonTokenException  t  =  new  JsonTokenException( "Unknown  string: "  +  in.getClass());  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonTokenException  t  =  new  JsonTokenException( "Unknown  string: "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonTokenException  t  =  new  JsonTokenException( "Unknown  string: "  +  in.getClass());	  throw    new    JsonTokenException(   "Unknown    string:   "    +    in.getClass());    	non-compiled	[CE]  cannot  find  symbol	152	None	replace
1035	[BUG]  [BUGGY]  return  new  JsonTokenException( "Unknown  string: "  +  in.getClass());  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonTokenException( "Unknown  string: "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonTokenException( "Unknown  string: "  +  in.getClass());	  throw    new    JsonTokenException(   "Unknown    string:   "    +    in.getClass());    	non-compiled	[CE]  cannot  find  symbol	152	None	replace
1036	[BUG]  [BUGGY]  new  JsonTokenException( "Unknown  string: "  +  in.getClass());  [CE]  cannot  find  symbol  [FE]                                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonTokenException( "Unknown  string: "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonTokenException( "Unknown  string: "  +  in.getClass());	  throw    new    JsonTokenException(   "Unknown    string:   "    +    in.getClass());    	non-compiled	[CE]  cannot  find  symbol	152	None	replace
1037	[BUG]  [BUGGY]  if(in.nextString()!=  JsonToken.STRING)  {  in.close();  return  null;  }  [CE]  incomparable  types:  String  and  JsonToken  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.nextString()!=  JsonToken.STRING)  {  in.close();  return  null;  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.nextString()!=  JsonToken.STRING)  {  in.close();  return  null;  }	          if(in.peek()    ==    JsonToken.STRING)    {    in.close();    return    null;    }    	non-compiled	[CE]  incomparable  types:  String  and  JsonToken	27	None	replace
1038	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()!=  JsonToken.STRING)  {  in.close();  return  null;  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	if(in.peek()!=  JsonToken.STRING)  {  in.close();  return  null;  }	          if(in.peek()    ==    JsonToken.STRING)    {    in.close();    return    null;    }    	compilable	  [FE]  AssertionFailedError  	27	1	replace
1039	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.STRING)  {  in.close();  return  null;  }  [FE]  AssertionFailedError  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()!=  JsonToken.STRING)  {  in.close();  return  null;  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()!=  JsonToken.STRING)  {  in.close();  return  null;  }	          if(in.peek()    ==    JsonToken.STRING)    {    in.close();    return    null;    }    	compilable	  [FE]  AssertionFailedError  	27	1	replace
1040	[BUG]  [BUGGY]  if(in.nextString()  ==  JsonToken.STRING)  {  in.close();  return  null;  }  [CE]  incomparable  types:  String  and  JsonToken  [FE]        JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.nextString()  ==  JsonToken.STRING)  {  in.close();  return  null;  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.nextString()  ==  JsonToken.STRING)  {  in.close();  return  null;  }	          if(in.peek()    ==    JsonToken.STRING)    {    in.close();    return    null;    }    	non-compiled	[CE]  incomparable  types:  String  and  JsonToken	27	None	replace
1041	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.VALUE_NULL)  {  in.close();  return  null;  }  [CE]  cannot  find  symbol  VALUE_NULL  [FE]          JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()!=  JsonToken.VALUE_NULL)  {  in.close();  return  null;  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()!=  JsonToken.VALUE_NULL)  {  in.close();  return  null;  }	          if(in.peek()    ==    JsonToken.STRING)    {    in.close();    return    null;    }    	non-compiled	[CE]  cannot  find  symbol  VALUE_NULL	27	None	replace
1042	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_STRING,  SIMPLE_NAME);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_STRING,  SIMPLE_NAME);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_STRING,  SIMPLE_NAME);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JsonToken.VALUE_STRING);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	1	None	replace
1043	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  SIMPLE_NAME,  JsonToken.VALUE_STRING);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  SIMPLE_NAME,  JsonToken.VALUE_STRING);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  SIMPLE_NAME,  JsonToken.VALUE_STRING);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JsonToken.VALUE_STRING);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	1	None	replace
1044	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  32),  JsonToken.VALUE_STRING);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  32),  JsonToken.VALUE_STRING);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  32),  JsonToken.VALUE_STRING);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JsonToken.VALUE_STRING);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	1	None	replace
1045	[BUG]  [BUGGY]  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.toString());  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.toString());	  new    JsonDescriptorException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
1046	[BUG]  [BUGGY]  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.getValue());  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.getValue());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.getValue());	  new    JsonDescriptorException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
1047	[BUG]  [BUGGY]  new  JsonDescriptorException( "The  date  should  be  a  string  value, ");  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonDescriptorException( "The  date  should  be  a  string  value, ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonDescriptorException( "The  date  should  be  a  string  value, ");	  new    JsonDescriptorException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
1048	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(in.getString()));  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  IllegalArgumentException( " ".equals(in.getString()));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  IllegalArgumentException( " ".equals(in.getString()));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
1049	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  IllegalArgumentException( "String  ' "  +  in.getClass().getName()  + "'  does  not  exist. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  IllegalArgumentException( "String  ' "  +  in.getClass().getName()  + "'  does  not  exist. ");	  throw    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  IllegalArgumentException  	76	2	replace
1050	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "String  ' "  +  in.getClass().getName()  + "'  does  not  exist. ");  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  IllegalArgumentException( "String  ' "  +  in.getClass().getName()  + "'  does  not  exist. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  IllegalArgumentException( "String  ' "  +  in.getClass().getName()  + "'  does  not  exist. ");	  throw    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  IllegalArgumentException  	76	2	replace
1051	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  IllegalArgumentException( "String  ' "  +  in.getClass().getName()  + "'  is  null. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  IllegalArgumentException( "String  ' "  +  in.getClass().getName()  + "'  is  null. ");	  throw    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  IllegalArgumentException  	76	2	replace
1052	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "String  ' "  +  in.getClass().getName()  + "'  is  null. ");  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  IllegalArgumentException( "String  ' "  +  in.getClass().getName()  + "'  is  null. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  IllegalArgumentException( "String  ' "  +  in.getClass().getName()  + "'  is  null. ");	  throw    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  IllegalArgumentException  	76	2	replace
1053	[BUG]  [BUGGY]  return  new  JsonParseException( "Date  should  be  a  string  value ",  in.toString());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,String)  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "Date  should  be  a  string  value ",  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "Date  should  be  a  string  value ",  in.toString());	  return    new    JsonParseException(   "Date    should    be    a    string    value   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,String)	155	None	replace
1054	[BUG]  [BUGGY]  in.close();  if(in.peek()!=  JsonToken.NUMBER_INT)  {  in.close();  }  else  {  return  new  Date(in.nextString());  }  [CE]  cannot  find  symbol  NUMBER_INT  [FE]    IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  in.close();  if(in.peek()!=  JsonToken.NUMBER_INT)  {  in.close();  }  else  {  return  new  Date(in.nextString());  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	in.close();    if(in.peek()!=  JsonToken.NUMBER_INT)  {  in.close();  }  else  {  return  new  Date(in.nextString());  }	  	non-compiled	[CE]  cannot  find  symbol  NUMBER_INT	108	None	add
1055	[BUG]  [BUGGY]  in.close();  if(in.peek()!=  JsonToken.VALUE_NULL)  {  in.close();  }  else  {  return  new  Date(in.nextString());  }  [CE]  cannot  find  symbol  VALUE_NULL  [FE]      IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  in.close();  if(in.peek()!=  JsonToken.VALUE_NULL)  {  in.close();  }  else  {  return  new  Date(in.nextString());  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	in.close();    if(in.peek()!=  JsonToken.VALUE_NULL)  {  in.close();  }  else  {  return  new  Date(in.nextString());  }	  	non-compiled	[CE]  cannot  find  symbol  VALUE_NULL	108	None	add
1056	[BUG]  [BUGGY]  in.close();  if(in.peek()!=  JsonToken.VALUE_NULL)  {  in.close();  }  [CE]  cannot  find  symbol  VALUE_NULL  [FE]        IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  in.close();  if(in.peek()!=  JsonToken.VALUE_NULL)  {  in.close();  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	in.close();    if(in.peek()!=  JsonToken.VALUE_NULL)  {  in.close();  }	  	non-compiled	[CE]  cannot  find  symbol  VALUE_NULL	108	None	add
1057	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  Date  should  be  a  string  value ",  in.getMessage());  [CE]  cannot  find  symbol  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "The  Date  should  be  a  string  value ",  in.getMessage());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  Date  should  be  a  string  value ",  in.getMessage());	  throw    new    JsonTokenException(   "The    Date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
1058	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  Date  should  be  a  string  value ",  in.getClass());  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "The  Date  should  be  a  string  value ",  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  Date  should  be  a  string  value ",  in.getClass());	  throw    new    JsonTokenException(   "The    Date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
1059	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  Date  should  be  a  string  value, ");  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "The  Date  should  be  a  string  value, ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  Date  should  be  a  string  value, ");	  throw    new    JsonTokenException(   "The    Date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
1060	[BUG]  [BUGGY]  throw  new  JsonParseException(   "The  Date  should  be  a  string  value:   "  +  in.toString());  JsonToken  throw  new  JsonParseException( "The  Date  should  be  a  string  value:   "  +  in.toString());  [CE]  not  a  statement  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "The  Date  should  be  a  string  value:   "  +  in.toString());  JsonToken  throw  new  JsonParseException( "The  Date  should  be  a  string  value:   "  +  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "The    Date    should    be    a    string    value:   "    +    in.toString());    JsonToken  throw  new  JsonParseException( "The  Date  should  be  a  string  value:   "  +  in.toString());	  	non-compiled	[CE]  not  a  statement	70	None	add
1061	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  while(in.peek()!=  JsonToken.STRING)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	while(in.peek()!=  JsonToken.STRING)  {  throw  new  IllegalStateException( " ");  }	          if(in.peek()    ==    JsonToken.STRING)    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  IllegalStateException  	21	1	replace
1062	[BUG]  [BUGGY]  while(in.peek()!=  JsonToken.STRING)  {  throw  new  IllegalStateException( " ");  }  [FE]  IllegalStateException  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  while(in.peek()!=  JsonToken.STRING)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	while(in.peek()!=  JsonToken.STRING)  {  throw  new  IllegalStateException( " ");  }	          if(in.peek()    ==    JsonToken.STRING)    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  IllegalStateException  	21	1	replace
1063	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().setCurrentName(in.nextString());  [CE]  cannot  find  symbol  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  Thread.currentThread().getContextClassLoader().setCurrentName(in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	Thread.currentThread().getContextClassLoader().setCurrentName(in.nextString());	          if(in.peek()    ==    JsonToken.STRING)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
1064	[BUG]  [BUGGY]  while(in.peek()!=  JsonToken.STRING)  {  throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  while(in.peek()!=  JsonToken.STRING)  {  throw  new  IllegalStateException( " ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	while(in.peek()!=  JsonToken.STRING)  {  throw  new  IllegalStateException( " ");	          if(in.peek()    ==    JsonToken.STRING)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
1065	[BUG]  [BUGGY]  Thread.currentThread().setMillis(getCurrentThread().getMillis());  [CE]  cannot  find  symbol  [FE]          JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  Thread.currentThread().setMillis(getCurrentThread().getMillis());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	Thread.currentThread().setMillis(getCurrentThread().getMillis());	          if(in.peek()    ==    JsonToken.STRING)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
1066	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().reset();  [CE]  cannot  find  symbol  [FE]            JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  Thread.currentThread().getContextClassLoader().reset();  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	Thread.currentThread().getContextClassLoader().reset();	          if(in.peek()    ==    JsonToken.STRING)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
1067	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value ",  in.nextString(),  SIMPLE_NAME);  [CE]  no  suitable  constructor  found  for  JsonParseException(String,String,String)  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value ",  in.nextString(),  SIMPLE_NAME);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value ",  in.nextString(),  SIMPLE_NAME);	  return    new    JsonParseException(   "The    date    should    be    a    string    value   ",    in.nextString());    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,String,String)	13	None	replace
1068	[BUG]  [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value ", "Date  should  be  a  string  value ");  [CE]  no  suitable  constructor  found  for  JsonParseException(String,String)  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value ", "Date  should  be  a  string  value ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "Date  should  be  a  string  value ", "Date  should  be  a  string  value ");	  throw    new    JsonParseException(   "Date    should    be    a    string    value   ",    in);    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,String)	38	None	replace
1069	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value ", "Date  should  be  a  string  value ");  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value ", "Date  should  be  a  string  value ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value ", "Date  should  be  a  string  value ");	  throw    new    JsonParseException(   "Date    should    be    a    string    value   ",    in);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	38	None	replace
1070	[BUG]  [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value ", "Date  should  be  a  string  value ",  in);  [CE]  no  suitable  constructor  found  for  JsonParseException(String,String,JsonReader)  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value ", "Date  should  be  a  string  value ",  in);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "Date  should  be  a  string  value ", "Date  should  be  a  string  value ",  in);	  throw    new    JsonParseException(   "Date    should    be    a    string    value   ",    in);    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,String,JsonReader)	38	None	replace
1071	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value ", "Serialize  of  in.nextString());  [CE]  unclosed  string  literal  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value ", "Serialize  of  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  date  should  be  a  string  value ", "Serialize  of  in.nextString());	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value   ",    in.nextString());    	non-compiled	[CE]  unclosed  string  literal	95	None	replace
1072	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value ", "Serialize  in  a  string  value ",  in.nextString());  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value ", "Serialize  in  a  string  value ",  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  date  should  be  a  string  value ", "Serialize  in  a  string  value ",  in.nextString());	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value   ",    in.nextString());    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
1073	[BUG]  [BUGGY]  return  new  JsonParseException( "This  date  should  be  a  string  value. ");  [CE]  incompatible  types  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "This  date  should  be  a  string  value. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "This  date  should  be  a  string  value. ");	  throw    new    JsonParseException(   "This    date    should    be    a    string    value.   ");    	non-compiled	[CE]  incompatible  types	87	None	replace
1074	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value.  Try  again. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "This  date  should  be  a  string  value.  Try  again. ");	  throw    new    JsonParseException(   "This    date    should    be    a    string    value.   ");    	compilable	  [FE]  JsonParseException  	87	2	replace
1075	[BUG]  [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value.  Try  again. ");  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value.  Try  again. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "This  date  should  be  a  string  value.  Try  again. ");	  throw    new    JsonParseException(   "This    date    should    be    a    string    value.   ");    	compilable	  [FE]  JsonParseException  	87	2	replace
1076	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Can  not  read  string: "  +  in.getKey());  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "Can  not  read  string: "  +  in.getKey());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Can  not  read  string: "  +  in.getKey());	  throw    new    JsonTokenException(   "Can    not    read    string:   "    +    in.nextString());    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
1077	[BUG]  [BUGGY]          if(in.peek()  ==  JsonToken.STRING)  {  in.close();  return  null;  }  if(in.print()  ==  JsonToken.STRING)  {  in.close();  return  null;  }  [CE]  cannot  find  symbol  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]          if(in.peek()  ==  JsonToken.STRING)  {  in.close();  return  null;  }  if(in.print()  ==  JsonToken.STRING)  {  in.close();  return  null;  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	                if(in.peek()    ==    JsonToken.STRING)    {    in.close();    return    null;    }    if(in.print()  ==  JsonToken.STRING)  {  in.close();  return  null;  }	  	non-compiled	[CE]  cannot  find  symbol	26	None	add
1078	[BUG]  [BUGGY]  JsonParseException( "This  date  should  be  a  string  value ",  in.getClass());  [CE]  cannot  find  symbol  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException( "This  date  should  be  a  string  value ",  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException( "This  date  should  be  a  string  value ",  in.getClass());	  throw    new    JsonParseException(       "This    date    should    be    a    string    value       ");    JsonParseException(       "This    date    should    be    a    string    value       ");    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
1079	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "This  date  should  be  a  string  value ",  in.toString());  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "This  date  should  be  a  string  value ",  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "This  date  should  be  a  string  value ",  in.toString());	  JsonParseException    in    =    new    JsonParseException(   "This    date    should    be    a    string    value   ");    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	115	None	replace
1080	[BUG]  [BUGGY]  throw  new  JsonParseException(, "Date  should  be  a  string  value ");  [CE]  illegal  start  of  expression  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(, "Date  should  be  a  string  value ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException(, "Date  should  be  a  string  value ");	  throw    new    JsonParseException(       "Date    should    be    a    string    value       ");    throw    new    JsonParseException(,   "Date    should    be    a    string    value       ");    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
1081	[BUG]  [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.n   ");  JsonToken  throw  new  JsonParseException(   "The  date  should  be  a  string  value.n   ");  [CE]  not  a  statement  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.n   ");  JsonToken  throw  new  JsonParseException(   "The  date  should  be  a  string  value.n   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "The    date    should    be    a    string    value.n   ");    JsonToken  throw  new  JsonParseException(   "The  date  should  be  a  string  value.n   ");	  	non-compiled	[CE]  not  a  statement	42	None	add
1082	[BUG]  [BUGGY]  while(in.peek()  ==  JsonToken.STRING)  {  datePattern  =  in.getValue();  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  datePattern  [FE]                      IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  while(in.peek()  ==  JsonToken.STRING)  {  datePattern  =  in.getValue();  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	while(in.peek()  ==  JsonToken.STRING)  {  datePattern  =  in.getValue();  return  new  Date(datePattern);  }	          if(in.peek()    ==    JsonToken.STRING)    {    String    datePattern    =    in.getValue();    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol  datePattern	31	None	replace
1083	[BUG]  [BUGGY]  String  datePattern  =  JsonToken.VALUE_NUMBER_STRING.readString();  [CE]  cannot  find  symbol  VALUE_NUMBER_STRING  [FE]                  IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  String  datePattern  =  JsonToken.VALUE_NUMBER_STRING.readString();  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	String  datePattern  =  JsonToken.VALUE_NUMBER_STRING.readString();	          String    datePattern    =    in.readString();    	non-compiled	[CE]  cannot  find  symbol  VALUE_NUMBER_STRING	28	None	replace
1084	[BUG]  [BUGGY]  String  datePattern  =  JsonToken.VALUE_STRING,  in.readString();  [CE]  ';'  expected  [FE]                    IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  String  datePattern  =  JsonToken.VALUE_STRING,  in.readString();  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	String  datePattern  =  JsonToken.VALUE_STRING,  in.readString();	          String    datePattern    =    in.readString();    	non-compiled	[CE]  ';'  expected	28	None	replace
1085	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value ",  in.getMessage());  [CE]  cannot  find  symbol  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value ",  in.getMessage());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  Date  should  be  a  string  value ",  in.getMessage());	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value   ",    in.nextString());    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
1086	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value ", "The  Date  should  be  a  string  value ",  in.nextString());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,String,String)  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value ", "The  Date  should  be  a  string  value ",  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  Date  should  be  a  string  value ", "The  Date  should  be  a  string  value ",  in.nextString());	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value   ",    in.nextString());    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,String,String)	144	None	replace
1087	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value ", "The  Date  should  be  a  string  value ");  [CE]  no  suitable  constructor  found  for  JsonParseException(String,String)  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value ", "The  Date  should  be  a  string  value ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  Date  should  be  a  string  value ", "The  Date  should  be  a  string  value ");	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value   ",    in.nextString());    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,String)	144	None	replace
1088	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value ",  in.nextString(),  SIMPLE_NAME);  [CE]  no  suitable  constructor  found  for  JsonParseException(String,String,String)  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value ",  in.nextString(),  SIMPLE_NAME);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  Date  should  be  a  string  value ",  in.nextString(),  SIMPLE_NAME);	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value   ",    in.nextString());    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,String,String)	144	None	replace
1089	[BUG]  [BUGGY]  JsonDescriptorException( "The  date  should  be  a  string  value, ");  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonDescriptorException( "The  date  should  be  a  string  value, ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonDescriptorException( "The  date  should  be  a  string  value, ");	  JsonDescriptorException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
1090	[BUG]  [BUGGY]  Throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.toString());  [CE]  not  a  statement  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  Throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	Throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.toString());	  Throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  not  a  statement	114	None	replace
1091	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in,  in.getClass()));  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in,  in.getClass()));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in,  in.getClass()));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in,    in.getValue()));    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	52	None	replace
1092	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in,  this.in.getValue()));  [CE]  cannot  find  symbol  in  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in,  this.in.getValue()));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in,  this.in.getValue()));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in,    in.getValue()));    	non-compiled	[CE]  cannot  find  symbol  in	52	None	replace
1093	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in,  in.getValue()),  JsonToken.VALUE_STRING);  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in,  in.getValue()),  JsonToken.VALUE_STRING);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in,  in.getValue()),  JsonToken.VALUE_STRING);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in,    in.getValue()));    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
1094	[BUG]  [BUGGY]  JsonToken  t  =  in.readFromPattern();  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  t  =  in.readFromPattern();  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  t  =  in.readFromPattern();	  JsonToken    t    =    in.readFromString();    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
1095	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue()),  INVALID_DATE);  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue()),  INVALID_DATE);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue()),  INVALID_DATE);	  JsonParseException    in    =    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.getValue()));    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	51	None	replace
1096	[BUG]  [BUGGY]  throw  new  JsonParseException(   "Date  should  be  a  string  value.   ");  JsonToken  throw  new  JsonParseException( "Date  should  be  a  string  value.   ");  [CE]  not  a  statement  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "Date  should  be  a  string  value.   ");  JsonToken  throw  new  JsonParseException( "Date  should  be  a  string  value.   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "Date    should    be    a    string    value.   ");    JsonToken  throw  new  JsonParseException( "Date  should  be  a  string  value.   ");	  	non-compiled	[CE]  not  a  statement	32	None	add
1097	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  100),  SIMPLE_NAME);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  100),  SIMPLE_NAME);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  100),  SIMPLE_NAME);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    SIMPLE_NAME);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	157	None	replace
1098	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  in.close();  if(in.peek()!=  JsonToken.NAME)  {  in.close();  }  else  {  return  new  Date(in.nextString());  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	in.close();    if(in.peek()!=  JsonToken.NAME)  {  in.close();  }  else  {  return  new  Date(in.nextString());  }	  	compilable	  [FE]  IllegalStateException  	108	1	add
1099	[BUG]  [BUGGY]  in.close();  if(in.peek()!=  JsonToken.NAME)  {  in.close();  }  else  {  return  new  Date(in.nextString());  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  in.close();  if(in.peek()!=  JsonToken.NAME)  {  in.close();  }  else  {  return  new  Date(in.nextString());  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	in.close();    if(in.peek()!=  JsonToken.NAME)  {  in.close();  }  else  {  return  new  Date(in.nextString());  }	  	compilable	  [FE]  IllegalStateException  	108	1	add
1100	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  in.close();  if(in.peek()!=  JsonToken.NAME)  {  in.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	in.close();    if(in.peek()!=  JsonToken.NAME)  {  in.close();  }  else  {  throw  new  IllegalStateException( " ");  }	  	compilable	  [FE]  IllegalStateException  	108	1	add
1101	[BUG]  [BUGGY]  in.close();  if(in.peek()!=  JsonToken.NAME)  {  in.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  in.close();  if(in.peek()!=  JsonToken.NAME)  {  in.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	in.close();    if(in.peek()!=  JsonToken.NAME)  {  in.close();  }  else  {  throw  new  IllegalStateException( " ");  }	  	compilable	  [FE]  IllegalStateException  	108	1	add
1102	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  in.close();  if(in.peek()!=  JsonToken.NUMBER)  {  in.close();  }  else  {  return  new  Date(in.nextString());  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	in.close();    if(in.peek()!=  JsonToken.NUMBER)  {  in.close();  }  else  {  return  new  Date(in.nextString());  }	  	compilable	  [FE]  IllegalStateException  	108	1	add
1103	[BUG]  [BUGGY]  in.close();  if(in.peek()!=  JsonToken.NUMBER)  {  in.close();  }  else  {  return  new  Date(in.nextString());  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  in.close();  if(in.peek()!=  JsonToken.NUMBER)  {  in.close();  }  else  {  return  new  Date(in.nextString());  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	in.close();    if(in.peek()!=  JsonToken.NUMBER)  {  in.close();  }  else  {  return  new  Date(in.nextString());  }	  	compilable	  [FE]  IllegalStateException  	108	1	add
1104	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  in.close();  if(in.peek()!=  JsonToken.NUMBER)  {  in.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	in.close();    if(in.peek()!=  JsonToken.NUMBER)  {  in.close();  }  else  {  throw  new  IllegalStateException( " ");  }	  	compilable	  [FE]  IllegalStateException  	108	1	add
1105	[BUG]  [BUGGY]  in.close();  if(in.peek()!=  JsonToken.NUMBER)  {  in.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  in.close();  if(in.peek()!=  JsonToken.NUMBER)  {  in.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	in.close();    if(in.peek()!=  JsonToken.NUMBER)  {  in.close();  }  else  {  throw  new  IllegalStateException( " ");  }	  	compilable	  [FE]  IllegalStateException  	108	1	add
1106	[BUG]  [BUGGY]  in.close();  if(in.peek()!=  JsonToken.BLOCK)  {  in.close();  }  else  {  return  new  Date(in.nextString());  }  [CE]  cannot  find  symbol  BLOCK  [FE]            IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  in.close();  if(in.peek()!=  JsonToken.BLOCK)  {  in.close();  }  else  {  return  new  Date(in.nextString());  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	in.close();    if(in.peek()!=  JsonToken.BLOCK)  {  in.close();  }  else  {  return  new  Date(in.nextString());  }	  	non-compiled	[CE]  cannot  find  symbol  BLOCK	108	None	add
1107	[BUG]  [BUGGY]  throw  new  JsonTokenException( "This  date  should  be  a  string  value ",  in.getMessage());  [CE]  cannot  find  symbol  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "This  date  should  be  a  string  value ",  in.getMessage());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "This  date  should  be  a  string  value ",  in.getMessage());	  throw    new    JsonTokenException(   "This    date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
1108	[BUG]  [BUGGY]  throw  new  JsonTokenException( "This  date  should  be  a  string  value, ");  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "This  date  should  be  a  string  value, ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "This  date  should  be  a  string  value, ");	  throw    new    JsonTokenException(   "This    date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
1109	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NULL,  SIMPLE_NAME);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NULL,  SIMPLE_NAME);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NULL,  SIMPLE_NAME);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JsonToken.VALUE_NULL);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	2	None	replace
1110	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NULL,  JsonToken.VALUE_NAME);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NULL,  JsonToken.VALUE_NAME);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NULL,  JsonToken.VALUE_NAME);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JsonToken.VALUE_NULL);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	2	None	replace
1111	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NULL,  JsonToken.VALUE_NUMBER_INT);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NULL,  JsonToken.VALUE_NUMBER_INT);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NULL,  JsonToken.VALUE_NUMBER_INT);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JsonToken.VALUE_NULL);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	2	None	replace
1112	[BUG]  [BUGGY]  return  new  JsonParseException( "Date  should  be  a  String  value ");  [CE]  incompatible  types  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "Date  should  be  a  String  value ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "Date  should  be  a  String  value ");	  return    new    JsonParseException(   "Date    should    be    a    string    value   ");    	non-compiled	[CE]  incompatible  types	155	None	replace
1113	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value, ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "The  Date  should  be  a  string  value, ");	  throw    new    JsonParseException(       "The    Date    should    be    a    string    value       ");    throw    new    JsonParseException(   "The    Date    should    be    a    string    value       ");    	compilable	  [FE]  JsonParseException  	17	2	replace
1114	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value, ");  [FE]  JsonParseException  [FE]        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value, ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  Date  should  be  a  string  value, ");	  throw    new    JsonParseException(       "The    Date    should    be    a    string    value       ");    throw    new    JsonParseException(   "The    Date    should    be    a    string    value       ");    	compilable	  [FE]  JsonParseException  	17	2	replace
1115	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JSON_TYPE),  JSON_TYPE);  [CE]  cannot  find  symbol  JSON_TYPE  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JSON_TYPE),  JSON_TYPE);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JSON_TYPE),  JSON_TYPE);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JSON_TYPE);    	non-compiled	[CE]  cannot  find  symbol  JSON_TYPE	3	None	replace
1116	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JSON_TYPE),  JSON_NAME);  [CE]  cannot  find  symbol  JSON_TYPE  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JSON_TYPE),  JSON_NAME);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JSON_TYPE),  JSON_NAME);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JSON_TYPE);    	non-compiled	[CE]  cannot  find  symbol  JSON_TYPE	3	None	replace
1117	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date ".);  [CE]  <identifier>  expected  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date ".);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date ".);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Please    check    that    the    date.   ");    	non-compiled	[CE]  <identifier>  expected	47	None	replace
1118	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date! ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date! ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Please    check    that    the    date.   ");    	compilable	  [FE]  JsonParseException  	47	2	replace
1119	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date! ");  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date! ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date! ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Please    check    that    the    date.   ");    	compilable	  [FE]  JsonParseException  	47	2	replace
1120	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]        JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value!  Please  check  that  the  date. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "The  date  should  be  a  string  value!  Please  check  that  the  date. ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Please    check    that    the    date.   ");    	compilable	  [FE]  JsonParseException  	47	2	replace
1121	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value!  Please  check  that  the  date. ");  [FE]  JsonParseException  [FE]        JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value!  Please  check  that  the  date. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value!  Please  check  that  the  date. ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Please    check    that    the    date.   ");    	compilable	  [FE]  JsonParseException  	47	2	replace
1122	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value.  Please  check  that  the  time  period. ");  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value.  Please  check  that  the  time  period. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value.  Please  check  that  the  time  period. ");	  JsonParseException    in    =    new    JsonParseException(   "Date    should    be    a    string    value.   ");    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	101	None	replace
1123	[BUG]  [BUGGY]  JsonToken  t  =  in.readFrom(JsonToken.START_ARRAY,  JsonToken.END_ARRAY);  [CE]  cannot  find  symbol  START_ARRAY  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  t  =  in.readFrom(JsonToken.START_ARRAY,  JsonToken.END_ARRAY);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  t  =  in.readFrom(JsonToken.START_ARRAY,  JsonToken.END_ARRAY);	  JsonToken    t    =    in.readFrom(JsonToken.START_ARRAY);    	non-compiled	[CE]  cannot  find  symbol  START_ARRAY	124	None	replace
1124	[BUG]  [BUGGY]  new  JsonParseException( "The  Date  should  be  a  string  value ",  in.toString());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,String)  [FE]    IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "The  Date  should  be  a  string  value ",  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonParseException( "The  Date  should  be  a  string  value ",  in.toString());	  new    JsonParseException(   "The    Date    should    be    a    string    value   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,String)	137	None	replace
1125	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "The  Date  should  be  a  string  value, ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	new  JsonParseException( "The  Date  should  be  a  string  value, ");	  new    JsonParseException(   "The    Date    should    be    a    string    value   ");    	compilable	  [FE]  IllegalStateException  	137	1	replace
1126	[BUG]  [BUGGY]  new  JsonParseException( "The  Date  should  be  a  string  value, ");  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "The  Date  should  be  a  string  value, ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonParseException( "The  Date  should  be  a  string  value, ");	  new    JsonParseException(   "The    Date    should    be    a    string    value   ");    	compilable	  [FE]  IllegalStateException  	137	1	replace
1127	[BUG]  [BUGGY]  if(in.next()  ==  JsonToken.VALUE_STRING)  {  in.close();  }  [CE]  cannot  find  symbol  [FE]    IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.next()  ==  JsonToken.VALUE_STRING)  {  in.close();  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.next()  ==  JsonToken.VALUE_STRING)  {  in.close();  }	  in.close();    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
1128	[BUG]  [BUGGY]  if(in.next()!=  JsonToken.VALUE_STRING)  {  in.close();  }  [CE]  cannot  find  symbol  [FE]      IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.next()!=  JsonToken.VALUE_STRING)  {  in.close();  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.next()!=  JsonToken.VALUE_STRING)  {  in.close();  }	  in.close();    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
1129	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value!  Please  check  that  this  value  is  not  valid. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "The  date  should  be  a  string  value!  Please  check  that  this  value  is  not  valid. ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Please    check    that    this    value    is    not    valid.   ");    	compilable	  [FE]  JsonParseException  	49	2	replace
1130	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value!  Please  check  that  this  value  is  not  valid. ");  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value!  Please  check  that  this  value  is  not  valid. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value!  Please  check  that  this  value  is  not  valid. ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Please    check    that    this    value    is    not    valid.   ");    	compilable	  [FE]  JsonParseException  	49	2	replace
1131	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JSON_VALUE));  [CE]  cannot  find  symbol  JSON_VALUE  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JSON_VALUE));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JSON_VALUE));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString(),    JSON_NAME));    	non-compiled	[CE]  cannot  find  symbol  JSON_VALUE	121	None	replace
1132	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JSON_NAME),  SIMPLE_NAME);  [CE]  cannot  find  symbol  JSON_NAME  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JSON_NAME),  SIMPLE_NAME);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JSON_NAME),  SIMPLE_NAME);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString(),    JSON_NAME));    	non-compiled	[CE]  cannot  find  symbol  JSON_NAME	121	None	replace
1133	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  16));  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  16));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  16));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString(),    JSON_NAME));    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	121	None	replace
1134	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  an  object  value. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "The  date  should  be  an  object  value. ");	  throw    new    JsonParseException(       "The    date    should    be    a    string    value.       ");    throw    new    JsonParseException(   "The    date    should    be    a    string    value.       ");    	compilable	  [FE]  JsonParseException  	8	2	replace
1135	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  an  object  value. ");  [FE]  JsonParseException  [FE]        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  an  object  value. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  an  object  value. ");	  throw    new    JsonParseException(       "The    date    should    be    a    string    value.       ");    throw    new    JsonParseException(   "The    date    should    be    a    string    value.       ");    	compilable	  [FE]  JsonParseException  	8	2	replace
1136	[BUG]  [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value "  +, "This  date  should  be  a  string  value ",  in.nextString());  [CE]  illegal  start  of  expression  [FE]        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value "  +, "This  date  should  be  a  string  value ",  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "This  date  should  be  a  string  value "  +, "This  date  should  be  a  string  value ",  in.nextString());	  throw    new    JsonParseException(   "This    date    should    be    a    string    value   ",    in.nextString());    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
1137	[BUG]  [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value ",  in.getValue());  [CE]  cannot  find  symbol  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value ",  in.getValue());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "This  date  should  be  a  string  value ",  in.getValue());	  throw    new    JsonParseException(   "This    date    should    be    a    string    value   ",    in.nextString());    	non-compiled	[CE]  cannot  find  symbol	162	None	replace
1138	[BUG]  [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Try  again.   ");  throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Try  again.  Try  again.  Try  again.   ");  [CE]  unreachable  statement  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Try  again.   ");  throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Try  again.  Try  again.  Try  again.   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Try    again.   ");    throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Try  again.  Try  again.  Try  again.   ");	  	non-compiled	[CE]  unreachable  statement	167	None	add
1139	[BUG]  [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Try  again.   ");  throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Try  again.  Try  again.  The ");  [CE]  unreachable  statement  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Try  again.   ");  throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Try  again.  Try  again.  The ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Try    again.   ");    throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Try  again.  Try  again.  The ");	  	non-compiled	[CE]  unreachable  statement	167	None	add
1140	[BUG]  [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value, ",  in.nextString());  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value, ",  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonDescriptorException( "The  date  should  be  a  string  value, ",  in.nextString());	  throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value,   ");    	non-compiled	[CE]  cannot  find  symbol	166	None	replace
1141	[BUG]  [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value, ",  in.getClass());  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value, ",  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonDescriptorException( "The  date  should  be  a  string  value, ",  in.getClass());	  throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value,   ");    	non-compiled	[CE]  cannot  find  symbol	166	None	replace
1142	[BUG]  [BUGGY]  JsonTokenException.throw  new  JsonTokenException( "The  date  should  be  a  string  value ",  in.getMessage());  [CE]  <identifier>  expected  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonTokenException.throw  new  JsonTokenException( "The  date  should  be  a  string  value ",  in.getMessage());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonTokenException.throw  new  JsonTokenException( "The  date  should  be  a  string  value ",  in.getMessage());	  JsonTokenException.throw    new    JsonTokenException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  <identifier>  expected	102	None	replace
1143	[BUG]  [BUGGY]  JsonTokenException.throw  new  JsonTokenException( "The  date  should  be  a  string  value! ");  [CE]  <identifier>  expected  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonTokenException.throw  new  JsonTokenException( "The  date  should  be  a  string  value! ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonTokenException.throw  new  JsonTokenException( "The  date  should  be  a  string  value! ");	  JsonTokenException.throw    new    JsonTokenException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  <identifier>  expected	102	None	replace
1144	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.readLine());  [CE]  cannot  find  symbol  [FE]    IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.readLine());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.readLine());	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value:   "    +    in.nextString());    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
1145	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value ",  in.toString(),  in.nextString());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,String,String)  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value ",  in.toString(),  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value ",  in.toString(),  in.nextString());	  return    new    JsonParseException(   "The    date    should    be    a    string    value   ",    in.toString());    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,String,String)	140	None	replace
1146	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value ",  in.toString(),  JsonToken.VALUE_STRING);  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value ",  in.toString(),  JsonToken.VALUE_STRING);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value ",  in.toString(),  JsonToken.VALUE_STRING);	  return    new    JsonParseException(   "The    date    should    be    a    string    value   ",    in.toString());    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	140	None	replace
1147	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value. ",  in.toString(),  in.nextString());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,String,String)  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value. ",  in.toString(),  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value. ",  in.toString(),  in.nextString());	  return    new    JsonParseException(   "The    date    should    be    a    string    value   ",    in.toString());    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,String,String)	140	None	replace
1148	[BUG]  [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value.  Please  check  that  the  date. ");  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value.  Please  check  that  the  date. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonDescriptorException( "The  date  should  be  a  string  value.  Please  check  that  the  date. ");	  throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value.   ");    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
1149	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value. "  +  Integer.toHexString(in.nextString(),  SIMPLE_NAME));  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value. "  +  Integer.toHexString(in.nextString(),  SIMPLE_NAME));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value. "  +  Integer.toHexString(in.nextString(),  SIMPLE_NAME));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.   "    +    Integer.toHexString(in.nextString()));    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	5	None	replace
1150	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value. "  +  Integer.toHexString(in.nextString(),  JsonToken.VALUE_NULL));  [CE]  cannot  find  symbol  VALUE_NULL  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value. "  +  Integer.toHexString(in.nextString(),  JsonToken.VALUE_NULL));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value. "  +  Integer.toHexString(in.nextString(),  JsonToken.VALUE_NULL));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.   "    +    Integer.toHexString(in.nextString()));    	non-compiled	[CE]  cannot  find  symbol  VALUE_NULL	5	None	replace
1151	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Unexpected  String  value: "  +  in.nextString());  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "Unexpected  String  value: "  +  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Unexpected  String  value: "  +  in.nextString());	  throw    new    JsonTokenException(   "Unexpected    String    value:   "    +    in.getValue());    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
1152	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.VALUE_NAME)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  VALUE_NAME  [FE]          IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()!=  JsonToken.VALUE_NAME)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()!=  JsonToken.VALUE_NAME)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }	  if(in.peek()!=    JsonToken.VALUE_STRING)    {    String    datePattern    =    in.getString();    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol  VALUE_NAME	146	None	replace
1153	[BUG]  [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value "  +, "Date  should  be  a  string  value ",  in.nextString());  [CE]  illegal  start  of  expression  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value "  +, "Date  should  be  a  string  value ",  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "Date  should  be  a  string  value "  +, "Date  should  be  a  string  value ",  in.nextString());	  throw    new    JsonParseException(   "Date    should    be    a    string    value   ",    in.nextString());    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
1154	[BUG]  [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value ", "Date  should  be  a  string  value. ");  [CE]  no  suitable  constructor  found  for  JsonParseException(String,String)  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value ", "Date  should  be  a  string  value. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "Date  should  be  a  string  value ", "Date  should  be  a  string  value. ");	  throw    new    JsonParseException(   "Date    should    be    a    string    value   ",    in.nextString());    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,String)	156	None	replace
1155	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value ", "Serialize  in  a  string  value ",  in.getMessage());  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value ", "Serialize  in  a  string  value ",  in.getMessage());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  date  should  be  a  string  value ", "Serialize  in  a  string  value ",  in.getMessage());	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value   ",    in.getMessage());    	non-compiled	[CE]  cannot  find  symbol	160	None	replace
1156	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value ",  in.toString());  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value ",  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value ",  in.toString());	  JsonParseException    in    =    new    JsonParseException(   "Date    should    be    a    string    value   ");    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	35	None	replace
1157	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value ",  in.nextString());  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value ",  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value ",  in.nextString());	  JsonParseException    in    =    new    JsonParseException(   "Date    should    be    a    string    value   ");    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	35	None	replace
1158	[BUG]  [BUGGY]  Throwables.throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.nextString());  [CE]  <identifier>  expected  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  Throwables.throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	Throwables.throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.nextString());	  Throwables.throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  <identifier>  expected	63	None	replace
1159	[BUG]  [BUGGY]  Throwables.throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.getMessage());  [CE]  <identifier>  expected  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  Throwables.throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.getMessage());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	Throwables.throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.getMessage());	  Throwables.throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  <identifier>  expected	63	None	replace
1160	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  100),  JSONToken.VALUE_STRING);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  100),  JSONToken.VALUE_STRING);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  100),  JSONToken.VALUE_STRING);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JSONToken.VALUE_STRING);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	4	None	replace
1161	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JSONToken.VALUE_STRING),  in.nextString());  [CE]  cannot  find  symbol  JSONToken  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JSONToken.VALUE_STRING),  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JSONToken.VALUE_STRING),  in.nextString());	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JSONToken.VALUE_STRING);    	non-compiled	[CE]  cannot  find  symbol  JSONToken	4	None	replace
1162	[BUG]  [BUGGY]  return  new  java.sql.Date(in.nextString());  [CE]  no  suitable  constructor  found  for  Date(String)  [FE]    IllegalArgumentException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  java.sql.Date(in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  java.sql.Date(in.nextString());	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  Date(String)	76	None	replace
1163	[BUG]  [BUGGY]  return  new  java.sql.Date(in.getPeek());  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  java.sql.Date(in.getPeek());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  java.sql.Date(in.getPeek());	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
1164	[BUG]  [BUGGY]  return  new  java.sql.Date(in.readString());  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  java.sql.Date(in.readString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  java.sql.Date(in.readString());	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
1165	[BUG]  [BUGGY]  return  new  java.sql.Date(in.getValue());  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  java.sql.Date(in.getValue());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  java.sql.Date(in.getValue());	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
1166	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  Date  should  be  a  string  value ",  in.toString());  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  Date  should  be  a  string  value ",  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "The  Date  should  be  a  string  value ",  in.toString());	  JsonParseException    in    =    new    JsonParseException(   "The    Date    should    be    a    string    value   ");    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	135	None	replace
1167	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SIMPLE_NAME),  datePattern);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SIMPLE_NAME),  datePattern);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SIMPLE_NAME),  datePattern);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString(),    SIMPLE_NAME));    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	158	None	replace
1168	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SIMPLE_NAME,  dates));  [CE]  cannot  find  symbol  dates  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SIMPLE_NAME,  dates));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SIMPLE_NAME,  dates));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString(),    SIMPLE_NAME));    	non-compiled	[CE]  cannot  find  symbol  dates	158	None	replace
1169	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SIMPLE_NAME,  this.datePattern));  [CE]  cannot  find  symbol  datePattern  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SIMPLE_NAME,  this.datePattern));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SIMPLE_NAME,  this.datePattern));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString(),    SIMPLE_NAME));    	non-compiled	[CE]  cannot  find  symbol  datePattern	158	None	replace
1170	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SIMPLE_NAME),  in.nextPattern());  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SIMPLE_NAME),  in.nextPattern());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SIMPLE_NAME),  in.nextPattern());	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString(),    SIMPLE_NAME));    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	158	None	replace
1171	[BUG]  [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Please  check  that  the  date.   ");  JsonToken  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date.   ");  [CE]  not  a  statement  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.  Please  check  that  the  date.   ");  JsonToken  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date.   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Please    check    that    the    date.   ");    JsonToken  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date.   ");	  	non-compiled	[CE]  not  a  statement	46	None	add
1172	[BUG]  [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value: "  +  in.readClass());  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value: "  +  in.readClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonDescriptorException( "The  date  should  be  a  string  value: "  +  in.readClass());	  throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value:   "    +    in.getClass());    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
1173	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Try  again: ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "The  date  should  be  a  string  value.  Try  again: ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Try    again.   ");    	compilable	  [FE]  JsonParseException  	168	2	replace
1174	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Try  again: ");  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Try  again: ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value.  Try  again: ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Try    again.   ");    	compilable	  [FE]  JsonParseException  	168	2	replace
1175	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Try  again ",  in.getClass());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,Class<CAP#1>)  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Try  again ",  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value.  Try  again ",  in.getClass());	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Try    again.   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,Class<CAP#1>)	168	None	replace
1176	[BUG]  [BUGGY]  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(this.in.getValue()));  [CE]  cannot  find  symbol  in  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(this.in.getValue()));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(this.in.getValue()));	  JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.getValue()));    	non-compiled	[CE]  cannot  find  symbol  in	134	None	replace
1177	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SHORT_NAME),  JsonToken.VALUE_NUMBER_INT);  [CE]  cannot  find  symbol  SHORT_NAME  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SHORT_NAME),  JsonToken.VALUE_NUMBER_INT);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SHORT_NAME),  JsonToken.VALUE_NUMBER_INT);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JsonToken.VALUE_NUMBER_INT);    	non-compiled	[CE]  cannot  find  symbol  SHORT_NAME	7	None	replace
1178	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JsonToken.VALUE_NUMBER_INT),  SIMPLE_NAME);  [CE]  cannot  find  symbol  VALUE_NUMBER_INT  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JsonToken.VALUE_NUMBER_INT),  SIMPLE_NAME);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JsonToken.VALUE_NUMBER_INT),  SIMPLE_NAME);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JsonToken.VALUE_NUMBER_INT);    	non-compiled	[CE]  cannot  find  symbol  VALUE_NUMBER_INT	7	None	replace
1179	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value, "  +  in.nextString());  [CE]  incompatible  types  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value, "  +  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value, "  +  in.nextString());	  return    new    JsonParseException(   "The    date    should    be    a    string    value,   ");    	non-compiled	[CE]  incompatible  types	14	None	replace
1180	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value, "  +  in.getMessage());  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value, "  +  in.getMessage());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value, "  +  in.getMessage());	  return    new    JsonParseException(   "The    date    should    be    a    string    value,   ");    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
1181	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value, "+in.getClass().getName());  [CE]  incompatible  types  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value, "+in.getClass().getName());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value, "+in.getClass().getName());	  return    new    JsonParseException(   "The    date    should    be    a    string    value,   ");    	non-compiled	[CE]  incompatible  types	14	None	replace
1182	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  INVALID_DATE));  [CE]  cannot  find  symbol  INVALID_DATE  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  INVALID_DATE));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  INVALID_DATE));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    INVALID_DATE);    	non-compiled	[CE]  cannot  find  symbol  INVALID_DATE	122	None	replace
1183	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  STRICT_DATE),  INVALID_DATE);  [CE]  cannot  find  symbol  STRICT_DATE  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  STRICT_DATE),  INVALID_DATE);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  STRICT_DATE),  INVALID_DATE);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    INVALID_DATE);    	non-compiled	[CE]  cannot  find  symbol  STRICT_DATE	122	None	replace
1184	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SIMPLE_NAME),  INVALID_DATE);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SIMPLE_NAME),  INVALID_DATE);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SIMPLE_NAME),  INVALID_DATE);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    INVALID_DATE);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	122	None	replace
1185	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  DEFAULT_DATE_NAME),  inVALID_DATE);  [CE]  cannot  find  symbol  DEFAULT_DATE_NAME  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  DEFAULT_DATE_NAME),  inVALID_DATE);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  DEFAULT_DATE_NAME),  inVALID_DATE);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    INVALID_DATE);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DATE_NAME	122	None	replace
1186	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value ", "Serialize  in  a  string  class ");  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value ", "Serialize  in  a  string  class ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  date  should  be  a  string  value ", "Serialize  in  a  string  class ");	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value   ",    in.getClass());    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
1187	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value ",  in.readLine());  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value ",  in.readLine());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value ",  in.readLine());	  return    new    JsonParseException(   "The    date    should    be    a    string    value   ",    in.getClass());    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
1188	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue(),  32),  JsonToken.VALUE_STRING);  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue(),  32),  JsonToken.VALUE_STRING);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue(),  32),  JsonToken.VALUE_STRING);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.getValue()),    JsonToken.VALUE_STRING);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
1189	[BUG]  [BUGGY]  throw  new  JsonParseException(   "The  Date  should  be  a  string  value.   ");  JsonToken  throw  new  JsonParseException( "The  Date  should  be  a  string  value.   ");  [CE]  not  a  statement  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "The  Date  should  be  a  string  value.   ");  JsonToken  throw  new  JsonParseException( "The  Date  should  be  a  string  value.   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "The    Date    should    be    a    string    value.   ");    JsonToken  throw  new  JsonParseException( "The  Date  should  be  a  string  value.   ");	  	non-compiled	[CE]  not  a  statement	65	None	add
1190	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_NUMBER)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  VALUE_NUMBER  [FE]                IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_NUMBER)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()  ==  JsonToken.VALUE_NUMBER)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }	  if(in.peek()    ==    JsonToken.VALUE_STRING)    {    String    datePattern    =    in.getString();    return    new    Date(datePattern);    }    else    {    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol  VALUE_NUMBER	111	None	replace
1191	[BUG]  [BUGGY]  in.peek()  ==  JsonToken.VALUE_STRING)  {  return  new  Date(in.getString(),  datePattern);  }  else  {  return  new  Date(datePattern);  }  [CE]  not  a  statement  [FE]                  IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  in.peek()  ==  JsonToken.VALUE_STRING)  {  return  new  Date(in.getString(),  datePattern);  }  else  {  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	in.peek()  ==  JsonToken.VALUE_STRING)  {  return  new  Date(in.getString(),  datePattern);  }  else  {  return  new  Date(datePattern);  }	  if(in.peek()    ==    JsonToken.VALUE_STRING)    {    String    datePattern    =    in.getString();    return    new    Date(datePattern);    }    else    {    return    new    Date(datePattern);    }    	non-compiled	[CE]  not  a  statement	111	None	replace
1192	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value.  Try  again. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "The  Date  should  be  a  string  value.  Try  again. ");	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value.   ");    	compilable	  [FE]  JsonParseException  	66	2	replace
1193	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value.  Try  again. ");  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value.  Try  again. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  Date  should  be  a  string  value.  Try  again. ");	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value.   ");    	compilable	  [FE]  JsonParseException  	66	2	replace
1194	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value.  Expected  to  be  a  string  value. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "The  Date  should  be  a  string  value.  Expected  to  be  a  string  value. ");	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value.   ");    	compilable	  [FE]  JsonParseException  	66	2	replace
1195	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value.  Expected  to  be  a  string  value. ");  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value.  Expected  to  be  a  string  value. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  Date  should  be  a  string  value.  Expected  to  be  a  string  value. ");	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value.   ");    	compilable	  [FE]  JsonParseException  	66	2	replace
1196	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  in.nextString(),  SIMPLE_NAME);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  in.nextString(),  SIMPLE_NAME);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  in.nextString(),  SIMPLE_NAME);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    in.nextString());    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	159	None	replace
1197	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  in.nextString()));  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  in.nextString()));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  in.nextString()));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    in.nextString());    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	159	None	replace
1198	[BUG]  [BUGGY]  Throw  new  JsonTokenException( "The  date  should  be  a  string  value. ");  [CE]  not  a  statement  [FE]        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  Throw  new  JsonTokenException( "The  date  should  be  a  string  value. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	Throw  new  JsonTokenException( "The  date  should  be  a  string  value. ");	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value.   ");    	non-compiled	[CE]  not  a  statement	41	None	replace
1199	[BUG]  [BUGGY]  JsonTokenException( "The  date  should  be  a  string  value. ");  [CE]  cannot  find  symbol  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonTokenException( "The  date  should  be  a  string  value. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonTokenException( "The  date  should  be  a  string  value. ");	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value.   ");    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
1200	[BUG]  [BUGGY]  new  JsonTokenException( "The  date  should  be  a  string  value. ");  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonTokenException( "The  date  should  be  a  string  value. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonTokenException( "The  date  should  be  a  string  value. ");	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value.   ");    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
1201	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_NAME)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  VALUE_NAME  [FE]        IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_NAME)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()  ==  JsonToken.VALUE_NAME)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }	  if(in.peek()    ==    JsonToken.VALUE_STRING)    {    String    datePattern    =    in.readString();    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol  VALUE_NAME	106	None	replace
1202	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_NUMBER)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  VALUE_NUMBER  [FE]          IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_NUMBER)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()  ==  JsonToken.VALUE_NUMBER)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }	  if(in.peek()    ==    JsonToken.VALUE_STRING)    {    String    datePattern    =    in.readString();    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol  VALUE_NUMBER	106	None	replace
1203	[BUG]  [BUGGY]  while(in.peek()  ==  JsonToken.STRING)  {  datePattern  =  in.getString();  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  datePattern  [FE]            IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  while(in.peek()  ==  JsonToken.STRING)  {  datePattern  =  in.getString();  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	while(in.peek()  ==  JsonToken.STRING)  {  datePattern  =  in.getString();  return  new  Date(datePattern);  }	          if(in.peek()    ==    JsonToken.STRING)    {    String    datePattern    =    in.getString();    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol  datePattern	24	None	replace
1204	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in,  in.getValue()),  JsonToken.VALUE_NULL);  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in,  in.getValue()),  JsonToken.VALUE_NULL);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in,  in.getValue()),  JsonToken.VALUE_NULL);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.getValue()),    JsonToken.VALUE_NULL);    	non-compiled	[CE]  cannot  find  symbol	164	None	replace
1205	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue())+  1,  JsonToken.VALUE_NULL);  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue())+  1,  JsonToken.VALUE_NULL);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue())+  1,  JsonToken.VALUE_NULL);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.getValue()),    JsonToken.VALUE_NULL);    	non-compiled	[CE]  cannot  find  symbol	164	None	replace
1206	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  while(in.peek()!=  JsonToken.STRING)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	while(in.peek()!=  JsonToken.STRING)  {  throw  new  IllegalArgumentException( " ");  }	          if(in.peek()    ==    JsonToken.STRING)    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	23	2	replace
1207	[BUG]  [BUGGY]  while(in.peek()!=  JsonToken.STRING)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  while(in.peek()!=  JsonToken.STRING)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	while(in.peek()!=  JsonToken.STRING)  {  throw  new  IllegalArgumentException( " ");  }	          if(in.peek()    ==    JsonToken.STRING)    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	23	2	replace
1208	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().setAsString(in.nextString());  [CE]  cannot  find  symbol  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  Thread.currentThread().getContextClassLoader().setAsString(in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	Thread.currentThread().getContextClassLoader().setAsString(in.nextString());	          if(in.peek()    ==    JsonToken.STRING)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
1209	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  while(in.peek()!=  JsonToken.STRING)  {  in.close();  return  null;  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	while(in.peek()!=  JsonToken.STRING)  {  in.close();  return  null;  }	          if(in.peek()    ==    JsonToken.STRING)    {    in.close();    return    null;    }    	compilable	  [FE]  AssertionFailedError  	27	1	replace
1210	[BUG]  [BUGGY]  while(in.peek()!=  JsonToken.STRING)  {  in.close();  return  null;  }  [FE]  AssertionFailedError  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  while(in.peek()!=  JsonToken.STRING)  {  in.close();  return  null;  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	while(in.peek()!=  JsonToken.STRING)  {  in.close();  return  null;  }	          if(in.peek()    ==    JsonToken.STRING)    {    in.close();    return    null;    }    	compilable	  [FE]  AssertionFailedError  	27	1	replace
1211	[BUG]  [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ", "String  in.nextString());  [CE]  unclosed  string  literal  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ", "String  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ", "String  in.nextString());	  throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value   ",    in.nextString());    	non-compiled	[CE]  unclosed  string  literal	62	None	replace
1212	[BUG]  [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ", "Serialize  of  in.nextString());  [CE]  unclosed  string  literal  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ", "Serialize  of  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ", "Serialize  of  in.nextString());	  throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value   ",    in.nextString());    	non-compiled	[CE]  unclosed  string  literal	62	None	replace
1213	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JsonToken.VALUE_STRING),  in.nextString());  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JsonToken.VALUE_STRING),  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JsonToken.VALUE_STRING),  in.nextString());	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JsonToken.STRING);    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	6	None	replace
1214	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.STRING);  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.STRING);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.STRING);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JsonToken.STRING);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	6	None	replace
1215	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.readString());  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.readString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.readString());	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value:   "    +    in.getClass());    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
1216	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  SIMPLE_NAME);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  SIMPLE_NAME);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  SIMPLE_NAME);	  return    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()));    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	139	None	replace
1217	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SIMPLE_NAME));  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SIMPLE_NAME));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SIMPLE_NAME));	  return    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()));    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	139	None	replace
1218	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getKey()));  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getKey()));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getKey()));	  return    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()));    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
1219	[BUG]  [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value ", "Date  should  be  a  string  value ",  in.getClass());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,String,Class<CAP#1>)  [FE]        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value ", "Date  should  be  a  string  value ",  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "Date  should  be  a  string  value ", "Date  should  be  a  string  value ",  in.getClass());	  throw    new    JsonParseException(   "Date    should    be    a    string    value   ",    in.getClass());    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,String,Class<CAP#1>)	154	None	replace
1220	[BUG]  [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value ",  in.getClass(),  SIMPLE_NAME);  [CE]  no  suitable  constructor  found  for  JsonParseException(String,Class<CAP#1>,String)  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value ",  in.getClass(),  SIMPLE_NAME);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "Date  should  be  a  string  value ",  in.getClass(),  SIMPLE_NAME);	  throw    new    JsonParseException(   "Date    should    be    a    string    value   ",    in.getClass());    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,Class<CAP#1>,String)	154	None	replace
1221	[BUG]  [BUGGY]  new  JsonParseException(   "This  date  should  be  a  string  value   ");  new  JsonParseException(. "This  date  should  be  a  string  value   ");  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException(   "This  date  should  be  a  string  value   ");  new  JsonParseException(. "This  date  should  be  a  string  value   ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new    JsonParseException(   "This    date    should    be    a    string    value   ");    new  JsonParseException(. "This  date  should  be  a  string  value   ");	  	non-compiled	[CE]  illegal  start  of  expression	117	None	add
1222	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  SHORT_NAME);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  SHORT_NAME);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  SHORT_NAME);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString())+    1);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	120	None	replace
1223	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  1,  in.peek());  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  1,  in.peek());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  1,  in.peek());	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString())+    1);    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	120	None	replace
1224	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value, ",  in.nextString());  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value, ",  in.nextString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  date  should  be  a  string  value, ",  in.nextString());	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value,   ");    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
1225	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value, ",  in.getMessage());  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value, ",  in.getMessage());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  date  should  be  a  string  value, ",  in.getMessage());	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value,   ");    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
1226	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value, ",  in.getClass());  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value, ",  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  date  should  be  a  string  value, ",  in.getClass());	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value,   ");    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
1227	[BUG]  [BUGGY]  throw  new  JsonParseException(   "Date  should  be  a  string  value:   "  +  in.getClass());  JsonToken  throw  new  JsonParseException( "Date  should  be  a  string  value:   "  +  in.getClass());  [CE]  not  a  statement  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException(   "Date  should  be  a  string  value:   "  +  in.getClass());  JsonToken  throw  new  JsonParseException( "Date  should  be  a  string  value:   "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "Date    should    be    a    string    value:   "    +    in.getClass());    JsonToken  throw  new  JsonParseException( "Date  should  be  a  string  value:   "  +  in.getClass());	  	non-compiled	[CE]  not  a  statement	36	None	add
1228	[BUG]  [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value ", "Unexpected  message: "  +  in.getMessage());  [CE]  cannot  find  symbol  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value ", "Unexpected  message: "  +  in.getMessage());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "This  date  should  be  a  string  value ", "Unexpected  message: "  +  in.getMessage());	  throw    new    JsonParseException(   "This    date    should    be    a    string    value   ",    in.getMessage());    	non-compiled	[CE]  cannot  find  symbol	163	None	replace
1229	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value ",  in.readString());  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value ",  in.readString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value ",  in.readString());	  return    new    JsonParseException(   "The    date    should    be    a    string    value   ",    in);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
1230	[BUG]  [BUGGY]  return  new  JsonTokenException( "Unexpected  String  name: "  +  in.getClass());  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  return  new  JsonTokenException( "Unexpected  String  name: "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonTokenException( "Unexpected  String  name: "  +  in.getClass());	  throw    new    JsonTokenException(   "Unexpected    String    name:   "    +    in.getClass());    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
1231	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value   ",  in.toString());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,String)  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value   ",  in.toString());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  Date  should  be  a  string  value   ",  in.toString());	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value   ",    in);    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,String)	72	None	replace
1232	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value   ",  in.getClass(),  SIMPLE_NAME);  [CE]  no  suitable  constructor  found  for  JsonParseException(String,Class<CAP#1>,String)  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value   ",  in.getClass(),  SIMPLE_NAME);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  Date  should  be  a  string  value   ",  in.getClass(),  SIMPLE_NAME);	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value   ",    in.getClass());    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,Class<CAP#1>,String)	138	None	replace
1233	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value ", "Unknown  class: "  +  in.getClass());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,String)  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value ", "Unknown  class: "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  Date  should  be  a  string  value ", "Unknown  class: "  +  in.getClass());	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value   ",    in.getClass());    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,String)	138	None	replace
1234	[BUG]  [BUGGY]  JsonParseException( "Date  should  be  a  string  value ",  in.getClass());  [CE]  cannot  find  symbol  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonParseException( "Date  should  be  a  string  value ",  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException( "Date  should  be  a  string  value ",  in.getClass());	  throw    new    JsonParseException(       "Date    should    be    a    string    value       ");    JsonParseException(       "Date    should    be    a    string    value       ");    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
1235	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "Date  should  be  a  string  value, ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	new  JsonParseException( "Date  should  be  a  string  value, ");	  new    JsonParseException(   "Date    should    be    a    string    value   ");    	compilable	  [FE]  IllegalStateException  	100	1	replace
1236	[BUG]  [BUGGY]  new  JsonParseException( "Date  should  be  a  string  value, ");  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "Date  should  be  a  string  value, ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonParseException( "Date  should  be  a  string  value, ");	  new    JsonParseException(   "Date    should    be    a    string    value   ");    	compilable	  [FE]  IllegalStateException  	100	1	replace
1237	[BUG]  [BUGGY]  new  JsonParseException( "Date  should  be  a  string  value ",  in.getMessage());  [CE]  cannot  find  symbol  [FE]      IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "Date  should  be  a  string  value ",  in.getMessage());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonParseException( "Date  should  be  a  string  value ",  in.getMessage());	  new    JsonParseException(   "Date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
1238	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "This  date  should  be  a  string  value, ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	new  JsonParseException( "This  date  should  be  a  string  value, ");	  new    JsonParseException(   "This    date    should    be    a    string    value   ");    	compilable	  [FE]  IllegalStateException  	118	1	replace
1239	[BUG]  [BUGGY]  new  JsonParseException( "This  date  should  be  a  string  value, ");  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "This  date  should  be  a  string  value, ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonParseException( "This  date  should  be  a  string  value, ");	  new    JsonParseException(   "This    date    should    be    a    string    value   ");    	compilable	  [FE]  IllegalStateException  	118	1	replace
1240	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_NUMBER)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  VALUE_NUMBER  [FE]        IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_NUMBER)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()  ==  JsonToken.VALUE_NUMBER)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }	          if(in.peek()    ==    JsonToken.VALUE_STRING)    {    String    datePattern    =    in.readString();    return    new    Date(datePattern);    }    else    {    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol  VALUE_NUMBER	130	None	replace
1241	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_NULL)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  VALUE_NULL  [FE]          IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_NULL)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()  ==  JsonToken.VALUE_NULL)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }	          if(in.peek()    ==    JsonToken.VALUE_STRING)    {    String    datePattern    =    in.readString();    return    new    Date(datePattern);    }    else    {    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol  VALUE_NULL	130	None	replace
1242	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.VALUE_NAME)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  VALUE_NAME  [FE]        IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()!=  JsonToken.VALUE_NAME)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()!=  JsonToken.VALUE_NAME)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }	  if(in.peek()!=    JsonToken.VALUE_STRING)    {    String    datePattern    =    in.readString();    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol  VALUE_NAME	145	None	replace
1243	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.VALUE_PREFIX)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  VALUE_PREFIX  [FE]          IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()!=  JsonToken.VALUE_PREFIX)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()!=  JsonToken.VALUE_PREFIX)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }	  if(in.peek()!=    JsonToken.VALUE_STRING)    {    String    datePattern    =    in.readString();    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol  VALUE_PREFIX	145	None	replace
1244	[BUG]  [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value ",  in.getClass(),  SIMPLE_NAME);  [CE]  no  suitable  constructor  found  for  JsonParseException(String,Class<CAP#1>,String)  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value ",  in.getClass(),  SIMPLE_NAME);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "This  date  should  be  a  string  value ",  in.getClass(),  SIMPLE_NAME);	  throw    new    JsonParseException(   "This    date    should    be    a    string    value   ",    in.getClass());    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,Class<CAP#1>,String)	116	None	replace
1245	[BUG]  [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value ", "Unknown  class: "  +  in.getClass());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,String)  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value ", "Unknown  class: "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "This  date  should  be  a  string  value ", "Unknown  class: "  +  in.getClass());	  throw    new    JsonParseException(   "This    date    should    be    a    string    value   ",    in.getClass());    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,String)	116	None	replace
1246	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JavaToken.VALUE_STRING));  [CE]  cannot  find  symbol  JavaToken  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JavaToken.VALUE_STRING));  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JavaToken.VALUE_STRING));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()),    JsonToken.VALUE_STRING);    	non-compiled	[CE]  cannot  find  symbol  JavaToken	1	None	replace
1247	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Date  should  be  a  string  value ",  in.getMessage());  [CE]  cannot  find  symbol  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "Date  should  be  a  string  value ",  in.getMessage());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Date  should  be  a  string  value ",  in.getMessage());	  throw    new    JsonTokenException(   "Date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
1248	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Date  should  be  a  string  value, ");  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "Date  should  be  a  string  value, ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Date  should  be  a  string  value, ");	  throw    new    JsonTokenException(   "Date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
1249	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Unknown  string: "  +  in.stringValue());  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "Unknown  string: "  +  in.stringValue());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Unknown  string: "  +  in.stringValue());	  throw    new    JsonTokenException(   "Unknown    string:   "    +    in.getClass());    	non-compiled	[CE]  cannot  find  symbol	152	None	replace
1250	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date  has  been  read. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date  has  been  read. ");	  new    JsonParseException(   "The    date    should    be    a    string    value.   ");    	compilable	  [FE]  IllegalStateException  	133	1	replace
1251	[BUG]  [BUGGY]  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date  has  been  read. ");  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date  has  been  read. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date  has  been  read. ");	  new    JsonParseException(   "The    date    should    be    a    string    value.   ");    	compilable	  [FE]  IllegalStateException  	133	1	replace
1252	[BUG]  [BUGGY]  if(in.read()  ==  JsonToken.STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.read()  ==  JsonToken.STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.read()  ==  JsonToken.STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }	  if(in.peek()    ==    JsonToken.STRING)    {    String    datePattern    =    in.readString();    return    new    Date(datePattern);    }    else    {    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
1253	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  Date  is  null. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  Date  is  null. ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Please    check    that    the    date    is    null.   ");    	compilable	  [FE]  JsonParseException  	45	2	replace
1254	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  Date  is  null. ");  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  Date  is  null. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  Date  is  null. ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Please    check    that    the    date    is    null.   ");    	compilable	  [FE]  JsonParseException  	45	2	replace
1255	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value!  Please  check  that  the  date  is  null. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "The  date  should  be  a  string  value!  Please  check  that  the  date  is  null. ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Please    check    that    the    date    is    null.   ");    	compilable	  [FE]  JsonParseException  	45	2	replace
1256	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value!  Please  check  that  the  date  is  null. ");  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value!  Please  check  that  the  date  is  null. ");  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value!  Please  check  that  the  date  is  null. ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.    Please    check    that    the    date    is    null.   ");    	compilable	  [FE]  JsonParseException  	45	2	replace
1257	[BUG]  [BUGGY]  while(in.peek()  ==  JsonToken.STRING)  {  datePattern  =  in.readString();  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  datePattern  [FE]              IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  while(in.peek()  ==  JsonToken.STRING)  {  datePattern  =  in.readString();  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	while(in.peek()  ==  JsonToken.STRING)  {  datePattern  =  in.readString();  return  new  Date(datePattern);  }	          if(in.peek()    ==    JsonToken.STRING)    {    String    datePattern    =    in.readString();    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol  datePattern	25	None	replace
1258	[BUG]  [BUGGY]  while(in.peek()  ==  JsonToken.STRING)  {  datePattern  =  in.readString();  return  new  Date(datePattern);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  while(in.peek()  ==  JsonToken.STRING)  {  datePattern  =  in.readString();  return  new  Date(datePattern);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	while(in.peek()  ==  JsonToken.STRING)  {  datePattern  =  in.readString();  return  new  Date(datePattern);	          if(in.peek()    ==    JsonToken.STRING)    {    String    datePattern    =    in.readString();    return    new    Date(datePattern);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
1259	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_NAME)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  VALUE_NAME  [FE]          IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_NAME)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()  ==  JsonToken.VALUE_NAME)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }	  if(in.peek()    ==    JsonToken.VALUE_STRING)    {    String    datePattern    =    in.getString();    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol  VALUE_NAME	107	None	replace
1260	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_NUMBER)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  VALUE_NUMBER  [FE]            IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_NUMBER)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()  ==  JsonToken.VALUE_NUMBER)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }	  if(in.peek()    ==    JsonToken.VALUE_STRING)    {    String    datePattern    =    in.getString();    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol  VALUE_NUMBER	107	None	replace
1261	[BUG]  [BUGGY]  JsonToken  t  =  threadToken.readFrom(JsonToken.STRING);  [CE]  cannot  find  symbol  threadToken  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  t  =  threadToken.readFrom(JsonToken.STRING);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  t  =  threadToken.readFrom(JsonToken.STRING);	  JsonToken    t    =    in.readFrom(JsonToken.STRING);    	non-compiled	[CE]  cannot  find  symbol  threadToken	125	None	replace
1262	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.VALUE_PREFIX)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  VALUE_PREFIX  [FE]            IllegalStateException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  if(in.peek()!=  JsonToken.VALUE_PREFIX)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()!=  JsonToken.VALUE_PREFIX)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }	  if(in.peek()!=    JsonToken.VALUE_STRING)    {    String    datePattern    =    in.readString();    return    new    Date(datePattern);    }    else    {    return    new    Date(datePattern);    }    	non-compiled	[CE]  cannot  find  symbol  VALUE_PREFIX	147	None	replace
1263	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Unexpected  class: "  +  in.getClass());  [CE]  cannot  find  symbol  [FE]                                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "Unexpected  class: "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Unexpected  class: "  +  in.getClass());	  throw    new    JsonTokenException(   "Unexpected    string:   "    +    in.getClass());    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
1264	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Unexpected  String  string: "  +  in.getClass());  [CE]  cannot  find  symbol  [FE]                                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  throw  new  JsonTokenException( "Unexpected  String  string: "  +  in.getClass());  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Unexpected  String  string: "  +  in.getClass());	  throw    new    JsonTokenException(   "Unexpected    string:   "    +    in.getClass());    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
1265	[BUG]  [BUGGY]  JsonToken  t  =  threadToken.readFromString(JsonToken.STRING);  [CE]  cannot  find  symbol  threadToken  [FE]                              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {      [BUGGY]  JsonToken  t  =  threadToken.readFromString(JsonToken.STRING);  [BUGGY]      }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  t  =  threadToken.readFromString(JsonToken.STRING);	  JsonToken    t    =    in.readFromString(JsonToken.STRING);    	non-compiled	[CE]  cannot  find  symbol  threadToken	128	None	replace
