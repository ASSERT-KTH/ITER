bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.START_OBJECT)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.START_OBJECT)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.START_OBJECT)  {	  if(in.peek()!=    JsonToken.VALUE_STRING    ||    in.peek()!=    JsonToken.START_OBJECT)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	45	None	replace
2	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.VALUE_STRING  &&  in.peek()!=  JsonToken.START_OBJECT)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()!=  JsonToken.VALUE_STRING  &&  in.peek()!=  JsonToken.START_OBJECT)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()!=  JsonToken.VALUE_STRING  &&  in.peek()!=  JsonToken.START_OBJECT)  {	  if(in.peek()!=    JsonToken.VALUE_STRING    ||    in.peek()!=    JsonToken.START_OBJECT)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	45	None	replace
3	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.END_OBJECT)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.END_OBJECT)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.END_OBJECT)  {	  if(in.peek()!=    JsonToken.VALUE_STRING    ||    in.peek()!=    JsonToken.START_OBJECT)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	45	None	replace
4	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.START_OBJECT)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.START_OBJECT)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.START_OBJECT)  {	  if(in.peek()!=    JsonToken.VALUE_STRING    ||    in.peek()!=    JsonToken.START_OBJECT)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	45	None	replace
5	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.START_OBJECT  ||  in.peek()!=  JsonToken.VALUE_STRING)  {  [CE]  cannot  find  symbol  START_OBJECT  [FE]                              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()!=  JsonToken.START_OBJECT  ||  in.peek()!=  JsonToken.VALUE_STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()!=  JsonToken.START_OBJECT  ||  in.peek()!=  JsonToken.VALUE_STRING)  {	  if(in.peek()!=    JsonToken.VALUE_STRING    ||    in.peek()!=    JsonToken.START_OBJECT)    {    	non-compiled	[CE]  cannot  find  symbol  START_OBJECT	45	None	replace
6	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.END_OBJECT)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.END_OBJECT)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.END_OBJECT)  {	  if(in.peek()!=    JsonToken.VALUE_STRING    ||    in.peek()!=    JsonToken.START_OBJECT)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	45	None	replace
7	[BUG]  [BUGGY]  if  (in!=  null  ||  in.nextString()  ==  JsonToken.STRING)  {  [CE]  incomparable  types:  String  and  JsonToken  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if  (in!=  null  ||  in.nextString()  ==  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if  (in!=  null  ||  in.nextString()  ==  JsonToken.STRING)  {	  if    (in!=    null    ||    in.nextString()!=    JsonToken.STRING)    {    	non-compiled	[CE]  incomparable  types:  String  and  JsonToken	59	None	replace
8	[BUG]  [BUGGY]  if  (in!=  null  ||  in.getClass()!=  JsonToken.STRING)  {  [CE]  incomparable  types:  Class<CAP#1>  and  JsonToken  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if  (in!=  null  ||  in.getClass()!=  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if  (in!=  null  ||  in.getClass()!=  JsonToken.STRING)  {	  if    (in!=    null    ||    in.nextString()!=    JsonToken.STRING)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  JsonToken	59	None	replace
9	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.VALUE_STRING  &&  in.peek()!=  JsonToken.FIELD_NAME)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()!=  JsonToken.VALUE_STRING  &&  in.peek()!=  JsonToken.FIELD_NAME)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()!=  JsonToken.VALUE_STRING  &&  in.peek()!=  JsonToken.FIELD_NAME)  {	  if(in.peek()!=    JsonToken.VALUE_STRING    ||    in.peek()!=    JsonToken.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	43	None	replace
10	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.FIELD_NAME)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.FIELD_NAME)  {	  if(in.peek()!=    JsonToken.VALUE_STRING    ||    in.peek()!=    JsonToken.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	43	None	replace
11	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.FIELD_NAME)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.FIELD_NAME)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.FIELD_NAME)  {	  if(in.peek()!=    JsonToken.VALUE_STRING    ||    in.peek()!=    JsonToken.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	43	None	replace
12	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.VALUE_NAME  ||  in.peek()!=  JsonToken.FIELD_NAME)  {  [CE]  cannot  find  symbol  VALUE_NAME  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()!=  JsonToken.VALUE_NAME  ||  in.peek()!=  JsonToken.FIELD_NAME)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()!=  JsonToken.VALUE_NAME  ||  in.peek()!=  JsonToken.FIELD_NAME)  {	  if(in.peek()!=    JsonToken.VALUE_STRING    ||    in.peek()!=    JsonToken.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_NAME	43	None	replace
13	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()  >=  JsonToken.FIELD_NAME)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()  >=  JsonToken.FIELD_NAME)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()  >=  JsonToken.FIELD_NAME)  {	  if(in.peek()!=    JsonToken.VALUE_STRING    ||    in.peek()!=    JsonToken.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	43	None	replace
14	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.START_NAME)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.START_NAME)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.START_NAME)  {	  if(in.peek()!=    JsonToken.VALUE_STRING    ||    in.peek()!=    JsonToken.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	43	None	replace
15	[BUG]  [BUGGY]  DefaultDateTypeAdapter.class.setSimpleName(in.getSimpleName());  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  DefaultDateTypeAdapter.class.setSimpleName(in.getSimpleName());  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	DefaultDateTypeAdapter.class.setSimpleName(in.getSimpleName());	  DefaultDateTypeAdapter.class.getSimpleName();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
16	[BUG]  [BUGGY]  DefaultDateTypeAdapter.class.setSimpleName(in.nextString());  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  DefaultDateTypeAdapter.class.setSimpleName(in.nextString());  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	DefaultDateTypeAdapter.class.setSimpleName(in.nextString());	  DefaultDateTypeAdapter.class.getSimpleName();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
17	[BUG]  [BUGGY]  DefaultDateTypeAdapter.class.setSimpleName(in.getString());  [CE]  illegal  start  of  type  [FE]                              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  DefaultDateTypeAdapter.class.setSimpleName(in.getString());  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	DefaultDateTypeAdapter.class.setSimpleName(in.getString());	  DefaultDateTypeAdapter.class.getSimpleName();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
18	[BUG]  [BUGGY]  DefaultDateTypeAdapter.class.getSimpleName()  + "n ";  [CE]  not  a  statement  [FE]                                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  DefaultDateTypeAdapter.class.getSimpleName()  + "n ";  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	DefaultDateTypeAdapter.class.getSimpleName()  + "n ";	  DefaultDateTypeAdapter.class.getSimpleName();    	non-compiled	[CE]  not  a  statement	20	None	replace
19	[BUG]  [BUGGY]  DefaultDateTypeAdapter.class.getName();  [CE]  illegal  start  of  type  [FE]                                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  DefaultDateTypeAdapter.class.getName();  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	DefaultDateTypeAdapter.class.getName();	  DefaultDateTypeAdapter.class.getSimpleName();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
20	[BUG]  [BUGGY]  DefaultDateTypeAdapter.class.setSimpleName(in);  [CE]  illegal  start  of  type  [FE]                                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  DefaultDateTypeAdapter.class.setSimpleName(in);  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	DefaultDateTypeAdapter.class.setSimpleName(in);	  DefaultDateTypeAdapter.class.getSimpleName();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
21	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  &&  in.peek()  ==  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	add	if(in!=  null  &&  in.peek()  ==  JsonToken.STRING)  {	  if(in!=    null    &&    in.peek()!=    JsonToken.STRING)    {    	compilable	  [FE]  JsonParseException  	71	5	replace
22	[BUG]  [BUGGY]  if(in!=  null  &&  in.peek()  ==  JsonToken.STRING)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  &&  in.peek()  ==  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=  null  &&  in.peek()  ==  JsonToken.STRING)  {	  if(in!=    null    &&    in.peek()!=    JsonToken.STRING)    {    	compilable	  [FE]  JsonParseException  	71	5	replace
23	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null  &&  in.peek()!=  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	add	if(in  ==  null  &&  in.peek()!=  JsonToken.STRING)  {	  if(in!=    null    &&    in.peek()!=    JsonToken.STRING)    {    	compilable	  [FE]  IllegalStateException  	71	1	replace
24	[BUG]  [BUGGY]  if(in  ==  null  &&  in.peek()!=  JsonToken.STRING)  {  [FE]  IllegalStateException  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null  &&  in.peek()!=  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  ==  null  &&  in.peek()!=  JsonToken.STRING)  {	  if(in!=    null    &&    in.peek()!=    JsonToken.STRING)    {    	compilable	  [FE]  IllegalStateException  	71	1	replace
25	[BUG]  [BUGGY]  if(in  >=  null  ||  in.peek()!=  JsonToken.STRING)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  >=  null  ||  in.peek()!=  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  >=  null  ||  in.peek()!=  JsonToken.STRING)  {	  if(in!=    null    &&    in.peek()!=    JsonToken.STRING)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	71	None	replace
26	[BUG]  [BUGGY]  if  (in  ==  null  ||  in.peek()  ==  JsonToken.STRING)  {  if  (in  ==  null  ||  in.peek()  ==  JsonToken.STRING)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if  (in  ==  null  ||  in.peek()  ==  JsonToken.STRING)  {  if  (in  ==  null  ||  in.peek()  ==  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if    (in    ==    null    ||    in.peek()    ==    JsonToken.STRING)    {    if  (in  ==  null  ||  in.peek()  ==  JsonToken.STRING)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
27	[BUG]  [BUGGY]  if  (in  ==  null  ||  in.peek()  ==  JsonToken.STRING)  {  if  (in  ==  null  ||  in.peek()!=  JsonToken.STRING)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if  (in  ==  null  ||  in.peek()  ==  JsonToken.STRING)  {  if  (in  ==  null  ||  in.peek()!=  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if    (in    ==    null    ||    in.peek()    ==    JsonToken.STRING)    {    if  (in  ==  null  ||  in.peek()!=  JsonToken.STRING)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
28	[BUG]  [BUGGY]  if  (in  ==  null  ||  in.peek()  ==  JsonToken.STRING)  {  if  (in!=  null  ||  in.peek()  ==  JsonToken.STRING)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if  (in  ==  null  ||  in.peek()  ==  JsonToken.STRING)  {  if  (in!=  null  ||  in.peek()  ==  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if    (in    ==    null    ||    in.peek()    ==    JsonToken.STRING)    {    if  (in!=  null  ||  in.peek()  ==  JsonToken.STRING)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
29	[BUG]  [BUGGY]  if  (in  ==  null  ||  in.peek()  ==  JsonToken.STRING)  {  If  (in  ==  null  ||  in.peek()  ==  JsonToken.STRING)  {  [CE]  ';'  expected  [FE]          JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if  (in  ==  null  ||  in.peek()  ==  JsonToken.STRING)  {  If  (in  ==  null  ||  in.peek()  ==  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if    (in    ==    null    ||    in.peek()    ==    JsonToken.STRING)    {    If  (in  ==  null  ||  in.peek()  ==  JsonToken.STRING)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
30	[BUG]  [BUGGY]  if  (in  ==  null  ||  in.peek()  ==  JsonToken.STRING)  {  if  (in  ==  null  ||  in.peek()  >=  JsonToken.STRING)  {  [CE]  illegal  start  of  expression  [FE]            JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if  (in  ==  null  ||  in.peek()  ==  JsonToken.STRING)  {  if  (in  ==  null  ||  in.peek()  >=  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if    (in    ==    null    ||    in.peek()    ==    JsonToken.STRING)    {    if  (in  ==  null  ||  in.peek()  >=  JsonToken.STRING)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
31	[BUG]  [BUGGY]  while(in  ==  null)  {  throw  new  JsonParseException( " ");  }  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  while(in  ==  null)  {  throw  new  JsonParseException( " ");  }  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	while(in  ==  null)  {  throw  new  JsonParseException( " ");  }	  if(in    ==    null)    {    throw    new    JsonParseException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
32	[BUG]  [BUGGY]  throw  new  JsonParseException( " ");  [CE]  illegal  start  of  type  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  throw  new  JsonParseException( " ");  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	throw  new  JsonParseException( " ");	  if(in    ==    null)    {    throw    new    JsonParseException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
33	[BUG]  [BUGGY]  While(in  ==  null)  {  throw  new  JsonParseException( " ");  }  [CE]  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  While(in  ==  null)  {  throw  new  JsonParseException( " ");  }  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	While(in  ==  null)  {  throw  new  JsonParseException( " ");  }	  if(in    ==    null)    {    throw    new    JsonParseException(   "   ");    }    	non-compiled	[CE]  	53	None	replace
34	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(in);  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  Thread.currentThread().setContextClassLoader(in);  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	Thread.currentThread().setContextClassLoader(in);	  if(in    ==    null)    {    throw    new    JsonParseException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
35	[BUG]  [BUGGY]  while(in!=  null)  {  throw  new  JsonParseException( " ");  }  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  while(in!=  null)  {  throw  new  JsonParseException( " ");  }  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	while(in!=  null)  {  throw  new  JsonParseException( " ");  }	  if(in    ==    null)    {    throw    new    JsonParseException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
36	[BUG]  [BUGGY]  aughtException( "The  date  should  be  a  string  value ");  [CE]  illegal  start  of  type  [FE]                              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  aughtException( "The  date  should  be  a  string  value ");  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	aughtException( "The  date  should  be  a  string  value ");	  if(in    ==    null)    {    throw    new    JsonParseException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
37	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value ");  [CE]  illegal  start  of  type  [FE]                                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value ");  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value ");	  if(in    ==    null)    {    throw    new    JsonParseException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
38	[BUG]  [BUGGY]  if(in  ==  null  ||  in.peek()!=  JsonToken.FIELD_NAME)  {  [CE]  cannot  find  symbol  FIELD_NAME  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null  ||  in.peek()!=  JsonToken.FIELD_NAME)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  ==  null  ||  in.peek()!=  JsonToken.FIELD_NAME)  {	  if(in    ==    null    ||    in.peek()!=    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	3	None	replace
39	[BUG]  [BUGGY]  if(in  ==  null  ||  in.peek()!=  JsonToken.VALUE_NUMBER_INT)  {  [CE]  cannot  find  symbol  VALUE_NUMBER_INT  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null  ||  in.peek()!=  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  ==  null  ||  in.peek()!=  JsonToken.VALUE_NUMBER_INT)  {	  if(in    ==    null    ||    in.peek()!=    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_NUMBER_INT	3	None	replace
40	[BUG]  [BUGGY]  if(in  ==  null  ||  in.peek()!=  JsonToken.START_VALUE)  {  [CE]  cannot  find  symbol  START_VALUE  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null  ||  in.peek()!=  JsonToken.START_VALUE)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  ==  null  ||  in.peek()!=  JsonToken.START_VALUE)  {	  if(in    ==    null    ||    in.peek()!=    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  START_VALUE	3	None	replace
41	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null  ||  in.peek()!=  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	add	if(in  ==  null  ||  in.peek()!=  JsonToken.END_ARRAY)  {	  if(in    ==    null    ||    in.peek()!=    JsonToken.VALUE_STRING)    {    	compilable	  [FE]  JsonParseException  	3	6	replace
42	[BUG]  [BUGGY]  if(in  ==  null  ||  in.peek()!=  JsonToken.END_ARRAY)  {  [FE]  JsonParseException  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null  ||  in.peek()!=  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  ==  null  ||  in.peek()!=  JsonToken.END_ARRAY)  {	  if(in    ==    null    ||    in.peek()!=    JsonToken.VALUE_STRING)    {    	compilable	  [FE]  JsonParseException  	3	6	replace
43	[BUG]  [BUGGY]  if(in  ==  null  ||  in.peek()!=  JsonToken.START_OBJECT)  {  [CE]  cannot  find  symbol  START_OBJECT  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null  ||  in.peek()!=  JsonToken.START_OBJECT)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  ==  null  ||  in.peek()!=  JsonToken.START_OBJECT)  {	  if(in    ==    null    ||    in.peek()!=    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  START_OBJECT	3	None	replace
44	[BUG]  [BUGGY]  if(in  ==  null  ||  in.peek()!=  JsonToken.START_STRING)  {  [CE]  cannot  find  symbol  START_STRING  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null  ||  in.peek()!=  JsonToken.START_STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  ==  null  ||  in.peek()!=  JsonToken.START_STRING)  {	  if(in    ==    null    ||    in.peek()!=    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  START_STRING	3	None	replace
45	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value.n ");  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value.n ");  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value.n ");	  JsonParseException    in    =    new    JsonParseException(   "The    date    should    be    a    string    value.   ");    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
46	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value ",  in);  [CE]  illegal  start  of  type  [FE]                              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value ",  in);  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value ",  in);	  JsonParseException    in    =    new    JsonParseException(   "The    date    should    be    a    string    value.   ");    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
47	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value: ");  [CE]  illegal  start  of  type  [FE]                                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value: ");  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value: ");	  JsonParseException    in    =    new    JsonParseException(   "The    date    should    be    a    string    value.   ");    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
48	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "This  date  should  be  a  string  value. ");  [CE]  illegal  start  of  type  [FE]                                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "This  date  should  be  a  string  value. ");  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	JsonParseException  in  =  new  JsonParseException( "This  date  should  be  a  string  value. ");	  JsonParseException    in    =    new    JsonParseException(   "The    date    should    be    a    string    value.   ");    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
49	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value. ");  [CE]  illegal  start  of  type  [FE]                                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value. ");  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value. ");	  JsonParseException    in    =    new    JsonParseException(   "The    date    should    be    a    string    value.   ");    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
50	[BUG]  [BUGGY]  if(in.next()!=  JsonToken.STRING  &&  in.nextString()!=  JsonToken.END_ARRAY)  {  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.next()!=  JsonToken.STRING  &&  in.nextString()!=  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.next()!=  JsonToken.STRING  &&  in.nextString()!=  JsonToken.END_ARRAY)  {	  if(in.next()!=    JsonToken.STRING    ||    in.nextString()!=    JsonToken.END_ARRAY)    {    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
51	[BUG]  [BUGGY]  if(in.next()!=  JsonToken.STRING  ||  in.nextString()  ==  JsonToken.END_ARRAY)  {  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.next()!=  JsonToken.STRING  ||  in.nextString()  ==  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.next()!=  JsonToken.STRING  ||  in.nextString()  ==  JsonToken.END_ARRAY)  {	  if(in.next()!=    JsonToken.STRING    ||    in.nextString()!=    JsonToken.END_ARRAY)    {    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
52	[BUG]  [BUGGY]  if(in.next()  ==  JsonToken.STRING  &&  in.nextString()!=  JsonToken.END_ARRAY)  {  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.next()  ==  JsonToken.STRING  &&  in.nextString()!=  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.next()  ==  JsonToken.STRING  &&  in.nextString()!=  JsonToken.END_ARRAY)  {	  if(in.next()!=    JsonToken.STRING    ||    in.nextString()!=    JsonToken.END_ARRAY)    {    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
53	[BUG]  [BUGGY]  if(in.next()  ==  JsonToken.STRING  ||  in.nextString()!=  JsonToken.END_ARRAY)  {  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.next()  ==  JsonToken.STRING  ||  in.nextString()!=  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.next()  ==  JsonToken.STRING  ||  in.nextString()!=  JsonToken.END_ARRAY)  {	  if(in.next()!=    JsonToken.STRING    ||    in.nextString()!=    JsonToken.END_ARRAY)    {    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
54	[BUG]  [BUGGY]  if(in.getValue()!=  JsonToken.STRING  ||  in.nextString()!=  JsonToken.END_ARRAY)  {  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.getValue()!=  JsonToken.STRING  ||  in.nextString()!=  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.getValue()!=  JsonToken.STRING  ||  in.nextString()!=  JsonToken.END_ARRAY)  {	  if(in.next()!=    JsonToken.STRING    ||    in.nextString()!=    JsonToken.END_ARRAY)    {    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
55	[BUG]  [BUGGY]  if(in.next()!=  JsonToken.STRING  &&  in.nextString()  ==  JsonToken.END_ARRAY)  {  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.next()!=  JsonToken.STRING  &&  in.nextString()  ==  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.next()!=  JsonToken.STRING  &&  in.nextString()  ==  JsonToken.END_ARRAY)  {	  if(in.next()!=    JsonToken.STRING    ||    in.nextString()!=    JsonToken.END_ARRAY)    {    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
56	[BUG]  [BUGGY]  if(in  ==  null  ||  in.peek()  ==  JsonToken.START_ARRAY)  {  [CE]  cannot  find  symbol  START_ARRAY  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null  ||  in.peek()  ==  JsonToken.START_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  ==  null  ||  in.peek()  ==  JsonToken.START_ARRAY)  {	  if(in!=    null    ||    in.peek()    ==    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol  START_ARRAY	6	None	replace
57	[BUG]  [BUGGY]  if(in  ==  null  ||  in.peek()  ==  JsonToken.START_OBJECT)  {  [CE]  cannot  find  symbol  START_OBJECT  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null  ||  in.peek()  ==  JsonToken.START_OBJECT)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  ==  null  ||  in.peek()  ==  JsonToken.START_OBJECT)  {	  if(in!=    null    ||    in.peek()    ==    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol  START_OBJECT	6	None	replace
58	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.VALUE_STRING)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.VALUE_STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.VALUE_STRING)  {	  if(in.peek()!=    JsonToken.VALUE_STRING    ||    in.peek()!=    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	42	None	replace
59	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.VALUE_STRING  &&  in.peek()!=  JsonToken.VALUE_STRING)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()!=  JsonToken.VALUE_STRING  &&  in.peek()!=  JsonToken.VALUE_STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()!=  JsonToken.VALUE_STRING  &&  in.peek()!=  JsonToken.VALUE_STRING)  {	  if(in.peek()!=    JsonToken.VALUE_STRING    ||    in.peek()!=    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	42	None	replace
60	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.VALUE_STRING)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.VALUE_STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.VALUE_STRING)  {	  if(in.peek()!=    JsonToken.VALUE_STRING    ||    in.peek()!=    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	42	None	replace
61	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.VALUE_NUMBER_FLOAT)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.VALUE_NUMBER_FLOAT)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.VALUE_NUMBER_FLOAT)  {	  if(in.peek()!=    JsonToken.VALUE_STRING    ||    in.peek()!=    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	42	None	replace
62	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()  >=  JsonToken.VALUE_STRING)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()  >=  JsonToken.VALUE_STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()  >=  JsonToken.VALUE_STRING)  {	  if(in.peek()!=    JsonToken.VALUE_STRING    ||    in.peek()!=    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	42	None	replace
63	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.VALUE_NUMBER_INT  ||  in.peek()!=  JsonToken.VALUE_STRING)  {  [CE]  cannot  find  symbol  VALUE_NUMBER_INT  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()!=  JsonToken.VALUE_NUMBER_INT  ||  in.peek()!=  JsonToken.VALUE_STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()!=  JsonToken.VALUE_NUMBER_INT  ||  in.peek()!=  JsonToken.VALUE_STRING)  {	  if(in.peek()!=    JsonToken.VALUE_STRING    ||    in.peek()!=    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_NUMBER_INT	42	None	replace
64	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value, ");  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value, ");  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value, ");	  JsonParseException    in    =    new    JsonParseException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
65	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value ");  [CE]  illegal  start  of  type  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value ");  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value ");	  JsonParseException    in    =    new    JsonParseException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
66	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value! ");  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value! ");  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value! ");	  JsonParseException    in    =    new    JsonParseException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
67	[BUG]  [BUGGY]  Class  <?>  dateType  =  in.read();  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  Class  <?>  dateType  =  in.read();  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	Class  <?>  dateType  =  in.read();	  Class    <?>    dateType    =    in.readClass();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
68	[BUG]  [BUGGY]  final  Class  <?>  dateType  =  in.readClass();  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  final  Class  <?>  dateType  =  in.readClass();  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	final  Class  <?>  dateType  =  in.readClass();	  Class    <?>    dateType    =    in.readClass();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
69	[BUG]  [BUGGY]  Class  <?>  dateType  =  this.in.readClass();  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  Class  <?>  dateType  =  this.in.readClass();  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	Class  <?>  dateType  =  this.in.readClass();	  Class    <?>    dateType    =    in.readClass();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
70	[BUG]  [BUGGY]  Class  <?>  dateType  =  JsonReader.class.getSimpleName();  [CE]  illegal  start  of  type  [FE]                              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  Class  <?>  dateType  =  JsonReader.class.getSimpleName();  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	Class  <?>  dateType  =  JsonReader.class.getSimpleName();	  Class    <?>    dateType    =    in.readClass();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
71	[BUG]  [BUGGY]  Date  dateType  =  in.readClass();  [CE]  illegal  start  of  type  [FE]                                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  Date  dateType  =  in.readClass();  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	Date  dateType  =  in.readClass();	  Class    <?>    dateType    =    in.readClass();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
72	[BUG]  [BUGGY]  if  (in.nextString()!=  JsonToken.STRING  &&  in.nextString().equals(JsonToken.STRING))  {  [CE]  incomparable  types:  String  and  JsonToken  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if  (in.nextString()!=  JsonToken.STRING  &&  in.nextString().equals(JsonToken.STRING))  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if  (in.nextString()!=  JsonToken.STRING  &&  in.nextString().equals(JsonToken.STRING))  {	  if    (in.nextString()!=    JsonToken.STRING    ||    in.nextString().equals(JsonToken.STRING))    {    	non-compiled	[CE]  incomparable  types:  String  and  JsonToken	41	None	replace
73	[BUG]  [BUGGY]  if  (in.nextString()  ==  JsonToken.STRING  &&  in.nextString().equals(JsonToken.STRING))  {  [CE]  incomparable  types:  String  and  JsonToken  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if  (in.nextString()  ==  JsonToken.STRING  &&  in.nextString().equals(JsonToken.STRING))  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if  (in.nextString()  ==  JsonToken.STRING  &&  in.nextString().equals(JsonToken.STRING))  {	  if    (in.nextString()!=    JsonToken.STRING    ||    in.nextString().equals(JsonToken.STRING))    {    	non-compiled	[CE]  incomparable  types:  String  and  JsonToken	41	None	replace
74	[BUG]  [BUGGY]  if  (in.nextString()  ==  JsonToken.STRING  ||  in.nextString().equals(JsonToken.STRING))  {  [CE]  incomparable  types:  String  and  JsonToken  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if  (in.nextString()  ==  JsonToken.STRING  ||  in.nextString().equals(JsonToken.STRING))  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if  (in.nextString()  ==  JsonToken.STRING  ||  in.nextString().equals(JsonToken.STRING))  {	  if    (in.nextString()!=    JsonToken.STRING    ||    in.nextString().equals(JsonToken.STRING))    {    	non-compiled	[CE]  incomparable  types:  String  and  JsonToken	41	None	replace
75	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  &&  in.peek()  ==  JsonToken.END_ARRAY)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  &&  in.peek()  ==  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.VALUE_STRING  &&  in.peek()  ==  JsonToken.END_ARRAY)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING    ||    in.peek()    ==    JsonToken.END_ARRAY)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	8	None	replace
76	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.END_ARRAY)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.END_ARRAY)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING    ||    in.peek()    ==    JsonToken.END_ARRAY)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	8	None	replace
77	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_NUMBER_INT  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  [CE]  cannot  find  symbol  VALUE_NUMBER_INT  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_NUMBER_INT  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.VALUE_NUMBER_INT  ||  in.peek()  ==  JsonToken.END_ARRAY)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING    ||    in.peek()    ==    JsonToken.END_ARRAY)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_NUMBER_INT	8	None	replace
78	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.END_OBJECT)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.END_OBJECT)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.END_OBJECT)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING    ||    in.peek()    ==    JsonToken.END_ARRAY)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	8	None	replace
79	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.START_ARRAY  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  [CE]  cannot  find  symbol  START_ARRAY  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.START_ARRAY  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.START_ARRAY  ||  in.peek()  ==  JsonToken.END_ARRAY)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING    ||    in.peek()    ==    JsonToken.END_ARRAY)    {    	non-compiled	[CE]  cannot  find  symbol  START_ARRAY	8	None	replace
80	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  &&  in.peek()  ==  JsonToken.FIELD_NAME)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  &&  in.peek()  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.VALUE_STRING  &&  in.peek()  ==  JsonToken.FIELD_NAME)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING    ||    in.peek()    ==    JsonToken.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	10	None	replace
81	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.START_NAME)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.START_NAME)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.START_NAME)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING    ||    in.peek()    ==    JsonToken.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	10	None	replace
82	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_NAME  ||  in.peek()  ==  JsonToken.FIELD_NAME)  {  [CE]  cannot  find  symbol  VALUE_NAME  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_NAME  ||  in.peek()  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.VALUE_NAME  ||  in.peek()  ==  JsonToken.FIELD_NAME)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING    ||    in.peek()    ==    JsonToken.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_NAME	10	None	replace
83	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.END_NAME)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.END_NAME)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.END_NAME)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING    ||    in.peek()    ==    JsonToken.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	10	None	replace
84	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.START_VALUE)  {  [CE]  cannot  find  symbol  START_VALUE  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()!=  JsonToken.START_VALUE)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()!=  JsonToken.START_VALUE)  {	  if(in.peek()!=    JsonToken.START_OBJECT)    {    	non-compiled	[CE]  cannot  find  symbol  START_VALUE	65	None	replace
85	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.START_STRING)  {  [CE]  cannot  find  symbol  START_STRING  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()!=  JsonToken.START_STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()!=  JsonToken.START_STRING)  {	  if(in.peek()!=    JsonToken.START_OBJECT)    {    	non-compiled	[CE]  cannot  find  symbol  START_STRING	65	None	replace
86	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.START_ARRAY)  {  [CE]  cannot  find  symbol  START_ARRAY  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()!=  JsonToken.START_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()!=  JsonToken.START_ARRAY)  {	  if(in.peek()!=    JsonToken.START_OBJECT)    {    	non-compiled	[CE]  cannot  find  symbol  START_ARRAY	65	None	replace
87	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.START_SUBJECT)  {  [CE]  cannot  find  symbol  START_SUBJECT  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()!=  JsonToken.START_SUBJECT)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()!=  JsonToken.START_SUBJECT)  {	  if(in.peek()!=    JsonToken.START_OBJECT)    {    	non-compiled	[CE]  cannot  find  symbol  START_SUBJECT	65	None	replace
88	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.START_NAME)  {  [CE]  cannot  find  symbol  START_NAME  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()!=  JsonToken.START_NAME)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()!=  JsonToken.START_NAME)  {	  if(in.peek()!=    JsonToken.START_OBJECT)    {    	non-compiled	[CE]  cannot  find  symbol  START_NAME	65	None	replace
89	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()!=  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	add	if(in.peek()!=  JsonToken.END_ARRAY)  {	  if(in.peek()!=    JsonToken.START_OBJECT)    {    	compilable	  [FE]  JsonParseException  	65	6	replace
90	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.END_ARRAY)  {  [FE]  JsonParseException  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()!=  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()!=  JsonToken.END_ARRAY)  {	  if(in.peek()!=    JsonToken.START_OBJECT)    {    	compilable	  [FE]  JsonParseException  	65	6	replace
91	[BUG]  [BUGGY]  if(in.next()!=  JsonToken.STRING  &&  in.next()!=  JsonToken.END)  {  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.next()!=  JsonToken.STRING  &&  in.next()!=  JsonToken.END)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.next()!=  JsonToken.STRING  &&  in.next()!=  JsonToken.END)  {	  if(in.next()!=    JsonToken.STRING    ||    in.next()!=    JsonToken.END)    {    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
92	[BUG]  [BUGGY]  if(in.next()!=  JsonToken.STRING  ||  in.next()  ==  JsonToken.END)  {  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.next()!=  JsonToken.STRING  ||  in.next()  ==  JsonToken.END)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.next()!=  JsonToken.STRING  ||  in.next()  ==  JsonToken.END)  {	  if(in.next()!=    JsonToken.STRING    ||    in.next()!=    JsonToken.END)    {    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
93	[BUG]  [BUGGY]  if(in.next()  ==  JsonToken.STRING  ||  in.next()!=  JsonToken.END)  {  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.next()  ==  JsonToken.STRING  ||  in.next()!=  JsonToken.END)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.next()  ==  JsonToken.STRING  ||  in.next()!=  JsonToken.END)  {	  if(in.next()!=    JsonToken.STRING    ||    in.next()!=    JsonToken.END)    {    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
94	[BUG]  [BUGGY]  if(in.next()  ==  JsonToken.STRING  &&  in.next()!=  JsonToken.END)  {  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.next()  ==  JsonToken.STRING  &&  in.next()!=  JsonToken.END)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.next()  ==  JsonToken.STRING  &&  in.next()!=  JsonToken.END)  {	  if(in.next()!=    JsonToken.STRING    ||    in.next()!=    JsonToken.END)    {    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
95	[BUG]  [BUGGY]  if(in.getValue()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.END)  {  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.getValue()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.END)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.getValue()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.END)  {	  if(in.next()!=    JsonToken.STRING    ||    in.next()!=    JsonToken.END)    {    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
96	[BUG]  [BUGGY]  if(in.next()!=  JsonToken.STRING  &&  in.next()  ==  JsonToken.END)  {  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.next()!=  JsonToken.STRING  &&  in.next()  ==  JsonToken.END)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.next()!=  JsonToken.STRING  &&  in.next()  ==  JsonToken.END)  {	  if(in.next()!=    JsonToken.STRING    ||    in.next()!=    JsonToken.END)    {    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
97	[BUG]  [BUGGY]  if  (in  ==  null  ||  in.getClass()!=  JsonToken.STRING)  {  [CE]  incomparable  types:  Class<CAP#1>  and  JsonToken  [FE]        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if  (in  ==  null  ||  in.getClass()!=  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if  (in  ==  null  ||  in.getClass()!=  JsonToken.STRING)  {	  if    (in    ==    null    ||    in.nextString()!=    JsonToken.STRING)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  JsonToken	57	None	replace
98	[BUG]  [BUGGY]  if  (in  ==  null  ||  in.nextString()!=  JsonToken.VALUE_STRING)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if  (in  ==  null  ||  in.nextString()!=  JsonToken.VALUE_STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if  (in  ==  null  ||  in.nextString()!=  JsonToken.VALUE_STRING)  {	  if    (in    ==    null    ||    in.nextString()!=    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	57	None	replace
99	[BUG]  [BUGGY]  if(in.nextString()!=  JsonToken.STRING  &&  in.nextString()!=  JsonToken.STRING)  {  [CE]  incomparable  types:  String  and  JsonToken  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.nextString()!=  JsonToken.STRING  &&  in.nextString()!=  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.nextString()!=  JsonToken.STRING  &&  in.nextString()!=  JsonToken.STRING)  {	  if    (in.nextString()!=    JsonToken.STRING    ||    in.nextString()!=    JsonToken.STRING)    {    	non-compiled	[CE]  incomparable  types:  String  and  JsonToken	74	None	replace
100	[BUG]  [BUGGY]  if  (in.nextString()  ==  JsonToken.STRING  ||  in.nextString()!=  JsonToken.STRING)  {  [CE]  incomparable  types:  String  and  JsonToken  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if  (in.nextString()  ==  JsonToken.STRING  ||  in.nextString()!=  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if  (in.nextString()  ==  JsonToken.STRING  ||  in.nextString()!=  JsonToken.STRING)  {	  if    (in.nextString()!=    JsonToken.STRING    ||    in.nextString()!=    JsonToken.STRING)    {    	non-compiled	[CE]  incomparable  types:  String  and  JsonToken	74	None	replace
101	[BUG]  [BUGGY]  if  (in.nextString()!=  JsonToken.STRING  ||  in.nextString()  ==  JsonToken.STRING)  {  [CE]  incomparable  types:  String  and  JsonToken  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if  (in.nextString()!=  JsonToken.STRING  ||  in.nextString()  ==  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if  (in.nextString()!=  JsonToken.STRING  ||  in.nextString()  ==  JsonToken.STRING)  {	  if    (in.nextString()!=    JsonToken.STRING    ||    in.nextString()!=    JsonToken.STRING)    {    	non-compiled	[CE]  incomparable  types:  String  and  JsonToken	74	None	replace
102	[BUG]  [BUGGY]  if  (in  ==  null  ||  in.read()!=  JsonToken.VALUE_STRING)  {  [CE]  cannot  find  symbol  [FE]        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if  (in  ==  null  ||  in.read()!=  JsonToken.VALUE_STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if  (in  ==  null  ||  in.read()!=  JsonToken.VALUE_STRING)  {	  if    (in    ==    null    ||    in.read()!=    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
103	[BUG]  [BUGGY]  if  (in!=  null  ||  in.read()!=  JsonToken.STRING)  {  [CE]  cannot  find  symbol  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if  (in!=  null  ||  in.read()!=  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if  (in!=  null  ||  in.read()!=  JsonToken.STRING)  {	  if    (in    ==    null    ||    in.read()!=    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
104	[BUG]  [BUGGY]  if  (in  ==  null  ||  in.read()!=  JsonToken.END_ARRAY)  {  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if  (in  ==  null  ||  in.read()!=  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if  (in  ==  null  ||  in.read()!=  JsonToken.END_ARRAY)  {	  if    (in    ==    null    ||    in.read()!=    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
105	[BUG]  [BUGGY]  if  (in  ==  null  ||  in.read()!=  JsonToken.START_STRING)  {  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if  (in  ==  null  ||  in.read()!=  JsonToken.START_STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if  (in  ==  null  ||  in.read()!=  JsonToken.START_STRING)  {	  if    (in    ==    null    ||    in.read()!=    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
106	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  &&  in.peek()  ==  JsonToken.START_OBJECT)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  &&  in.peek()  ==  JsonToken.START_OBJECT)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.VALUE_STRING  &&  in.peek()  ==  JsonToken.START_OBJECT)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING    ||    in.peek()    ==    JsonToken.START_OBJECT)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	9	None	replace
107	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.START_OBJECT  ||  in.peek()  ==  JsonToken.VALUE_STRING)  {  [CE]  cannot  find  symbol  START_OBJECT  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.START_OBJECT  ||  in.peek()  ==  JsonToken.VALUE_STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.START_OBJECT  ||  in.peek()  ==  JsonToken.VALUE_STRING)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING    ||    in.peek()    ==    JsonToken.START_OBJECT)    {    	non-compiled	[CE]  cannot  find  symbol  START_OBJECT	9	None	replace
108	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.FIELD_NAME  ||  in.peek()  ==  JsonToken.START_OBJECT)  {  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.FIELD_NAME  ||  in.peek()  ==  JsonToken.START_OBJECT)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.FIELD_NAME  ||  in.peek()  ==  JsonToken.START_OBJECT)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING    ||    in.peek()    ==    JsonToken.START_OBJECT)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	9	None	replace
109	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {	  if(in.peek()!=    JsonToken.VALUE_STRING    ||    in.peek()!=    JsonToken.END_ARRAY)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	44	None	replace
110	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.VALUE_STRING  &&  in.peek()!=  JsonToken.END_ARRAY)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()!=  JsonToken.VALUE_STRING  &&  in.peek()!=  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()!=  JsonToken.VALUE_STRING  &&  in.peek()!=  JsonToken.END_ARRAY)  {	  if(in.peek()!=    JsonToken.VALUE_STRING    ||    in.peek()!=    JsonToken.END_ARRAY)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	44	None	replace
111	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()  >=  JsonToken.END_ARRAY)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()  >=  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()  >=  JsonToken.END_ARRAY)  {	  if(in.peek()!=    JsonToken.VALUE_STRING    ||    in.peek()!=    JsonToken.END_ARRAY)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	44	None	replace
112	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  &&  in.peek()!=  JsonToken.END_ARRAY)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  &&  in.peek()!=  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.VALUE_STRING  &&  in.peek()!=  JsonToken.END_ARRAY)  {	  if(in.peek()!=    JsonToken.VALUE_STRING    ||    in.peek()!=    JsonToken.END_ARRAY)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	44	None	replace
113	[BUG]  [BUGGY]  Date  date  =  this.in.read();  [CE]  illegal  start  of  type  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  Date  date  =  this.in.read();  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	Date  date  =  this.in.read();	  Date    date    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
114	[BUG]  [BUGGY]  Date  date  =  in.read(this);  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  Date  date  =  in.read(this);  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	Date  date  =  in.read(this);	  Date    date    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
115	[BUG]  [BUGGY]  Date  date  =  read(in,  in.read());  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  Date  date  =  read(in,  in.read());  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	Date  date  =  read(in,  in.read());	  Date    date    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
116	[BUG]  [BUGGY]  Date  date  =  new  Date(in.read());  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  Date  date  =  new  Date(in.read());  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	Date  date  =  new  Date(in.read());	  Date    date    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
117	[BUG]  [BUGGY]  Date  date  =  in.readInt();  [CE]  illegal  start  of  type  [FE]                              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  Date  date  =  in.readInt();  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	Date  date  =  in.readInt();	  Date    date    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
118	[BUG]  [BUGGY]  Date  date  =  in.read(in);  [CE]  illegal  start  of  type  [FE]                                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  Date  date  =  in.read(in);  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	Date  date  =  in.read(in);	  Date    date    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
119	[BUG]  [BUGGY]  Class  <?>  dateType  =  in!=  null?  null  :  in.getClass();  [CE]  illegal  start  of  type  [FE]                              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  Class  <?>  dateType  =  in!=  null?  null  :  in.getClass();  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	Class  <?>  dateType  =  in!=  null?  null  :  in.getClass();	  Class    <?>    dateType    =    in.getClass();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
120	[BUG]  [BUGGY]  Class  <?>  dateType  =  in.getRawClass();  [CE]  illegal  start  of  type  [FE]                                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  Class  <?>  dateType  =  in.getRawClass();  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	Class  <?>  dateType  =  in.getRawClass();	  Class    <?>    dateType    =    in.getClass();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
121	[BUG]  [BUGGY]  final  Class  <?>  dateType  =  in.getClass();  [CE]  illegal  start  of  type  [FE]                                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  final  Class  <?>  dateType  =  in.getClass();  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	final  Class  <?>  dateType  =  in.getClass();	  Class    <?>    dateType    =    in.getClass();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
122	[BUG]  [BUGGY]  Class  <?>  dateType  =  this.in.getClass();  [CE]  illegal  start  of  type  [FE]                                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  Class  <?>  dateType  =  this.in.getClass();  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	Class  <?>  dateType  =  this.in.getClass();	  Class    <?>    dateType    =    in.getClass();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
123	[BUG]  [BUGGY]  if(in  ==  null)  {  if(in  ==  null)  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null)  {  if(in  ==  null)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in    ==    null)    {    if(in  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
124	[BUG]  [BUGGY]  if(in  ==  null)  {  if(in!=  null)  {  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null)  {  if(in!=  null)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in    ==    null)    {    if(in!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
125	[BUG]  [BUGGY]  if(in  ==  null)  {  if(in  >=  null)  {  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null)  {  if(in  >=  null)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in    ==    null)    {    if(in  >=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
126	[BUG]  [BUGGY]  if(in  ==  null)  {  If(in  ==  null)  {  [CE]  ';'  expected  [FE]          IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null)  {  If(in  ==  null)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in    ==    null)    {    If(in  ==  null)  {	  	non-compiled	[CE]  ';'  expected	72	None	add
127	[BUG]  [BUGGY]  if(in  ==  null)  {  if(in  [BUGGY]  null)  {  [CE]  ')'  expected  [FE]            IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null)  {  if(in  [BUGGY]  null)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in    ==    null)    {    if(in  [BUGGY]  null)  {	  	non-compiled	[CE]  ')'  expected	72	None	add
128	[BUG]  [BUGGY]  if(in  ==  null)  {  if(in  >>  null)  {  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null)  {  if(in  >>  null)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in    ==    null)    {    if(in  >>  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
129	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  &&  in.peek()  ==  JsonToken.VALUE_STRING)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  &&  in.peek()  ==  JsonToken.VALUE_STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.VALUE_STRING  &&  in.peek()  ==  JsonToken.VALUE_STRING)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING    ||    in.peek()    ==    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	7	None	replace
130	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_NUMBER_INT  ||  in.peek()  ==  JsonToken.VALUE_STRING)  {  [CE]  cannot  find  symbol  VALUE_NUMBER_INT  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_NUMBER_INT  ||  in.peek()  ==  JsonToken.VALUE_STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.VALUE_NUMBER_INT  ||  in.peek()  ==  JsonToken.VALUE_STRING)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING    ||    in.peek()    ==    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_NUMBER_INT	7	None	replace
131	[BUG]  [BUGGY]  if(in.nextString()!=  JsonToken.STRING  &&  in.nextString()!=  JsonToken.END_ARRAY)  {  [CE]  incomparable  types:  String  and  JsonToken  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.nextString()!=  JsonToken.STRING  &&  in.nextString()!=  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.nextString()!=  JsonToken.STRING  &&  in.nextString()!=  JsonToken.END_ARRAY)  {	  if(in.nextString()!=    JsonToken.STRING    ||    in.nextString()!=    JsonToken.END_ARRAY)    {    	non-compiled	[CE]  incomparable  types:  String  and  JsonToken	75	None	replace
132	[BUG]  [BUGGY]  if(in.nextString()  ==  JsonToken.STRING  &&  in.nextString()!=  JsonToken.END_ARRAY)  {  [CE]  incomparable  types:  String  and  JsonToken  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.nextString()  ==  JsonToken.STRING  &&  in.nextString()!=  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.nextString()  ==  JsonToken.STRING  &&  in.nextString()!=  JsonToken.END_ARRAY)  {	  if(in.nextString()!=    JsonToken.STRING    ||    in.nextString()!=    JsonToken.END_ARRAY)    {    	non-compiled	[CE]  incomparable  types:  String  and  JsonToken	75	None	replace
133	[BUG]  [BUGGY]  if(in.nextString()!=  JsonToken.STRING  ||  in.nextString()  ==  JsonToken.END_ARRAY)  {  [CE]  incomparable  types:  String  and  JsonToken  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.nextString()!=  JsonToken.STRING  ||  in.nextString()  ==  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.nextString()!=  JsonToken.STRING  ||  in.nextString()  ==  JsonToken.END_ARRAY)  {	  if(in.nextString()!=    JsonToken.STRING    ||    in.nextString()!=    JsonToken.END_ARRAY)    {    	non-compiled	[CE]  incomparable  types:  String  and  JsonToken	75	None	replace
134	[BUG]  [BUGGY]  if(in.nextString()  ==  JsonToken.STRING  ||  in.nextString()!=  JsonToken.END_ARRAY)  {  [CE]  incomparable  types:  String  and  JsonToken  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.nextString()  ==  JsonToken.STRING  ||  in.nextString()!=  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.nextString()  ==  JsonToken.STRING  ||  in.nextString()!=  JsonToken.END_ARRAY)  {	  if(in.nextString()!=    JsonToken.STRING    ||    in.nextString()!=    JsonToken.END_ARRAY)    {    	non-compiled	[CE]  incomparable  types:  String  and  JsonToken	75	None	replace
135	[BUG]  [BUGGY]  if(in.getClass()!=  JsonToken.STRING  ||  in.nextString()!=  JsonToken.END_ARRAY)  {  [CE]  incomparable  types:  Class<CAP#1>  and  JsonToken  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.getClass()!=  JsonToken.STRING  ||  in.nextString()!=  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.getClass()!=  JsonToken.STRING  ||  in.nextString()!=  JsonToken.END_ARRAY)  {	  if(in.nextString()!=    JsonToken.STRING    ||    in.nextString()!=    JsonToken.END_ARRAY)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  JsonToken	75	None	replace
136	[BUG]  [BUGGY]  if(in.getType()  ==  JsonToken.STRING  ||  in.nextString()!=  JsonToken.END_ARRAY)  {  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.getType()  ==  JsonToken.STRING  ||  in.nextString()!=  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.getType()  ==  JsonToken.STRING  ||  in.nextString()!=  JsonToken.END_ARRAY)  {	  if(in.nextString()!=    JsonToken.STRING    ||    in.nextString()!=    JsonToken.END_ARRAY)    {    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
137	[BUG]  [BUGGY]  if  (in.nextString()  ==  JsonToken.VALUE_STRING)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if  (in.nextString()  ==  JsonToken.VALUE_STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if  (in.nextString()  ==  JsonToken.VALUE_STRING)  {	  if    (in.nextString()!=    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	40	None	replace
138	[BUG]  [BUGGY]  if  (in.nextString()!=  JsonToken.VALUE_STRING  ||  in.nextString()!=  JsonToken.VALUE_STRING)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if  (in.nextString()!=  JsonToken.VALUE_STRING  ||  in.nextString()!=  JsonToken.VALUE_STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if  (in.nextString()!=  JsonToken.VALUE_STRING  ||  in.nextString()!=  JsonToken.VALUE_STRING)  {	  if    (in.nextString()!=    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	40	None	replace
139	[BUG]  [BUGGY]  if  (in.nextString()!=  JsonToken.VALUE_STRING  ||  in.nextString()  ==  JsonToken.VALUE_STRING)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if  (in.nextString()!=  JsonToken.VALUE_STRING  ||  in.nextString()  ==  JsonToken.VALUE_STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if  (in.nextString()!=  JsonToken.VALUE_STRING  ||  in.nextString()  ==  JsonToken.VALUE_STRING)  {	  if    (in.nextString()!=    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	40	None	replace
140	[BUG]  [BUGGY]  if  (in.nextString()!=  JsonToken.END_ARRAY)  {  [CE]  incomparable  types:  String  and  JsonToken  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if  (in.nextString()!=  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if  (in.nextString()!=  JsonToken.END_ARRAY)  {	  if    (in.nextString()!=    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  incomparable  types:  String  and  JsonToken	40	None	replace
141	[BUG]  [BUGGY]  If  (in  ==  null  ||  in.peek()!=  JsonToken.STRING)  {  [CE]  ';'  expected  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  If  (in  ==  null  ||  in.peek()!=  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	If  (in  ==  null  ||  in.peek()!=  JsonToken.STRING)  {	  if    (in    ==    null    ||    in.peek()!=    JsonToken.STRING)    {    If    (in    ==    null    ||    in.peek()!=    JsonToken.STRING)    {    	non-compiled	[CE]  ';'  expected	37	None	replace
142	[BUG]  [BUGGY]  if(in  ==  null)  {  If  (in  ==  null  ||  in.peek()!=  JsonToken.STRING)  {  [CE]  ';'  expected  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null)  {  If  (in  ==  null  ||  in.peek()!=  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  ==  null)  {  If  (in  ==  null  ||  in.peek()!=  JsonToken.STRING)  {	  if    (in    ==    null    ||    in.peek()!=    JsonToken.STRING)    {    If    (in    ==    null    ||    in.peek()!=    JsonToken.STRING)    {    	non-compiled	[CE]  ';'  expected	37	None	replace
143	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  &&  in.peek()  ==  JsonToken.START_ARRAY)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  &&  in.peek()  ==  JsonToken.START_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.VALUE_STRING  &&  in.peek()  ==  JsonToken.START_ARRAY)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING    ||    in.peek()    ==    JsonToken.START_ARRAY)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	63	None	replace
144	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.START_ARRAY  ||  in.peek()  ==  JsonToken.VALUE_STRING)  {  [CE]  cannot  find  symbol  START_ARRAY  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.START_ARRAY  ||  in.peek()  ==  JsonToken.VALUE_STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.START_ARRAY  ||  in.peek()  ==  JsonToken.VALUE_STRING)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING    ||    in.peek()    ==    JsonToken.START_ARRAY)    {    	non-compiled	[CE]  cannot  find  symbol  START_ARRAY	63	None	replace
145	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.START_OBJECT  ||  in.peek()  ==  JsonToken.START_ARRAY)  {  [CE]  cannot  find  symbol  START_OBJECT  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.START_OBJECT  ||  in.peek()  ==  JsonToken.START_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.START_OBJECT  ||  in.peek()  ==  JsonToken.START_ARRAY)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING    ||    in.peek()    ==    JsonToken.START_ARRAY)    {    	non-compiled	[CE]  cannot  find  symbol  START_OBJECT	63	None	replace
146	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.START_ARRAY)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.START_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.START_ARRAY)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING    ||    in.peek()    ==    JsonToken.START_ARRAY)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	63	None	replace
147	[BUG]  [BUGGY]  in.skipChildren();  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  in.skipChildren();  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	in.skipChildren();	  in.defaultReader();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
148	[BUG]  [BUGGY]  JsonReader  in  =  new  JsonReader(in.getClass());  [CE]  illegal  start  of  type  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  JsonReader  in  =  new  JsonReader(in.getClass());  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	JsonReader  in  =  new  JsonReader(in.getClass());	  in.defaultReader();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
149	[BUG]  [BUGGY]  JsonReader  in  =  in.read();  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  JsonReader  in  =  in.read();  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	JsonReader  in  =  in.read();	  in.defaultReader();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
150	[BUG]  [BUGGY]  JsonReader  in  =  new  JsonReader(in.read());  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  JsonReader  in  =  new  JsonReader(in.read());  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	JsonReader  in  =  new  JsonReader(in.read());	  in.defaultReader();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
151	[BUG]  [BUGGY]  in.close();  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  in.close();  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	in.close();	  in.defaultReader();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
152	[BUG]  [BUGGY]  if(in.next()!=  JsonToken.VALUE_STRING  ||  in.next()!=  JsonToken.VALUE_STRING)  {  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.next()!=  JsonToken.VALUE_STRING  ||  in.next()!=  JsonToken.VALUE_STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.next()!=  JsonToken.VALUE_STRING  ||  in.next()!=  JsonToken.VALUE_STRING)  {	  if(in.next()!=    JsonToken.STRING    ||    in.next()!=    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
153	[BUG]  [BUGGY]  if(in.next()!=  JsonToken.STRING  &&  in.next()!=  JsonToken.VALUE_STRING)  {  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.next()!=  JsonToken.STRING  &&  in.next()!=  JsonToken.VALUE_STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.next()!=  JsonToken.STRING  &&  in.next()!=  JsonToken.VALUE_STRING)  {	  if(in.next()!=    JsonToken.STRING    ||    in.next()!=    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
154	[BUG]  [BUGGY]  if(in.next()!=  JsonToken.STRING  ||  in.next()  ==  JsonToken.VALUE_STRING)  {  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.next()!=  JsonToken.STRING  ||  in.next()  ==  JsonToken.VALUE_STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.next()!=  JsonToken.STRING  ||  in.next()  ==  JsonToken.VALUE_STRING)  {	  if(in.next()!=    JsonToken.STRING    ||    in.next()!=    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
155	[BUG]  [BUGGY]  if(in.next()  ==  JsonToken.STRING  ||  in.next()!=  JsonToken.VALUE_STRING)  {  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.next()  ==  JsonToken.STRING  ||  in.next()!=  JsonToken.VALUE_STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.next()  ==  JsonToken.STRING  ||  in.next()!=  JsonToken.VALUE_STRING)  {	  if(in.next()!=    JsonToken.STRING    ||    in.next()!=    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
156	[BUG]  [BUGGY]  if(in.next()!=  JsonToken.VALUE_STRING  ||  in.next()  ==  JsonToken.VALUE_STRING)  {  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.next()!=  JsonToken.VALUE_STRING  ||  in.next()  ==  JsonToken.VALUE_STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.next()!=  JsonToken.VALUE_STRING  ||  in.next()  ==  JsonToken.VALUE_STRING)  {	  if(in.next()!=    JsonToken.STRING    ||    in.next()!=    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
157	[BUG]  [BUGGY]  if(in.next()  ==  JsonToken.VALUE_STRING  ||  in.next()!=  JsonToken.VALUE_STRING)  {  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.next()  ==  JsonToken.VALUE_STRING  ||  in.next()!=  JsonToken.VALUE_STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.next()  ==  JsonToken.VALUE_STRING  ||  in.next()!=  JsonToken.VALUE_STRING)  {	  if(in.next()!=    JsonToken.STRING    ||    in.next()!=    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
158	[BUG]  [BUGGY]  if  (in.hasNext()  ||  in.nextString()  ==  JsonToken.STRING)  {  [CE]  incomparable  types:  String  and  JsonToken  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if  (in.hasNext()  ||  in.nextString()  ==  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if  (in.hasNext()  ||  in.nextString()  ==  JsonToken.STRING)  {	  if    (in.hasNext()    ||    in.nextString()!=    JsonToken.STRING)    {    	non-compiled	[CE]  incomparable  types:  String  and  JsonToken	58	None	replace
159	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if  (in.hasNext()  ||  in.nextString().equals(JsonToken.STRING))  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	add	if  (in.hasNext()  ||  in.nextString().equals(JsonToken.STRING))  {	  if    (in.hasNext()    ||    in.nextString()!=    JsonToken.STRING)    {    	compilable	  [FE]  JsonParseException  	58	6	replace
160	[BUG]  [BUGGY]  if  (in.hasNext()  ||  in.nextString().equals(JsonToken.STRING))  {  [FE]  JsonParseException  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if  (in.hasNext()  ||  in.nextString().equals(JsonToken.STRING))  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if  (in.hasNext()  ||  in.nextString().equals(JsonToken.STRING))  {	  if    (in.hasNext()    ||    in.nextString()!=    JsonToken.STRING)    {    	compilable	  [FE]  JsonParseException  	58	6	replace
161	[BUG]  [BUGGY]  if  (in.hasNext()  &&  in.nextString()!=  JsonToken.STRING)  {  [CE]  incomparable  types:  String  and  JsonToken  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if  (in.hasNext()  &&  in.nextString()!=  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if  (in.hasNext()  &&  in.nextString()!=  JsonToken.STRING)  {	  if    (in.hasNext()    ||    in.nextString()!=    JsonToken.STRING)    {    	non-compiled	[CE]  incomparable  types:  String  and  JsonToken	58	None	replace
162	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if  (in.hasNext()  ||  in.nextString().startsWith( "java.sql.String "))  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	add	if  (in.hasNext()  ||  in.nextString().startsWith( "java.sql.String "))  {	  if    (in.hasNext()    ||    in.nextString()!=    JsonToken.STRING)    {    	compilable	  [FE]  JsonParseException  	58	6	replace
163	[BUG]  [BUGGY]  if  (in.hasNext()  ||  in.nextString().startsWith( "java.sql.String "))  {  [FE]  JsonParseException  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if  (in.hasNext()  ||  in.nextString().startsWith( "java.sql.String "))  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if  (in.hasNext()  ||  in.nextString().startsWith( "java.sql.String "))  {	  if    (in.hasNext()    ||    in.nextString()!=    JsonToken.STRING)    {    	compilable	  [FE]  JsonParseException  	58	6	replace
164	[BUG]  [BUGGY]  while(in  ==  null)  {  throw  new  JsonParseException( "The  date  should  be  a  string  value ");  }  [CE]  illegal  start  of  type  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  while(in  ==  null)  {  throw  new  JsonParseException( "The  date  should  be  a  string  value ");  }  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	while(in  ==  null)  {  throw  new  JsonParseException( "The  date  should  be  a  string  value ");  }	  if(in    ==    null)    {    throw    new    JsonParseException(   "The    date    should    be    a    string    value   ");    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
165	[BUG]  [BUGGY]  while(in!=  null)  {  throw  new  JsonParseException( "The  date  should  be  a  string  value ");  }  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  while(in!=  null)  {  throw  new  JsonParseException( "The  date  should  be  a  string  value ");  }  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	while(in!=  null)  {  throw  new  JsonParseException( "The  date  should  be  a  string  value ");  }	  if(in    ==    null)    {    throw    new    JsonParseException(   "The    date    should    be    a    string    value   ");    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
166	[BUG]  [BUGGY]  while(in  ==  null)  {  throw  new  JsonParseException( "The  date  should  be  a  string  value ");  [CE]  unreachable  statement  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  while(in  ==  null)  {  throw  new  JsonParseException( "The  date  should  be  a  string  value ");  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	while(in  ==  null)  {  throw  new  JsonParseException( "The  date  should  be  a  string  value ");	  if(in    ==    null)    {    throw    new    JsonParseException(   "The    date    should    be    a    string    value   ");    }    	non-compiled	[CE]  unreachable  statement	54	None	replace
167	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.START_ARRAY)  {  [CE]  cannot  find  symbol  START_ARRAY  [FE]        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.START_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.START_ARRAY)  {	  if    (in.peek()    ==    JsonToken.STRING)    {    if    (Integer.peek()    ==    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol  START_ARRAY	69	None	replace
168	[BUG]  [BUGGY]  if(in!=  null  &&  in.peek()!=  JsonToken.STRING)  {  if(in!=  null  &&  in.peek()!=  JsonToken.STRING)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  &&  in.peek()!=  JsonToken.STRING)  {  if(in!=  null  &&  in.peek()!=  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=    null    &&    in.peek()!=    JsonToken.STRING)    {    if(in!=  null  &&  in.peek()!=  JsonToken.STRING)  {	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
169	[BUG]  [BUGGY]  if(in!=  null  &&  in.peek()!=  JsonToken.STRING)  {  if(in  ==  null  &&  in.peek()!=  JsonToken.STRING)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  &&  in.peek()!=  JsonToken.STRING)  {  if(in  ==  null  &&  in.peek()!=  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=    null    &&    in.peek()!=    JsonToken.STRING)    {    if(in  ==  null  &&  in.peek()!=  JsonToken.STRING)  {	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
170	[BUG]  [BUGGY]  if(in!=  null  &&  in.peek()!=  JsonToken.STRING)  {  if(in!=  null  &&  in.peek()  ==  JsonToken.STRING)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  &&  in.peek()!=  JsonToken.STRING)  {  if(in!=  null  &&  in.peek()  ==  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=    null    &&    in.peek()!=    JsonToken.STRING)    {    if(in!=  null  &&  in.peek()  ==  JsonToken.STRING)  {	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
171	[BUG]  [BUGGY]  if(in!=  null  &&  in.peek()!=  JsonToken.STRING)  {  if(in!=  null  &&  in.peek()  >=  JsonToken.STRING)  {  [CE]  illegal  start  of  expression  [FE]          JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  &&  in.peek()!=  JsonToken.STRING)  {  if(in!=  null  &&  in.peek()  >=  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=    null    &&    in.peek()!=    JsonToken.STRING)    {    if(in!=  null  &&  in.peek()  >=  JsonToken.STRING)  {	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
172	[BUG]  [BUGGY]  if(in!=  null  &&  in.peek()!=  JsonToken.STRING)  {  if(in  >=  null  &&  in.peek()!=  JsonToken.STRING)  {  [CE]  illegal  start  of  expression  [FE]            JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  &&  in.peek()!=  JsonToken.STRING)  {  if(in  >=  null  &&  in.peek()!=  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=    null    &&    in.peek()!=    JsonToken.STRING)    {    if(in  >=  null  &&  in.peek()!=  JsonToken.STRING)  {	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
173	[BUG]  [BUGGY]  if(in!=  null  &&  in.peek()!=  JsonToken.STRING)  {  If(in!=  null  &&  in.peek()!=  JsonToken.STRING)  {  [CE]  ';'  expected  [FE]              JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  &&  in.peek()!=  JsonToken.STRING)  {  If(in!=  null  &&  in.peek()!=  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=    null    &&    in.peek()!=    JsonToken.STRING)    {    If(in!=  null  &&  in.peek()!=  JsonToken.STRING)  {	  	non-compiled	[CE]  ';'  expected	70	None	add
174	[BUG]  [BUGGY]  if(in!=  null  &&  in.peek()!=  JsonToken.STRING)  {  if(in!=  null  &&  in.peek()  >>  JsonToken.STRING)  {  [CE]  illegal  start  of  expression  [FE]                JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  &&  in.peek()!=  JsonToken.STRING)  {  if(in!=  null  &&  in.peek()  >>  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=    null    &&    in.peek()!=    JsonToken.STRING)    {    if(in!=  null  &&  in.peek()  >>  JsonToken.STRING)  {	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
175	[BUG]  [BUGGY]  if  (in  ==  null  ||  in.next()!=  JsonToken.VALUE_STRING)  {  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if  (in  ==  null  ||  in.next()!=  JsonToken.VALUE_STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if  (in  ==  null  ||  in.next()!=  JsonToken.VALUE_STRING)  {	  if    (in    ==    null    ||    in.next()!=    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
176	[BUG]  [BUGGY]  if  (in  ==  null  ||  in.getType()  ==  JsonToken.STRING)  {  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if  (in  ==  null  ||  in.getType()  ==  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if  (in  ==  null  ||  in.getType()  ==  JsonToken.STRING)  {	  if    (in    ==    null    ||    in.next()!=    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
177	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.START_VALUE  ||  in.peek()  ==  JsonToken.STRING)  {  [CE]  cannot  find  symbol  START_VALUE  [FE]        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.START_VALUE  ||  in.peek()  ==  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.START_VALUE  ||  in.peek()  ==  JsonToken.STRING)  {	  if(in.peek()    ==    JsonToken.START_ARRAY    ||    in.peek()    ==    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol  START_VALUE	13	None	replace
178	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.START_STRING  ||  in.peek()  ==  JsonToken.STRING)  {  [CE]  cannot  find  symbol  START_STRING  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.START_STRING  ||  in.peek()  ==  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.START_STRING  ||  in.peek()  ==  JsonToken.STRING)  {	  if(in.peek()    ==    JsonToken.START_ARRAY    ||    in.peek()    ==    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol  START_STRING	13	None	replace
179	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.START_NAME  ||  in.peek()  ==  JsonToken.STRING)  {  [CE]  cannot  find  symbol  START_NAME  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.START_NAME  ||  in.peek()  ==  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.START_NAME  ||  in.peek()  ==  JsonToken.STRING)  {	  if(in.peek()    ==    JsonToken.START_ARRAY    ||    in.peek()    ==    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol  START_NAME	13	None	replace
180	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.END_ARRAY  ||  in.peek()  ==  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	add	if(in.peek()  ==  JsonToken.END_ARRAY  ||  in.peek()  ==  JsonToken.STRING)  {	  if(in.peek()    ==    JsonToken.START_ARRAY    ||    in.peek()    ==    JsonToken.STRING)    {    	compilable	  [FE]  JsonParseException  	13	5	replace
181	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.END_ARRAY  ||  in.peek()  ==  JsonToken.STRING)  {  [FE]  JsonParseException  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.END_ARRAY  ||  in.peek()  ==  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.END_ARRAY  ||  in.peek()  ==  JsonToken.STRING)  {	  if(in.peek()    ==    JsonToken.START_ARRAY    ||    in.peek()    ==    JsonToken.STRING)    {    	compilable	  [FE]  JsonParseException  	13	5	replace
182	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  &&  in.nextString()  ==  JsonToken.VALUE_STRING)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  &&  in.nextString()  ==  JsonToken.VALUE_STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.VALUE_STRING  &&  in.nextString()  ==  JsonToken.VALUE_STRING)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING    ||    in.nextString()    ==    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	12	None	replace
183	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.nextString()!=  JsonToken.VALUE_STRING)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.nextString()!=  JsonToken.VALUE_STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.nextString()!=  JsonToken.VALUE_STRING)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING    ||    in.nextString()    ==    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	12	None	replace
184	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_NUMBER_INT  ||  in.nextString()  ==  JsonToken.VALUE_STRING)  {  [CE]  cannot  find  symbol  VALUE_NUMBER_INT  [FE]                                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_NUMBER_INT  ||  in.nextString()  ==  JsonToken.VALUE_STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.VALUE_NUMBER_INT  ||  in.nextString()  ==  JsonToken.VALUE_STRING)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING    ||    in.nextString()    ==    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_NUMBER_INT	12	None	replace
185	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.START_OBJECT  ||  in.nextString()  ==  JsonToken.VALUE_STRING)  {  [CE]  cannot  find  symbol  START_OBJECT  [FE]                                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.START_OBJECT  ||  in.nextString()  ==  JsonToken.VALUE_STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.START_OBJECT  ||  in.nextString()  ==  JsonToken.VALUE_STRING)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING    ||    in.nextString()    ==    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  START_OBJECT	12	None	replace
186	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.nextString()  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.nextString()  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.nextString()  ==  JsonToken.VALUE_NUMBER_FLOAT)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING    ||    in.nextString()    ==    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	12	None	replace
187	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.VALUE_STRING  ||  in.nextString()  ==  JsonToken.VALUE_STRING)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()!=  JsonToken.VALUE_STRING  ||  in.nextString()  ==  JsonToken.VALUE_STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()!=  JsonToken.VALUE_STRING  ||  in.nextString()  ==  JsonToken.VALUE_STRING)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING    ||    in.nextString()    ==    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	12	None	replace
188	[BUG]  [BUGGY]  if(in  ==  null  ||  in.peek()  ==  JsonToken.FIELD_NAME)  {  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null  ||  in.peek()  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  ==  null  ||  in.peek()  ==  JsonToken.FIELD_NAME)  {	  if(in    ==    null    ||    in.peek()    ==    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	60	None	replace
189	[BUG]  [BUGGY]  if(in  ==  null  ||  in.peek()  ==  JsonToken.VALUE_NUMBER_INT)  {  [CE]  cannot  find  symbol  VALUE_NUMBER_INT  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null  ||  in.peek()  ==  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  ==  null  ||  in.peek()  ==  JsonToken.VALUE_NUMBER_INT)  {	  if(in    ==    null    ||    in.peek()    ==    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_NUMBER_INT	60	None	replace
190	[BUG]  [BUGGY]  if(in  ==  null  ||  in.peek()  ==  JsonToken.START_VALUE)  {  [CE]  cannot  find  symbol  START_VALUE  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null  ||  in.peek()  ==  JsonToken.START_VALUE)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  ==  null  ||  in.peek()  ==  JsonToken.START_VALUE)  {	  if(in    ==    null    ||    in.peek()    ==    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  START_VALUE	60	None	replace
191	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	add	if(in  ==  null  ||  in.peek()  ==  JsonToken.END_ARRAY)  {	  if(in    ==    null    ||    in.peek()    ==    JsonToken.VALUE_STRING)    {    	compilable	  [FE]  IllegalStateException  	60	1	replace
192	[BUG]  [BUGGY]  if(in  ==  null  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  [FE]  IllegalStateException  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  ==  null  ||  in.peek()  ==  JsonToken.END_ARRAY)  {	  if(in    ==    null    ||    in.peek()    ==    JsonToken.VALUE_STRING)    {    	compilable	  [FE]  IllegalStateException  	60	1	replace
193	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.START_OBJECT)  {  [CE]  cannot  find  symbol  START_OBJECT  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.START_OBJECT)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.START_OBJECT)  {	  if(in.peek()    ==    JsonToken.START_OBJECT    ||    in.peek()    ==    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol  START_OBJECT	14	None	replace
194	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.START_TYPE  ||  in.peek()  ==  JsonToken.STRING)  {  [CE]  cannot  find  symbol  START_TYPE  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.START_TYPE  ||  in.peek()  ==  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.START_TYPE  ||  in.peek()  ==  JsonToken.STRING)  {	  if(in.peek()    ==    JsonToken.START_OBJECT    ||    in.peek()    ==    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol  START_TYPE	14	None	replace
195	[BUG]  [BUGGY]  if(in.next()!=  JsonToken.STRING  ||  in.next()  ==  JsonToken.START)  {  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.next()!=  JsonToken.STRING  ||  in.next()  ==  JsonToken.START)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.next()!=  JsonToken.STRING  ||  in.next()  ==  JsonToken.START)  {	  if(in.next()!=    JsonToken.STRING    ||    in.next()!=    JsonToken.START)    {    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
196	[BUG]  [BUGGY]  if(in.next()!=  JsonToken.STRING  &&  in.next()!=  JsonToken.START)  {  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.next()!=  JsonToken.STRING  &&  in.next()!=  JsonToken.START)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.next()!=  JsonToken.STRING  &&  in.next()!=  JsonToken.START)  {	  if(in.next()!=    JsonToken.STRING    ||    in.next()!=    JsonToken.START)    {    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
197	[BUG]  [BUGGY]  if(in.next()  ==  JsonToken.STRING  ||  in.next()!=  JsonToken.START)  {  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.next()  ==  JsonToken.STRING  ||  in.next()!=  JsonToken.START)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.next()  ==  JsonToken.STRING  ||  in.next()!=  JsonToken.START)  {	  if(in.next()!=    JsonToken.STRING    ||    in.next()!=    JsonToken.START)    {    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
198	[BUG]  [BUGGY]  if(in.next()!=  JsonToken.START  ||  in.next()!=  JsonToken.STRING)  {  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.next()!=  JsonToken.START  ||  in.next()!=  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.next()!=  JsonToken.START  ||  in.next()!=  JsonToken.STRING)  {	  if(in.next()!=    JsonToken.STRING    ||    in.next()!=    JsonToken.START)    {    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
199	[BUG]  [BUGGY]  if(in.next()  ==  JsonToken.STRING  &&  in.next()!=  JsonToken.START)  {  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.next()  ==  JsonToken.STRING  &&  in.next()!=  JsonToken.START)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.next()  ==  JsonToken.STRING  &&  in.next()!=  JsonToken.START)  {	  if(in.next()!=    JsonToken.STRING    ||    in.next()!=    JsonToken.START)    {    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
200	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null  ||  in!=  null)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	add	if(in  ==  null  ||  in!=  null)  {	  if(in    ==    null)    {    	compilable	  [FE]  JsonParseException  	73	6	replace
201	[BUG]  [BUGGY]  if(in  ==  null  ||  in!=  null)  {  [FE]  JsonParseException  [FE]    IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null  ||  in!=  null)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  ==  null  ||  in!=  null)  {	  if(in    ==    null)    {    	compilable	  [FE]  JsonParseException  	73	6	replace
202	[BUG]  [BUGGY]  if(in  ==  null  ||  in.hasChronology())  {  [CE]  cannot  find  symbol  [FE]      IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null  ||  in.hasChronology())  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  ==  null  ||  in.hasChronology())  {	  if(in    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
203	[BUG]  [BUGGY]  if(in  ==  null  ||  in.isEmpty())  {  [CE]  cannot  find  symbol  [FE]        IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null  ||  in.isEmpty())  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  ==  null  ||  in.isEmpty())  {	  if(in    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
204	[BUG]  [BUGGY]  if(in  ==  null  ||  in.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]          IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null  ||  in.getType()  ==  Token.NAME)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  ==  null  ||  in.getType()  ==  Token.NAME)  {	  if(in    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
205	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]            IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null  ||  in.hasNext())  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	add	if(in  ==  null  ||  in.hasNext())  {	  if(in    ==    null)    {    	compilable	  [FE]  JsonParseException  	73	6	replace
206	[BUG]  [BUGGY]  if(in  ==  null  ||  in.hasNext())  {  [FE]  JsonParseException  [FE]            IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null  ||  in.hasNext())  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  ==  null  ||  in.hasNext())  {	  if(in    ==    null)    {    	compilable	  [FE]  JsonParseException  	73	6	replace
207	[BUG]  [BUGGY]  if(in  ==  null  ||  in.getClass()!=  getClass())  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<CAP#2>  [FE]              IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null  ||  in.getClass()!=  getClass())  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  ==  null  ||  in.getClass()!=  getClass())  {	  if(in    ==    null)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<CAP#2>	73	None	replace
208	[BUG]  [BUGGY]  if(in!=  null  ||  in.next()  ==  JsonToken.STRING)  {  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  ||  in.next()  ==  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=  null  ||  in.next()  ==  JsonToken.STRING)  {	  if(in!=    null    ||    in.next()!=    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
209	[BUG]  [BUGGY]  if(in!=  null  ||  in.getType()  ==  JsonToken.STRING)  {  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  ||  in.getType()  ==  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=  null  ||  in.getType()  ==  JsonToken.STRING)  {	  if(in!=    null    ||    in.next()!=    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
210	[BUG]  [BUGGY]  if(in!=  null  ||  in.next()!=  JsonToken.VALUE_STRING)  {  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  ||  in.next()!=  JsonToken.VALUE_STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=  null  ||  in.next()!=  JsonToken.VALUE_STRING)  {	  if(in!=    null    ||    in.next()!=    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
211	[BUG]  [BUGGY]  if(in!=  null  ||  in.getValue()!=  JsonToken.STRING)  {  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  ||  in.getValue()!=  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=  null  ||  in.getValue()!=  JsonToken.STRING)  {	  if(in!=    null    ||    in.next()!=    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
212	[BUG]  [BUGGY]  if(in!=  null  ||  in.peek()  ==  JsonToken.FIELD_NAME)  {  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  ||  in.peek()  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=  null  ||  in.peek()  ==  JsonToken.FIELD_NAME)  {	  if(in!=    null    ||    in.peek()    ==    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	61	None	replace
213	[BUG]  [BUGGY]  if(in!=  null  ||  in.peek()  ==  JsonToken.START_VALUE)  {  [CE]  cannot  find  symbol  START_VALUE  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  ||  in.peek()  ==  JsonToken.START_VALUE)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=  null  ||  in.peek()  ==  JsonToken.START_VALUE)  {	  if(in!=    null    ||    in.peek()    ==    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  START_VALUE	61	None	replace
214	[BUG]  [BUGGY]  if(in!=  null  ||  in.peek()  ==  JsonToken.VALUE_NUMBER_INT)  {  [CE]  cannot  find  symbol  VALUE_NUMBER_INT  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  ||  in.peek()  ==  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=  null  ||  in.peek()  ==  JsonToken.VALUE_NUMBER_INT)  {	  if(in!=    null    ||    in.peek()    ==    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_NUMBER_INT	61	None	replace
215	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	add	if(in!=  null  ||  in.peek()  ==  JsonToken.END_ARRAY)  {	  if(in!=    null    ||    in.peek()    ==    JsonToken.VALUE_STRING)    {    	compilable	  [FE]  JsonParseException  	61	6	replace
216	[BUG]  [BUGGY]  if(in!=  null  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  [FE]  JsonParseException  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=  null  ||  in.peek()  ==  JsonToken.END_ARRAY)  {	  if(in!=    null    ||    in.peek()    ==    JsonToken.VALUE_STRING)    {    	compilable	  [FE]  JsonParseException  	61	6	replace
217	[BUG]  [BUGGY]  if(in!=  null  ||  in.peek()  ==  JsonToken.START_OBJECT)  {  [CE]  cannot  find  symbol  START_OBJECT  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  ||  in.peek()  ==  JsonToken.START_OBJECT)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=  null  ||  in.peek()  ==  JsonToken.START_OBJECT)  {	  if(in!=    null    ||    in.peek()    ==    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  START_OBJECT	61	None	replace
218	[BUG]  [BUGGY]  Date  value  =  this.in.read();  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  Date  value  =  this.in.read();  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	Date  value  =  this.in.read();	  Date    value    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
219	[BUG]  [BUGGY]  Date  value  =  in.read(this);  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  Date  value  =  in.read(this);  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	Date  value  =  in.read(this);	  Date    value    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
220	[BUG]  [BUGGY]  Date  value  =  in.readInt();  [CE]  illegal  start  of  type  [FE]                              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  Date  value  =  in.readInt();  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	Date  value  =  in.readInt();	  Date    value    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
221	[BUG]  [BUGGY]  Date  value  =  in.readUTF();  [CE]  illegal  start  of  type  [FE]                                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  Date  value  =  in.readUTF();  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	Date  value  =  in.readUTF();	  Date    value    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
222	[BUG]  [BUGGY]  Date  value  =  in.readValue();  [CE]  illegal  start  of  type  [FE]                                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  Date  value  =  in.readValue();  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	Date  value  =  in.readValue();	  Date    value    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
223	[BUG]  [BUGGY]  Date  value  =  getValue(in).read();  [CE]  illegal  start  of  type  [FE]                                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  Date  value  =  getValue(in).read();  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	Date  value  =  getValue(in).read();	  Date    value    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
224	[BUG]  [BUGGY]  if(in.next()!=  JsonToken.STRING  &&  in.next()!=  JsonToken.END_ARRAY)  {  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.next()!=  JsonToken.STRING  &&  in.next()!=  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.next()!=  JsonToken.STRING  &&  in.next()!=  JsonToken.END_ARRAY)  {	  if(in.next()!=    JsonToken.STRING    ||    in.next()!=    JsonToken.END_ARRAY)    {    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
225	[BUG]  [BUGGY]  if(in.next()!=  JsonToken.STRING  ||  in.next()  ==  JsonToken.END_ARRAY)  {  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.next()!=  JsonToken.STRING  ||  in.next()  ==  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.next()!=  JsonToken.STRING  ||  in.next()  ==  JsonToken.END_ARRAY)  {	  if(in.next()!=    JsonToken.STRING    ||    in.next()!=    JsonToken.END_ARRAY)    {    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
226	[BUG]  [BUGGY]  if(in.next()  ==  JsonToken.STRING  ||  in.next()!=  JsonToken.END_ARRAY)  {  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.next()  ==  JsonToken.STRING  ||  in.next()!=  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.next()  ==  JsonToken.STRING  ||  in.next()!=  JsonToken.END_ARRAY)  {	  if(in.next()!=    JsonToken.STRING    ||    in.next()!=    JsonToken.END_ARRAY)    {    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
227	[BUG]  [BUGGY]  if(in.next()  ==  JsonToken.STRING  &&  in.next()!=  JsonToken.END_ARRAY)  {  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.next()  ==  JsonToken.STRING  &&  in.next()!=  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.next()  ==  JsonToken.STRING  &&  in.next()!=  JsonToken.END_ARRAY)  {	  if(in.next()!=    JsonToken.STRING    ||    in.next()!=    JsonToken.END_ARRAY)    {    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
228	[BUG]  [BUGGY]  if(in.getValue()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.END_ARRAY)  {  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.getValue()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.getValue()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.END_ARRAY)  {	  if(in.next()!=    JsonToken.STRING    ||    in.next()!=    JsonToken.END_ARRAY)    {    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
229	[BUG]  [BUGGY]  if(in.next()!=  JsonToken.STRING  &&  in.next()  ==  JsonToken.END_ARRAY)  {  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.next()!=  JsonToken.STRING  &&  in.next()  ==  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.next()!=  JsonToken.STRING  &&  in.next()  ==  JsonToken.END_ARRAY)  {	  if(in.next()!=    JsonToken.STRING    ||    in.next()!=    JsonToken.END_ARRAY)    {    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
230	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.VALUE_NUMBER_VALUE)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.VALUE_NUMBER_VALUE)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.VALUE_NUMBER_VALUE)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING    ||    in.peek()    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	11	None	replace
231	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.VALUE_NUMBER_INT)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.VALUE_NUMBER_INT)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING    ||    in.peek()    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	11	None	replace
232	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.VALUE_NUMBER_PREFIX)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.VALUE_NUMBER_PREFIX)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.VALUE_NUMBER_PREFIX)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING    ||    in.peek()    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	11	None	replace
233	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  &&  in.peek()  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  &&  in.peek()  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.VALUE_STRING  &&  in.peek()  ==  JsonToken.VALUE_NUMBER_FLOAT)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING    ||    in.peek()    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	11	None	replace
234	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.VALUE_NUMBER_TRUE)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.VALUE_NUMBER_TRUE)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.VALUE_NUMBER_TRUE)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING    ||    in.peek()    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	11	None	replace
235	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.VALUE_NUMBER_BLOCK)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.VALUE_NUMBER_BLOCK)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.VALUE_NUMBER_BLOCK)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING    ||    in.peek()    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	11	None	replace
236	[BUG]  [BUGGY]  if(in!=  null  ||  in.peek()  ==  JsonToken.STRING)  {  if(in!=  null  ||  in.peek()  ==  JsonToken.STRING)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  ||  in.peek()  ==  JsonToken.STRING)  {  if(in!=  null  ||  in.peek()  ==  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=    null    ||    in.peek()    ==    JsonToken.STRING)    {    if(in!=  null  ||  in.peek()  ==  JsonToken.STRING)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
237	[BUG]  [BUGGY]  if(in!=  null  ||  in.peek()  ==  JsonToken.STRING)  {  if(in  ==  null  ||  in.peek()  ==  JsonToken.STRING)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  ||  in.peek()  ==  JsonToken.STRING)  {  if(in  ==  null  ||  in.peek()  ==  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=    null    ||    in.peek()    ==    JsonToken.STRING)    {    if(in  ==  null  ||  in.peek()  ==  JsonToken.STRING)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
238	[BUG]  [BUGGY]  if(in!=  null  ||  in.peek()  ==  JsonToken.STRING)  {  if(in  >=  null  ||  in.peek()  ==  JsonToken.STRING)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  ||  in.peek()  ==  JsonToken.STRING)  {  if(in  >=  null  ||  in.peek()  ==  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=    null    ||    in.peek()    ==    JsonToken.STRING)    {    if(in  >=  null  ||  in.peek()  ==  JsonToken.STRING)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
239	[BUG]  [BUGGY]  if(in!=  null  ||  in.peek()  ==  JsonToken.STRING)  {  If(in!=  null  ||  in.peek()  ==  JsonToken.STRING)  {  [CE]  ';'  expected  [FE]          JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  ||  in.peek()  ==  JsonToken.STRING)  {  If(in!=  null  ||  in.peek()  ==  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=    null    ||    in.peek()    ==    JsonToken.STRING)    {    If(in!=  null  ||  in.peek()  ==  JsonToken.STRING)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
240	[BUG]  [BUGGY]  if(in!=  null  ||  in.peek()  ==  JsonToken.STRING)  {  if(in!=  null  ||  in.peek()  >=  JsonToken.STRING)  {  [CE]  illegal  start  of  expression  [FE]            JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  ||  in.peek()  ==  JsonToken.STRING)  {  if(in!=  null  ||  in.peek()  >=  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=    null    ||    in.peek()    ==    JsonToken.STRING)    {    if(in!=  null  ||  in.peek()  >=  JsonToken.STRING)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
241	[BUG]  [BUGGY]  if(in!=  null  ||  in.peek()  ==  JsonToken.STRING)  {  if(in  ==  null  ||  in.peek()!=  JsonToken.STRING)  {  [CE]  illegal  start  of  expression  [FE]              JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  ||  in.peek()  ==  JsonToken.STRING)  {  if(in  ==  null  ||  in.peek()!=  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=    null    ||    in.peek()    ==    JsonToken.STRING)    {    if(in  ==  null  ||  in.peek()!=  JsonToken.STRING)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
242	[BUG]  [BUGGY]  if(in!=  null  ||  in.peek()  ==  JsonToken.STRING)  {  if(in  >>  null  ||  in.peek()  ==  JsonToken.STRING)  {  [CE]  illegal  start  of  expression  [FE]                JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  ||  in.peek()  ==  JsonToken.STRING)  {  if(in  >>  null  ||  in.peek()  ==  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=    null    ||    in.peek()    ==    JsonToken.STRING)    {    if(in  >>  null  ||  in.peek()  ==  JsonToken.STRING)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
243	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.STRING  &&  in.peek()  ==  JsonToken.START_ARRAY)  {  [CE]  cannot  find  symbol  START_ARRAY  [FE]        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.STRING  &&  in.peek()  ==  JsonToken.START_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.STRING  &&  in.peek()  ==  JsonToken.START_ARRAY)  {	  if(in.peek()    ==    JsonToken.STRING    ||    in.peek()    ==    JsonToken.START_ARRAY)    {    	non-compiled	[CE]  cannot  find  symbol  START_ARRAY	77	None	replace
244	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.START_ARRAY  ||  in.peek()  ==  JsonToken.START_OBJECT)  {  [CE]  cannot  find  symbol  START_ARRAY  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.START_ARRAY  ||  in.peek()  ==  JsonToken.START_OBJECT)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.START_ARRAY  ||  in.peek()  ==  JsonToken.START_OBJECT)  {	  if(in.peek()    ==    JsonToken.STRING    ||    in.peek()    ==    JsonToken.START_ARRAY)    {    	non-compiled	[CE]  cannot  find  symbol  START_ARRAY	77	None	replace
245	[BUG]  [BUGGY]  if(in!=  null  ||  in.peek()!=  JsonToken.FIELD_NAME)  {  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  ||  in.peek()!=  JsonToken.FIELD_NAME)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=  null  ||  in.peek()!=  JsonToken.FIELD_NAME)  {	  if(in!=    null    ||    in.peek()!=    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	64	None	replace
246	[BUG]  [BUGGY]  if(in!=  null  ||  in.peek()!=  JsonToken.START_VALUE)  {  [CE]  cannot  find  symbol  START_VALUE  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  ||  in.peek()!=  JsonToken.START_VALUE)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=  null  ||  in.peek()!=  JsonToken.START_VALUE)  {	  if(in!=    null    ||    in.peek()!=    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  START_VALUE	64	None	replace
247	[BUG]  [BUGGY]  if(in!=  null  ||  in.peek()!=  JsonToken.VALUE_NUMBER_INT)  {  [CE]  cannot  find  symbol  VALUE_NUMBER_INT  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  ||  in.peek()!=  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=  null  ||  in.peek()!=  JsonToken.VALUE_NUMBER_INT)  {	  if(in!=    null    ||    in.peek()!=    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_NUMBER_INT	64	None	replace
248	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  ||  in.peek()!=  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	add	if(in!=  null  ||  in.peek()!=  JsonToken.END_ARRAY)  {	  if(in!=    null    ||    in.peek()!=    JsonToken.VALUE_STRING)    {    	compilable	  [FE]  JsonParseException  	64	6	replace
249	[BUG]  [BUGGY]  if(in!=  null  ||  in.peek()!=  JsonToken.END_ARRAY)  {  [FE]  JsonParseException  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  ||  in.peek()!=  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=  null  ||  in.peek()!=  JsonToken.END_ARRAY)  {	  if(in!=    null    ||    in.peek()!=    JsonToken.VALUE_STRING)    {    	compilable	  [FE]  JsonParseException  	64	6	replace
250	[BUG]  [BUGGY]  if  (in.nextString()  ==  JsonToken.STRING  ||  in.nextString()  ==  JsonToken.STRING)  {  [CE]  incomparable  types:  String  and  JsonToken  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if  (in.nextString()  ==  JsonToken.STRING  ||  in.nextString()  ==  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if  (in.nextString()  ==  JsonToken.STRING  ||  in.nextString()  ==  JsonToken.STRING)  {	  if    (in.nextString()    ==    JsonToken.STRING)    {    	non-compiled	[CE]  incomparable  types:  String  and  JsonToken	39	None	replace
251	[BUG]  [BUGGY]  if  (in.nextString()  ==  JsonToken.STRING  ||  in.nextString()  ==  JsonToken.VALUE_STRING)  {  [CE]  incomparable  types:  String  and  JsonToken  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if  (in.nextString()  ==  JsonToken.STRING  ||  in.nextString()  ==  JsonToken.VALUE_STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if  (in.nextString()  ==  JsonToken.STRING  ||  in.nextString()  ==  JsonToken.VALUE_STRING)  {	  if    (in.nextString()    ==    JsonToken.STRING)    {    	non-compiled	[CE]  incomparable  types:  String  and  JsonToken	39	None	replace
252	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	add	if(in!=  null)  {	  if    (in!=    null    ||    in.peek()!=    JsonToken.STRING)    {    if    (in!=    null    ||    in.peek()    ==    JsonToken.STRING)    {    	compilable	  [FE]  JsonParseException  	30	6	replace
253	[BUG]  [BUGGY]  if(in!=  null)  {  [FE]  JsonParseException  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=  null)  {	  if    (in!=    null    ||    in.peek()!=    JsonToken.STRING)    {    if    (in!=    null    ||    in.peek()    ==    JsonToken.STRING)    {    	compilable	  [FE]  JsonParseException  	30	6	replace
254	[BUG]  [BUGGY]  if(in  ==  null)  {  If  (in!=  null  ||  in.peek()!=  JsonToken.STRING)  {  [CE]  ';'  expected  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null)  {  If  (in!=  null  ||  in.peek()!=  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  ==  null)  {  If  (in!=  null  ||  in.peek()!=  JsonToken.STRING)  {	  if    (in!=    null    ||    in.peek()!=    JsonToken.STRING)    {    If    (in!=    null    ||    in.peek()!=    JsonToken.STRING)    {    	non-compiled	[CE]  ';'  expected	33	None	replace
255	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.STRING  &&  in.peek()  ==  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	add	if(in.peek()  ==  JsonToken.STRING  &&  in.peek()  ==  JsonToken.END_ARRAY)  {	  if(in.peek()    ==    JsonToken.STRING    ||    in.peek()    ==    JsonToken.END_ARRAY)    {    	compilable	  [FE]  IllegalStateException  	16	1	replace
256	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.STRING  &&  in.peek()  ==  JsonToken.END_ARRAY)  {  [FE]  IllegalStateException  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.STRING  &&  in.peek()  ==  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.STRING  &&  in.peek()  ==  JsonToken.END_ARRAY)  {	  if(in.peek()    ==    JsonToken.STRING    ||    in.peek()    ==    JsonToken.END_ARRAY)    {    	compilable	  [FE]  IllegalStateException  	16	1	replace
257	[BUG]  [BUGGY]  if(in.nextString()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  [CE]  incomparable  types:  String  and  JsonToken  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.nextString()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.nextString()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {	  if(in.peek()    ==    JsonToken.STRING    ||    in.peek()    ==    JsonToken.END_ARRAY)    {    	non-compiled	[CE]  incomparable  types:  String  and  JsonToken	16	None	replace
258	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]        JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.STRING  ||  in.peek()!=  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	add	if(in.peek()  ==  JsonToken.STRING  ||  in.peek()!=  JsonToken.END_ARRAY)  {	  if(in.peek()    ==    JsonToken.STRING    ||    in.peek()    ==    JsonToken.END_ARRAY)    {    	compilable	  [FE]  JsonParseException  	16	6	replace
259	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.STRING  ||  in.peek()!=  JsonToken.END_ARRAY)  {  [FE]  JsonParseException  [FE]        JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.STRING  ||  in.peek()!=  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.STRING  ||  in.peek()!=  JsonToken.END_ARRAY)  {	  if(in.peek()    ==    JsonToken.STRING    ||    in.peek()    ==    JsonToken.END_ARRAY)    {    	compilable	  [FE]  JsonParseException  	16	6	replace
260	[BUG]  [BUGGY]  if(in.next()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  [CE]  cannot  find  symbol  [FE]          JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.next()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.next()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {	  if(in.peek()    ==    JsonToken.STRING    ||    in.peek()    ==    JsonToken.END_ARRAY)    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
261	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  if(in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  if(in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()    ==    JsonToken.STRING    ||    in.peek()    ==    JsonToken.END_ARRAY)    {    if(in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
262	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  if(in.peek()  ==  JsonToken.STRING  ||  in.peek()!=  JsonToken.END_ARRAY)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  if(in.peek()  ==  JsonToken.STRING  ||  in.peek()!=  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()    ==    JsonToken.STRING    ||    in.peek()    ==    JsonToken.END_ARRAY)    {    if(in.peek()  ==  JsonToken.STRING  ||  in.peek()!=  JsonToken.END_ARRAY)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
263	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  if(in.peek()!=  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  if(in.peek()!=  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()    ==    JsonToken.STRING    ||    in.peek()    ==    JsonToken.END_ARRAY)    {    if(in.peek()!=  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
264	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  If(in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  [CE]  ';'  expected  [FE]          JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  If(in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()    ==    JsonToken.STRING    ||    in.peek()    ==    JsonToken.END_ARRAY)    {    If(in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {	  	non-compiled	[CE]  ';'  expected	15	None	add
265	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  if(in.peek()  ==  JsonToken.STRING  ||  in.peek()  >=  JsonToken.END_ARRAY)  {  [CE]  illegal  start  of  expression  [FE]            JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  if(in.peek()  ==  JsonToken.STRING  ||  in.peek()  >=  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()    ==    JsonToken.STRING    ||    in.peek()    ==    JsonToken.END_ARRAY)    {    if(in.peek()  ==  JsonToken.STRING  ||  in.peek()  >=  JsonToken.END_ARRAY)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
266	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  if(in.peek()  >=  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  [CE]  illegal  start  of  expression  [FE]              JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  if(in.peek()  >=  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()    ==    JsonToken.STRING    ||    in.peek()    ==    JsonToken.END_ARRAY)    {    if(in.peek()  >=  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
267	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.START_VALUE)  {  [CE]  cannot  find  symbol  START_VALUE  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.START_VALUE)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.START_VALUE)  {	  if(in.peek()    ==    JsonToken.START_OBJECT)    {    	non-compiled	[CE]  cannot  find  symbol  START_VALUE	62	None	replace
268	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.START_STRING)  {  [CE]  cannot  find  symbol  START_STRING  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.START_STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.START_STRING)  {	  if(in.peek()    ==    JsonToken.START_OBJECT)    {    	non-compiled	[CE]  cannot  find  symbol  START_STRING	62	None	replace
269	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.START_NAME)  {  [CE]  cannot  find  symbol  START_NAME  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.START_NAME)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.START_NAME)  {	  if(in.peek()    ==    JsonToken.START_OBJECT)    {    	non-compiled	[CE]  cannot  find  symbol  START_NAME	62	None	replace
270	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.START_SUBJECT)  {  [CE]  cannot  find  symbol  START_SUBJECT  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.START_SUBJECT)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.START_SUBJECT)  {	  if(in.peek()    ==    JsonToken.START_OBJECT)    {    	non-compiled	[CE]  cannot  find  symbol  START_SUBJECT	62	None	replace
271	[BUG]  [BUGGY]  if(in.next()  ==  JsonToken.STRING  ||  in.next()  ==  JsonToken.END_ARRAY)  {  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.next()  ==  JsonToken.STRING  ||  in.next()  ==  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.next()  ==  JsonToken.STRING  ||  in.next()  ==  JsonToken.END_ARRAY)  {	  if(in.next()    ==    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
272	[BUG]  [BUGGY]  if(in.next()  ==  JsonToken.STRING  ||  in.next()  ==  JsonToken.VALUE_STRING)  {  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.next()  ==  JsonToken.STRING  ||  in.next()  ==  JsonToken.VALUE_STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.next()  ==  JsonToken.STRING  ||  in.next()  ==  JsonToken.VALUE_STRING)  {	  if(in.next()    ==    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
273	[BUG]  [BUGGY]  if(in.next()  ==  JsonToken.STRING  ||  in.next()  ==  JsonToken.END)  {  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.next()  ==  JsonToken.STRING  ||  in.next()  ==  JsonToken.END)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.next()  ==  JsonToken.STRING  ||  in.next()  ==  JsonToken.END)  {	  if(in.next()    ==    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
274	[BUG]  [BUGGY]  if(in.next()  ==  JsonToken.STRING  ||  in.nextString()  ==  JsonToken.END_ARRAY)  {  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.next()  ==  JsonToken.STRING  ||  in.nextString()  ==  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.next()  ==  JsonToken.STRING  ||  in.nextString()  ==  JsonToken.END_ARRAY)  {	  if(in.next()    ==    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
275	[BUG]  [BUGGY]  if(in.next()  ==  JsonToken.STRING  ||  in.next()  ==  JsonToken.START)  {  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.next()  ==  JsonToken.STRING  ||  in.next()  ==  JsonToken.START)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.next()  ==  JsonToken.STRING  ||  in.next()  ==  JsonToken.START)  {	  if(in.next()    ==    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
276	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.FIELD_VALUE)  {  [CE]  cannot  find  symbol  FIELD_VALUE  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()!=  JsonToken.FIELD_VALUE)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()!=  JsonToken.FIELD_VALUE)  {	  if(in.peek()!=    JsonToken.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_VALUE	46	None	replace
277	[BUG]  [BUGGY]  if(in.next()!=  JsonToken.STRING  ||  in.next()  ==  JsonToken.NUMBER)  {  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.next()!=  JsonToken.STRING  ||  in.next()  ==  JsonToken.NUMBER)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.next()!=  JsonToken.STRING  ||  in.next()  ==  JsonToken.NUMBER)  {	  if(in.next()!=    JsonToken.STRING    ||    in.next()!=    JsonToken.NUMBER)    {    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
278	[BUG]  [BUGGY]  if(in.next()!=  JsonToken.STRING  &&  in.next()!=  JsonToken.NUMBER)  {  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.next()!=  JsonToken.STRING  &&  in.next()!=  JsonToken.NUMBER)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.next()!=  JsonToken.STRING  &&  in.next()!=  JsonToken.NUMBER)  {	  if(in.next()!=    JsonToken.STRING    ||    in.next()!=    JsonToken.NUMBER)    {    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
279	[BUG]  [BUGGY]  if(in.next()  ==  JsonToken.STRING  ||  in.next()!=  JsonToken.NUMBER)  {  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.next()  ==  JsonToken.STRING  ||  in.next()!=  JsonToken.NUMBER)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.next()  ==  JsonToken.STRING  ||  in.next()!=  JsonToken.NUMBER)  {	  if(in.next()!=    JsonToken.STRING    ||    in.next()!=    JsonToken.NUMBER)    {    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
280	[BUG]  [BUGGY]  if(in.next()  ==  JsonToken.STRING  &&  in.next()!=  JsonToken.NUMBER)  {  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.next()  ==  JsonToken.STRING  &&  in.next()!=  JsonToken.NUMBER)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.next()  ==  JsonToken.STRING  &&  in.next()!=  JsonToken.NUMBER)  {	  if(in.next()!=    JsonToken.STRING    ||    in.next()!=    JsonToken.NUMBER)    {    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
281	[BUG]  [BUGGY]  if(in.getValue()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.NUMBER)  {  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.getValue()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.NUMBER)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.getValue()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.NUMBER)  {	  if(in.next()!=    JsonToken.STRING    ||    in.next()!=    JsonToken.NUMBER)    {    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
282	[BUG]  [BUGGY]  if(in.getType()  ==  JsonToken.STRING  ||  in.next()!=  JsonToken.NUMBER)  {  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.getType()  ==  JsonToken.STRING  ||  in.next()!=  JsonToken.NUMBER)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.getType()  ==  JsonToken.STRING  ||  in.next()!=  JsonToken.NUMBER)  {	  if(in.next()!=    JsonToken.STRING    ||    in.next()!=    JsonToken.NUMBER)    {    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
283	[BUG]  [BUGGY]  String  value  =  in.readUTF();  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  String  value  =  in.readUTF();  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	String  value  =  in.readUTF();	  String    value    =    in.readString();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
284	[BUG]  [BUGGY]  String  value  =  in.readInt();  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  String  value  =  in.readInt();  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	String  value  =  in.readInt();	  String    value    =    in.readString();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
285	[BUG]  [BUGGY]  String  value  =  in.readShort();  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  String  value  =  in.readShort();  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	String  value  =  in.readShort();	  String    value    =    in.readString();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
286	[BUG]  [BUGGY]  String  value  =  in.readFully(this);  [CE]  illegal  start  of  type  [FE]                              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  String  value  =  in.readFully(this);  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	String  value  =  in.readFully(this);	  String    value    =    in.readString();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
287	[BUG]  [BUGGY]  String  value  =  in.readByte();  [CE]  illegal  start  of  type  [FE]                                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  String  value  =  in.readByte();  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	String  value  =  in.readByte();	  String    value    =    in.readString();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
288	[BUG]  [BUGGY]  String  value  =  in.readFully();  [CE]  illegal  start  of  type  [FE]                                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  String  value  =  in.readFully();  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	String  value  =  in.readFully();	  String    value    =    in.readString();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
289	[BUG]  [BUGGY]  if  (in.getType()  ==  JsonToken.STRING  ||  in.nextString().equals(JsonToken.STRING))  {  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if  (in.getType()  ==  JsonToken.STRING  ||  in.nextString().equals(JsonToken.STRING))  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if  (in.getType()  ==  JsonToken.STRING  ||  in.nextString().equals(JsonToken.STRING))  {	  if    (in.nextString()!=    JsonToken.STRING    ||    in.nextString().equals(JsonToken.STRING))    {    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
290	[BUG]  [BUGGY]  safeMultiply(in)  {  throw  new  JsonParseException( " ");  }  [CE]  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  safeMultiply(in)  {  throw  new  JsonParseException( " ");  }  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	safeMultiply(in)  {  throw  new  JsonParseException( " ");  }	  if(in    ==    null)    {    throw    new    JsonParseException(   "   ");    }    	non-compiled	[CE]  	53	None	replace
291	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(this);  [CE]  illegal  start  of  type  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  Thread.currentThread().setContextClassLoader(this);  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	Thread.currentThread().setContextClassLoader(this);	  if(in    ==    null)    {    throw    new    JsonParseException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
292	[BUG]  [BUGGY]  while(in!=  null)  {  throw  new  JsonParseException( " ");  [CE]  unreachable  statement  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  while(in!=  null)  {  throw  new  JsonParseException( " ");  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	while(in!=  null)  {  throw  new  JsonParseException( " ");	  if(in    ==    null)    {    throw    new    JsonParseException(   "   ");    }    	non-compiled	[CE]  unreachable  statement	53	None	replace
293	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  while(in!=  null)  {  in.nextString();  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	add	while(in!=  null)  {  in.nextString();	  if(in    ==    null)    {    throw    new    JsonParseException(   "   ");    }    	compilable	  [FE]  JsonParseException  	53	5	replace
294	[BUG]  [BUGGY]  while(in!=  null)  {  in.nextString();  [FE]  JsonParseException  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  while(in!=  null)  {  in.nextString();  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	while(in!=  null)  {  in.nextString();	  if(in    ==    null)    {    throw    new    JsonParseException(   "   ");    }    	compilable	  [FE]  JsonParseException  	53	5	replace
295	[BUG]  [BUGGY]  if(in!=  null  ||  in.next()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.START)  {  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  ||  in.next()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.START)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=  null  ||  in.next()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.START)  {	  if(in.next()!=    JsonToken.STRING    ||    in.next()!=    JsonToken.START)    {    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
296	[BUG]  [BUGGY]  if(in  ==  null  ||  in.next()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.START)  {  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null  ||  in.next()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.START)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  ==  null  ||  in.next()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.START)  {	  if(in.next()!=    JsonToken.STRING    ||    in.next()!=    JsonToken.START)    {    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
297	[BUG]  [BUGGY]  if(in.currentTimeMillis()  ==  JsonToken.STRING)  {  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.currentTimeMillis()  ==  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.currentTimeMillis()  ==  JsonToken.STRING)  {	  if    (in.peek()    ==    JsonToken.STRING)    {    if    (in.peek()    >=    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
298	[BUG]  [BUGGY]  if(in.currentTimeMillis()  ==  JsonToken.START_ARRAY)  {  [CE]  cannot  find  symbol  [FE]        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.currentTimeMillis()  ==  JsonToken.START_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.currentTimeMillis()  ==  JsonToken.START_ARRAY)  {	  if    (in.peek()    ==    JsonToken.STRING)    {    if    (in.peek()    ==    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
299	[BUG]  [BUGGY]  Class  <?>  dateType  =  in  ==  null?  null  :  in.getClass();  [CE]  illegal  start  of  type  [FE]                              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  Class  <?>  dateType  =  in  ==  null?  null  :  in.getClass();  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	Class  <?>  dateType  =  in  ==  null?  null  :  in.getClass();	  Class    <?>    dateType    =    in.getClass();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
300	[BUG]  [BUGGY]  if(in  ==  null  ||  in.peek()!=  JsonToken.START_ARRAY)  {  [CE]  cannot  find  symbol  START_ARRAY  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null  ||  in.peek()!=  JsonToken.START_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  ==  null  ||  in.peek()!=  JsonToken.START_ARRAY)  {	  if(in    ==    null    ||    in.peek()!=    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  START_ARRAY	3	None	replace
301	[BUG]  [BUGGY]  if(in  ==  null  ||  in.peek()  ==  JsonToken.START_STRING)  {  [CE]  cannot  find  symbol  START_STRING  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null  ||  in.peek()  ==  JsonToken.START_STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  ==  null  ||  in.peek()  ==  JsonToken.START_STRING)  {	  if(in    ==    null    ||    in.peek()    ==    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  START_STRING	60	None	replace
302	[BUG]  [BUGGY]  if(in  ==  null  ||  in.peek()  ==  JsonToken.START_NAME)  {  [CE]  cannot  find  symbol  START_NAME  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null  ||  in.peek()  ==  JsonToken.START_NAME)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  ==  null  ||  in.peek()  ==  JsonToken.START_NAME)  {	  if(in    ==    null    ||    in.peek()    ==    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  START_NAME	60	None	replace
303	[BUG]  [BUGGY]  Date  date  =  enUsFormat.read();  [CE]  illegal  start  of  type  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  Date  date  =  enUsFormat.read();  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	Date  date  =  enUsFormat.read();	  Date    date    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
304	[BUG]  [BUGGY]  Date  date  =  getDate(in.read());  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  Date  date  =  getDate(in.read());  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	Date  date  =  getDate(in.read());	  Date    date    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
305	[BUG]  [BUGGY]  Date  date  =  in.read(false);  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  Date  date  =  in.read(false);  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	Date  date  =  in.read(false);	  Date    date    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
306	[BUG]  [BUGGY]  if(in  ==  null  ||  in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null  ||  in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  ==  null  ||  in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING    ||    in.peek()    ==    JsonToken.END_ARRAY)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	8	None	replace
307	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.START_OBJECT  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  [CE]  cannot  find  symbol  START_OBJECT  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.START_OBJECT  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.START_OBJECT  ||  in.peek()  ==  JsonToken.END_ARRAY)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING    ||    in.peek()    ==    JsonToken.END_ARRAY)    {    	non-compiled	[CE]  cannot  find  symbol  START_OBJECT	8	None	replace
308	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.nextString()  ==  JsonToken.END_ARRAY)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.nextString()  ==  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.nextString()  ==  JsonToken.END_ARRAY)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING    ||    in.peek()    ==    JsonToken.END_ARRAY)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	8	None	replace
309	[BUG]  [BUGGY]  if  (in  ==  null  ||  in.available()!=  JsonToken.STRING)  {  [CE]  cannot  find  symbol  [FE]        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if  (in  ==  null  ||  in.available()!=  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if  (in  ==  null  ||  in.available()!=  JsonToken.STRING)  {	  if    (in    ==    null    ||    in.read()!=    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
310	[BUG]  [BUGGY]  if  (in  ==  null  ||  in.Read()!=  JsonToken.STRING)  {  [CE]  cannot  find  symbol  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if  (in  ==  null  ||  in.Read()!=  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if  (in  ==  null  ||  in.Read()!=  JsonToken.STRING)  {	  if    (in    ==    null    ||    in.read()!=    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
311	[BUG]  [BUGGY]  if  (in  ==  null  ||  in.read()  >=  JsonToken.STRING)  {  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if  (in  ==  null  ||  in.read()  >=  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if  (in  ==  null  ||  in.read()  >=  JsonToken.STRING)  {	  if    (in    ==    null    ||    in.read()!=    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
312	[BUG]  [BUGGY]  if  (in.nextString()!=  JsonToken.START_STRING)  {  [CE]  cannot  find  symbol  START_STRING  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if  (in.nextString()!=  JsonToken.START_STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if  (in.nextString()!=  JsonToken.START_STRING)  {	  if    (in.nextString()!=    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  START_STRING	40	None	replace
313	[BUG]  [BUGGY]  if  (in.nextString()!=  JsonToken.VALUE_STRING  ||  in.nextString()!=  JsonToken.END_ARRAY)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if  (in.nextString()!=  JsonToken.VALUE_STRING  ||  in.nextString()!=  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if  (in.nextString()!=  JsonToken.VALUE_STRING  ||  in.nextString()!=  JsonToken.END_ARRAY)  {	  if    (in.nextString()!=    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	40	None	replace
314	[BUG]  [BUGGY]  if(in  ==  null)  {  if(in  ==  null)  <  throw  new  JsonParseException( "The  date  should  be  a  string  value   ");  [CE]  illegal  start  of  type  [FE]    IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null)  {  if(in  ==  null)  <  throw  new  JsonParseException( "The  date  should  be  a  string  value   ");  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in    ==    null)    {    if(in  ==  null)  <  throw  new  JsonParseException( "The  date  should  be  a  string  value   ");	  	non-compiled	[CE]  illegal  start  of  type	72	None	add
315	[BUG]  [BUGGY]  if(in  ==  null)  {  if(in  ==  null)  throw  new  JsonParseException( "The  date  should  be  a  string  value   ");  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null)  {  if(in  ==  null)  throw  new  JsonParseException( "The  date  should  be  a  string  value   ");  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in    ==    null)    {    if(in  ==  null)  throw  new  JsonParseException( "The  date  should  be  a  string  value   ");	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
316	[BUG]  [BUGGY]  if(in  ==  null)  {  if(in  ==  null  ||  new  JsonParseException( "The  date  should  be  a  string  value   ");  [CE]  [FE]        IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null)  {  if(in  ==  null  ||  new  JsonParseException( "The  date  should  be  a  string  value   ");  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in    ==    null)    {    if(in  ==  null  ||  new  JsonParseException( "The  date  should  be  a  string  value   ");	  	non-compiled	[CE]  	72	None	add
317	[BUG]  [BUGGY]  if(in  ==  null)  {  if(in  ==  null  ||  in  ==  null)  {  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null)  {  if(in  ==  null  ||  in  ==  null)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in    ==    null)    {    if(in  ==  null  ||  in  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
318	[BUG]  [BUGGY]  if(in  ==  null)  {  if(in  ==  null  ||   " ".equals(in.getClass()))  {  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null)  {  if(in  ==  null  ||   " ".equals(in.getClass()))  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in    ==    null)    {    if(in  ==  null  ||   " ".equals(in.getClass()))  {	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
319	[BUG]  [BUGGY]  if(in  ==  null)  {  if(in  ==  null  ||   " ".equals(in.getString()))  {  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null)  {  if(in  ==  null  ||   " ".equals(in.getString()))  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in    ==    null)    {    if(in  ==  null  ||   " ".equals(in.getString()))  {	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
320	[BUG]  [BUGGY]  if(in  ==  null)  {  if(in  ==  null  ||   " ".equals(in.getLocalFile()))  {  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null)  {  if(in  ==  null  ||   " ".equals(in.getLocalFile()))  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in    ==    null)    {    if(in  ==  null  ||   " ".equals(in.getLocalFile()))  {	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
321	[BUG]  [BUGGY]  if(in!=  null  ||  in.next()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.VALUE_STRING)  {  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  ||  in.next()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.VALUE_STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=  null  ||  in.next()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.VALUE_STRING)  {	  if(in.next()!=    JsonToken.STRING    ||    in.next()!=    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
322	[BUG]  [BUGGY]  if(in  ==  null  ||  in.next()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.VALUE_STRING)  {  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null  ||  in.next()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.VALUE_STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  ==  null  ||  in.next()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.VALUE_STRING)  {	  if(in.next()!=    JsonToken.STRING    ||    in.next()!=    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
323	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(getClass().getClassLoader());  [CE]  illegal  start  of  type  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  Thread.currentThread().setContextClassLoader(getClass().getClassLoader());  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	Thread.currentThread().setContextClassLoader(getClass().getClassLoader());	  if(in    ==    null)    {    throw    new    JsonParseException(   "The    date    should    be    a    string    value   ");    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
324	[BUG]  [BUGGY]  Thread.currentThread().setMillis(in);  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  Thread.currentThread().setMillis(in);  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	Thread.currentThread().setMillis(in);	  if(in    ==    null)    {    throw    new    JsonParseException(   "The    date    should    be    a    string    value   ");    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
325	[BUG]  [BUGGY]  nested  =  new  LinkedHashMap  <  String,Object>();  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  nested  =  new  LinkedHashMap  <  String,Object>();  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	nested  =  new  LinkedHashMap  <  String,Object>();	  if(in    ==    null)    {    throw    new    JsonParseException(   "The    date    should    be    a    string    value   ");    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
326	[BUG]  [BUGGY]  Thread.currentThread().setMillis(getClass().getName());  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  Thread.currentThread().setMillis(getClass().getName());  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	Thread.currentThread().setMillis(getClass().getName());	  if(in    ==    null)    {    throw    new    JsonParseException(   "The    date    should    be    a    string    value   ");    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
327	[BUG]  [BUGGY]  Thread.currentThread().setMillis(getChronology().withLocalMillis());  [CE]  illegal  start  of  type  [FE]                              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  Thread.currentThread().setMillis(getChronology().withLocalMillis());  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	Thread.currentThread().setMillis(getChronology().withLocalMillis());	  if(in    ==    null)    {    throw    new    JsonParseException(   "The    date    should    be    a    string    value   ");    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
328	[BUG]  [BUGGY]  if  (in  ==  null  ||  in.getValue()!=  JsonToken.STRING)  {  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if  (in  ==  null  ||  in.getValue()!=  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if  (in  ==  null  ||  in.getValue()!=  JsonToken.STRING)  {	  if    (in    ==    null    ||    in.next()!=    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
329	[BUG]  [BUGGY]  if  (in  ==  null  ||  in.getType()!=  JsonToken.STRING)  {  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if  (in  ==  null  ||  in.getType()!=  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if  (in  ==  null  ||  in.getType()!=  JsonToken.STRING)  {	  if    (in    ==    null    ||    in.next()!=    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
330	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.START_STRING  ||  in.peek()  ==  JsonToken.START_OBJECT)  {  [CE]  cannot  find  symbol  START_STRING  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.START_STRING  ||  in.peek()  ==  JsonToken.START_OBJECT)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.START_STRING  ||  in.peek()  ==  JsonToken.START_OBJECT)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING    ||    in.peek()    ==    JsonToken.START_OBJECT)    {    	non-compiled	[CE]  cannot  find  symbol  START_STRING	9	None	replace
331	[BUG]  [BUGGY]  if(in  ==  null  ||  in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.START_OBJECT)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null  ||  in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.START_OBJECT)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  ==  null  ||  in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.START_OBJECT)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING    ||    in.peek()    ==    JsonToken.START_OBJECT)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	9	None	replace
332	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null  ||  in  ==  null)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	add	if(in  ==  null  ||  in  ==  null)  {	  if(in    ==    null)    {    	compilable	  [FE]  IllegalStateException  	73	1	replace
333	[BUG]  [BUGGY]  if(in  ==  null  ||  in  ==  null)  {  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null  ||  in  ==  null)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  ==  null  ||  in  ==  null)  {	  if(in    ==    null)    {    	compilable	  [FE]  IllegalStateException  	73	1	replace
334	[BUG]  [BUGGY]  if(in  ==  null  ||  in  ==  JsonNull.class)  {  [CE]  incomparable  types:  JsonReader  and  Class<JsonNull>  [FE]      IllegalStateException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null  ||  in  ==  JsonNull.class)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  ==  null  ||  in  ==  JsonNull.class)  {	  if(in    ==    null)    {    	non-compiled	[CE]  incomparable  types:  JsonReader  and  Class<JsonNull>	73	None	replace
335	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.START_STRING  ||  in.peek()!=  JsonToken.START_OBJECT)  {  [CE]  cannot  find  symbol  START_STRING  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()!=  JsonToken.START_STRING  ||  in.peek()!=  JsonToken.START_OBJECT)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()!=  JsonToken.START_STRING  ||  in.peek()!=  JsonToken.START_OBJECT)  {	  if(in.peek()!=    JsonToken.VALUE_STRING    ||    in.peek()!=    JsonToken.START_OBJECT)    {    	non-compiled	[CE]  cannot  find  symbol  START_STRING	45	None	replace
336	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.STRING  ||  in.peek()!=  JsonToken.START_OBJECT)  {  [CE]  cannot  find  symbol  START_OBJECT  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()!=  JsonToken.STRING  ||  in.peek()!=  JsonToken.START_OBJECT)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()!=  JsonToken.STRING  ||  in.peek()!=  JsonToken.START_OBJECT)  {	  if(in.peek()!=    JsonToken.VALUE_STRING    ||    in.peek()!=    JsonToken.START_OBJECT)    {    	non-compiled	[CE]  cannot  find  symbol  START_OBJECT	45	None	replace
337	[BUG]  [BUGGY]  if(in  ==  null  ||  in.next()  ==  JsonToken.STRING)  {  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null  ||  in.next()  ==  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  ==  null  ||  in.next()  ==  JsonToken.STRING)  {	  if(in.next()    ==    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
338	[BUG]  [BUGGY]  if(in  ==  null  ||  in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.FIELD_NAME)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null  ||  in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  ==  null  ||  in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.FIELD_NAME)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING    ||    in.peek()    ==    JsonToken.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	10	None	replace
339	[BUG]  [BUGGY]  if(in!=  null  ||  in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.FIELD_NAME)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  ||  in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=  null  ||  in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.FIELD_NAME)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING    ||    in.peek()    ==    JsonToken.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	10	None	replace
340	[BUG]  [BUGGY]  if(in!=  null)  {  if(Integer.parseInt(in.nextString())  ==  JsonToken.STRING)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null)  {  if(Integer.parseInt(in.nextString())  ==  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=  null)  {  if(Integer.parseInt(in.nextString())  ==  JsonToken.STRING)  {	  if    (in.peek()    ==    JsonToken.STRING)    {    if    (Integer.peek()    ==    JsonToken.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
341	[BUG]  [BUGGY]  if(in  ==  null)  {  if(Integer.parseInt(in.nextString())  ==  JsonToken.STRING)  {  [CE]  illegal  start  of  expression  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null)  {  if(Integer.parseInt(in.nextString())  ==  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  ==  null)  {  if(Integer.parseInt(in.nextString())  ==  JsonToken.STRING)  {	  if    (in.peek()    ==    JsonToken.STRING)    {    if    (Integer.peek()    ==    JsonToken.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
342	[BUG]  [BUGGY]  if(in!=  null  ||  in.peek()  ==  JsonToken.VALUE_STRING  ||  in.nextString()  ==  JsonToken.VALUE_STRING)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  ||  in.peek()  ==  JsonToken.VALUE_STRING  ||  in.nextString()  ==  JsonToken.VALUE_STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=  null  ||  in.peek()  ==  JsonToken.VALUE_STRING  ||  in.nextString()  ==  JsonToken.VALUE_STRING)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING    ||    in.nextString()    ==    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	12	None	replace
343	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.START_NAME  ||  in.nextString()  ==  JsonToken.VALUE_STRING)  {  [CE]  cannot  find  symbol  START_NAME  [FE]                              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.START_NAME  ||  in.nextString()  ==  JsonToken.VALUE_STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.START_NAME  ||  in.nextString()  ==  JsonToken.VALUE_STRING)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING    ||    in.nextString()    ==    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  START_NAME	12	None	replace
344	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.STRING  ||  in.nextString()  ==  JsonToken.VALUE_STRING)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.STRING  ||  in.nextString()  ==  JsonToken.VALUE_STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.STRING  ||  in.nextString()  ==  JsonToken.VALUE_STRING)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING    ||    in.nextString()    ==    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	12	None	replace
345	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "This  date  should  be  a  string  value ");  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "This  date  should  be  a  string  value ");  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	JsonParseException  in  =  new  JsonParseException( "This  date  should  be  a  string  value ");	  JsonParseException    in    =    new    JsonParseException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
346	[BUG]  [BUGGY]  if(in!=  null  ||  in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.VALUE_STRING)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  ||  in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.VALUE_STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=  null  ||  in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.VALUE_STRING)  {	  if(in.peek()!=    JsonToken.VALUE_STRING    ||    in.peek()!=    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	42	None	replace
347	[BUG]  [BUGGY]  if(in  ==  null  ||  in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.VALUE_STRING)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null  ||  in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.VALUE_STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  ==  null  ||  in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.VALUE_STRING)  {	  if(in.peek()!=    JsonToken.VALUE_STRING    ||    in.peek()!=    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	42	None	replace
348	[BUG]  [BUGGY]  if(in!=  null  ||  in.next()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.NUMBER)  {  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  ||  in.next()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.NUMBER)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=  null  ||  in.next()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.NUMBER)  {	  if(in.next()!=    JsonToken.STRING    ||    in.next()!=    JsonToken.NUMBER)    {    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
349	[BUG]  [BUGGY]  if(in  ==  null  ||  in.next()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.NUMBER)  {  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null  ||  in.next()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.NUMBER)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  ==  null  ||  in.next()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.NUMBER)  {	  if(in.next()!=    JsonToken.STRING    ||    in.next()!=    JsonToken.NUMBER)    {    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
350	[BUG]  [BUGGY]  if(in.next()!=  JsonToken.STRING  ||  in.getValue()!=  JsonToken.NUMBER)  {  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.next()!=  JsonToken.STRING  ||  in.getValue()!=  JsonToken.NUMBER)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.next()!=  JsonToken.STRING  ||  in.getValue()!=  JsonToken.NUMBER)  {	  if(in.next()!=    JsonToken.STRING    ||    in.next()!=    JsonToken.NUMBER)    {    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
351	[BUG]  [BUGGY]  if  (in.nextString()  ==  JsonToken.STRING  ||  in.nextString()  ==  JsonToken.END_ARRAY)  {  [CE]  incomparable  types:  String  and  JsonToken  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if  (in.nextString()  ==  JsonToken.STRING  ||  in.nextString()  ==  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if  (in.nextString()  ==  JsonToken.STRING  ||  in.nextString()  ==  JsonToken.END_ARRAY)  {	  if    (in.nextString()    ==    JsonToken.STRING)    {    	non-compiled	[CE]  incomparable  types:  String  and  JsonToken	39	None	replace
352	[BUG]  [BUGGY]  if(in!=  null  ||  in.next()!=  JsonToken.STRING  ||  in.nextString()!=  JsonToken.END_ARRAY)  {  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  ||  in.next()!=  JsonToken.STRING  ||  in.nextString()!=  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=  null  ||  in.next()!=  JsonToken.STRING  ||  in.nextString()!=  JsonToken.END_ARRAY)  {	  if(in.next()!=    JsonToken.STRING    ||    in.nextString()!=    JsonToken.END_ARRAY)    {    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
353	[BUG]  [BUGGY]  if(in  ==  null  ||  in.next()!=  JsonToken.STRING  ||  in.nextString()!=  JsonToken.END_ARRAY)  {  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null  ||  in.next()!=  JsonToken.STRING  ||  in.nextString()!=  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  ==  null  ||  in.next()!=  JsonToken.STRING  ||  in.nextString()!=  JsonToken.END_ARRAY)  {	  if(in.next()!=    JsonToken.STRING    ||    in.nextString()!=    JsonToken.END_ARRAY)    {    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
354	[BUG]  [BUGGY]  if(in.next()!=  JsonToken.STRING  ||  in.nextString()!=  JsonToken.END_OBJECT)  {  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.next()!=  JsonToken.STRING  ||  in.nextString()!=  JsonToken.END_OBJECT)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.next()!=  JsonToken.STRING  ||  in.nextString()!=  JsonToken.END_OBJECT)  {	  if(in.next()!=    JsonToken.STRING    ||    in.nextString()!=    JsonToken.END_ARRAY)    {    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
355	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null  ||  in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	add	if(in  ==  null  ||  in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {	  if(in.peek()    ==    JsonToken.STRING    ||    in.peek()    ==    JsonToken.END_ARRAY)    {    	compilable	  [FE]  JsonParseException  	16	5	replace
356	[BUG]  [BUGGY]  if(in  ==  null  ||  in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null  ||  in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  ==  null  ||  in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {	  if(in.peek()    ==    JsonToken.STRING    ||    in.peek()    ==    JsonToken.END_ARRAY)    {    	compilable	  [FE]  JsonParseException  	16	5	replace
357	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  ||  in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	add	if(in!=  null  ||  in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {	  if(in.peek()    ==    JsonToken.STRING    ||    in.peek()    ==    JsonToken.END_ARRAY)    {    	compilable	  [FE]  JsonParseException  	16	6	replace
358	[BUG]  [BUGGY]  if(in!=  null  ||  in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  ||  in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=  null  ||  in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {	  if(in.peek()    ==    JsonToken.STRING    ||    in.peek()    ==    JsonToken.END_ARRAY)    {    	compilable	  [FE]  JsonParseException  	16	6	replace
359	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]        JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_OBJECT)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	add	if(in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_OBJECT)  {	  if(in.peek()    ==    JsonToken.STRING    ||    in.peek()    ==    JsonToken.END_ARRAY)    {    	compilable	  [FE]  JsonParseException  	16	5	replace
360	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_OBJECT)  {  [FE]  JsonParseException  [FE]        JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_OBJECT)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_OBJECT)  {	  if(in.peek()    ==    JsonToken.STRING    ||    in.peek()    ==    JsonToken.END_ARRAY)    {    	compilable	  [FE]  JsonParseException  	16	5	replace
361	[BUG]  [BUGGY]  if(in.currentTimeMillis()!=  JsonToken.STRING  ||  in.nextString()!=  JsonToken.END_ARRAY)  {  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.currentTimeMillis()!=  JsonToken.STRING  ||  in.nextString()!=  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.currentTimeMillis()!=  JsonToken.STRING  ||  in.nextString()!=  JsonToken.END_ARRAY)  {	  if(in.nextString()!=    JsonToken.STRING    ||    in.nextString()!=    JsonToken.END_ARRAY)    {    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
362	[BUG]  [BUGGY]  if(in  ==  null  ||  in.nextString()  ==  JsonToken.STRING)  {  [CE]  incomparable  types:  String  and  JsonToken  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null  ||  in.nextString()  ==  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  ==  null  ||  in.nextString()  ==  JsonToken.STRING)  {	  if(in!=    null    ||    in.peek()    ==    JsonToken.STRING)    {    	non-compiled	[CE]  incomparable  types:  String  and  JsonToken	6	None	replace
363	[BUG]  [BUGGY]  if(in  ==  null  ||  in.parse(in)  ==  JsonToken.STRING)  {  [CE]  cannot  find  symbol  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null  ||  in.parse(in)  ==  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  ==  null  ||  in.parse(in)  ==  JsonToken.STRING)  {	  if(in!=    null    ||    in.peek()    ==    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
364	[BUG]  [BUGGY]  String  value  =  in.readString(this.datePattern);  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  String  value  =  in.readString(this.datePattern);  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	String  value  =  in.readString(this.datePattern);	  String    value    =    in.readString();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
365	[BUG]  [BUGGY]  String  value  =  in.readString( "UTF-8 ");  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  String  value  =  in.readString( "UTF-8 ");  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	String  value  =  in.readString( "UTF-8 ");	  String    value    =    in.readString();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
366	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.VALUE_NUMBER_STRING)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.VALUE_NUMBER_STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.VALUE_NUMBER_STRING)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING    ||    in.peek()    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	11	None	replace
367	[BUG]  [BUGGY]  in.setMillis(in.getMillis());  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  in.setMillis(in.getMillis());  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	in.setMillis(in.getMillis());	  in.defaultReader();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
368	[BUG]  [BUGGY]  DefaultDateTypeAdapter.class.setSimpleName(in.read());  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  DefaultDateTypeAdapter.class.setSimpleName(in.read());  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	DefaultDateTypeAdapter.class.setSimpleName(in.read());	  DefaultDateTypeAdapter.class.getSimpleName();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
369	[BUG]  [BUGGY]  DefaultDateTypeAdapter.class.setSimpleName(simpleName);  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  DefaultDateTypeAdapter.class.setSimpleName(simpleName);  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	DefaultDateTypeAdapter.class.setSimpleName(simpleName);	  DefaultDateTypeAdapter.class.getSimpleName();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
370	[BUG]  [BUGGY]  Class  <?>  dateType  =  in.readUTF();  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  Class  <?>  dateType  =  in.readUTF();  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	Class  <?>  dateType  =  in.readUTF();	  Class    <?>    dateType    =    in.readClass();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
371	[BUG]  [BUGGY]  Class  <?>  dateType  =  in.readObject();  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  Class  <?>  dateType  =  in.readObject();  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	Class  <?>  dateType  =  in.readObject();	  Class    <?>    dateType    =    in.readClass();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
372	[BUG]  [BUGGY]  if(in  ==  null)  {  If  (in.peek()  ==  JsonToken.STRING)  {  [CE]  ';'  expected  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null)  {  If  (in.peek()  ==  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  ==  null)  {  If  (in.peek()  ==  JsonToken.STRING)  {	  if    (in.peek()    ==    JsonToken.STRING)    {    If    (in.peek()    ==    JsonToken.STRING)    {    	non-compiled	[CE]  ';'  expected	26	None	replace
373	[BUG]  [BUGGY]  if(in!=  null)  {  If  (in.peek()  ==  JsonToken.STRING)  {  [CE]  ';'  expected  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null)  {  If  (in.peek()  ==  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=  null)  {  If  (in.peek()  ==  JsonToken.STRING)  {	  if    (in.peek()    ==    JsonToken.STRING)    {    If    (in.peek()    ==    JsonToken.STRING)    {    	non-compiled	[CE]  ';'  expected	26	None	replace
374	[BUG]  [BUGGY]  if(in!=  null  &&  in.nextString()!=  JsonToken.STRING)  {  [CE]  incomparable  types:  String  and  JsonToken  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  &&  in.nextString()!=  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=  null  &&  in.nextString()!=  JsonToken.STRING)  {	  if(in!=    null    &&    in.peek()!=    JsonToken.STRING)    {    	non-compiled	[CE]  incomparable  types:  String  and  JsonToken	71	None	replace
375	[BUG]  [BUGGY]  if(in!=  null  ||  in.peek()  ==  JsonToken.START_STRING)  {  [CE]  cannot  find  symbol  START_STRING  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  ||  in.peek()  ==  JsonToken.START_STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=  null  ||  in.peek()  ==  JsonToken.START_STRING)  {	  if(in!=    null    ||    in.peek()    ==    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  START_STRING	61	None	replace
376	[BUG]  [BUGGY]  if(in!=  null  ||  in.peek()  ==  JsonToken.START_ARRAY)  {  [CE]  cannot  find  symbol  START_ARRAY  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  ||  in.peek()  ==  JsonToken.START_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=  null  ||  in.peek()  ==  JsonToken.START_ARRAY)  {	  if(in!=    null    ||    in.peek()    ==    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  START_ARRAY	61	None	replace
377	[BUG]  [BUGGY]  if(in!=  null  ||  in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.FIELD_NAME)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  ||  in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.FIELD_NAME)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=  null  ||  in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.FIELD_NAME)  {	  if(in.peek()!=    JsonToken.VALUE_STRING    ||    in.peek()!=    JsonToken.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	43	None	replace
378	[BUG]  [BUGGY]  if(in  ==  null  ||  in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.FIELD_NAME)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null  ||  in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.FIELD_NAME)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  ==  null  ||  in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.FIELD_NAME)  {	  if(in.peek()!=    JsonToken.VALUE_STRING    ||    in.peek()!=    JsonToken.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	43	None	replace
379	[BUG]  [BUGGY]  if(in  ==  null  ||  in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.VALUE_STRING)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null  ||  in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.VALUE_STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  ==  null  ||  in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.VALUE_STRING)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING    ||    in.peek()    ==    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	7	None	replace
380	[BUG]  [BUGGY]  if(in!=  null  ||  in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.VALUE_STRING)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  ||  in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.VALUE_STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=  null  ||  in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.VALUE_STRING)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING    ||    in.peek()    ==    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	7	None	replace
381	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.END_STRING)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.END_STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.END_STRING)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING    ||    in.peek()    ==    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	7	None	replace
382	[BUG]  [BUGGY]  if  (in  ==  null  ||  in.read()  ==  JsonToken.STRING)  {  [CE]  cannot  find  symbol  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if  (in  ==  null  ||  in.read()  ==  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if  (in  ==  null  ||  in.read()  ==  JsonToken.STRING)  {	  if    (in    ==    null    ||    in.peek()    ==    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
383	[BUG]  [BUGGY]  if(in!=  null  ||  in.next()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.END)  {  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  ||  in.next()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.END)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=  null  ||  in.next()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.END)  {	  if(in.next()!=    JsonToken.STRING    ||    in.next()!=    JsonToken.END)    {    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
384	[BUG]  [BUGGY]  if(in  ==  null  ||  in.next()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.END)  {  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null  ||  in.next()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.END)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  ==  null  ||  in.next()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.END)  {	  if(in.next()!=    JsonToken.STRING    ||    in.next()!=    JsonToken.END)    {    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
385	[BUG]  [BUGGY]  if(in.next()!=  JsonToken.STRING  ||  in.getValue()!=  JsonToken.END)  {  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.next()!=  JsonToken.STRING  ||  in.getValue()!=  JsonToken.END)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.next()!=  JsonToken.STRING  ||  in.getValue()!=  JsonToken.END)  {	  if(in.next()!=    JsonToken.STRING    ||    in.next()!=    JsonToken.END)    {    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
386	[BUG]  [BUGGY]  if  (in  ==  null  ||  in.peek()  ==  JsonToken.STRING)  {  if  (long  ==  null  ||  in.peek()  ==  JsonToken.STRING)  {  [CE]  '.class'  expected  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if  (in  ==  null  ||  in.peek()  ==  JsonToken.STRING)  {  if  (long  ==  null  ||  in.peek()  ==  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if    (in    ==    null    ||    in.peek()    ==    JsonToken.STRING)    {    if  (long  ==  null  ||  in.peek()  ==  JsonToken.STRING)  {	  	non-compiled	[CE]  '.class'  expected	1	None	add
387	[BUG]  [BUGGY]  Date  value  =  in.read(in);  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  Date  value  =  in.read(in);  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	Date  value  =  in.read(in);	  Date    value    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
388	[BUG]  [BUGGY]  Date  value  =  in.readFully(this);  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  Date  value  =  in.readFully(this);  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	Date  value  =  in.readFully(this);	  Date    value    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
389	[BUG]  [BUGGY]  if(in!=  null  ||  in.next()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.END_ARRAY)  {  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  ||  in.next()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=  null  ||  in.next()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.END_ARRAY)  {	  if(in.next()!=    JsonToken.STRING    ||    in.next()!=    JsonToken.END_ARRAY)    {    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
390	[BUG]  [BUGGY]  if(in  ==  null  ||  in.next()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.END_ARRAY)  {  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null  ||  in.next()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  ==  null  ||  in.next()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.END_ARRAY)  {	  if(in.next()!=    JsonToken.STRING    ||    in.next()!=    JsonToken.END_ARRAY)    {    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
391	[BUG]  [BUGGY]  if(in.getString()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.END_ARRAY)  {  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.getString()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.getString()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.END_ARRAY)  {	  if(in.next()!=    JsonToken.STRING    ||    in.next()!=    JsonToken.END_ARRAY)    {    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
392	[BUG]  [BUGGY]  if  (in!=  null  ||  in.hasNext()  ||  in.nextString()!=  JsonToken.STRING)  {  [CE]  incomparable  types:  String  and  JsonToken  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if  (in!=  null  ||  in.hasNext()  ||  in.nextString()!=  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if  (in!=  null  ||  in.hasNext()  ||  in.nextString()!=  JsonToken.STRING)  {	  if    (in.hasNext()    ||    in.nextString()!=    JsonToken.STRING)    {    	non-compiled	[CE]  incomparable  types:  String  and  JsonToken	58	None	replace
393	[BUG]  [BUGGY]  if  (in  ==  null  ||  in.hasNext()  ||  in.nextString()!=  JsonToken.STRING)  {  [CE]  incomparable  types:  String  and  JsonToken  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if  (in  ==  null  ||  in.hasNext()  ||  in.nextString()!=  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if  (in  ==  null  ||  in.hasNext()  ||  in.nextString()!=  JsonToken.STRING)  {	  if    (in.hasNext()    ||    in.nextString()!=    JsonToken.STRING)    {    	non-compiled	[CE]  incomparable  types:  String  and  JsonToken	58	None	replace
394	[BUG]  [BUGGY]  if(in  ==  null  ||  in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.START_ARRAY)  {  [CE]  cannot  find  symbol  START_ARRAY  [FE]        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null  ||  in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.START_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  ==  null  ||  in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.START_ARRAY)  {	  if(in.peek()    ==    JsonToken.STRING    ||    in.peek()    ==    JsonToken.START_ARRAY)    {    	non-compiled	[CE]  cannot  find  symbol  START_ARRAY	77	None	replace
395	[BUG]  [BUGGY]  if(in!=  null  ||  in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.START_ARRAY)  {  [CE]  cannot  find  symbol  START_ARRAY  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  ||  in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.START_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=  null  ||  in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.START_ARRAY)  {	  if(in.peek()    ==    JsonToken.STRING    ||    in.peek()    ==    JsonToken.START_ARRAY)    {    	non-compiled	[CE]  cannot  find  symbol  START_ARRAY	77	None	replace
396	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  if(in.next()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  if(in.next()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()    ==    JsonToken.STRING    ||    in.peek()    ==    JsonToken.END_ARRAY)    {    if(in.next()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
397	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  if(in.parse()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  if(in.parse()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()    ==    JsonToken.STRING    ||    in.peek()    ==    JsonToken.END_ARRAY)    {    if(in.parse()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
398	[BUG]  [BUGGY]  if(in!=  null  ||  in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.END_ARRAY)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  ||  in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=  null  ||  in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.END_ARRAY)  {	  if(in.peek()!=    JsonToken.VALUE_STRING    ||    in.peek()!=    JsonToken.END_ARRAY)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	44	None	replace
399	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.START_OBJECT  ||  in.peek()!=  JsonToken.END_ARRAY)  {  [CE]  cannot  find  symbol  START_OBJECT  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()!=  JsonToken.START_OBJECT  ||  in.peek()!=  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()!=  JsonToken.START_OBJECT  ||  in.peek()!=  JsonToken.END_ARRAY)  {	  if(in.peek()!=    JsonToken.VALUE_STRING    ||    in.peek()!=    JsonToken.END_ARRAY)    {    	non-compiled	[CE]  cannot  find  symbol  START_OBJECT	44	None	replace
400	[BUG]  [BUGGY]  if(in!=  null  ||  in.peek()!=  JsonToken.START_OBJECT)  {  [CE]  cannot  find  symbol  START_OBJECT  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  ||  in.peek()!=  JsonToken.START_OBJECT)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=  null  ||  in.peek()!=  JsonToken.START_OBJECT)  {	  if(in!=    null    ||    in.peek()!=    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  START_OBJECT	64	None	replace
401	[BUG]  [BUGGY]  if(in!=  null  ||  in.peek()!=  JsonToken.START_STRING)  {  [CE]  cannot  find  symbol  START_STRING  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  ||  in.peek()!=  JsonToken.START_STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=  null  ||  in.peek()!=  JsonToken.START_STRING)  {	  if(in!=    null    ||    in.peek()!=    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  START_STRING	64	None	replace
402	[BUG]  [BUGGY]  if(in!=  null  ||  in.peek()!=  JsonToken.START_ARRAY)  {  [CE]  cannot  find  symbol  START_ARRAY  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  ||  in.peek()!=  JsonToken.START_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=  null  ||  in.peek()!=  JsonToken.START_ARRAY)  {	  if(in!=    null    ||    in.peek()!=    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  START_ARRAY	64	None	replace
403	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_NAME  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  [CE]  cannot  find  symbol  VALUE_NAME  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_NAME  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.VALUE_NAME  ||  in.peek()  ==  JsonToken.END_ARRAY)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING    ||    in.peek()    ==    JsonToken.END_ARRAY)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_NAME	8	None	replace
404	[BUG]  [BUGGY]  Date  <?>  dateType  =  in.read();  [CE]  illegal  start  of  type  [FE]                              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  Date  <?>  dateType  =  in.read();  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	Date  <?>  dateType  =  in.read();	  Class    <?>    dateType    =    in.getClass();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
405	[BUG]  [BUGGY]  Date  <?>  dateType  =  in.getClass();  [CE]  illegal  start  of  type  [FE]                                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  Date  <?>  dateType  =  in.getClass();  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	Date  <?>  dateType  =  in.getClass();	  Class    <?>    dateType    =    in.getClass();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
406	[BUG]  [BUGGY]  if(in.getKey()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.END_ARRAY)  {  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.getKey()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.getKey()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.END_ARRAY)  {	  if(in.next()!=    JsonToken.STRING    ||    in.next()!=    JsonToken.END_ARRAY)    {    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
407	[BUG]  [BUGGY]  if(in.hasNext()  ||  in.nextString()!=  JsonToken.VALUE_STRING)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.hasNext()  ||  in.nextString()!=  JsonToken.VALUE_STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.hasNext()  ||  in.nextString()!=  JsonToken.VALUE_STRING)  {	  if    (in.hasNext()    ||    in.nextString()!=    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	58	None	replace
408	[BUG]  [BUGGY]  if(in.hasNext()  ||  in.nextString()!=  JsonToken.STRING_NAME)  {  [CE]  cannot  find  symbol  STRING_NAME  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.hasNext()  ||  in.nextString()!=  JsonToken.STRING_NAME)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.hasNext()  ||  in.nextString()!=  JsonToken.STRING_NAME)  {	  if    (in.hasNext()    ||    in.nextString()!=    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol  STRING_NAME	58	None	replace
409	[BUG]  [BUGGY]  String  value  =  in.readBytes( "UTF-8 ");  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  String  value  =  in.readBytes( "UTF-8 ");  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	String  value  =  in.readBytes( "UTF-8 ");	  String    value    =    in.readString();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
410	[BUG]  [BUGGY]  String  value  =  in.readEscapedString();  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  String  value  =  in.readEscapedString();  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	String  value  =  in.readEscapedString();	  String    value    =    in.readString();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
411	[BUG]  [BUGGY]  String  value  =  in.readLine();  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  String  value  =  in.readLine();  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	String  value  =  in.readLine();	  String    value    =    in.readString();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
412	[BUG]  [BUGGY]  if(in.currentTimeMillis()  ==  JsonToken.VALUE_STRING)  {  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.currentTimeMillis()  ==  JsonToken.VALUE_STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.currentTimeMillis()  ==  JsonToken.VALUE_STRING)  {	  if    (in.peek()    ==    JsonToken.STRING)    {    If    (in.peek()    ==    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
413	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.VALUE_STRING,  in.peek()!=  JsonToken.VALUE_STRING)  {  [CE]  ')'  expected  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()!=  JsonToken.VALUE_STRING,  in.peek()!=  JsonToken.VALUE_STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()!=  JsonToken.VALUE_STRING,  in.peek()!=  JsonToken.VALUE_STRING)  {	  if(in.peek()!=    JsonToken.VALUE_STRING    ||    in.peek()!=    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  ')'  expected	42	None	replace
414	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.VALUE_NUMBER)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.VALUE_NUMBER)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.VALUE_NUMBER)  {	  if(in.peek()!=    JsonToken.VALUE_STRING    ||    in.peek()!=    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	42	None	replace
415	[BUG]  [BUGGY]  DefaultDateTypeAdapter.class.getSimpleName(),  in);  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  DefaultDateTypeAdapter.class.getSimpleName(),  in);  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	DefaultDateTypeAdapter.class.getSimpleName(),  in);	  DefaultDateTypeAdapter.class.getSimpleName();    	non-compiled	[CE]  ';'  expected	20	None	replace
416	[BUG]  [BUGGY]  DefaultDateTypeAdapter.class.reset();  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  DefaultDateTypeAdapter.class.reset();  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	DefaultDateTypeAdapter.class.reset();	  DefaultDateTypeAdapter.class.getSimpleName();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
417	[BUG]  [BUGGY]  DefaultDateTypeAdapter.class.setSimpleName(in.getPattern());  [CE]  illegal  start  of  type  [FE]                              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  DefaultDateTypeAdapter.class.setSimpleName(in.getPattern());  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	DefaultDateTypeAdapter.class.setSimpleName(in.getPattern());	  DefaultDateTypeAdapter.class.getSimpleName();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
418	[BUG]  [BUGGY]  if(in.next()!=  JsonToken.STRING  ||  in.nextString()!=  JsonToken.START)  {  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.next()!=  JsonToken.STRING  ||  in.nextString()!=  JsonToken.START)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.next()!=  JsonToken.STRING  ||  in.nextString()!=  JsonToken.START)  {	  if(in.next()!=    JsonToken.STRING    ||    in.next()!=    JsonToken.START)    {    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
419	[BUG]  [BUGGY]  if(in.getKey()!=  JsonToken.STRING  ||  in.nextString()!=  JsonToken.END_ARRAY)  {  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.getKey()!=  JsonToken.STRING  ||  in.nextString()!=  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.getKey()!=  JsonToken.STRING  ||  in.nextString()!=  JsonToken.END_ARRAY)  {	  if(in.nextString()!=    JsonToken.STRING    ||    in.nextString()!=    JsonToken.END_ARRAY)    {    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
420	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.START_STRING  ||  in.peek()  ==  JsonToken.START_ARRAY)  {  [CE]  cannot  find  symbol  START_STRING  [FE]        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.START_STRING  ||  in.peek()  ==  JsonToken.START_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.START_STRING  ||  in.peek()  ==  JsonToken.START_ARRAY)  {	  if(in.peek()    ==    JsonToken.START_ARRAY    ||    in.peek()    ==    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol  START_STRING	13	None	replace
421	[BUG]  [BUGGY]  if(in  ==  null  ||  in.peek()  >=  JsonToken.STRING)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null  ||  in.peek()  >=  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  ==  null  ||  in.peek()  >=  JsonToken.STRING)  {	  if    (in    ==    null    ||    in.peek()!=    JsonToken.STRING)    {    if    (in    ==    null    ||    in.peek()    >=    JsonToken.STRING)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	36	None	replace
422	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.START_ARRAY  ||  in.peek()  ==  JsonToken.START_ARRAY)  {  [CE]  cannot  find  symbol  START_ARRAY  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.START_ARRAY  ||  in.peek()  ==  JsonToken.START_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.START_ARRAY  ||  in.peek()  ==  JsonToken.START_ARRAY)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING    ||    in.peek()    ==    JsonToken.START_ARRAY)    {    	non-compiled	[CE]  cannot  find  symbol  START_ARRAY	63	None	replace
423	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.VALUE_NAME)  {  [CE]  cannot  find  symbol  VALUE_NAME  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()!=  JsonToken.VALUE_NAME)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()!=  JsonToken.VALUE_NAME)  {	  if(in.peek()!=    JsonToken.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_NAME	46	None	replace
424	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	add	if(in.peek()  ==  JsonToken.END_ARRAY)  {	  if(in.peek()    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  IllegalStateException  	62	1	replace
425	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.END_ARRAY)  {  [FE]  IllegalStateException  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.END_ARRAY)  {	  if(in.peek()    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  IllegalStateException  	62	1	replace
426	[BUG]  [BUGGY]  if(in!=  null  &&  in.next()!=  JsonToken.STRING)  {  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  &&  in.next()!=  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=  null  &&  in.next()!=  JsonToken.STRING)  {	  if(in!=    null    ||    in.next()!=    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
427	[BUG]  [BUGGY]  if(in.currentTimeMillis()!=  JsonToken.STRING  ||  in.nextString().equals(JsonToken.STRING))  {  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.currentTimeMillis()!=  JsonToken.STRING  ||  in.nextString().equals(JsonToken.STRING))  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.currentTimeMillis()!=  JsonToken.STRING  ||  in.nextString().equals(JsonToken.STRING))  {	  if    (in.nextString()!=    JsonToken.STRING    ||    in.nextString().equals(JsonToken.STRING))    {    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
428	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  if(Integer.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  if(Integer.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()    ==    JsonToken.STRING    ||    in.peek()    ==    JsonToken.END_ARRAY)    {    if(Integer.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
429	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  if(long.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  [CE]  class  expected  [FE]      JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  if(long.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()    ==    JsonToken.STRING    ||    in.peek()    ==    JsonToken.END_ARRAY)    {    if(long.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {	  	non-compiled	[CE]  class  expected	15	None	add
430	[BUG]  [BUGGY]  if(in.next()!=  JsonToken.STRING  ||  in.nextString()!=  JsonToken.VALUE_STRING)  {  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.next()!=  JsonToken.STRING  ||  in.nextString()!=  JsonToken.VALUE_STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.next()!=  JsonToken.STRING  ||  in.nextString()!=  JsonToken.VALUE_STRING)  {	  if(in.next()!=    JsonToken.STRING    ||    in.next()!=    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
431	[BUG]  [BUGGY]  if(in.next()!=  JsonToken.VALUE_STRING  ||  in.next()!=  JsonToken.END_ARRAY)  {  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.next()!=  JsonToken.VALUE_STRING  ||  in.next()!=  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.next()!=  JsonToken.VALUE_STRING  ||  in.next()!=  JsonToken.END_ARRAY)  {	  if(in.next()!=    JsonToken.STRING    ||    in.next()!=    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
432	[BUG]  [BUGGY]  if(in!=  null  &&  in.peek()  ==  JsonToken.VALUE_STRING)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  &&  in.peek()  ==  JsonToken.VALUE_STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=  null  &&  in.peek()  ==  JsonToken.VALUE_STRING)  {	  if(in!=    null    ||    in.peek()    ==    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	61	None	replace
433	[BUG]  [BUGGY]  if(in!=  null)  {  in.defaultReader();  }  else  {  throw  new  JsonParseException( " ");  }  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null)  {  in.defaultReader();  }  else  {  throw  new  JsonParseException( " ");  }  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=  null)  {  in.defaultReader();  }  else  {  throw  new  JsonParseException( " ");  }	  in.defaultReader();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
434	[BUG]  [BUGGY]  if(in!=  null)  {  in.defaultReader();  }  else  {  throw  new  JsonParseException( "The  date  should  be  a  string  value ");  }  [CE]  illegal  start  of  type  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null)  {  in.defaultReader();  }  else  {  throw  new  JsonParseException( "The  date  should  be  a  string  value ");  }  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=  null)  {  in.defaultReader();  }  else  {  throw  new  JsonParseException( "The  date  should  be  a  string  value ");  }	  in.defaultReader();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
435	[BUG]  [BUGGY]  if(in  ==  null)  {  in.defaultReader();  }  else  {  throw  new  JsonParseException( " ");  }  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null)  {  in.defaultReader();  }  else  {  throw  new  JsonParseException( " ");  }  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  ==  null)  {  in.defaultReader();  }  else  {  throw  new  JsonParseException( " ");  }	  in.defaultReader();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
436	[BUG]  [BUGGY]  if(in  ==  null)  {  in.defaultReader();  }  else  {  throw  new  JsonParseException( "The  date  should  be  a  string  value ");  }  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null)  {  in.defaultReader();  }  else  {  throw  new  JsonParseException( "The  date  should  be  a  string  value ");  }  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  ==  null)  {  in.defaultReader();  }  else  {  throw  new  JsonParseException( "The  date  should  be  a  string  value ");  }	  in.defaultReader();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
437	[BUG]  [BUGGY]  if(in!=  null)  {  in.defaultReader();  }  else  {  Class  <?>  dateType  =  in.getClass();  return  new  Date(dateType);  }  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null)  {  in.defaultReader();  }  else  {  Class  <?>  dateType  =  in.getClass();  return  new  Date(dateType);  }  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=  null)  {  in.defaultReader();  }  else  {  Class  <?>  dateType  =  in.getClass();  return  new  Date(dateType);  }	  in.defaultReader();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
438	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.START_ARRAY  ||  in.peek()!=  JsonToken.START_OBJECT)  {  [CE]  cannot  find  symbol  START_ARRAY  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()!=  JsonToken.START_ARRAY  ||  in.peek()!=  JsonToken.START_OBJECT)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()!=  JsonToken.START_ARRAY  ||  in.peek()!=  JsonToken.START_OBJECT)  {	  if(in.peek()!=    JsonToken.VALUE_STRING    ||    in.peek()!=    JsonToken.START_OBJECT)    {    	non-compiled	[CE]  cannot  find  symbol  START_ARRAY	45	None	replace
439	[BUG]  [BUGGY]  if(in.next()!=  JsonToken.STRING  ||  in.nextString()!=  JsonToken.NUMBER)  {  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.next()!=  JsonToken.STRING  ||  in.nextString()!=  JsonToken.NUMBER)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.next()!=  JsonToken.STRING  ||  in.nextString()!=  JsonToken.NUMBER)  {	  if(in.next()!=    JsonToken.STRING    ||    in.next()!=    JsonToken.NUMBER)    {    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
440	[BUG]  [BUGGY]  if(in.currentTime()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.NUMBER)  {  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.currentTime()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.NUMBER)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.currentTime()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.NUMBER)  {	  if(in.next()!=    JsonToken.STRING    ||    in.next()!=    JsonToken.NUMBER)    {    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
441	[BUG]  [BUGGY]  if(in.currentTimeMillis()!=  JsonToken.START_ARRAY)  {  [CE]  cannot  find  symbol  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.currentTimeMillis()!=  JsonToken.START_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.currentTimeMillis()!=  JsonToken.START_ARRAY)  {	  if    (in.peek()    ==    JsonToken.STRING)    {    if    (in.peek()!=    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
442	[BUG]  [BUGGY]  if(in  ==  null  ||  in.peek()!=  JsonToken.START_NAME)  {  [CE]  cannot  find  symbol  START_NAME  [FE]          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null  ||  in.peek()!=  JsonToken.START_NAME)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  ==  null  ||  in.peek()!=  JsonToken.START_NAME)  {	  if(in    ==    null    ||    in.peek()!=    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  START_NAME	3	None	replace
443	[BUG]  [BUGGY]  if(in  ==  null  ||  in.peek()!=  JsonToken.VALUE_NUMBER)  {  [CE]  cannot  find  symbol  VALUE_NUMBER  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in  ==  null  ||  in.peek()!=  JsonToken.VALUE_NUMBER)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  ==  null  ||  in.peek()!=  JsonToken.VALUE_NUMBER)  {	  if(in    ==    null    ||    in.peek()!=    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_NUMBER	3	None	replace
444	[BUG]  [BUGGY]  Date  date  =  in.read(Long.parseLong( "yyyy-MM-dd'T'HH:mm:ss.SSS "),  in.read());  [CE]  illegal  start  of  type  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  Date  date  =  in.read(Long.parseLong( "yyyy-MM-dd'T'HH:mm:ss.SSS "),  in.read());  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	Date  date  =  in.read(Long.parseLong( "yyyy-MM-dd'T'HH:mm:ss.SSS "),  in.read());	  Date    date    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
445	[BUG]  [BUGGY]  Date  date  =  in.read(Long.parseLong( "yyyy-MM-dd'T'HH:mm:ss.SSS "));  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  Date  date  =  in.read(Long.parseLong( "yyyy-MM-dd'T'HH:mm:ss.SSS "));  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	Date  date  =  in.read(Long.parseLong( "yyyy-MM-dd'T'HH:mm:ss.SSS "));	  Date    date    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
446	[BUG]  [BUGGY]  Date  date  =  in.read(Long.parseLong( "yyyy-MM-dd'T'HH:mm:ss.SSS ").getValue());  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  Date  date  =  in.read(Long.parseLong( "yyyy-MM-dd'T'HH:mm:ss.SSS ").getValue());  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	Date  date  =  in.read(Long.parseLong( "yyyy-MM-dd'T'HH:mm:ss.SSS ").getValue());	  Date    date    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
447	[BUG]  [BUGGY]  Date  date  =  in.read(Long.parseLong( "yyyy-MM-dd'T'HH:mm:ss.SSS ").get();  [CE]  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  Date  date  =  in.read(Long.parseLong( "yyyy-MM-dd'T'HH:mm:ss.SSS ").get();  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	Date  date  =  in.read(Long.parseLong( "yyyy-MM-dd'T'HH:mm:ss.SSS ").get();	  Date    date    =    in.read();    	non-compiled	[CE]  	18	None	replace
448	[BUG]  [BUGGY]  Date  date  =  in.read(Long.parseLong( "yyyy-MM-dd'T'HH:mm:ss.SSS ").getBytes());  [CE]  illegal  start  of  type  [FE]                              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  Date  date  =  in.read(Long.parseLong( "yyyy-MM-dd'T'HH:mm:ss.SSS ").getBytes());  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	Date  date  =  in.read(Long.parseLong( "yyyy-MM-dd'T'HH:mm:ss.SSS ").getBytes());	  Date    date    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
449	[BUG]  [BUGGY]  if(in.next()  ==  JsonToken.STRING  ||  in.next()  ==  JsonToken.NUMBER)  {  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.next()  ==  JsonToken.STRING  ||  in.next()  ==  JsonToken.NUMBER)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.next()  ==  JsonToken.STRING  ||  in.next()  ==  JsonToken.NUMBER)  {	  if(in.next()    ==    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
450	[BUG]  [BUGGY]  if(in.next()  ==  JsonToken.STRING  ||  in.next()  ==  JsonToken.FIELD_NAME)  {  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.next()  ==  JsonToken.STRING  ||  in.next()  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.next()  ==  JsonToken.STRING  ||  in.next()  ==  JsonToken.FIELD_NAME)  {	  if(in.next()    ==    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
451	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.nextString()  ==  JsonToken.FIELD_NAME)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.nextString()  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.nextString()  ==  JsonToken.FIELD_NAME)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING    ||    in.nextString()    ==    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	12	None	replace
452	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.START_ARRAY  ||  in.peek()!=  JsonToken.END_ARRAY)  {  [CE]  cannot  find  symbol  START_ARRAY  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()!=  JsonToken.START_ARRAY  ||  in.peek()!=  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()!=  JsonToken.START_ARRAY  ||  in.peek()!=  JsonToken.END_ARRAY)  {	  if(in.peek()!=    JsonToken.VALUE_STRING    ||    in.peek()!=    JsonToken.END_ARRAY)    {    	non-compiled	[CE]  cannot  find  symbol  START_ARRAY	44	None	replace
453	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()!=  JsonToken.STRING  ||  in.peek()!=  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	add	if(in.peek()!=  JsonToken.STRING  ||  in.peek()!=  JsonToken.END_ARRAY)  {	  if(in.peek()!=    JsonToken.VALUE_STRING    ||    in.peek()!=    JsonToken.END_ARRAY)    {    	compilable	  [FE]  JsonParseException  	44	6	replace
454	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.STRING  ||  in.peek()!=  JsonToken.END_ARRAY)  {  [FE]  JsonParseException  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()!=  JsonToken.STRING  ||  in.peek()!=  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()!=  JsonToken.STRING  ||  in.peek()!=  JsonToken.END_ARRAY)  {	  if(in.peek()!=    JsonToken.VALUE_STRING    ||    in.peek()!=    JsonToken.END_ARRAY)    {    	compilable	  [FE]  JsonParseException  	44	6	replace
455	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.VALUE_NAME  ||  in.peek()!=  JsonToken.END_ARRAY)  {  [CE]  cannot  find  symbol  VALUE_NAME  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()!=  JsonToken.VALUE_NAME  ||  in.peek()!=  JsonToken.END_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()!=  JsonToken.VALUE_NAME  ||  in.peek()!=  JsonToken.END_ARRAY)  {	  if(in.peek()!=    JsonToken.VALUE_STRING    ||    in.peek()!=    JsonToken.END_ARRAY)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_NAME	44	None	replace
456	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  Date  should  be  a  string  value. ");  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  Date  should  be  a  string  value. ");  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	JsonParseException  in  =  new  JsonParseException( "The  Date  should  be  a  string  value. ");	  JsonParseException    in    =    new    JsonParseException(   "The    date    should    be    a    string    value.   ");    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
457	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value ",  in.getClass());  [CE]  illegal  start  of  type  [FE]                              JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value ",  in.getClass());  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value ",  in.getClass());	  JsonParseException    in    =    new    JsonParseException(   "The    date    should    be    a    string    value.   ");    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
458	[BUG]  [BUGGY]  Thread.currentThread().setMillis(getCurrentThread().getMillis());  [CE]  illegal  start  of  type  [FE]                      JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  Thread.currentThread().setMillis(getCurrentThread().getMillis());  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	Thread.currentThread().setMillis(getCurrentThread().getMillis());	  if(in    ==    null)    {    throw    new    JsonParseException(   "The    date    should    be    a    string    value   ");    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
459	[BUG]  [BUGGY]  while(in!=  null)  {  throw  new  JsonParseException( "The  date  should  be  a  string  value. ");  }  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  while(in!=  null)  {  throw  new  JsonParseException( "The  date  should  be  a  string  value. ");  }  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	while(in!=  null)  {  throw  new  JsonParseException( "The  date  should  be  a  string  value. ");  }	  if(in    ==    null)    {    throw    new    JsonParseException(   "The    date    should    be    a    string    value   ");    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
460	[BUG]  [BUGGY]  while(in  ==  null)  {  throw  new  JsonParseException( "The  date  should  be  a  string  value. ");  }  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  while(in  ==  null)  {  throw  new  JsonParseException( "The  date  should  be  a  string  value. ");  }  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	while(in  ==  null)  {  throw  new  JsonParseException( "The  date  should  be  a  string  value. ");  }	  if(in    ==    null)    {    throw    new    JsonParseException(   "The    date    should    be    a    string    value   ");    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
461	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.VALUE_NUMBER_FLOAT)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.VALUE_NUMBER_FLOAT)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.VALUE_NUMBER_FLOAT)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING    ||    in.peek()    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	11	None	replace
462	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.VALUE_NUMBER_ARRAY)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.VALUE_NUMBER_ARRAY)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.VALUE_NUMBER_ARRAY)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING    ||    in.peek()    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	11	None	replace
463	[BUG]  [BUGGY]  if(in!=  null  ||  in.read()  ==  JsonToken.STRING)  {  [CE]  cannot  find  symbol  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  ||  in.read()  ==  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=  null  ||  in.read()  ==  JsonToken.STRING)  {	  if(in!=    null    ||    in.peek()    ==    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
464	[BUG]  [BUGGY]  if(in!=  null  &&  in.read()!=  JsonToken.STRING)  {  [CE]  cannot  find  symbol  [FE]    JsonParseException    [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in!=  null  &&  in.read()!=  JsonToken.STRING)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=  null  &&  in.read()!=  JsonToken.STRING)  {	  if(in!=    null    &&    in.peek()!=    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
465	[BUG]  [BUGGY]  if(in.currentTimeMillis()  ==  JsonToken.VALUE_NUMBER_INT)  {  [CE]  cannot  find  symbol  [FE]        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.currentTimeMillis()  ==  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.currentTimeMillis()  ==  JsonToken.VALUE_NUMBER_INT)  {	  if    (in.peek()    ==    JsonToken.STRING)    {    if    (in.peek()    ==    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
466	[BUG]  [BUGGY]  Date  value  =  in.readFully();  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  Date  value  =  in.readFully();  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	Date  value  =  in.readFully();	  Date    value    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
467	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  Date  should  be  a  string  value ");  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  Date  should  be  a  string  value ");  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	JsonParseException  in  =  new  JsonParseException( "The  Date  should  be  a  string  value ");	  JsonParseException    in    =    new    JsonParseException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
468	[BUG]  [BUGGY]  Class  <?>  dateType  =  in.readFully();  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  Class  <?>  dateType  =  in.readFully();  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	Class  <?>  dateType  =  in.readFully();	  Class    <?>    dateType    =    in.readClass();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
469	[BUG]  [BUGGY]  Class  <?>  dateType  =  in.readLine();  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  Class  <?>  dateType  =  in.readLine();  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	Class  <?>  dateType  =  in.readLine();	  Class    <?>    dateType    =    in.readClass();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
470	[BUG]  [BUGGY]  Date  <?>  dateType  =  in.readClass();  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  Date  <?>  dateType  =  in.readClass();  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	Date  <?>  dateType  =  in.readClass();	  Class    <?>    dateType    =    in.readClass();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
471	[BUG]  [BUGGY]  if(in.next()!=  JsonToken.STRING  ||  in.nextString()!=  JsonToken.END)  {  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      public  Date  read(JsonReader  in)  throws  IOException  {      [BUGGY]  if(in.next()!=  JsonToken.STRING  ||  in.nextString()!=  JsonToken.END)  {  [BUGGY]      throw  new  JsonParseException(     "The  date  should  be  a  string  value     ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.next()!=  JsonToken.STRING  ||  in.nextString()!=  JsonToken.END)  {	  if(in.next()!=    JsonToken.STRING    ||    in.next()!=    JsonToken.END)    {    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
