bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if  (in  ==  null  ||  in.peek()  ==  JsonToken.STRING)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	add	if  (in  ==  null  ||  in.peek()  ==  JsonToken.STRING)  {	  if    (in    ==    null    ||    in.peek()!=    JsonToken.STRING)    {    	compilable	  [FE]  JsonParseException  	8	5	replace
2	[BUG]  [BUGGY]  if  (in  ==  null  ||  in.peek()  ==  JsonToken.STRING)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if  (in  ==  null  ||  in.peek()  ==  JsonToken.STRING)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if  (in  ==  null  ||  in.peek()  ==  JsonToken.STRING)  {	  if    (in    ==    null    ||    in.peek()!=    JsonToken.STRING)    {    	compilable	  [FE]  JsonParseException  	8	5	replace
3	[BUG]  [BUGGY]  if(in  ==  null  ||  in.peek()!=  JsonToken.VALUE_STRING)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]      JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if(in  ==  null  ||  in.peek()!=  JsonToken.VALUE_STRING)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  ==  null  ||  in.peek()!=  JsonToken.VALUE_STRING)  {	  if    (in    ==    null    ||    in.peek()!=    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	8	None	replace
4	[BUG]  [BUGGY]  if  (in  ==  null  ||  in.next()!=  JsonToken.STRING)  {  [CE]  cannot  find  symbol  [FE]        JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if  (in  ==  null  ||  in.next()!=  JsonToken.STRING)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if  (in  ==  null  ||  in.next()!=  JsonToken.STRING)  {	  if    (in    ==    null    ||    in.peek()!=    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
5	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]          JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if(in!=  null  ||  in.peek()  ==  JsonToken.STRING)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	add	if(in!=  null  ||  in.peek()  ==  JsonToken.STRING)  {	  if    (in    ==    null    ||    in.peek()!=    JsonToken.STRING)    {    	compilable	  [FE]  JsonParseException  	8	6	replace
6	[BUG]  [BUGGY]  if(in!=  null  ||  in.peek()  ==  JsonToken.STRING)  {  [FE]  JsonParseException  [FE]          JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if(in!=  null  ||  in.peek()  ==  JsonToken.STRING)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=  null  ||  in.peek()  ==  JsonToken.STRING)  {	  if    (in    ==    null    ||    in.peek()!=    JsonToken.STRING)    {    	compilable	  [FE]  JsonParseException  	8	6	replace
7	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.VALUE_STRING)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]              JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.VALUE_STRING)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.VALUE_STRING)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	5	None	replace
8	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	5	None	replace
9	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.START_OBJECT)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                  JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.START_OBJECT)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.START_OBJECT)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	5	None	replace
10	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.FIELD_NAME)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                    JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.FIELD_NAME)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.FIELD_NAME)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	5	None	replace
11	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                      JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.VALUE_NUMBER_FLOAT)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	5	None	replace
12	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.nextString()  ==  JsonToken.VALUE_STRING)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                        JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.nextString()  ==  JsonToken.VALUE_STRING)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.nextString()  ==  JsonToken.VALUE_STRING)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	5	None	replace
13	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.START_ARRAY  ||  in.peek()  ==  JsonToken.STRING)  {  [CE]  cannot  find  symbol  START_ARRAY  [FE]    JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if(in.peek()  ==  JsonToken.START_ARRAY  ||  in.peek()  ==  JsonToken.STRING)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.START_ARRAY  ||  in.peek()  ==  JsonToken.STRING)  {	  if    (in.peek()    ==    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol  START_ARRAY	2	None	replace
14	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.START_OBJECT  ||  in.peek()  ==  JsonToken.STRING)  {  [CE]  cannot  find  symbol  START_OBJECT  [FE]      JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if(in.peek()  ==  JsonToken.START_OBJECT  ||  in.peek()  ==  JsonToken.STRING)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.START_OBJECT  ||  in.peek()  ==  JsonToken.STRING)  {	  if    (in.peek()    ==    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol  START_OBJECT	2	None	replace
15	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]        JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if(in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	add	if(in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {	  if    (in.peek()    ==    JsonToken.STRING)    {    	compilable	  [FE]  JsonParseException  	2	5	replace
16	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  [FE]  JsonParseException  [FE]        JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if(in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.END_ARRAY)  {	  if    (in.peek()    ==    JsonToken.STRING)    {    	compilable	  [FE]  JsonParseException  	2	5	replace
17	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value ");  [CE]  illegal  start  of  type  [FE]                JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value ");  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value ");	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
18	[BUG]  [BUGGY]  Date  date  =  in.read();  [CE]  illegal  start  of  type  [FE]                  JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  Date  date  =  in.read();  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	Date  date  =  in.read();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
19	[BUG]  [BUGGY]  Class  <?>  dateType  =  in.readClass();  [CE]  illegal  start  of  type  [FE]                    JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  Class  <?>  dateType  =  in.readClass();  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	Class  <?>  dateType  =  in.readClass();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
20	[BUG]  [BUGGY]  DefaultDateTypeAdapter.class.getSimpleName();  [CE]  illegal  start  of  type  [FE]                      JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  DefaultDateTypeAdapter.class.getSimpleName();  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	DefaultDateTypeAdapter.class.getSimpleName();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
21	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value. ");  [CE]  illegal  start  of  type  [FE]                        JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value. ");  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value. ");	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
22	[BUG]  [BUGGY]  Class  <?>  dateType  =  in.getClass();  [CE]  illegal  start  of  type  [FE]                          JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  Class  <?>  dateType  =  in.getClass();  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	Class  <?>  dateType  =  in.getClass();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
23	[BUG]  [BUGGY]  if  (in.peek()  ==  JsonToken.STRING)  {  if  (in.peek()  ==  JsonToken.STRING)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if  (in.peek()  ==  JsonToken.STRING)  {  if  (in.peek()  ==  JsonToken.STRING)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if    (in.peek()    ==    JsonToken.STRING)    {    if  (in.peek()  ==  JsonToken.STRING)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
24	[BUG]  [BUGGY]  if  (in.peek()  ==  JsonToken.STRING)  {  if  (in.peek()!=  JsonToken.STRING)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if  (in.peek()  ==  JsonToken.STRING)  {  if  (in.peek()!=  JsonToken.STRING)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if    (in.peek()    ==    JsonToken.STRING)    {    if  (in.peek()!=  JsonToken.STRING)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
25	[BUG]  [BUGGY]  if  (in.peek()  ==  JsonToken.STRING)  {  if  (in.peek()  >=  JsonToken.STRING)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if  (in.peek()  ==  JsonToken.STRING)  {  if  (in.peek()  >=  JsonToken.STRING)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if    (in.peek()    ==    JsonToken.STRING)    {    if  (in.peek()  >=  JsonToken.STRING)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
26	[BUG]  [BUGGY]  if  (in.peek()  ==  JsonToken.STRING)  {  If  (in.peek()  ==  JsonToken.STRING)  {  [CE]  ';'  expected  [FE]          JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if  (in.peek()  ==  JsonToken.STRING)  {  If  (in.peek()  ==  JsonToken.STRING)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if    (in.peek()    ==    JsonToken.STRING)    {    If  (in.peek()  ==  JsonToken.STRING)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
27	[BUG]  [BUGGY]  if  (in.peek()  ==  JsonToken.STRING)  {  if  (in.peek()  >>  JsonToken.STRING)  {  [CE]  illegal  start  of  expression  [FE]            JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if  (in.peek()  ==  JsonToken.STRING)  {  if  (in.peek()  >>  JsonToken.STRING)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if    (in.peek()    ==    JsonToken.STRING)    {    if  (in.peek()  >>  JsonToken.STRING)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
28	[BUG]  [BUGGY]  if  (in!=  null  ||  in.peek()!=  JsonToken.STRING)  {  if  (in!=  null  ||  in.peek()!=  JsonToken.STRING)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if  (in!=  null  ||  in.peek()!=  JsonToken.STRING)  {  if  (in!=  null  ||  in.peek()!=  JsonToken.STRING)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if    (in!=    null    ||    in.peek()!=    JsonToken.STRING)    {    if  (in!=  null  ||  in.peek()!=  JsonToken.STRING)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
29	[BUG]  [BUGGY]  if  (in!=  null  ||  in.peek()!=  JsonToken.STRING)  {  if  (in  ==  null  ||  in.peek()!=  JsonToken.STRING)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if  (in!=  null  ||  in.peek()!=  JsonToken.STRING)  {  if  (in  ==  null  ||  in.peek()!=  JsonToken.STRING)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if    (in!=    null    ||    in.peek()!=    JsonToken.STRING)    {    if  (in  ==  null  ||  in.peek()!=  JsonToken.STRING)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
30	[BUG]  [BUGGY]  if  (in!=  null  ||  in.peek()!=  JsonToken.STRING)  {  if  (in!=  null  ||  in.peek()  ==  JsonToken.STRING)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if  (in!=  null  ||  in.peek()!=  JsonToken.STRING)  {  if  (in!=  null  ||  in.peek()  ==  JsonToken.STRING)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if    (in!=    null    ||    in.peek()!=    JsonToken.STRING)    {    if  (in!=  null  ||  in.peek()  ==  JsonToken.STRING)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
31	[BUG]  [BUGGY]  if  (in!=  null  ||  in.peek()!=  JsonToken.STRING)  {  if  (in!=  null  ||  in.peek()  >=  JsonToken.STRING)  {  [CE]  illegal  start  of  expression  [FE]          JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if  (in!=  null  ||  in.peek()!=  JsonToken.STRING)  {  if  (in!=  null  ||  in.peek()  >=  JsonToken.STRING)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if    (in!=    null    ||    in.peek()!=    JsonToken.STRING)    {    if  (in!=  null  ||  in.peek()  >=  JsonToken.STRING)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
32	[BUG]  [BUGGY]  if  (in!=  null  ||  in.peek()!=  JsonToken.STRING)  {  if  (in  >=  null  ||  in.peek()!=  JsonToken.STRING)  {  [CE]  illegal  start  of  expression  [FE]            JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if  (in!=  null  ||  in.peek()!=  JsonToken.STRING)  {  if  (in  >=  null  ||  in.peek()!=  JsonToken.STRING)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if    (in!=    null    ||    in.peek()!=    JsonToken.STRING)    {    if  (in  >=  null  ||  in.peek()!=  JsonToken.STRING)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
33	[BUG]  [BUGGY]  if  (in!=  null  ||  in.peek()!=  JsonToken.STRING)  {  If  (in!=  null  ||  in.peek()!=  JsonToken.STRING)  {  [CE]  ';'  expected  [FE]              JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if  (in!=  null  ||  in.peek()!=  JsonToken.STRING)  {  If  (in!=  null  ||  in.peek()!=  JsonToken.STRING)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if    (in!=    null    ||    in.peek()!=    JsonToken.STRING)    {    If  (in!=  null  ||  in.peek()!=  JsonToken.STRING)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
34	[BUG]  [BUGGY]  if  (in  ==  null  ||  in.peek()!=  JsonToken.STRING)  {  if  (in  ==  null  ||  in.peek()!=  JsonToken.STRING)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if  (in  ==  null  ||  in.peek()!=  JsonToken.STRING)  {  if  (in  ==  null  ||  in.peek()!=  JsonToken.STRING)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if    (in    ==    null    ||    in.peek()!=    JsonToken.STRING)    {    if  (in  ==  null  ||  in.peek()!=  JsonToken.STRING)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
35	[BUG]  [BUGGY]  if  (in  ==  null  ||  in.peek()!=  JsonToken.STRING)  {  if  (in!=  null  ||  in.peek()!=  JsonToken.STRING)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if  (in  ==  null  ||  in.peek()!=  JsonToken.STRING)  {  if  (in!=  null  ||  in.peek()!=  JsonToken.STRING)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if    (in    ==    null    ||    in.peek()!=    JsonToken.STRING)    {    if  (in!=  null  ||  in.peek()!=  JsonToken.STRING)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
36	[BUG]  [BUGGY]  if  (in  ==  null  ||  in.peek()!=  JsonToken.STRING)  {  if  (in  ==  null  ||  in.peek()  >=  JsonToken.STRING)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if  (in  ==  null  ||  in.peek()!=  JsonToken.STRING)  {  if  (in  ==  null  ||  in.peek()  >=  JsonToken.STRING)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if    (in    ==    null    ||    in.peek()!=    JsonToken.STRING)    {    if  (in  ==  null  ||  in.peek()  >=  JsonToken.STRING)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
37	[BUG]  [BUGGY]  if  (in  ==  null  ||  in.peek()!=  JsonToken.STRING)  {  If  (in  ==  null  ||  in.peek()!=  JsonToken.STRING)  {  [CE]  ';'  expected  [FE]          JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if  (in  ==  null  ||  in.peek()!=  JsonToken.STRING)  {  If  (in  ==  null  ||  in.peek()!=  JsonToken.STRING)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if    (in    ==    null    ||    in.peek()!=    JsonToken.STRING)    {    If  (in  ==  null  ||  in.peek()!=  JsonToken.STRING)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
38	[BUG]  [BUGGY]  if  (in  ==  null  ||  in.peek()!=  JsonToken.STRING)  {  if  (in  ==  null  ||  in.peek()  >>  JsonToken.STRING)  {  [CE]  illegal  start  of  expression  [FE]            JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if  (in  ==  null  ||  in.peek()!=  JsonToken.STRING)  {  if  (in  ==  null  ||  in.peek()  >>  JsonToken.STRING)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if    (in    ==    null    ||    in.peek()!=    JsonToken.STRING)    {    if  (in  ==  null  ||  in.peek()  >>  JsonToken.STRING)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
39	[BUG]  [BUGGY]  if  (in.nextString()  ==  JsonToken.STRING)  {  [CE]  incomparable  types:  String  and  JsonToken  [FE]          JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if  (in.nextString()  ==  JsonToken.STRING)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if  (in.nextString()  ==  JsonToken.STRING)  {	  if    (in.nextString()!=    JsonToken.STRING)    {    	non-compiled	[CE]  incomparable  types:  String  and  JsonToken	3	None	replace
40	[BUG]  [BUGGY]  if  (in.nextString()!=  JsonToken.VALUE_STRING)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]            JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if  (in.nextString()!=  JsonToken.VALUE_STRING)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if  (in.nextString()!=  JsonToken.VALUE_STRING)  {	  if    (in.nextString()!=    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	3	None	replace
41	[BUG]  [BUGGY]  if  (in.nextString()!=  JsonToken.STRING  ||  in.nextString().equals(JsonToken.STRING))  {  [CE]  incomparable  types:  String  and  JsonToken  [FE]              JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if  (in.nextString()!=  JsonToken.STRING  ||  in.nextString().equals(JsonToken.STRING))  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if  (in.nextString()!=  JsonToken.STRING  ||  in.nextString().equals(JsonToken.STRING))  {	  if    (in.nextString()!=    JsonToken.STRING)    {    	non-compiled	[CE]  incomparable  types:  String  and  JsonToken	3	None	replace
42	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.VALUE_STRING)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]            JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if(in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.VALUE_STRING)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.VALUE_STRING)  {	  if(in.peek()!=    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	4	None	replace
43	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.FIELD_NAME)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]              JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if(in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.FIELD_NAME)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.FIELD_NAME)  {	  if(in.peek()!=    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	4	None	replace
44	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.END_ARRAY)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if(in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.END_ARRAY)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.END_ARRAY)  {	  if(in.peek()!=    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	4	None	replace
45	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.START_OBJECT)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                  JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if(in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.START_OBJECT)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()!=  JsonToken.VALUE_STRING  ||  in.peek()!=  JsonToken.START_OBJECT)  {	  if(in.peek()!=    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	4	None	replace
46	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.FIELD_NAME)  {  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                    JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if(in.peek()!=  JsonToken.FIELD_NAME)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()!=  JsonToken.FIELD_NAME)  {	  if(in.peek()!=    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	4	None	replace
47	[BUG]  [BUGGY]  if(in.next()  ==  JsonToken.STRING)  {  [CE]  cannot  find  symbol  [FE]        JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if(in.next()  ==  JsonToken.STRING)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.next()  ==  JsonToken.STRING)  {	  if(in.next()!=    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
48	[BUG]  [BUGGY]  if(in.next()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.VALUE_STRING)  {  [CE]  cannot  find  symbol  [FE]          JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if(in.next()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.VALUE_STRING)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.next()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.VALUE_STRING)  {	  if(in.next()!=    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
49	[BUG]  [BUGGY]  if(in.next()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.END)  {  [CE]  cannot  find  symbol  [FE]            JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if(in.next()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.END)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.next()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.END)  {	  if(in.next()!=    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
50	[BUG]  [BUGGY]  if(in.next()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.END_ARRAY)  {  [CE]  cannot  find  symbol  [FE]              JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if(in.next()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.END_ARRAY)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.next()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.END_ARRAY)  {	  if(in.next()!=    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
51	[BUG]  [BUGGY]  if(in.next()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.NUMBER)  {  [CE]  cannot  find  symbol  [FE]                JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if(in.next()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.NUMBER)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.next()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.NUMBER)  {	  if(in.next()!=    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
52	[BUG]  [BUGGY]  if(in.next()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.START)  {  [CE]  cannot  find  symbol  [FE]                  JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if(in.next()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.START)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.next()!=  JsonToken.STRING  ||  in.next()!=  JsonToken.START)  {	  if(in.next()!=    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
53	[BUG]  [BUGGY]  if(in  ==  null)  {  throw  new  JsonParseException( " ");  }  [CE]  illegal  start  of  type  [FE]                JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if(in  ==  null)  {  throw  new  JsonParseException( " ");  }  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  ==  null)  {  throw  new  JsonParseException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
54	[BUG]  [BUGGY]  if(in  ==  null)  {  throw  new  JsonParseException( "The  date  should  be  a  string  value ");  }  [CE]  illegal  start  of  type  [FE]                  JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if(in  ==  null)  {  throw  new  JsonParseException( "The  date  should  be  a  string  value ");  }  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  ==  null)  {  throw  new  JsonParseException( "The  date  should  be  a  string  value ");  }	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
55	[BUG]  [BUGGY]  String  value  =  in.readString();  [CE]  illegal  start  of  type  [FE]                    JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  String  value  =  in.readString();  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	String  value  =  in.readString();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
56	[BUG]  [BUGGY]  Date  value  =  in.read();  [CE]  illegal  start  of  type  [FE]                      JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  Date  value  =  in.read();  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	Date  value  =  in.read();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
57	[BUG]  [BUGGY]  if  (in  ==  null  ||  in.nextString()!=  JsonToken.STRING)  {  [CE]  incomparable  types:  String  and  JsonToken  [FE]    JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if  (in  ==  null  ||  in.nextString()!=  JsonToken.STRING)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if  (in  ==  null  ||  in.nextString()!=  JsonToken.STRING)  {	  if    (in!=    null    ||    in.peek()!=    JsonToken.STRING)    {    	non-compiled	[CE]  incomparable  types:  String  and  JsonToken	10	None	replace
58	[BUG]  [BUGGY]  if  (in.hasNext()  ||  in.nextString()!=  JsonToken.STRING)  {  [CE]  incomparable  types:  String  and  JsonToken  [FE]          JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if  (in.hasNext()  ||  in.nextString()!=  JsonToken.STRING)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if  (in.hasNext()  ||  in.nextString()!=  JsonToken.STRING)  {	  if    (in.nextString()!=    JsonToken.STRING)    {    	non-compiled	[CE]  incomparable  types:  String  and  JsonToken	3	None	replace
59	[BUG]  [BUGGY]  if  (in!=  null  ||  in.nextString()!=  JsonToken.STRING)  {  [CE]  incomparable  types:  String  and  JsonToken  [FE]            JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if  (in!=  null  ||  in.nextString()!=  JsonToken.STRING)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if  (in!=  null  ||  in.nextString()!=  JsonToken.STRING)  {	  if    (in.nextString()!=    JsonToken.STRING)    {    	non-compiled	[CE]  incomparable  types:  String  and  JsonToken	3	None	replace
60	[BUG]  [BUGGY]  if(in  ==  null  ||  in.peek()  ==  JsonToken.VALUE_STRING)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]              JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if(in  ==  null  ||  in.peek()  ==  JsonToken.VALUE_STRING)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  ==  null  ||  in.peek()  ==  JsonToken.VALUE_STRING)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	5	None	replace
61	[BUG]  [BUGGY]  if(in!=  null  ||  in.peek()  ==  JsonToken.VALUE_STRING)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if(in!=  null  ||  in.peek()  ==  JsonToken.VALUE_STRING)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=  null  ||  in.peek()  ==  JsonToken.VALUE_STRING)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	5	None	replace
62	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.START_OBJECT)  {  [CE]  cannot  find  symbol  START_OBJECT  [FE]                  JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if(in.peek()  ==  JsonToken.START_OBJECT)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.START_OBJECT)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  START_OBJECT	5	None	replace
63	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.START_ARRAY)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]                    JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.START_ARRAY)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.VALUE_STRING  ||  in.peek()  ==  JsonToken.START_ARRAY)  {	  if(in.peek()    ==    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	5	None	replace
64	[BUG]  [BUGGY]  if(in!=  null  ||  in.peek()!=  JsonToken.VALUE_STRING)  {  [CE]  cannot  find  symbol  VALUE_STRING  [FE]            JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if(in!=  null  ||  in.peek()!=  JsonToken.VALUE_STRING)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=  null  ||  in.peek()!=  JsonToken.VALUE_STRING)  {	  if(in.peek()!=    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	4	None	replace
65	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.START_OBJECT)  {  [CE]  cannot  find  symbol  START_OBJECT  [FE]              JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if(in.peek()!=  JsonToken.START_OBJECT)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()!=  JsonToken.START_OBJECT)  {	  if(in.peek()!=    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  START_OBJECT	4	None	replace
66	[BUG]  [BUGGY]  if  (in  ==  null  ||  in.read()!=  JsonToken.STRING)  {  [CE]  cannot  find  symbol  [FE]    JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if  (in  ==  null  ||  in.read()!=  JsonToken.STRING)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if  (in  ==  null  ||  in.read()!=  JsonToken.STRING)  {	  if    (in    ==    null    ||    in.peek()!=    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
67	[BUG]  [BUGGY]  if(in!=  null  ||  in.next()!=  JsonToken.STRING)  {  [CE]  cannot  find  symbol  [FE]        JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if(in!=  null  ||  in.next()!=  JsonToken.STRING)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=  null  ||  in.next()!=  JsonToken.STRING)  {	  if(in.next()!=    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
68	[BUG]  [BUGGY]  if(in.next()!=  JsonToken.STRING  ||  in.nextString()!=  JsonToken.END_ARRAY)  {  [CE]  cannot  find  symbol  [FE]          JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if(in.next()!=  JsonToken.STRING  ||  in.nextString()!=  JsonToken.END_ARRAY)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.next()!=  JsonToken.STRING  ||  in.nextString()!=  JsonToken.END_ARRAY)  {	  if(in.next()!=    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
69	[BUG]  [BUGGY]  if  (in.peek()  ==  JsonToken.STRING)  {  if  (Integer.peek()  ==  JsonToken.STRING)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if  (in.peek()  ==  JsonToken.STRING)  {  if  (Integer.peek()  ==  JsonToken.STRING)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if    (in.peek()    ==    JsonToken.STRING)    {    if  (Integer.peek()  ==  JsonToken.STRING)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
70	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if(in!=  null  &&  in.peek()!=  JsonToken.STRING)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	add	if(in!=  null  &&  in.peek()!=  JsonToken.STRING)  {	  if    (in!=    null    ||    in.peek()!=    JsonToken.STRING)    {    	compilable	  [FE]  JsonParseException  	10	2	replace
71	[BUG]  [BUGGY]  if(in!=  null  &&  in.peek()!=  JsonToken.STRING)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if(in!=  null  &&  in.peek()!=  JsonToken.STRING)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in!=  null  &&  in.peek()!=  JsonToken.STRING)  {	  if    (in!=    null    ||    in.peek()!=    JsonToken.STRING)    {    	compilable	  [FE]  JsonParseException  	10	2	replace
72	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if(in  ==  null)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	add	if(in  ==  null)  {	  if    (in!=    null    ||    in.peek()!=    JsonToken.STRING)    {    	compilable	  [FE]  IllegalStateException  	10	1	replace
73	[BUG]  [BUGGY]  if(in  ==  null)  {  [FE]  IllegalStateException  [FE]      JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if(in  ==  null)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in  ==  null)  {	  if    (in!=    null    ||    in.peek()!=    JsonToken.STRING)    {    	compilable	  [FE]  IllegalStateException  	10	1	replace
74	[BUG]  [BUGGY]  if  (in.nextString()!=  JsonToken.STRING  ||  in.nextString()!=  JsonToken.STRING)  {  [CE]  incomparable  types:  String  and  JsonToken  [FE]          JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if  (in.nextString()!=  JsonToken.STRING  ||  in.nextString()!=  JsonToken.STRING)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if  (in.nextString()!=  JsonToken.STRING  ||  in.nextString()!=  JsonToken.STRING)  {	  if    (in.nextString()!=    JsonToken.STRING)    {    	non-compiled	[CE]  incomparable  types:  String  and  JsonToken	3	None	replace
75	[BUG]  [BUGGY]  if(in.nextString()!=  JsonToken.STRING  ||  in.nextString()!=  JsonToken.END_ARRAY)  {  [CE]  incomparable  types:  String  and  JsonToken  [FE]            JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if(in.nextString()!=  JsonToken.STRING  ||  in.nextString()!=  JsonToken.END_ARRAY)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.nextString()!=  JsonToken.STRING  ||  in.nextString()!=  JsonToken.END_ARRAY)  {	  if    (in.nextString()!=    JsonToken.STRING)    {    	non-compiled	[CE]  incomparable  types:  String  and  JsonToken	3	None	replace
76	[BUG]  [BUGGY]  in.defaultReader();  [CE]  illegal  start  of  type  [FE]                JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  in.defaultReader();  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	in.defaultReader();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
77	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.START_ARRAY)  {  [CE]  cannot  find  symbol  START_ARRAY  [FE]    JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {    [BUGGY]  if(in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.START_ARRAY)  {  [BUGGY]    throw  new  JsonParseException(   "The  date  should  be  a  string  value   ");  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.5773502691896258	99	99	2	replace	if(in.peek()  ==  JsonToken.STRING  ||  in.peek()  ==  JsonToken.START_ARRAY)  {	  if    (in.peek()    ==    JsonToken.STRING)    {    	non-compiled	[CE]  cannot  find  symbol  START_ARRAY	2	None	replace
