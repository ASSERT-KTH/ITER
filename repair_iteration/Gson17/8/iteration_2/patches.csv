bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(enUsFormat,  localFormat);  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(enUsFormat,  localFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DefaultDateFormat(enUsFormat,  localFormat);	  this.enUsFormat    =    new    DefaultDateFormat(localFormat);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
2	[BUG]  [BUGGY]  this.localFormat  =  new  DefaultDateFormat(enUsFormat);  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.localFormat  =  new  DefaultDateFormat(enUsFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.localFormat  =  new  DefaultDateFormat(enUsFormat);	  this.enUsFormat    =    new    DefaultDateFormat(localFormat);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
3	[BUG]  [BUGGY]  this.localFormat  =  new  DefaultDateFormat(dateType);  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.localFormat  =  new  DefaultDateFormat(dateType);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.localFormat  =  new  DefaultDateFormat(dateType);	  this.enUsFormat    =    new    DefaultDateFormat(localFormat);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
4	[BUG]  [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(localFormat,  enUsFormat);  [CE]  cannot  find  symbol  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(localFormat,  enUsFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DefaultDateFormat(localFormat,  enUsFormat);	  this.enUsFormat    =    new    DefaultDateFormat(localFormat);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
5	[BUG]  [BUGGY]  This.localFormat  =  Locale.getDefault();  [CE]  cannot  find  symbol  This  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  This.localFormat  =  Locale.getDefault();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	This.localFormat  =  Locale.getDefault();	  if(localFormat    ==    null)    {    this.localFormat    =    Locale.getDefault();    }    	non-compiled	[CE]  cannot  find  symbol  This	78	None	replace
6	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  +  SHORT_NAME;  [CE]  cannot  find  symbol  SHORT_NAME  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat  +  SHORT_NAME;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  +  SHORT_NAME;	  this.enUsFormat    =    enUsFormat    +    localeFormat;    	non-compiled	[CE]  cannot  find  symbol  SHORT_NAME	70	None	replace
7	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  +  timeType;  [CE]  cannot  find  symbol  timeType  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat  +  timeType;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  +  timeType;	  this.enUsFormat    =    enUsFormat    +    localeFormat;    	non-compiled	[CE]  cannot  find  symbol  timeType	70	None	replace
8	[BUG]  [BUGGY]  this.enUsFormat  =  dateType  +  localeFormat;  [CE]  cannot  find  symbol  localeFormat  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  dateType  +  localeFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  dateType  +  localeFormat;	  this.enUsFormat    =    enUsFormat    +    localeFormat;    	non-compiled	[CE]  cannot  find  symbol  localeFormat	70	None	replace
9	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    Class    <?    extends    Date>    localFormat    =    Locale.getDefault();    if(localFormat!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	58	None	replace
10	[BUG]  [BUGGY]  if(dateType  ==  Date.class)  {  if(localFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(dateType  ==  Date.class)  {  if(localFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(dateType  ==  Date.class)  {  if(localFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    Class    <?    extends    Date>    localFormat    =    Locale.getDefault();    if(localFormat!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	58	None	replace
11	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  if(localFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(dateType!=  Date.class)  {  if(localFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(dateType!=  Date.class)  {  if(localFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    Class    <?    extends    Date>    localFormat    =    Locale.getDefault();    if(localFormat!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	58	None	replace
12	[BUG]  [BUGGY]  if(localFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    Class    <?    extends    Date>    localFormat    =    Locale.getDefault();    if(localFormat!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	58	None	replace
13	[BUG]  [BUGGY]  if(enUsFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    Class    <?    extends    Date>    localFormat    =    Locale.getDefault();    if(localFormat!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	58	None	replace
14	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]          junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }	  this.enUsFormat    =    localFormat;    if(localFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    this.enUsFormat    =    localFormat;    }    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	84	None	replace
15	[BUG]  [BUGGY]  if(dateType  ==  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  [CE]  ';'  expected  [FE]            junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(dateType  ==  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(dateType  ==  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }	  this.enUsFormat    =    localFormat;    if(localFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    this.enUsFormat    =    localFormat;    }    	non-compiled	[CE]  ';'  expected	84	None	replace
16	[BUG]  [BUGGY]  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]              junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }	  this.enUsFormat    =    localFormat;    if(localFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    this.enUsFormat    =    localFormat;    }    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	84	None	replace
17	[BUG]  [BUGGY]  this.dateType  =  dateType;  [CE]  variable  dateType  might  already  have  been  assigned  [FE]                junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.dateType  =  dateType;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.dateType  =  dateType;	  this.enUsFormat    =    localFormat;    if(localFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    this.enUsFormat    =    localFormat;    }    	non-compiled	[CE]  variable  dateType  might  already  have  been  assigned	84	None	replace
18	[BUG]  [BUGGY]  if(dateType  ==  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  [CE]  ';'  expected  [FE]                  junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(dateType  ==  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(dateType  ==  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }	  this.enUsFormat    =    localFormat;    if(localFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    this.enUsFormat    =    localFormat;    }    	non-compiled	[CE]  ';'  expected	84	None	replace
19	[BUG]  [BUGGY]  if(dateType  ==  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat  ==  null)  {  this.enUsFormat  =  new  DateFormat();  }  [CE]  ';'  expected  [FE]                    junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(dateType  ==  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat  ==  null)  {  this.enUsFormat  =  new  DateFormat();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(dateType  ==  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat  ==  null)  {  this.enUsFormat  =  new  DateFormat();  }	  this.enUsFormat    =    localFormat;    if(localFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    this.enUsFormat    =    localFormat;    }    	non-compiled	[CE]  ';'  expected	84	None	replace
20	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  localFormat  =  Locale.getDefault();  }  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  localFormat  =  Locale.getDefault();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  localFormat  =  Locale.getDefault();  }	  if(localFormat    ==    null)    {    Class    <?    extends    Date>    localFormat    =    Locale.getDefault();    if(localFormat!=    null)    {    localFormat    =    Locale.getDefault();    }    	non-compiled	[CE]  ';'  expected	59	None	replace
21	[BUG]  [BUGGY]  if(enUsFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  localFormat  =  Locale.getDefault();  }  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  localFormat  =  Locale.getDefault();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  localFormat  =  Locale.getDefault();  }	  if(localFormat    ==    null)    {    Class    <?    extends    Date>    localFormat    =    Locale.getDefault();    if(localFormat!=    null)    {    localFormat    =    Locale.getDefault();    }    	non-compiled	[CE]  ';'  expected	59	None	replace
22	[BUG]  [BUGGY]  if(enUsFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat  ==  null)  {  localFormat  =  Locale.getDefault();  }  [CE]  ';'  expected  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat  ==  null)  {  localFormat  =  Locale.getDefault();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat  ==  null)  {  localFormat  =  Locale.getDefault();  }	  if(localFormat    ==    null)    {    Class    <?    extends    Date>    localFormat    =    Locale.getDefault();    if(localFormat!=    null)    {    localFormat    =    Locale.getDefault();    }    	non-compiled	[CE]  ';'  expected	59	None	replace
23	[BUG]  [BUGGY]  if(dateType  ==  Date.class)  {  if(localFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  localFormat  =  Locale.getDefault();  }  [CE]  ';'  expected  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(dateType  ==  Date.class)  {  if(localFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  localFormat  =  Locale.getDefault();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(dateType  ==  Date.class)  {  if(localFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  localFormat  =  Locale.getDefault();  }	  if(localFormat    ==    null)    {    Class    <?    extends    Date>    localFormat    =    Locale.getDefault();    if(localFormat!=    null)    {    localFormat    =    Locale.getDefault();    }    	non-compiled	[CE]  ';'  expected	59	None	replace
24	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  if(localFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  localFormat  =  Locale.getDefault();  }  [CE]  ';'  expected  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(dateType!=  Date.class)  {  if(localFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  localFormat  =  Locale.getDefault();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(dateType!=  Date.class)  {  if(localFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  localFormat  =  Locale.getDefault();  }	  if(localFormat    ==    null)    {    Class    <?    extends    Date>    localFormat    =    Locale.getDefault();    if(localFormat!=    null)    {    localFormat    =    Locale.getDefault();    }    	non-compiled	[CE]  ';'  expected	59	None	replace
25	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  if(localFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  }  [CE]  ';'  expected  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(dateType!=  Date.class)  {  if(localFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(dateType!=  Date.class)  {  if(localFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  }	  if(localFormat    ==    null)    {    Class    <?    extends    Date>    localFormat    =    Locale.getDefault();    if(localFormat!=    null)    {    localFormat    =    Locale.getDefault();    }    	non-compiled	[CE]  ';'  expected	59	None	replace
26	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  JsonParseException(   "   ");  }  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  JsonParseException( "   ");  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  JsonParseException(   "   ");  }  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  JsonParseException( "   ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    JsonParseException(   "   ");    }    if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  JsonParseException( "   ");  }	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	91	None	add
27	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  JsonParseException(   "   ");  }  if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  JsonParseException( "   ");  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]      JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  JsonParseException(   "   ");  }  if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  JsonParseException( "   ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    JsonParseException(   "   ");    }    if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  JsonParseException( "   ");  }	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	91	None	add
28	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  JsonParseException(   "   ");  }  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  JsonParseException( "... ");  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]        JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  JsonParseException(   "   ");  }  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  JsonParseException( "... ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    JsonParseException(   "   ");    }    if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  JsonParseException( "... ");  }	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	91	None	add
29	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  JsonParseException(   "   ");  }  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  JsonParseException( " ".);  }  [CE]  <identifier>  expected  [FE]          JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  JsonParseException(   "   ");  }  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  JsonParseException( " ".);  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    JsonParseException(   "   ");    }    if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  JsonParseException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	91	None	add
30	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  JsonParseException(   "   ");  }  if(enUsFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  JsonParseException( "   ");  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]            JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  JsonParseException(   "   ");  }  if(enUsFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  JsonParseException( "   ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    JsonParseException(   "   ");    }    if(enUsFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  JsonParseException( "   ");  }	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	91	None	add
31	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	add	if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }	  if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	compilable	  [FE]  IllegalArgumentException  	115	10	replace
32	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }	  if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	compilable	  [FE]  IllegalArgumentException  	115	10	replace
33	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	add	if(localFormat  ==  null)  {  this.enUsFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }	  if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	compilable	  [FE]  IllegalArgumentException  	115	10	replace
34	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.enUsFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }	  if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	compilable	  [FE]  IllegalArgumentException  	115	10	replace
35	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localeFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [CE]  cannot  find  symbol  localeFormat  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localeFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.enUsFormat  =  localeFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }	  if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	non-compiled	[CE]  cannot  find  symbol  localeFormat	115	None	replace
36	[BUG]  [BUGGY]  this.enUsFormat  =  localFormat  +  enUsFormat;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  localFormat  +  enUsFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  localFormat  +  enUsFormat;	  this.enUsFormat    =    enUsFormat    +    localFormat;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	14	None	replace
37	[BUG]  [BUGGY]  this.enUsFormat  =  localeFormat  +  enUsFormat;  [CE]  cannot  find  symbol  localeFormat  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  localeFormat  +  enUsFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  localeFormat  +  enUsFormat;	  this.enUsFormat    =    enUsFormat    +    localFormat;    	non-compiled	[CE]  cannot  find  symbol  localeFormat	14	None	replace
38	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  +  UNKNOWN_SYNTHETIC;  [CE]  cannot  find  symbol  UNKNOWN_SYNTHETIC  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat  +  UNKNOWN_SYNTHETIC;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  +  UNKNOWN_SYNTHETIC;	  this.enUsFormat    =    enUsFormat    +    localFormat;    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SYNTHETIC	14	None	replace
39	[BUG]  [BUGGY]  this.enUsFormat  =  dateType  +  localFormat;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  dateType  +  localFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  dateType  +  localFormat;	  this.enUsFormat    =    enUsFormat    +    localFormat;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	14	None	replace
40	[BUG]  [BUGGY]  this.enUsFormat  =  dateType  +  2;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  dateType  +  2;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  dateType  +  2;	  this.enUsFormat    =    enUsFormat    +    2;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	47	None	replace
41	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat,  localFormat  +  2;  [CE]  ';'  expected  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat,  localFormat  +  2;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat,  localFormat  +  2;	  this.enUsFormat    =    enUsFormat    +    2;    	non-compiled	[CE]  ';'  expected	47	None	replace
42	[BUG]  [BUGGY]  junit.framework.ComparisonFailure:  expected  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<   "[Jan  1    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  junit.framework.ComparisonFailure:  expected  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	junit.framework.ComparisonFailure:  expected	  if(enUsFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	90	None	replace
43	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      junit.framework.ComparisonFailure:  expected:<   "[Jan  1    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat!=  null)  {  this.enUsFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	add	if(localFormat!=  null)  {  this.enUsFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(enUsFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  JsonParseException  	90	2	replace
44	[BUG]  [BUGGY]  if(localFormat!=  null)  {  this.enUsFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  JsonParseException  [FE]      junit.framework.ComparisonFailure:  expected:<   "[Jan  1    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat!=  null)  {  this.enUsFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat!=  null)  {  this.enUsFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(enUsFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  JsonParseException  	90	2	replace
45	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:< "[Jan  1  [FE]        junit.framework.ComparisonFailure:  expected:<   "[Jan  1    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	add	if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(enUsFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:< "[Jan  1  	90	3	replace
46	[BUG]  [BUGGY]  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  junit.framework.ComparisonFailure:  expected:< "[Jan  1  [FE]        junit.framework.ComparisonFailure:  expected:<   "[Jan  1    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(enUsFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:< "[Jan  1  	90	3	replace
47	[BUG]  [BUGGY]  junit.framework.ComparisonFailure:  expected:  <   "[Jan  1  >>  junit.framework.ComparisonFailure;  }  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<   "[Jan  1    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  junit.framework.ComparisonFailure:  expected:  <   "[Jan  1  >>  junit.framework.ComparisonFailure;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	junit.framework.ComparisonFailure:  expected:  <   "[Jan  1  >>  junit.framework.ComparisonFailure;  }	  if(enUsFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	90	None	replace
48	[BUG]  [BUGGY]  this.enUsFormat  =  dateType  +  enUsFormat;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  dateType  +  enUsFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  dateType  +  enUsFormat;	  this.enUsFormat    =    enUsFormat    +    dateType;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	39	None	replace
49	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  +  dateType,  localFormat;  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat  +  dateType,  localFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  +  dateType,  localFormat;	  this.enUsFormat    =    enUsFormat    +    dateType;    	non-compiled	[CE]  ';'  expected	39	None	replace
50	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  +  DateType.class;  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat  +  DateType.class;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  +  DateType.class;	  this.enUsFormat    =    enUsFormat    +    dateType;    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
51	[BUG]  [BUGGY]  this.dateType  =  type;  [CE]  cannot  find  symbol  type  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.dateType  =  type;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.dateType  =  type;	  this.dateType    =    enUsFormat;    	non-compiled	[CE]  cannot  find  symbol  type	36	None	replace
52	[BUG]  [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  enUsFormat,  localFormat);  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  enUsFormat,  localFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.dateType  =  new  DateTypeAdapter(dateType,  enUsFormat,  localFormat);	  this.dateType    =    enUsFormat;    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
53	[BUG]  [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  enUsFormat);  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  enUsFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.dateType  =  new  DateTypeAdapter(dateType,  enUsFormat);	  this.dateType    =    enUsFormat;    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
54	[BUG]  [BUGGY]  this.dateType  =  enUsFormat,  localFormat);  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.dateType  =  enUsFormat,  localFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.dateType  =  enUsFormat,  localFormat);	  this.dateType    =    enUsFormat;    	non-compiled	[CE]  ';'  expected	36	None	replace
55	[BUG]  [BUGGY]  this.dateType  =  enUsFormat,  localFormat;  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.dateType  =  enUsFormat,  localFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.dateType  =  enUsFormat,  localFormat;	  this.dateType    =    enUsFormat;    	non-compiled	[CE]  ';'  expected	36	None	replace
56	[BUG]  [BUGGY]  this.enUsFormat  =  localFormat  &&  enUsFormat;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  localFormat  &&  enUsFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  localFormat  &&  enUsFormat;	  this.enUsFormat    =    enUsFormat    &&    localFormat;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	4	None	replace
57	[BUG]  [BUGGY]  this.enUsFormat  =  localeFormat  &&  enUsFormat;  [CE]  cannot  find  symbol  localeFormat  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  localeFormat  &&  enUsFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  localeFormat  &&  enUsFormat;	  this.enUsFormat    =    enUsFormat    &&    localFormat;    	non-compiled	[CE]  cannot  find  symbol  localeFormat	4	None	replace
58	[BUG]  [BUGGY]  this.enUsFormat  =  dateType  &&  localFormat;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  dateType  &&  localFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  dateType  &&  localFormat;	  this.enUsFormat    =    enUsFormat    &&    localFormat;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	4	None	replace
59	[BUG]  [BUGGY]  this.enUsFormat  =  localeType  ||  enUsFormat;  [CE]  cannot  find  symbol  localeType  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  localeType  ||  enUsFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  localeType  ||  enUsFormat;	  this.enUsFormat    =    localFormat    ||    enUsFormat;    	non-compiled	[CE]  cannot  find  symbol  localeType	1	None	replace
60	[BUG]  [BUGGY]  this.enUsFormat  =  dateType  ||  enUsFormat;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  dateType  ||  enUsFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  dateType  ||  enUsFormat;	  this.enUsFormat    =    localFormat    ||    enUsFormat;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	1	None	replace
61	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getInstance();  [CE]  cannot  find  symbol  LocalFormat  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.localFormat  =  LocalFormat.getInstance();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.localFormat  =  LocalFormat.getInstance();	  if(localFormat    ==    null)    {    this.localFormat    =    LocalFormat.getInstance();    }    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	99	None	replace
62	[BUG]  [BUGGY]  this.localFormat  =  localFormat.getInstance();  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.localFormat  =  localFormat.getInstance();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.localFormat  =  localFormat.getInstance();	  if(localFormat    ==    null)    {    this.localFormat    =    LocalFormat.getInstance();    }    	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	99	None	replace
63	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  localFormat.getInstance();  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  localFormat.getInstance();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  localFormat.getInstance();  }	  if(localFormat    ==    null)    {    this.localFormat    =    LocalFormat.getInstance();    }    	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	99	None	replace
64	[BUG]  [BUGGY]  This.localFormat  =  LocalFormat.getInstance();  [CE]  cannot  find  symbol  This  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  This.localFormat  =  LocalFormat.getInstance();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	This.localFormat  =  LocalFormat.getInstance();	  if(localFormat    ==    null)    {    this.localFormat    =    LocalFormat.getInstance();    }    	non-compiled	[CE]  cannot  find  symbol  This	99	None	replace
65	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(localFormat);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(localFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(localFormat);	  if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    this.enUsFormat    =    enUsFormat;    }    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	113	None	replace
66	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat.getInstance();  this.enUsFormat  =  enUsFormat.getInstance();  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]    junit.framework.ComparisonFailure:  expected:<   "[March  18    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat.getInstance();  this.enUsFormat  =  enUsFormat.getInstance();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat    =    enUsFormat.getInstance();    this.enUsFormat  =  enUsFormat.getInstance();	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	40	None	add
67	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat.getInstance();  if(enUsFormat!=  null)  {  this.enUsFormat  =  enUsFormat.getInstance();  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]      junit.framework.ComparisonFailure:  expected:<   "[March  18    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat.getInstance();  if(enUsFormat!=  null)  {  this.enUsFormat  =  enUsFormat.getInstance();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat    =    enUsFormat.getInstance();    if(enUsFormat!=  null)  {  this.enUsFormat  =  enUsFormat.getInstance();  }	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	40	None	add
68	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat.getInstance();  if(enUsFormat!=  null)  {  this.enUsFormat  =  enUsFormat.getInstance();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]        junit.framework.ComparisonFailure:  expected:<   "[March  18    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat.getInstance();  if(enUsFormat!=  null)  {  this.enUsFormat  =  enUsFormat.getInstance();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat    =    enUsFormat.getInstance();    if(enUsFormat!=  null)  {  this.enUsFormat  =  enUsFormat.getInstance();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	40	None	add
69	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat.getInstance();  if(enUsFormat!=  null)  {  this.enUsFormat  =  enUsFormat.getInstance();  }  else  {  this.localFormat  =  localFormat;  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]          junit.framework.ComparisonFailure:  expected:<   "[March  18    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat.getInstance();  if(enUsFormat!=  null)  {  this.enUsFormat  =  enUsFormat.getInstance();  }  else  {  this.localFormat  =  localFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat    =    enUsFormat.getInstance();    if(enUsFormat!=  null)  {  this.enUsFormat  =  enUsFormat.getInstance();  }  else  {  this.localFormat  =  localFormat;  }	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	40	None	add
70	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat.getInstance();  enUsFormat  =  enUsFormat.getInstance();  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]            junit.framework.ComparisonFailure:  expected:<   "[March  18    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat.getInstance();  enUsFormat  =  enUsFormat.getInstance();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat    =    enUsFormat.getInstance();    enUsFormat  =  enUsFormat.getInstance();	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	40	None	add
71	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat.getInstance();  if(enUsFormat.getInstance()!=  null)  {  this.enUsFormat  =  enUsFormat.getInstance();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]              junit.framework.ComparisonFailure:  expected:<   "[March  18    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat.getInstance();  if(enUsFormat.getInstance()!=  null)  {  this.enUsFormat  =  enUsFormat.getInstance();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat    =    enUsFormat.getInstance();    if(enUsFormat.getInstance()!=  null)  {  this.enUsFormat  =  enUsFormat.getInstance();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	40	None	add
72	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat.getInstance();  if(enUsFormat.getInstance()!=  null)  {  this.enUsFormat  =  enUsFormat.getInstance();  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]                junit.framework.ComparisonFailure:  expected:<   "[March  18    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat.getInstance();  if(enUsFormat.getInstance()!=  null)  {  this.enUsFormat  =  enUsFormat.getInstance();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat    =    enUsFormat.getInstance();    if(enUsFormat.getInstance()!=  null)  {  this.enUsFormat  =  enUsFormat.getInstance();  }	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	40	None	add
73	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat.getInstance();  if(enUsFormat!=  null)  {  this.localFormat  =  localFormat.getInstance();  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]                  junit.framework.ComparisonFailure:  expected:<   "[March  18    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat.getInstance();  if(enUsFormat!=  null)  {  this.localFormat  =  localFormat.getInstance();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat    =    enUsFormat.getInstance();    if(enUsFormat!=  null)  {  this.localFormat  =  localFormat.getInstance();  }	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	40	None	add
74	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat.getDefault();  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat.getDefault();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat.getDefault();	  this.enUsFormat    =    EnUsFormat.getDefault();    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
75	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat.getType();  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat.getType();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat.getType();	  this.enUsFormat    =    EnUsFormat.getDefault();    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
76	[BUG]  [BUGGY]  this.enUsFormat  =  localFormat.getDefault();  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  localFormat.getDefault();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  localFormat.getDefault();	  this.enUsFormat    =    EnUsFormat.getDefault();    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
77	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat.getValue();  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat.getValue();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat.getValue();	  this.enUsFormat    =    EnUsFormat.getDefault();    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
78	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat.getLast();  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat.getLast();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat.getLast();	  this.enUsFormat    =    EnUsFormat.getDefault();    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
79	[BUG]  [BUGGY]  this.enUsFormat  =  localFormat,  enUsFormat  +  1;  [CE]  ';'  expected  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  localFormat,  enUsFormat  +  1;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  localFormat,  enUsFormat  +  1;	  this.enUsFormat    =    enUsFormat,    localFormat    +    1;    	non-compiled	[CE]  ';'  expected	48	None	replace
80	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat,  localFormat  +  3;  [CE]  ';'  expected  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat,  localFormat  +  3;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat,  localFormat  +  3;	  this.enUsFormat    =    enUsFormat,    localFormat    +    1;    	non-compiled	[CE]  ';'  expected	48	None	replace
81	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat,  localeFormat  +  1;  [CE]  ';'  expected  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat,  localeFormat  +  1;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat,  localeFormat  +  1;	  this.enUsFormat    =    enUsFormat,    localFormat    +    1;    	non-compiled	[CE]  ';'  expected	48	None	replace
82	[BUG]  [BUGGY]  this.enUsFormat  =  localeFormat,  enUsFormat  +  1;  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  localeFormat,  enUsFormat  +  1;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  localeFormat,  enUsFormat  +  1;	  this.enUsFormat    =    enUsFormat,    localFormat    +    1;    	non-compiled	[CE]  ';'  expected	48	None	replace
83	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat,  localFormat  +  4;  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat,  localFormat  +  4;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat,  localFormat  +  4;	  this.enUsFormat    =    enUsFormat,    localFormat    +    1;    	non-compiled	[CE]  ';'  expected	48	None	replace
84	[BUG]  [BUGGY]  this.dateFormat  =  new  DateFormat(dateType,  enUsFormat,  localFormat);  [CE]  cannot  find  symbol  dateFormat  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.dateFormat  =  new  DateFormat(dateType,  enUsFormat,  localFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.dateFormat  =  new  DateFormat(dateType,  enUsFormat,  localFormat);	  this.dateFormat    =    new    DateFormat(dateType,    enUsFormat);    	non-compiled	[CE]  cannot  find  symbol  dateFormat	110	None	replace
85	[BUG]  [BUGGY]  this.dateFormat  =  new  DateFormat(dateType,  localFormat);  [CE]  cannot  find  symbol  dateFormat  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.dateFormat  =  new  DateFormat(dateType,  localFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.dateFormat  =  new  DateFormat(dateType,  localFormat);	  this.dateFormat    =    new    DateFormat(dateType,    enUsFormat);    	non-compiled	[CE]  cannot  find  symbol  dateFormat	110	None	replace
86	[BUG]  [BUGGY]  this.dateFormat  =  new  DateFormat(dateType,  enUsFormat,  localeFormat);  [CE]  cannot  find  symbol  dateFormat  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.dateFormat  =  new  DateFormat(dateType,  enUsFormat,  localeFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.dateFormat  =  new  DateFormat(dateType,  enUsFormat,  localeFormat);	  this.dateFormat    =    new    DateFormat(dateType,    enUsFormat);    	non-compiled	[CE]  cannot  find  symbol  dateFormat	110	None	replace
87	[BUG]  [BUGGY]  this.dateFormat  =  new  DateFormat(type,  enUsFormat);  [CE]  cannot  find  symbol  dateFormat  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.dateFormat  =  new  DateFormat(type,  enUsFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.dateFormat  =  new  DateFormat(type,  enUsFormat);	  this.dateFormat    =    new    DateFormat(dateType,    enUsFormat);    	non-compiled	[CE]  cannot  find  symbol  dateFormat	110	None	replace
88	[BUG]  [BUGGY]  this.dateFormat  =  new  DateFormat(dateType,  dateType);  [CE]  cannot  find  symbol  dateFormat  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.dateFormat  =  new  DateFormat(dateType,  dateType);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.dateFormat  =  new  DateFormat(dateType,  dateType);	  this.dateFormat    =    new    DateFormat(dateType,    enUsFormat);    	non-compiled	[CE]  cannot  find  symbol  dateFormat	110	None	replace
89	[BUG]  [BUGGY]  this.dateFormat  =  new  DateFormat(dateType,  locale);  [CE]  cannot  find  symbol  dateFormat  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.dateFormat  =  new  DateFormat(dateType,  locale);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.dateFormat  =  new  DateFormat(dateType,  locale);	  this.dateFormat    =    new    DateFormat(dateType,    enUsFormat);    	non-compiled	[CE]  cannot  find  symbol  dateFormat	110	None	replace
90	[BUG]  [BUGGY]  DateFormat  localFormat  =  dateType.getLocalFamily();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  DateFormat  localFormat  =  dateType.getLocalFamily();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	DateFormat  localFormat  =  dateType.getLocalFamily();	  DateFormat    localFormat    =    enUsFormat.getLocalFamily();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	101	None	replace
91	[BUG]  [BUGGY]  DateFormat  localFormat  =  enUsFormat.withLocalFamily(localFormat);  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  DateFormat  localFormat  =  enUsFormat.withLocalFamily(localFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	DateFormat  localFormat  =  enUsFormat.withLocalFamily(localFormat);	  DateFormat    localFormat    =    enUsFormat.getLocalFamily();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	101	None	replace
92	[BUG]  [BUGGY]  DateFormat  localFormat  =  this.enUsFormat.getLocalFamily();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  DateFormat  localFormat  =  this.enUsFormat.getLocalFamily();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	DateFormat  localFormat  =  this.enUsFormat.getLocalFamily();	  DateFormat    localFormat    =    enUsFormat.getLocalFamily();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	101	None	replace
93	[BUG]  [BUGGY]  DateFormat  localFormat  =  enUsFormat.getlocalFamily();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  DateFormat  localFormat  =  enUsFormat.getlocalFamily();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	DateFormat  localFormat  =  enUsFormat.getlocalFamily();	  DateFormat    localFormat    =    enUsFormat.getLocalFamily();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	101	None	replace
94	[BUG]  [BUGGY]  DateFormat  localFormat  =  enUsFormat.findLocalFamily();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  DateFormat  localFormat  =  enUsFormat.findLocalFamily();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	DateFormat  localFormat  =  enUsFormat.findLocalFamily();	  DateFormat    localFormat    =    enUsFormat.getLocalFamily();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	101	None	replace
95	[BUG]  [BUGGY]  DateFormat  localFormat  =  enUsFormat.withLocalFamily();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  DateFormat  localFormat  =  enUsFormat.withLocalFamily();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	DateFormat  localFormat  =  enUsFormat.withLocalFamily();	  DateFormat    localFormat    =    enUsFormat.getLocalFamily();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	101	None	replace
96	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	add	if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  this.enUsFormat    =    localFormat;    if(localFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	32	10	replace
97	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]                junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  this.enUsFormat    =    localFormat;    if(localFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	32	10	replace
98	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                  junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  this.enUsFormat    =    localFormat;    if(localFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	32	None	replace
99	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat.clone();  [CE]  incompatible  types  [FE]    junit.framework.ComparisonFailure:  expected:<   "[March  18    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat.clone();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat.clone();	  this.enUsFormat    =    enUsFormat.getInstance();    	non-compiled	[CE]  incompatible  types	41	None	replace
100	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat.getParent();  [CE]  cannot  find  symbol  [FE]      junit.framework.ComparisonFailure:  expected:<   "[March  18    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat.getParent();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat.getParent();	  this.enUsFormat    =    enUsFormat.getInstance();    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
101	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat.getDate();  [CE]  cannot  find  symbol  [FE]        junit.framework.ComparisonFailure:  expected:<   "[March  18    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat.getDate();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat.getDate();	  this.enUsFormat    =    enUsFormat.getInstance();    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
102	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat.getEnd();  [CE]  cannot  find  symbol  [FE]          junit.framework.ComparisonFailure:  expected:<   "[March  18    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat.getEnd();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat.getEnd();	  this.enUsFormat    =    enUsFormat.getInstance();    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
103	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat,  new  DateFormat(dateType));  [CE]  ';'  expected  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat,  new  DateFormat(dateType));  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat,  new  DateFormat(dateType));	  this.enUsFormat    =    enUsFormat,    new    DateFormat(localFormat));    	non-compiled	[CE]  ';'  expected	103	None	replace
104	[BUG]  [BUGGY]  this.enUsFormat  =  localFormat,  new  DateFormat(enUsFormat));  [CE]  ';'  expected  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  localFormat,  new  DateFormat(enUsFormat));  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  localFormat,  new  DateFormat(enUsFormat));	  this.enUsFormat    =    enUsFormat,    new    DateFormat(localFormat));    	non-compiled	[CE]  ';'  expected	103	None	replace
105	[BUG]  [BUGGY]  this.enUsFormat  =  localeFormat,  new  DateFormat(enUsFormat));  [CE]  ';'  expected  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  localeFormat,  new  DateFormat(enUsFormat));  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  localeFormat,  new  DateFormat(enUsFormat));	  this.enUsFormat    =    enUsFormat,    new    DateFormat(localFormat));    	non-compiled	[CE]  ';'  expected	103	None	replace
106	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat,  new  DateFormat(this.localFormat));  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat,  new  DateFormat(this.localFormat));  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat,  new  DateFormat(this.localFormat));	  this.enUsFormat    =    enUsFormat,    new    DateFormat(localFormat));    	non-compiled	[CE]  ';'  expected	103	None	replace
107	[BUG]  [BUGGY]  this.localFormat  =  localFormat,  new  DateFormat(enUsFormat));  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.localFormat  =  localFormat,  new  DateFormat(enUsFormat));  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.localFormat  =  localFormat,  new  DateFormat(enUsFormat));	  this.enUsFormat    =    enUsFormat,    new    DateFormat(localFormat));    	non-compiled	[CE]  ';'  expected	103	None	replace
108	[BUG]  [BUGGY]  this.enUsFormat  =  dateType,  new  DateFormat(localFormat));  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  dateType,  new  DateFormat(localFormat));  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  dateType,  new  DateFormat(localFormat));	  this.enUsFormat    =    enUsFormat,    new    DateFormat(localFormat));    	non-compiled	[CE]  ';'  expected	103	None	replace
109	[BUG]  [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(dateType,  enUsFormat,  localFormat);  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(dateType,  enUsFormat,  localFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DefaultDateFormat(dateType,  enUsFormat,  localFormat);	  this.enUsFormat    =    new    DefaultDateFormat(dateType,    enUsFormat);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
110	[BUG]  [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(dateType,  enUsFormat,  localeFormat);  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(dateType,  enUsFormat,  localeFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DefaultDateFormat(dateType,  enUsFormat,  localeFormat);	  this.enUsFormat    =    new    DefaultDateFormat(dateType,    enUsFormat);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
111	[BUG]  [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(dateType,  EnUsFormat.class);  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(dateType,  EnUsFormat.class);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DefaultDateFormat(dateType,  EnUsFormat.class);	  this.enUsFormat    =    new    DefaultDateFormat(dateType,    enUsFormat);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
112	[BUG]  [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(dateType,  dateType);  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(dateType,  dateType);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DefaultDateFormat(dateType,  dateType);	  this.enUsFormat    =    new    DefaultDateFormat(dateType,    enUsFormat);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
113	[BUG]  [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(type,  enUsFormat);  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(type,  enUsFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DefaultDateFormat(type,  enUsFormat);	  this.enUsFormat    =    new    DefaultDateFormat(dateType,    enUsFormat);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
114	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat,  new  DateFormat(dateType);  [CE]  ';'  expected  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat,  new  DateFormat(dateType);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat,  new  DateFormat(dateType);	  this.enUsFormat    =    enUsFormat,    new    DateFormat(localFormat);    	non-compiled	[CE]  ';'  expected	106	None	replace
115	[BUG]  [BUGGY]  this.enUsFormat  =  localFormat,  new  DateFormat(enUsFormat);  [CE]  ';'  expected  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  localFormat,  new  DateFormat(enUsFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  localFormat,  new  DateFormat(enUsFormat);	  this.enUsFormat    =    enUsFormat,    new    DateFormat(localFormat);    	non-compiled	[CE]  ';'  expected	106	None	replace
116	[BUG]  [BUGGY]  this.enUsFormat  =  localeFormat,  new  DateFormat(enUsFormat);  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  localeFormat,  new  DateFormat(enUsFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  localeFormat,  new  DateFormat(enUsFormat);	  this.enUsFormat    =    enUsFormat,    new    DateFormat(localFormat);    	non-compiled	[CE]  ';'  expected	106	None	replace
117	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat,  new  DateFormat(this.localFormat);  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat,  new  DateFormat(this.localFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat,  new  DateFormat(this.localFormat);	  this.enUsFormat    =    enUsFormat,    new    DateFormat(localFormat);    	non-compiled	[CE]  ';'  expected	106	None	replace
118	[BUG]  [BUGGY]  this.localFormat  =  localFormat,  new  DateFormat(enUsFormat);  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.localFormat  =  localFormat,  new  DateFormat(enUsFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.localFormat  =  localFormat,  new  DateFormat(enUsFormat);	  this.enUsFormat    =    enUsFormat,    new    DateFormat(localFormat);    	non-compiled	[CE]  ';'  expected	106	None	replace
119	[BUG]  [BUGGY]  this.enUsFormat  =  dateType,  new  DateFormat(localFormat);  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  dateType,  new  DateFormat(localFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  dateType,  new  DateFormat(localFormat);	  this.enUsFormat    =    enUsFormat,    new    DateFormat(localFormat);    	non-compiled	[CE]  ';'  expected	106	None	replace
120	[BUG]  [BUGGY]  this.enUsFormat  =  localFormat  + ",  localFormat: "  +  enUsFormat;  [CE]  incompatible  types  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  localFormat  + ",  localFormat: "  +  enUsFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  localFormat  + ",  localFormat: "  +  enUsFormat;	  this.enUsFormat    =    enUsFormat    +   ",    localFormat:   "    +    localFormat;    	non-compiled	[CE]  incompatible  types	105	None	replace
121	[BUG]  [BUGGY]  this.enUsFormat  =  localeFormat  + ",  localFormat: "  +  enUsFormat;  [CE]  cannot  find  symbol  localeFormat  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  localeFormat  + ",  localFormat: "  +  enUsFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  localeFormat  + ",  localFormat: "  +  enUsFormat;	  this.enUsFormat    =    enUsFormat    +   ",    localFormat:   "    +    localFormat;    	non-compiled	[CE]  cannot  find  symbol  localeFormat	105	None	replace
122	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  [CE]  ';'  expected  [FE]        junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(dateType!=  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(dateType!=  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }	  this.enUsFormat    =    localFormat;    if(localFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    else    {    this.enUsFormat    =    localFormat;    }    	non-compiled	[CE]  ';'  expected	83	None	replace
123	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  [CE]  ';'  expected  [FE]          junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(dateType!=  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(dateType!=  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }	  this.enUsFormat    =    localFormat;    if(localFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    else    {    this.enUsFormat    =    localFormat;    }    	non-compiled	[CE]  ';'  expected	83	None	replace
124	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  this.enUsFormat  =  new  DateFormat();  }  [CE]  ';'  expected  [FE]            junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(dateType!=  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  this.enUsFormat  =  new  DateFormat();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(dateType!=  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  this.enUsFormat  =  new  DateFormat();  }	  this.enUsFormat    =    localFormat;    if(localFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    else    {    this.enUsFormat    =    localFormat;    }    	non-compiled	[CE]  ';'  expected	83	None	replace
125	[BUG]  [BUGGY]  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  [CE]  ';'  expected  [FE]              junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }	  this.enUsFormat    =    localFormat;    if(localFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    else    {    this.enUsFormat    =    localFormat;    }    	non-compiled	[CE]  ';'  expected	83	None	replace
126	[BUG]  [BUGGY]  this.enUsFormat  =  enType;  [CE]  cannot  find  symbol  enType  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enType;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enType;	  this.enUsFormat    =    eUsFormat;    	non-compiled	[CE]  cannot  find  symbol  enType	73	None	replace
127	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  DateFormat  enUsFormat  =  new  DateFormat(dateType);  enUsFormat  =  enUsFormat;  }  [CE]  variable  enUsFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]        junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  DateFormat  enUsFormat  =  new  DateFormat(dateType);  enUsFormat  =  enUsFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  DateFormat  enUsFormat  =  new  DateFormat(dateType);  enUsFormat  =  enUsFormat;  }	  if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    DateFormat    enUsFormat    =    new    DateFormat(dateType);    enUsFormat    =    enUsFormat;    }    	non-compiled	[CE]  variable  enUsFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	111	None	replace
128	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  new  DateFormat(dateType);  enUsFormat  =  localFormat;  }  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]          junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  new  DateFormat(dateType);  enUsFormat  =  localFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.enUsFormat  =  new  DateFormat(dateType);  enUsFormat  =  localFormat;  }	  if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    DateFormat    enUsFormat    =    new    DateFormat(dateType);    enUsFormat    =    enUsFormat;    }    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	111	None	replace
129	[BUG]  [BUGGY]  enUsFormat  =  new  DateFormat(dateType);  enUsFormat  =  enUsFormat;  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]            junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  enUsFormat  =  new  DateFormat(dateType);  enUsFormat  =  enUsFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	enUsFormat  =  new  DateFormat(dateType);  enUsFormat  =  enUsFormat;	  if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    DateFormat    enUsFormat    =    new    DateFormat(dateType);    enUsFormat    =    enUsFormat;    }    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	111	None	replace
130	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  new  DateFormat(dateType);  enUsFormat  =  localFormat;  }  else  {  DateFormat  enUsFormat  =  new  DateFormat(dateType);  enUsFormat  =  enUsFormat;  }  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]              junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  new  DateFormat(dateType);  enUsFormat  =  localFormat;  }  else  {  DateFormat  enUsFormat  =  new  DateFormat(dateType);  enUsFormat  =  enUsFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.enUsFormat  =  new  DateFormat(dateType);  enUsFormat  =  localFormat;  }  else  {  DateFormat  enUsFormat  =  new  DateFormat(dateType);  enUsFormat  =  enUsFormat;  }	  if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    DateFormat    enUsFormat    =    new    DateFormat(dateType);    enUsFormat    =    enUsFormat;    }    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	111	None	replace
131	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  new  DateFormat(dateType);  enUsFormat  =  localFormat;  }  else  {  DateFormat  enUsFormat  =  new  DateFormat(dateType);  enUsFormat  =  enUs  [CE]  ';'  expected  [FE]                junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  new  DateFormat(dateType);  enUsFormat  =  localFormat;  }  else  {  DateFormat  enUsFormat  =  new  DateFormat(dateType);  enUsFormat  =  enUs  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.enUsFormat  =  new  DateFormat(dateType);  enUsFormat  =  localFormat;  }  else  {  DateFormat  enUsFormat  =  new  DateFormat(dateType);  enUsFormat  =  enUs	  if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    DateFormat    enUsFormat    =    new    DateFormat(dateType);    enUsFormat    =    enUsFormat;    }    	non-compiled	[CE]  ';'  expected	111	None	replace
132	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  new  DateFormat(dateType);  enUsFormat  =  localeFormat;  }  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                  junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  new  DateFormat(dateType);  enUsFormat  =  localeFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.enUsFormat  =  new  DateFormat(dateType);  enUsFormat  =  localeFormat;  }	  if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    DateFormat    enUsFormat    =    new    DateFormat(dateType);    enUsFormat    =    enUsFormat;    }    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	111	None	replace
133	[BUG]  [BUGGY]  this.enUsFormat  =  localFormat,  enUsFormat,  SIMPLE_NAME);  [CE]  ';'  expected  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  localFormat,  enUsFormat,  SIMPLE_NAME);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  localFormat,  enUsFormat,  SIMPLE_NAME);	  this.enUsFormat    =    enUsFormat,    localFormat,    SIMPLE_NAME);    	non-compiled	[CE]  ';'  expected	8	None	replace
134	[BUG]  [BUGGY]  this.enUsFormat  =  localeFormat,  enUsFormat,  SIMPLE_NAME);  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  localeFormat,  enUsFormat,  SIMPLE_NAME);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  localeFormat,  enUsFormat,  SIMPLE_NAME);	  this.enUsFormat    =    enUsFormat,    localFormat,    SIMPLE_NAME);    	non-compiled	[CE]  ';'  expected	8	None	replace
135	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat,  localeFormat,  SIMPLE_NAME);  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat,  localeFormat,  SIMPLE_NAME);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat,  localeFormat,  SIMPLE_NAME);	  this.enUsFormat    =    enUsFormat,    localFormat,    SIMPLE_NAME);    	non-compiled	[CE]  ';'  expected	8	None	replace
136	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat,  localFormat,  datePattern);  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat,  localFormat,  datePattern);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat,  localFormat,  datePattern);	  this.enUsFormat    =    enUsFormat,    localFormat,    SIMPLE_NAME);    	non-compiled	[CE]  ';'  expected	8	None	replace
137	[BUG]  [BUGGY]  this.enUsFormat  =  dateType,  localFormat,  SIMPLE_NAME);  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  dateType,  localFormat,  SIMPLE_NAME);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  dateType,  localFormat,  SIMPLE_NAME);	  this.enUsFormat    =    enUsFormat,    localFormat,    SIMPLE_NAME);    	non-compiled	[CE]  ';'  expected	8	None	replace
138	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat,  localFormat,  false);  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat,  localFormat,  false);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat,  localFormat,  false);	  this.enUsFormat    =    enUsFormat,    localFormat,    SIMPLE_NAME);    	non-compiled	[CE]  ';'  expected	8	None	replace
139	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat.UTF8;  [CE]  cannot  find  symbol  UTF8  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat.UTF8;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat.UTF8;	  this.enUsFormat    =    EnUsFormat.UTF8;    	non-compiled	[CE]  cannot  find  symbol  UTF8	72	None	replace
140	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat.getUTF8();  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat.getUTF8();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat.getUTF8();	  this.enUsFormat    =    EnUsFormat.UTF8;    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
141	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat.uf8;  [CE]  cannot  find  symbol  uf8  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat.uf8;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat.uf8;	  this.enUsFormat    =    EnUsFormat.UTF8;    	non-compiled	[CE]  cannot  find  symbol  uf8	72	None	replace
142	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat.utf8;  [CE]  cannot  find  symbol  utf8  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat.utf8;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat.utf8;	  this.enUsFormat    =    EnUsFormat.UTF8;    	non-compiled	[CE]  cannot  find  symbol  utf8	72	None	replace
143	[BUG]  [BUGGY]  this.enUsFormat  =  EnUsFormat.class,  enUsFormat.getInstance();  [CE]  ';'  expected  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  EnUsFormat.class,  enUsFormat.getInstance();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  EnUsFormat.class,  enUsFormat.getInstance();	  this.enUsFormat    =    EnUsFormat.class.getInstance();    	non-compiled	[CE]  ';'  expected	82	None	replace
144	[BUG]  [BUGGY]  this.enUsFormat  =  EnUsFormat.class,  localFormat.getInstance();  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  EnUsFormat.class,  localFormat.getInstance();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  EnUsFormat.class,  localFormat.getInstance();	  this.enUsFormat    =    EnUsFormat.class.getInstance();    	non-compiled	[CE]  ';'  expected	82	None	replace
145	[BUG]  [BUGGY]  this.enUsFormat  =  ENUsFormat.class.getInstance();  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  ENUsFormat.class.getInstance();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  ENUsFormat.class.getInstance();	  this.enUsFormat    =    EnUsFormat.class.getInstance();    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
146	[BUG]  [BUGGY]  this.localFormat  =  new  DefaultDateFormat(dateType,  localFormat);  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.localFormat  =  new  DefaultDateFormat(dateType,  localFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.localFormat  =  new  DefaultDateFormat(dateType,  localFormat);	  this.enUsFormat    =    new    DefaultDateFormat(dateType,    localFormat);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
147	[BUG]  [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(localFormat,  dateType);  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(localFormat,  dateType);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DefaultDateFormat(localFormat,  dateType);	  this.enUsFormat    =    new    DefaultDateFormat(dateType,    localFormat);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
148	[BUG]  [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(dateType,  localFormat,  enUsFormat);  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(dateType,  localFormat,  enUsFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DefaultDateFormat(dateType,  localFormat,  enUsFormat);	  this.enUsFormat    =    new    DefaultDateFormat(dateType,    localFormat);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
149	[BUG]  [BUGGY]  this.dateFormat  =  new  DefaultDateFormat(dateType,  enUsFormat,  localFormat);  [CE]  cannot  find  symbol  dateFormat  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.dateFormat  =  new  DefaultDateFormat(dateType,  enUsFormat,  localFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.dateFormat  =  new  DefaultDateFormat(dateType,  enUsFormat,  localFormat);	  this.enUsFormat    =    new    DefaultDateFormat(dateType,    localFormat);    	non-compiled	[CE]  cannot  find  symbol  dateFormat	15	None	replace
150	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat,  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat,  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat,  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  this.enUsFormat    =    localFormat,    enUsFormat;    	non-compiled	[CE]  	9	None	replace
151	[BUG]  [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(type,  localFormat);  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(type,  localFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DefaultDateFormat(type,  localFormat);	  this.enUsFormat    =    new    DefaultDateFormat(type);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
152	[BUG]  [BUGGY]  this.dataUsFormat  =  localFormat;  [CE]  cannot  find  symbol  dataUsFormat  [FE]                  junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.dataUsFormat  =  localFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.dataUsFormat  =  localFormat;	  if(enUsFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    	non-compiled	[CE]  cannot  find  symbol  dataUsFormat	94	None	replace
153	[BUG]  [BUGGY]  this.localFormat  =  localeFormat;  [CE]  cannot  find  symbol  localeFormat  [FE]                    junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.localFormat  =  localeFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.localFormat  =  localeFormat;	  if(enUsFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    	non-compiled	[CE]  cannot  find  symbol  localeFormat	94	None	replace
154	[BUG]  [BUGGY]  this.enUsFormat  =  localFormat;  }  [CE]  illegal  start  of  type  [FE]                      junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  localFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  localFormat;  }	  if(enUsFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
155	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat,  LocalFormat.class,  localFormat);  [CE]  ';'  expected  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat,  LocalFormat.class,  localFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat,  LocalFormat.class,  localFormat);	  this.enUsFormat    =    enUsFormat,    LocalFormat.class);    	non-compiled	[CE]  ';'  expected	102	None	replace
156	[BUG]  [BUGGY]  this.enUsFormat  =  localFormat,  LocalFormat.class);  [CE]  ';'  expected  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  localFormat,  LocalFormat.class);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  localFormat,  LocalFormat.class);	  this.enUsFormat    =    enUsFormat,    LocalFormat.class);    	non-compiled	[CE]  ';'  expected	102	None	replace
157	[BUG]  [BUGGY]  this.enUsFormat  =  localeFormat,  LocalFormat.class);  [CE]  ';'  expected  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  localeFormat,  LocalFormat.class);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  localeFormat,  LocalFormat.class);	  this.enUsFormat    =    enUsFormat,    LocalFormat.class);    	non-compiled	[CE]  ';'  expected	102	None	replace
158	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat,  LocalFormat.class;  [CE]  ';'  expected  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat,  LocalFormat.class;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat,  LocalFormat.class;	  this.enUsFormat    =    enUsFormat,    LocalFormat.class);    	non-compiled	[CE]  ';'  expected	102	None	replace
159	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getDefault();  [CE]  cannot  find  symbol  LocalFormat  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.localFormat  =  LocalFormat.getDefault();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.localFormat  =  LocalFormat.getDefault();	  if(localFormat    ==    null)    {    this.localFormat    =    LocalFormat.getDefault();    }    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	97	None	replace
160	[BUG]  [BUGGY]  this.localFormat  =  localFormat.getDefault();  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.localFormat  =  localFormat.getDefault();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.localFormat  =  localFormat.getDefault();	  if(localFormat    ==    null)    {    this.localFormat    =    LocalFormat.getDefault();    }    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
161	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  localFormat.getDefault();  }  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  localFormat.getDefault();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  localFormat.getDefault();  }	  if(localFormat    ==    null)    {    this.localFormat    =    LocalFormat.getDefault();    }    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
162	[BUG]  [BUGGY]  This.localFormat  =  LocalFormat.getDefault();  [CE]  cannot  find  symbol  This  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  This.localFormat  =  LocalFormat.getDefault();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	This.localFormat  =  LocalFormat.getDefault();	  if(localFormat    ==    null)    {    this.localFormat    =    LocalFormat.getDefault();    }    	non-compiled	[CE]  cannot  find  symbol  This	97	None	replace
163	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  localFormat,  enUsFormat);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  localFormat,  enUsFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType,  localFormat,  enUsFormat);	  this.enUsFormat    =    new    DateFormat(dateType,    enUsFormat,    localFormat);    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	22	None	replace
164	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(localFormat,  enUsFormat,  dateType);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(localFormat,  enUsFormat,  dateType);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(localFormat,  enUsFormat,  dateType);	  this.enUsFormat    =    new    DateFormat(dateType,    enUsFormat,    localFormat);    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	22	None	replace
165	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  enUsFormat,  localFormat,  SIMPLE_NAME);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  enUsFormat,  localFormat,  SIMPLE_NAME);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType,  enUsFormat,  localFormat,  SIMPLE_NAME);	  this.enUsFormat    =    new    DateFormat(dateType,    enUsFormat,    localFormat);    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	22	None	replace
166	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(type,  enUsFormat,  localFormat);  [CE]  cannot  find  symbol  type  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(type,  enUsFormat,  localFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(type,  enUsFormat,  localFormat);	  this.enUsFormat    =    new    DateFormat(dateType,    enUsFormat,    localFormat);    	non-compiled	[CE]  cannot  find  symbol  type	22	None	replace
167	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  localeFormat,  enUsFormat);  [CE]  cannot  find  symbol  localeFormat  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  localeFormat,  enUsFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType,  localeFormat,  enUsFormat);	  this.enUsFormat    =    new    DateFormat(dateType,    enUsFormat,    localFormat);    	non-compiled	[CE]  cannot  find  symbol  localeFormat	22	None	replace
168	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  Locale.getDefault();  }  else  {  this.localFormat  =  Locale.getLocale();  }  [CE]  incompatible  types  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  Locale.getDefault();  }  else  {  this.localFormat  =  Locale.getLocale();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  Locale.getDefault();  }  else  {  this.localFormat  =  Locale.getLocale();  }	  if(localFormat    ==    null)    {    this.localFormat    =    Locale.getDefault();    }    else    {    this.localFormat    =    Locale.getDefault();    }    	non-compiled	[CE]  incompatible  types	76	None	replace
169	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  Locale.getDefault();  }  else  {  this.localFormat  =  localFormat;  }  [CE]  incompatible  types  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  Locale.getDefault();  }  else  {  this.localFormat  =  localFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  Locale.getDefault();  }  else  {  this.localFormat  =  localFormat;  }	  if(localFormat    ==    null)    {    this.localFormat    =    Locale.getDefault();    }    else    {    this.localFormat    =    Locale.getDefault();    }    	non-compiled	[CE]  incompatible  types	76	None	replace
170	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  Locale.getDefault();  }  else  {  this.localFormat  =  Locale.getInstance();  }  [CE]  incompatible  types  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  Locale.getDefault();  }  else  {  this.localFormat  =  Locale.getInstance();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  Locale.getDefault();  }  else  {  this.localFormat  =  Locale.getInstance();  }	  if(localFormat    ==    null)    {    this.localFormat    =    Locale.getDefault();    }    else    {    this.localFormat    =    Locale.getDefault();    }    	non-compiled	[CE]  incompatible  types	76	None	replace
171	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  ||  enUsFormat;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat  ||  enUsFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  ||  enUsFormat;	  this.enUsFormat    =    localeFormat    ||    enUsFormat;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	2	None	replace
172	[BUG]  [BUGGY]  this.enUsFormat  =  type  ||  enUsFormat;  [CE]  cannot  find  symbol  type  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  type  ||  enUsFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  type  ||  enUsFormat;	  this.enUsFormat    =    localeFormat    ||    enUsFormat;    	non-compiled	[CE]  cannot  find  symbol  type	2	None	replace
173	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(localFormat,  enUsFormat);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(localFormat,  enUsFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(localFormat,  enUsFormat);	  this.enUsFormat    =    new    DateFormat(type,    enUsFormat);    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	25	None	replace
174	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(enUsFormat,  localFormat);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(enUsFormat,  localFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(enUsFormat,  localFormat);	  this.enUsFormat    =    new    DateFormat(type,    enUsFormat);    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	25	None	replace
175	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(type,  localFormat);  [CE]  cannot  find  symbol  type  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(type,  localFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(type,  localFormat);	  this.enUsFormat    =    new    DateFormat(type,    enUsFormat);    	non-compiled	[CE]  cannot  find  symbol  type	25	None	replace
176	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(name,  enUsFormat);  [CE]  cannot  find  symbol  name  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(name,  enUsFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(name,  enUsFormat);	  this.enUsFormat    =    new    DateFormat(type,    enUsFormat);    	non-compiled	[CE]  cannot  find  symbol  name	25	None	replace
177	[BUG]  [BUGGY]  this.enUsFormat  =  localFormat  +  1,  enUsFormat;  [CE]  ';'  expected  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  localFormat  +  1,  enUsFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  localFormat  +  1,  enUsFormat;	  this.enUsFormat    =    enUsFormat    +    1,    localFormat;    	non-compiled	[CE]  ';'  expected	108	None	replace
178	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  +  1,  dateType;  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat  +  1,  dateType;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  +  1,  dateType;	  this.enUsFormat    =    enUsFormat    +    1,    localFormat;    	non-compiled	[CE]  ';'  expected	108	None	replace
179	[BUG]  [BUGGY]  this.enUsFormat  =  localeFormat  +  1,  enUsFormat;  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  localeFormat  +  1,  enUsFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  localeFormat  +  1,  enUsFormat;	  this.enUsFormat    =    enUsFormat    +    1,    localFormat;    	non-compiled	[CE]  ';'  expected	108	None	replace
180	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  +  2,  localFormat;  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat  +  2,  localFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  +  2,  localFormat;	  this.enUsFormat    =    enUsFormat    +    1,    localFormat;    	non-compiled	[CE]  ';'  expected	108	None	replace
181	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat,  localFormat.getInstanceType();  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat,  localFormat.getInstanceType();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat,  localFormat.getInstanceType();	  this.enUsFormat    =    enUsFormat.getInstanceType();    	non-compiled	[CE]  ';'  expected	45	None	replace
182	[BUG]  [BUGGY]  this.enUsFormat  =  localFormat.getInstanceType();  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  localFormat.getInstanceType();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  localFormat.getInstanceType();	  this.enUsFormat    =    enUsFormat.getInstanceType();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
183	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat.newInstance();  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat.newInstance();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat.newInstance();	  this.enUsFormat    =    enUsFormat.getInstanceType();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
184	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat.withInstance(localFormat);  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat.withInstance(localFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat.withInstance(localFormat);	  this.enUsFormat    =    enUsFormat.getInstanceType();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
185	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat.withType(type);  [CE]  cannot  find  symbol  type  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat.withType(type);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat.withType(type);	  this.enUsFormat    =    enUsFormat.getInstanceType();    	non-compiled	[CE]  cannot  find  symbol  type	45	None	replace
186	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat.fromInstance(localFormat);  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat.fromInstance(localFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat.fromInstance(localFormat);	  this.enUsFormat    =    enUsFormat.getInstanceType();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
187	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType  +  SIMPLE_NAME,  localFormat);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType  +  SIMPLE_NAME,  localFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType  +  SIMPLE_NAME,  localFormat);	  this.enUsFormat    =    new    DateFormat(dateType    +    SIMPLE_NAME);    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	79	None	replace
188	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType  +  SIMPLE_NAME,  datePattern);  [CE]  cannot  find  symbol  datePattern  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType  +  SIMPLE_NAME,  datePattern);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType  +  SIMPLE_NAME,  datePattern);	  this.enUsFormat    =    new    DateFormat(dateType    +    SIMPLE_NAME);    	non-compiled	[CE]  cannot  find  symbol  datePattern	79	None	replace
189	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType  +  SIMPLE_NAME,  enPattern);  [CE]  cannot  find  symbol  enPattern  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType  +  SIMPLE_NAME,  enPattern);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType  +  SIMPLE_NAME,  enPattern);	  this.enUsFormat    =    new    DateFormat(dateType    +    SIMPLE_NAME);    	non-compiled	[CE]  cannot  find  symbol  enPattern	79	None	replace
190	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType  +  SIMPLE_NAME,  locale);  [CE]  cannot  find  symbol  locale  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType  +  SIMPLE_NAME,  locale);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType  +  SIMPLE_NAME,  locale);	  this.enUsFormat    =    new    DateFormat(dateType    +    SIMPLE_NAME);    	non-compiled	[CE]  cannot  find  symbol  locale	79	None	replace
191	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType  +  SIMPLE_NAME,  timePattern);  [CE]  cannot  find  symbol  timePattern  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType  +  SIMPLE_NAME,  timePattern);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType  +  SIMPLE_NAME,  timePattern);	  this.enUsFormat    =    new    DateFormat(dateType    +    SIMPLE_NAME);    	non-compiled	[CE]  cannot  find  symbol  timePattern	79	None	replace
192	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType  +  SIMPLE_NAME,  enUsFormat);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType  +  SIMPLE_NAME,  enUsFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType  +  SIMPLE_NAME,  enUsFormat);	  this.enUsFormat    =    new    DateFormat(dateType    +    SIMPLE_NAME);    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	79	None	replace
193	[BUG]  [BUGGY]  if(localFormat!=  null)  {  this.enUsFormat  =  localeFormat;  }  [CE]  cannot  find  symbol  localeFormat  [FE]          junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat!=  null)  {  this.enUsFormat  =  localeFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat!=  null)  {  this.enUsFormat  =  localeFormat;  }	  this.enUsFormat    =    localFormat;    if(localFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    	non-compiled	[CE]  cannot  find  symbol  localeFormat	29	None	replace
194	[BUG]  [BUGGY]  Class  <?  extends  Date>  localFormat  =  locale.getDefault();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  Class  <?  extends  Date>  localFormat  =  locale.getDefault();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	Class  <?  extends  Date>  localFormat  =  locale.getDefault();	  Class    <?    extends    Date>    localFormat    =    Locale.getDefault();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	77	None	replace
195	[BUG]  [BUGGY]  Class  <?  extends  Date>  localFormat  =  dateType.getLocale();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  Class  <?  extends  Date>  localFormat  =  dateType.getLocale();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	Class  <?  extends  Date>  localFormat  =  dateType.getLocale();	  Class    <?    extends    Date>    localFormat    =    Locale.getDefault();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	77	None	replace
196	[BUG]  [BUGGY]  Class  <?  extends  Date>  localFormat  =  new  Locale(Locale.getDefault());  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  Class  <?  extends  Date>  localFormat  =  new  Locale(Locale.getDefault());  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	Class  <?  extends  Date>  localFormat  =  new  Locale(Locale.getDefault());	  Class    <?    extends    Date>    localFormat    =    Locale.getDefault();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	77	None	replace
197	[BUG]  [BUGGY]  Class  <?  extends  Date>  localFormat  =  dateType.getLocalFile();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  Class  <?  extends  Date>  localFormat  =  dateType.getLocalFile();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	Class  <?  extends  Date>  localFormat  =  dateType.getLocalFile();	  Class    <?    extends    Date>    localFormat    =    Locale.getDefault();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	77	None	replace
198	[BUG]  [BUGGY]  Class  <?  extends  Date>  localFormat  =  dateType.getLocalMillis();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  Class  <?  extends  Date>  localFormat  =  dateType.getLocalMillis();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	Class  <?  extends  Date>  localFormat  =  dateType.getLocalMillis();	  Class    <?    extends    Date>    localFormat    =    Locale.getDefault();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	77	None	replace
199	[BUG]  [BUGGY]  Class  <?  extends  Date>  localFormat  =(Locale)locale.getDefault();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  Class  <?  extends  Date>  localFormat  =(Locale)locale.getDefault();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	Class  <?  extends  Date>  localFormat  =(Locale)locale.getDefault();	  Class    <?    extends    Date>    localFormat    =    Locale.getDefault();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	77	None	replace
200	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  LocalFormat.class,  enUsFormat);  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  LocalFormat.class,  enUsFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType,  LocalFormat.class,  enUsFormat);	  this.enUsFormat    =    new    DateFormat(dateType,    enUsFormat,    LocalFormat.class);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
201	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  enUsFormat,  LocalFormat.class,  localFormat);  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  enUsFormat,  LocalFormat.class,  localFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType,  enUsFormat,  LocalFormat.class,  localFormat);	  this.enUsFormat    =    new    DateFormat(dateType,    enUsFormat,    LocalFormat.class);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
202	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  localFormat,  LocalFormat.class);  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  localFormat,  LocalFormat.class);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType,  localFormat,  LocalFormat.class);	  this.enUsFormat    =    new    DateFormat(dateType,    enUsFormat,    LocalFormat.class);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
203	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  enUsFormat,  LocalFormat.class),  localFormat);  [CE]  ';'  expected  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  enUsFormat,  LocalFormat.class),  localFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType,  enUsFormat,  LocalFormat.class),  localFormat);	  this.enUsFormat    =    new    DateFormat(dateType,    enUsFormat,    LocalFormat.class);    	non-compiled	[CE]  ';'  expected	26	None	replace
204	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat,  localFormat.getDefault());  [CE]  ';'  expected  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat,  localFormat.getDefault());  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat,  localFormat.getDefault());	  this.enUsFormat    =    enUsFormat,    LocalFormat.getDefault());    	non-compiled	[CE]  ';'  expected	85	None	replace
205	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat,  localFormat.getType());  [CE]  ';'  expected  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat,  localFormat.getType());  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat,  localFormat.getType());	  this.enUsFormat    =    enUsFormat,    LocalFormat.getDefault());    	non-compiled	[CE]  ';'  expected	85	None	replace
206	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat,  LocalFormat.getDefault();  [CE]  ';'  expected  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat,  LocalFormat.getDefault();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat,  LocalFormat.getDefault();	  this.enUsFormat    =    enUsFormat,    LocalFormat.getDefault());    	non-compiled	[CE]  ';'  expected	85	None	replace
207	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat,  localFormat.getValue());  [CE]  ';'  expected  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat,  localFormat.getValue());  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat,  localFormat.getValue());	  this.enUsFormat    =    enUsFormat,    LocalFormat.getDefault());    	non-compiled	[CE]  ';'  expected	85	None	replace
208	[BUG]  [BUGGY]  this.enUsFormat  =  localFormat,  LocalFormat.getDefault());  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  localFormat,  LocalFormat.getDefault());  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  localFormat,  LocalFormat.getDefault());	  this.enUsFormat    =    enUsFormat,    LocalFormat.getDefault());    	non-compiled	[CE]  ';'  expected	85	None	replace
209	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat,  localeFormat.getDefault());  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat,  localeFormat.getDefault());  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat,  localeFormat.getDefault());	  this.enUsFormat    =    enUsFormat,    LocalFormat.getDefault());    	non-compiled	[CE]  ';'  expected	85	None	replace
210	[BUG]  [BUGGY]  this.enUsFormat  =  dateType  +  3;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  dateType  +  3;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  dateType  +  3;	  this.enUsFormat    =    enUsFormat    +    3;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	50	None	replace
211	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  datePattern);  [CE]  cannot  find  symbol  datePattern  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  datePattern);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType,  datePattern);	  this.enUsFormat    =    new    DateFormat(dateType,    localeFormat);    	non-compiled	[CE]  cannot  find  symbol  datePattern	66	None	replace
212	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  Locale.class);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  Locale.class);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType,  Locale.class);	  this.enUsFormat    =    new    DateFormat(dateType,    localeFormat);    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	66	None	replace
213	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  dateType);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  dateType);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType,  dateType);	  this.enUsFormat    =    new    DateFormat(dateType,    localeFormat);    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	66	None	replace
214	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  enPattern);  [CE]  cannot  find  symbol  enPattern  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  enPattern);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType,  enPattern);	  this.enUsFormat    =    new    DateFormat(dateType,    localeFormat);    	non-compiled	[CE]  cannot  find  symbol  enPattern	66	None	replace
215	[BUG]  [BUGGY]  this.enUsFormat  =  localeFormat,  dateType;  [CE]  ';'  expected  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  localeFormat,  dateType;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  localeFormat,  dateType;	  this.enUsFormat    =    dateType,    localeFormat;    	non-compiled	[CE]  ';'  expected	27	None	replace
216	[BUG]  [BUGGY]  enUsFormat  =  localFormat;  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]        junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  enUsFormat  =  localFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	enUsFormat  =  localFormat;	  enUsFormat    =    enUsFormat;    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	21	None	replace
217	[BUG]  [BUGGY]  enUsFormat  =  dateType;  [CE]  incompatible  types  [FE]          junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  enUsFormat  =  dateType;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	enUsFormat  =  dateType;	  enUsFormat    =    enUsFormat;    	non-compiled	[CE]  incompatible  types	21	None	replace
218	[BUG]  [BUGGY]  enUsFormat  =  new  DateFormat(dateType);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]            junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  enUsFormat  =  new  DateFormat(dateType);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	enUsFormat  =  new  DateFormat(dateType);	  enUsFormat    =    enUsFormat;    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	21	None	replace
219	[BUG]  [BUGGY]  enUsFormat  =  this.localFormat;  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]              junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  enUsFormat  =  this.localFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	enUsFormat  =  this.localFormat;	  enUsFormat    =    enUsFormat;    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	21	None	replace
220	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    Class    <?    extends    Date>    localFormat    =    localFormat.getClass();    if(localFormat!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	61	None	replace
221	[BUG]  [BUGGY]  if(dateType  ==  Date.class)  {  if(localFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(dateType  ==  Date.class)  {  if(localFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(dateType  ==  Date.class)  {  if(localFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    Class    <?    extends    Date>    localFormat    =    localFormat.getClass();    if(localFormat!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	61	None	replace
222	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  if(localFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(dateType!=  Date.class)  {  if(localFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(dateType!=  Date.class)  {  if(localFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    Class    <?    extends    Date>    localFormat    =    localFormat.getClass();    if(localFormat!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	61	None	replace
223	[BUG]  [BUGGY]  if(localFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    Class    <?    extends    Date>    localFormat    =    localFormat.getClass();    if(localFormat!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	61	None	replace
224	[BUG]  [BUGGY]  if(enUsFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    Class    <?    extends    Date>    localFormat    =    localFormat.getClass();    if(localFormat!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	61	None	replace
225	[BUG]  [BUGGY]  if(dateType  ==  Date.class)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(dateType  ==  Date.class)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(dateType  ==  Date.class)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    Class    <?    extends    Date>    localFormat    =    localFormat.getClass();    if(localFormat!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	61	None	replace
226	[BUG]  [BUGGY]  this.enUsFormat  =  localFormat.getInstance();  this.enUsFormat  =  localFormat.getInstance();  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]    junit.framework.ComparisonFailure:  expected:<   "[March  18    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  localFormat.getInstance();  this.enUsFormat  =  localFormat.getInstance();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat    =    localFormat.getInstance();    this.enUsFormat  =  localFormat.getInstance();	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	42	None	add
227	[BUG]  [BUGGY]  this.enUsFormat  =  localFormat.getInstance();  if(localFormat.getInstance()!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]      junit.framework.ComparisonFailure:  expected:<   "[March  18    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  localFormat.getInstance();  if(localFormat.getInstance()!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat    =    localFormat.getInstance();    if(localFormat.getInstance()!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	42	None	add
228	[BUG]  [BUGGY]  this.enUsFormat  =  localFormat.getInstance();  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]        junit.framework.ComparisonFailure:  expected:<   "[March  18    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  localFormat.getInstance();  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat    =    localFormat.getInstance();    if(localFormat!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	42	None	add
229	[BUG]  [BUGGY]  this.enUsFormat  =  localFormat.getInstance();  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  else  {  this.enUsFormat  =  localFormat.getInstance();  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]          junit.framework.ComparisonFailure:  expected:<   "[March  18    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  localFormat.getInstance();  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  else  {  this.enUsFormat  =  localFormat.getInstance();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat    =    localFormat.getInstance();    if(localFormat!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  else  {  this.enUsFormat  =  localFormat.getInstance();  }	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	42	None	add
230	[BUG]  [BUGGY]  this.enUsFormat  =  localFormat.getInstance();  if(localFormat.getInstance()!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  else  {  this.enUsFormat  =  localFormat.getInstance();  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]            junit.framework.ComparisonFailure:  expected:<   "[March  18    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  localFormat.getInstance();  if(localFormat.getInstance()!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  else  {  this.enUsFormat  =  localFormat.getInstance();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat    =    localFormat.getInstance();    if(localFormat.getInstance()!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  else  {  this.enUsFormat  =  localFormat.getInstance();  }	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	42	None	add
231	[BUG]  [BUGGY]  this.enUsFormat  =  localFormat.getInstance();  if(localFormat.getInstance()!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]              junit.framework.ComparisonFailure:  expected:<   "[March  18    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  localFormat.getInstance();  if(localFormat.getInstance()!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat    =    localFormat.getInstance();    if(localFormat.getInstance()!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	42	None	add
232	[BUG]  [BUGGY]  this.enUsFormat  =  localFormat.getInstance();  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]                junit.framework.ComparisonFailure:  expected:<   "[March  18    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  localFormat.getInstance();  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat    =    localFormat.getInstance();    if(localFormat!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	42	None	add
233	[BUG]  [BUGGY]  this.enUsFormat  =  localFormat.getInstance();  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]                  junit.framework.ComparisonFailure:  expected:<   "[March  18    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  localFormat.getInstance();  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat    =    localFormat.getInstance();    if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat.getInstance();  }	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	42	None	add
234	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	add	if(localFormat  ==  null)  {  this.enUsFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	87	10	replace
235	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.enUsFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	87	10	replace
236	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	add	if(localFormat  ==  null)  {  this.enUsFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }	  if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	87	10	replace
237	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.enUsFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }	  if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	87	10	replace
238	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  enUsFormat;  }  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  enUsFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.enUsFormat  =  enUsFormat;  }	  if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	87	None	replace
239	[BUG]  [BUGGY]  this.enUsFormat  =  dateType.getInstance();  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  dateType.getInstance();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  dateType.getInstance();	  this.enUsFormat    =    ENUsFormat.getInstance();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
240	[BUG]  [BUGGY]  this.enUsFormat  =  localeFormat.getInstance();  [CE]  cannot  find  symbol  localeFormat  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  localeFormat.getInstance();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  localeFormat.getInstance();	  this.enUsFormat    =    ENUsFormat.getInstance();    	non-compiled	[CE]  cannot  find  symbol  localeFormat	80	None	replace
241	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat.getInstance2();  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat.getInstance2();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat.getInstance2();	  this.enUsFormat    =    ENUsFormat.getInstance();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
242	[BUG]  [BUGGY]  this.dateFormat  =  dateType;  [CE]  cannot  find  symbol  dateFormat  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.dateFormat  =  dateType;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.dateFormat  =  dateType;	  this.dateFormat    =    enUsFormat;    	non-compiled	[CE]  cannot  find  symbol  dateFormat	96	None	replace
243	[BUG]  [BUGGY]  this.dateFormat  =  dateUsFormat;  [CE]  cannot  find  symbol  dateFormat  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.dateFormat  =  dateUsFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.dateFormat  =  dateUsFormat;	  this.dateFormat    =    enUsFormat;    	non-compiled	[CE]  cannot  find  symbol  dateFormat	96	None	replace
244	[BUG]  [BUGGY]  this.dateFormat  =  new  DateFormat(dateType);  [CE]  cannot  find  symbol  dateFormat  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.dateFormat  =  new  DateFormat(dateType);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.dateFormat  =  new  DateFormat(dateType);	  this.dateFormat    =    enUsFormat;    	non-compiled	[CE]  cannot  find  symbol  dateFormat	96	None	replace
245	[BUG]  [BUGGY]  this.dateFormat  =  DateFormat.class;  [CE]  cannot  find  symbol  dateFormat  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.dateFormat  =  DateFormat.class;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.dateFormat  =  DateFormat.class;	  this.dateFormat    =    enUsFormat;    	non-compiled	[CE]  cannot  find  symbol  dateFormat	96	None	replace
246	[BUG]  [BUGGY]  this.dateFormat  =  DateFormat.valueOf(dateType);  [CE]  cannot  find  symbol  dateFormat  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.dateFormat  =  DateFormat.valueOf(dateType);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.dateFormat  =  DateFormat.valueOf(dateType);	  this.dateFormat    =    enUsFormat;    	non-compiled	[CE]  cannot  find  symbol  dateFormat	96	None	replace
247	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(timeType);  [CE]  cannot  find  symbol  timeType  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(timeType);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(timeType);	  this.enUsFormat    =    new    DateFormat(type);    	non-compiled	[CE]  cannot  find  symbol  timeType	57	None	replace
248	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(this.localFormat);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(this.localFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(this.localFormat);	  this.enUsFormat    =    new    DateFormat(type);    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	57	None	replace
249	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(localFormat,  dateType);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(localFormat,  dateType);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(localFormat,  dateType);	  this.enUsFormat    =    new    DateFormat(dateType,    localFormat);    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	24	None	replace
250	[BUG]  [BUGGY]  this.localFormat  =  new  DateFormat(dateType,  localFormat);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.localFormat  =  new  DateFormat(dateType,  localFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.localFormat  =  new  DateFormat(dateType,  localFormat);	  this.enUsFormat    =    new    DateFormat(dateType,    localFormat);    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	24	None	replace
251	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  timePattern);  [CE]  cannot  find  symbol  timePattern  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  timePattern);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType,  timePattern);	  this.enUsFormat    =    new    DateFormat(dateType,    locale);    	non-compiled	[CE]  cannot  find  symbol  timePattern	54	None	replace
252	[BUG]  [BUGGY]  this.enUsFormat  =  dateType,  enUsFormat);  [CE]  ';'  expected  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  dateType,  enUsFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  dateType,  enUsFormat);	  this.enUsFormat    =    localFormat,    enUsFormat);    	non-compiled	[CE]  ';'  expected	5	None	replace
253	[BUG]  [BUGGY]  this.enUsFormat  =  localeType,  enUsFormat);  [CE]  ';'  expected  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  localeType,  enUsFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  localeType,  enUsFormat);	  this.enUsFormat    =    localFormat,    enUsFormat);    	non-compiled	[CE]  ';'  expected	5	None	replace
254	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:< "[Jan  1  [FE]                    junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	add	if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }	  this.enUsFormat    =    localFormat;    if(localFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    be    null.   ");    }    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:< "[Jan  1  	34	3	replace
255	[BUG]  [BUGGY]  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [FE]  junit.framework.ComparisonFailure:  expected:< "[Jan  1  [FE]                    junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }	  this.enUsFormat    =    localFormat;    if(localFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    be    null.   ");    }    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:< "[Jan  1  	34	3	replace
256	[BUG]  [BUGGY]  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [CE]  ';'  expected  [FE]                      junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }	  this.enUsFormat    =    localFormat;    if(localFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    be    null.   ");    }    	non-compiled	[CE]  ';'  expected	34	None	replace
257	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                        junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	add	if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }	  this.enUsFormat    =    localFormat;    if(localFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    be    null.   ");    }    	compilable	  [FE]  IllegalArgumentException  	34	10	replace
258	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [FE]  IllegalArgumentException  [FE]                        junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }	  this.enUsFormat    =    localFormat;    if(localFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    be    null.   ");    }    	compilable	  [FE]  IllegalArgumentException  	34	10	replace
259	[BUG]  [BUGGY]  this.localFormat  =  localFormat;  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]                          junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.localFormat  =  localFormat;  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.localFormat  =  localFormat;  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }	  this.enUsFormat    =    localFormat;    if(localFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    be    null.   ");    }    	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	34	None	replace
260	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  enUsFormat,  locallyFormat);  [CE]  cannot  find  symbol  locallyFormat  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  enUsFormat,  locallyFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType,  enUsFormat,  locallyFormat);	  this.enUsFormat    =    new    DateFormat(dateType,    enUsFormat,    localeFormat);    	non-compiled	[CE]  cannot  find  symbol  locallyFormat	23	None	replace
261	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  dateType,  localFormat);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  dateType,  localFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType,  dateType,  localFormat);	  this.enUsFormat    =    new    DateFormat(dateType,    enUsFormat,    localeFormat);    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	23	None	replace
262	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  enUsFormat,  Locale.class);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  enUsFormat,  Locale.class);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType,  enUsFormat,  Locale.class);	  this.enUsFormat    =    new    DateFormat(dateType,    enUsFormat,    localeFormat);    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	23	None	replace
263	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  enUsFormat,  Locale.getDefault());  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  enUsFormat,  Locale.getDefault());  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType,  enUsFormat,  Locale.getDefault());	  this.enUsFormat    =    new    DateFormat(dateType,    enUsFormat,    localeFormat);    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	23	None	replace
264	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  enUsFormat,  localePattern);  [CE]  cannot  find  symbol  localePattern  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  enUsFormat,  localePattern);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType,  enUsFormat,  localePattern);	  this.enUsFormat    =    new    DateFormat(dateType,    enUsFormat,    localeFormat);    	non-compiled	[CE]  cannot  find  symbol  localePattern	23	None	replace
265	[BUG]  [BUGGY]  this.localFormat  =  dateType;  [CE]  incompatible  types  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.localFormat  =  dateType;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.localFormat  =  dateType;	  if(localFormat!=    null)    {    this.localFormat    =    localFormat;    }    	non-compiled	[CE]  incompatible  types	75	None	replace
266	[BUG]  [BUGGY]  this.localFormat  =  new  DateFormat(enUsFormat);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.localFormat  =  new  DateFormat(enUsFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.localFormat  =  new  DateFormat(enUsFormat);	  if(localFormat!=    null)    {    this.localFormat    =    localFormat;    }    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	75	None	replace
267	[BUG]  [BUGGY]  this.localFormat  =  new  DateFormat(enUsFormat,  localFormat);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.localFormat  =  new  DateFormat(enUsFormat,  localFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.localFormat  =  new  DateFormat(enUsFormat,  localFormat);	  if(localFormat!=    null)    {    this.localFormat    =    localFormat;    }    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	75	None	replace
268	[BUG]  [BUGGY]  this.localFormat  =  new  DateFormat(enUsFormat,  dateType);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.localFormat  =  new  DateFormat(enUsFormat,  dateType);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.localFormat  =  new  DateFormat(enUsFormat,  dateType);	  if(localFormat!=    null)    {    this.localFormat    =    localFormat;    }    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	75	None	replace
269	[BUG]  [BUGGY]  this.localFormat  =  new  DateFormat(dateType,  enUsFormat);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.localFormat  =  new  DateFormat(dateType,  enUsFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.localFormat  =  new  DateFormat(dateType,  enUsFormat);	  if(localFormat!=    null)    {    this.localFormat    =    localFormat;    }    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	75	None	replace
270	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  enUsFormat;  }  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  enUsFormat;  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  enUsFormat;  }  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  enUsFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    this.enUsFormat    =    enUsFormat;    }    if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  enUsFormat;  }	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	112	None	add
271	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  enUsFormat;  }  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  localFormat;  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]      JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  enUsFormat;  }  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  localFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    this.enUsFormat    =    enUsFormat;    }    if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  localFormat;  }	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	112	None	add
272	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  enUsFormat;  }  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  localFormat;  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]        JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  enUsFormat;  }  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  localFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    this.enUsFormat    =    enUsFormat;    }    if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  localFormat;  }	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	112	None	add
273	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  enUsFormat;  }  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  this.enUsFormat  =  localFormat;  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]          JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  enUsFormat;  }  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  this.enUsFormat  =  localFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    this.enUsFormat    =    enUsFormat;    }    if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  this.enUsFormat  =  localFormat;  }	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	112	None	add
274	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  enUsFormat;  }  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  localFormat;  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]            JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  enUsFormat;  }  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  localFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    this.enUsFormat    =    enUsFormat;    }    if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  localFormat;  }	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	112	None	add
275	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  enUsFormat;  }  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  localeFormat;  }  [CE]  cannot  find  symbol  localeFormat  [FE]              JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  enUsFormat;  }  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  localeFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    this.enUsFormat    =    enUsFormat;    }    if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  localeFormat;  }	  	non-compiled	[CE]  cannot  find  symbol  localeFormat	112	None	add
276	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  enUsFormat;  }  if(localFormat!=  null)  {  this.localFormat  =  localFormat;  }  else  {  this.enUsFormat  =  localFormat;  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]                JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  enUsFormat;  }  if(localFormat!=  null)  {  this.localFormat  =  localFormat;  }  else  {  this.enUsFormat  =  localFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    this.enUsFormat    =    enUsFormat;    }    if(localFormat!=  null)  {  this.localFormat  =  localFormat;  }  else  {  this.enUsFormat  =  localFormat;  }	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	112	None	add
277	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  enUsFormat;  }  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  [CE]  ';'  expected  [FE]                  JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  enUsFormat;  }  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    this.enUsFormat    =    enUsFormat;    }    if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =	  	non-compiled	[CE]  ';'  expected	112	None	add
278	[BUG]  [BUGGY]  if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]    junit.framework.ComparisonFailure:  expected:<   "[Jan  1    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	89	None	add
279	[BUG]  [BUGGY]  if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]      junit.framework.ComparisonFailure:  expected:<   "[Jan  1    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	89	None	add
280	[BUG]  [BUGGY]  if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(localFormat!=  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]        junit.framework.ComparisonFailure:  expected:<   "[Jan  1    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(localFormat!=  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(localFormat!=  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	89	None	add
281	[BUG]  [BUGGY]  if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(enUsFormat!=  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]          junit.framework.ComparisonFailure:  expected:<   "[Jan  1    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(enUsFormat!=  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(enUsFormat!=  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	89	None	add
282	[BUG]  [BUGGY]  if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(enUsFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]            junit.framework.ComparisonFailure:  expected:<   "[Jan  1    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(enUsFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(enUsFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	89	None	add
283	[BUG]  [BUGGY]  if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]              junit.framework.ComparisonFailure:  expected:<   "[Jan  1    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	89	None	add
284	[BUG]  [BUGGY]  this.enUsFormat  =  localFormat.getInstanceUTC();  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  localFormat.getInstanceUTC();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  localFormat.getInstanceUTC();	  this.enUsFormat    =    enUsFormat.getInstanceUTC();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
285	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat,  localFormat.getInstanceUTC();  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat,  localFormat.getInstanceUTC();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat,  localFormat.getInstanceUTC();	  this.enUsFormat    =    enUsFormat.getInstanceUTC();    	non-compiled	[CE]  ';'  expected	44	None	replace
286	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat.getUTC();  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat.getUTC();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat.getUTC();	  this.enUsFormat    =    enUsFormat.getInstanceUTC();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
287	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat.withUTC();  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat.withUTC();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat.withUTC();	  this.enUsFormat    =    enUsFormat.getInstanceUTC();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
288	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat.fromUTC();  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat.fromUTC();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat.fromUTC();	  this.enUsFormat    =    enUsFormat.getInstanceUTC();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
289	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat.toUTC();  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat.toUTC();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat.toUTC();	  this.enUsFormat    =    enUsFormat.getInstanceUTC();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
290	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  ||  dateType;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat  ||  dateType;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  ||  dateType;	  this.enUsFormat    =    enUsFormat    ||    localeFormat;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	3	None	replace
291	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  ||  type;  [CE]  cannot  find  symbol  type  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat  ||  type;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  ||  type;	  this.enUsFormat    =    enUsFormat    ||    localeFormat;    	non-compiled	[CE]  cannot  find  symbol  type	3	None	replace
292	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  ||  localePattern;  [CE]  cannot  find  symbol  localePattern  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat  ||  localePattern;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  ||  localePattern;	  this.enUsFormat    =    enUsFormat    ||    localeFormat;    	non-compiled	[CE]  cannot  find  symbol  localePattern	3	None	replace
293	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  ||  timeType;  [CE]  cannot  find  symbol  timeType  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat  ||  timeType;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  ||  timeType;	  this.enUsFormat    =    enUsFormat    ||    localeFormat;    	non-compiled	[CE]  cannot  find  symbol  timeType	3	None	replace
294	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  ||  localeType;  [CE]  cannot  find  symbol  localeType  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat  ||  localeType;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  ||  localeType;	  this.enUsFormat    =    enUsFormat    ||    localeFormat;    	non-compiled	[CE]  cannot  find  symbol  localeType	3	None	replace
295	[BUG]  [BUGGY]  this.enUsFormat  =  localFormat  + ",  localFormat,   "  +  enUsFormat;  [CE]  incompatible  types  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  localFormat  + ",  localFormat,   "  +  enUsFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  localFormat  + ",  localFormat,   "  +  enUsFormat;	  this.enUsFormat    =    enUsFormat    +   ",    localFormat,       "    +    localFormat;    	non-compiled	[CE]  incompatible  types	52	None	replace
296	[BUG]  [BUGGY]  this.enUsFormat  =  localFormat  + ",,   "  +  enUsFormat;  [CE]  incompatible  types  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  localFormat  + ",,   "  +  enUsFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  localFormat  + ",,   "  +  enUsFormat;	  this.enUsFormat    =    enUsFormat    +   ",    localFormat,       "    +    localFormat;    	non-compiled	[CE]  incompatible  types	52	None	replace
297	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:< "[March  18  [FE]    junit.framework.ComparisonFailure:  expected:<   "[March  18    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	add	if(localFormat!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  this.enUsFormat    =    localFormat.getInstance();    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:< "[March  18  	43	7	replace
298	[BUG]  [BUGGY]  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  junit.framework.ComparisonFailure:  expected:< "[March  18  [FE]    junit.framework.ComparisonFailure:  expected:<   "[March  18    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  this.enUsFormat    =    localFormat.getInstance();    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:< "[March  18  	43	7	replace
299	[BUG]  [BUGGY]  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]      junit.framework.ComparisonFailure:  expected:<   "[March  18    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }	  this.enUsFormat    =    localFormat.getInstance();    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	43	None	replace
300	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:< "[March  18  [FE]        junit.framework.ComparisonFailure:  expected:<   "[March  18    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  else  {  throw  new  JsonParseException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	add	if(localFormat!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  else  {  throw  new  JsonParseException( " ");  }	  this.enUsFormat    =    localFormat.getInstance();    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:< "[March  18  	43	7	replace
301	[BUG]  [BUGGY]  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  else  {  throw  new  JsonParseException( " ");  }  [FE]  junit.framework.ComparisonFailure:  expected:< "[March  18  [FE]        junit.framework.ComparisonFailure:  expected:<   "[March  18    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  else  {  throw  new  JsonParseException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  else  {  throw  new  JsonParseException( " ");  }	  this.enUsFormat    =    localFormat.getInstance();    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:< "[March  18  	43	7	replace
302	[BUG]  [BUGGY]  this.enUsFormat  =  dateType  +  1,  localeFormat;  [CE]  ';'  expected  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  dateType  +  1,  localeFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  dateType  +  1,  localeFormat;	  this.enUsFormat    =    enUsFormat    +    1,    localeFormat;    	non-compiled	[CE]  ';'  expected	95	None	replace
303	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  + ",   "  +  enUsFormat;  [CE]  incompatible  types  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat  + ",   "  +  enUsFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  + ",   "  +  enUsFormat;	  this.enUsFormat    =    localeFormat    +   ",       "    +    enUsFormat;    	non-compiled	[CE]  incompatible  types	53	None	replace
304	[BUG]  [BUGGY]  this.enUsFormat  =  dateType  + ",   "  +  enUsFormat;  [CE]  incompatible  types  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  dateType  + ",   "  +  enUsFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  dateType  + ",   "  +  enUsFormat;	  this.enUsFormat    =    localeFormat    +   ",       "    +    enUsFormat;    	non-compiled	[CE]  incompatible  types	53	None	replace
305	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  + ",   "  +  localeFormat;  [CE]  cannot  find  symbol  localeFormat  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat  + ",   "  +  localeFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  + ",   "  +  localeFormat;	  this.enUsFormat    =    localeFormat    +   ",       "    +    enUsFormat;    	non-compiled	[CE]  cannot  find  symbol  localeFormat	53	None	replace
306	[BUG]  [BUGGY]  this.enUsFormat  =  localFormat,  localeFormat);  [CE]  ';'  expected  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  localFormat,  localeFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  localFormat,  localeFormat);	  this.enUsFormat    =    localeFormat,    enUsFormat);    	non-compiled	[CE]  ';'  expected	7	None	replace
307	[BUG]  [BUGGY]  this.localFormat  =  locale;  [CE]  cannot  find  symbol  locale  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.localFormat  =  locale;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.localFormat  =  locale;	  this.localFormat    =    enUsFormat;    	non-compiled	[CE]  cannot  find  symbol  locale	12	None	replace
308	[BUG]  [BUGGY]  this.localFormat  =  new  LocalFormat(dateType,  enUsFormat);  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.localFormat  =  new  LocalFormat(dateType,  enUsFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.localFormat  =  new  LocalFormat(dateType,  enUsFormat);	  this.localFormat    =    enUsFormat;    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
309	[BUG]  [BUGGY]  this.localFormat  =  new  DateFormat(dateType,  enUsFormat,  localFormat);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.localFormat  =  new  DateFormat(dateType,  enUsFormat,  localFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.localFormat  =  new  DateFormat(dateType,  enUsFormat,  localFormat);	  this.localFormat    =    enUsFormat;    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	12	None	replace
310	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType.getSimpleName(),  localFormat);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType.getSimpleName(),  localFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType.getSimpleName(),  localFormat);	  this.enUsFormat    =    new    DateFormat(dateType.getSimpleName());    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	37	None	replace
311	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType.getSimpleName()  +  SIMPLE_NAME);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType.getSimpleName()  +  SIMPLE_NAME);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType.getSimpleName()  +  SIMPLE_NAME);	  this.enUsFormat    =    new    DateFormat(dateType.getSimpleName());    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	37	None	replace
312	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType.getSimpleName(),  enUsFormat);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType.getSimpleName(),  enUsFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType.getSimpleName(),  enUsFormat);	  this.enUsFormat    =    new    DateFormat(dateType.getSimpleName());    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	37	None	replace
313	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType.getName());  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType.getName());  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType.getName());	  this.enUsFormat    =    new    DateFormat(dateType.getSimpleName());    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	37	None	replace
314	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType.getSimpleName(),  locale);  [CE]  cannot  find  symbol  locale  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType.getSimpleName(),  locale);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType.getSimpleName(),  locale);	  this.enUsFormat    =    new    DateFormat(dateType.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol  locale	37	None	replace
315	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType.getSimpleName()  +  1);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType.getSimpleName()  +  1);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType.getSimpleName()  +  1);	  this.enUsFormat    =    new    DateFormat(dateType.getSimpleName());    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	37	None	replace
316	[BUG]  [BUGGY]  this.enUsFormat  =  dateType  +  1L;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  dateType  +  1L;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  dateType  +  1L;	  this.enUsFormat    =    enUsFormat    +    1L;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	49	None	replace
317	[BUG]  [BUGGY]  this.enUsFormat  =  dataUsFormat  +  1L;  [CE]  cannot  find  symbol  dataUsFormat  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  dataUsFormat  +  1L;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  dataUsFormat  +  1L;	  this.enUsFormat    =    enUsFormat    +    1L;    	non-compiled	[CE]  cannot  find  symbol  dataUsFormat	49	None	replace
318	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  +  UNKNOWN;  [CE]  cannot  find  symbol  UNKNOWN  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat  +  UNKNOWN;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  +  UNKNOWN;	  this.enUsFormat    =    enUsFormat    +    1L;    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN	49	None	replace
319	[BUG]  [BUGGY]  this.enUsFormat  =  localFormat  +  1L;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  localFormat  +  1L;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  localFormat  +  1L;	  this.enUsFormat    =    enUsFormat    +    1L;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	49	None	replace
320	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  enUsFormat;  }  else  {  throw  new  JsonParseException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	add	if(localFormat  ==  null)  {  this.enUsFormat  =  enUsFormat;  }  else  {  throw  new  JsonParseException( " ");  }	  if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    JsonParseException(   "   ");    }    	compilable	  [FE]  JsonParseException  	92	10	replace
321	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  enUsFormat;  }  else  {  throw  new  JsonParseException( " ");  }  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  enUsFormat;  }  else  {  throw  new  JsonParseException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.enUsFormat  =  enUsFormat;  }  else  {  throw  new  JsonParseException( " ");  }	  if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    JsonParseException(   "   ");    }    	compilable	  [FE]  JsonParseException  	92	10	replace
322	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  JsonParseException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	add	if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  JsonParseException( " ");  }	  if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    JsonParseException(   "   ");    }    	compilable	  [FE]  JsonParseException  	92	10	replace
323	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  JsonParseException( " ");  }  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  JsonParseException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  JsonParseException( " ");  }	  if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    JsonParseException(   "   ");    }    	compilable	  [FE]  JsonParseException  	92	10	replace
324	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localeFormat;  }  else  {  throw  new  JsonParseException( " ");  }  [CE]  cannot  find  symbol  localeFormat  [FE]        JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localeFormat;  }  else  {  throw  new  JsonParseException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.enUsFormat  =  localeFormat;  }  else  {  throw  new  JsonParseException( " ");  }	  if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    JsonParseException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  localeFormat	92	None	replace
325	[BUG]  [BUGGY]  this.enUsFormat  =  localFormat,  LocalFormat;  [CE]  ';'  expected  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  localFormat,  LocalFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  localFormat,  LocalFormat;	  this.enUsFormat    =    enUsFormat,    LocalFormat;    	non-compiled	[CE]  ';'  expected	107	None	replace
326	[BUG]  [BUGGY]  this.enUsFormat  =  localeFormat,  LocalFormat;  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  localeFormat,  LocalFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  localeFormat,  LocalFormat;	  this.enUsFormat    =    enUsFormat,    LocalFormat;    	non-compiled	[CE]  ';'  expected	107	None	replace
327	[BUG]  [BUGGY]  this.localFormat  =  localFormat.getLocale();  [CE]  cannot  find  symbol  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.localFormat  =  localFormat.getLocale();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.localFormat  =  localFormat.getLocale();	  this.localFormat    =    Locale.getDefault();    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
328	[BUG]  [BUGGY]  this.localFormat  =  localeFormat.getDefault();  [CE]  cannot  find  symbol  localeFormat  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.localFormat  =  localeFormat.getDefault();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.localFormat  =  localeFormat.getDefault();	  this.localFormat    =    Locale.getDefault();    	non-compiled	[CE]  cannot  find  symbol  localeFormat	63	None	replace
329	[BUG]  [BUGGY]  this.localFormat  =  enUsFormat.getLocalFormat();  [CE]  cannot  find  symbol  [FE]                                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.localFormat  =  enUsFormat.getLocalFormat();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.localFormat  =  enUsFormat.getLocalFormat();	  this.localFormat    =    Locale.getDefault();    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
330	[BUG]  [BUGGY]  this.localFormat  =  enUsFormat.getDefault();  [CE]  cannot  find  symbol  [FE]                                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.localFormat  =  enUsFormat.getDefault();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.localFormat  =  enUsFormat.getDefault();	  this.localFormat    =    Locale.getDefault();    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
331	[BUG]  [BUGGY]  this.dateType  =  new  DefaultDateFormat(enUsFormat);  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.dateType  =  new  DefaultDateFormat(enUsFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.dateType  =  new  DefaultDateFormat(enUsFormat);	  this.enUsFormat    =    new    DefaultDateFormat(this.dateType);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
332	[BUG]  [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(this.dateType,  localFormat);  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(this.dateType,  localFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DefaultDateFormat(this.dateType,  localFormat);	  this.enUsFormat    =    new    DefaultDateFormat(this.dateType);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
333	[BUG]  [BUGGY]  this.dateType  =  new  DefaultDateFormat(this.enUsFormat);  [CE]  cannot  find  symbol  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.dateType  =  new  DefaultDateFormat(this.enUsFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.dateType  =  new  DefaultDateFormat(this.enUsFormat);	  this.enUsFormat    =    new    DefaultDateFormat(this.dateType);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
334	[BUG]  [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(this.dateType,  dateType);  [CE]  cannot  find  symbol  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(this.dateType,  dateType);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DefaultDateFormat(this.dateType,  dateType);	  this.enUsFormat    =    new    DefaultDateFormat(this.dateType);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
335	[BUG]  [BUGGY]  this.dateFormat  =  new  DefaultDateFormat(dateType);  [CE]  cannot  find  symbol  dateFormat  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.dateFormat  =  new  DefaultDateFormat(dateType);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.dateFormat  =  new  DefaultDateFormat(dateType);	  this.enUsFormat    =    new    DefaultDateFormat(this.dateType);    	non-compiled	[CE]  cannot  find  symbol  dateFormat	20	None	replace
336	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]              junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(dateType!=  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(dateType!=  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  this.enUsFormat    =    localFormat;    if(localFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	31	None	replace
337	[BUG]  [BUGGY]  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  this.enUsFormat    =    localFormat;    if(localFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	31	None	replace
338	[BUG]  [BUGGY]  this.enUsFormat  =  localeType;  [CE]  cannot  find  symbol  localeType  [FE]        junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  localeType;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  localeType;	  this.enUsFormat    =    localFormat;    this.enUsFormat    =    localFormat;    	non-compiled	[CE]  cannot  find  symbol  localeType	28	None	replace
339	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType.getClass().getName(),  localFormat);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType.getClass().getName(),  localFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType.getClass().getName(),  localFormat);	  this.enUsFormat    =    new    DateFormat(dateType.getClass().getName());    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	38	None	replace
340	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType.getClass(),  localFormat.getName());  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType.getClass(),  localFormat.getName());  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType.getClass(),  localFormat.getName());	  this.enUsFormat    =    new    DateFormat(dateType.getClass().getName());    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
341	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType.getClass().getSimpleName());  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType.getClass().getSimpleName());  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType.getClass().getSimpleName());	  this.enUsFormat    =    new    DateFormat(dateType.getClass().getName());    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	38	None	replace
342	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType.getClass().getName(),  locale);  [CE]  cannot  find  symbol  locale  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType.getClass().getName(),  locale);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType.getClass().getName(),  locale);	  this.enUsFormat    =    new    DateFormat(dateType.getClass().getName());    	non-compiled	[CE]  cannot  find  symbol  locale	38	None	replace
343	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType.getClass().getName()  +  1);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType.getClass().getName()  +  1);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType.getClass().getName()  +  1);	  this.enUsFormat    =    new    DateFormat(dateType.getClass().getName());    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	38	None	replace
344	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType.getClass().getName(),  enUsFormat);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType.getClass().getName(),  enUsFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType.getClass().getName(),  enUsFormat);	  this.enUsFormat    =    new    DateFormat(dateType.getClass().getName());    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	38	None	replace
345	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    Class    <?    extends    Date>    localFormat    =    Locale.getDefault();    if(localFormat    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	62	None	replace
346	[BUG]  [BUGGY]  if(localFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    Class    <?    extends    Date>    localFormat    =    Locale.getDefault();    if(localFormat    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	62	None	replace
347	[BUG]  [BUGGY]  if(dateType  ==  Date.class)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(dateType  ==  Date.class)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(dateType  ==  Date.class)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    Class    <?    extends    Date>    localFormat    =    Locale.getDefault();    if(localFormat    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	62	None	replace
348	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	86	None	add
349	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	86	None	add
350	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "... ");  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "... ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "... ");  }	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	86	None	add
351	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	86	None	add
352	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	86	None	add
353	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat,  Locale.getDefault());  [CE]  ';'  expected  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat,  Locale.getDefault());  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat,  Locale.getDefault());	  this.enUsFormat    =    enUsFormat,    localeFormat);    	non-compiled	[CE]  ';'  expected	6	None	replace
354	[BUG]  [BUGGY]  this.enUsFormat  =  dateType,  localeFormat);  [CE]  ';'  expected  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  dateType,  localeFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  dateType,  localeFormat);	  this.enUsFormat    =    enUsFormat,    localeFormat);    	non-compiled	[CE]  ';'  expected	6	None	replace
355	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat,  EnUsFormat.class;  [CE]  ';'  expected  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat,  EnUsFormat.class;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat,  EnUsFormat.class;	  this.enUsFormat    =    EnUsFormat.class;    	non-compiled	[CE]  ';'  expected	71	None	replace
356	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat.class;  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat.class;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat.class;	  this.enUsFormat    =    EnUsFormat.class;    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
357	[BUG]  [BUGGY]  this.enUsFormat  =  EnUsFormat.class,  localFormat;  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  EnUsFormat.class,  localFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  EnUsFormat.class,  localFormat;	  this.enUsFormat    =    EnUsFormat.class;    	non-compiled	[CE]  ';'  expected	71	None	replace
358	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException(   "Date  type  must  not  be  null.   ");  }  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.   ");  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException(   "Date  type  must  not  be  null.   ");  }  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.   ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.   ");  }	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	114	None	add
359	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException(   "Date  type  must  not  be  null.   ");  }  if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.   ");  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException(   "Date  type  must  not  be  null.   ");  }  if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.   ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.   ");  }	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	114	None	add
360	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException(   "Date  type  must  not  be  null.   ");  }  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.. ");  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException(   "Date  type  must  not  be  null.   ");  }  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.. ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.. ");  }	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	114	None	add
361	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException(   "Date  type  must  not  be  null.   ");  }  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.   ");  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException(   "Date  type  must  not  be  null.   ");  }  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.   ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.   ");  }	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	114	None	add
362	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException(   "Date  type  must  not  be  null.   ");  }  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localeFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.   ");  }  [CE]  cannot  find  symbol  localeFormat  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException(   "Date  type  must  not  be  null.   ");  }  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localeFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.   ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    if(enUsFormat  ==  null)  {  this.enUsFormat  =  localeFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.   ");  }	  	non-compiled	[CE]  cannot  find  symbol  localeFormat	114	None	add
363	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat.getInstance(dateType);  [CE]  method  getInstance  in  class  DateFormat  cannot  be  applied  to  given  types;  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat.getInstance(dateType);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat.getInstance(dateType);	  this.enUsFormat    =    EnUsFormat.getInstance(dateType);    	non-compiled	[CE]  method  getInstance  in  class  DateFormat  cannot  be  applied  to  given  types;	81	None	replace
364	[BUG]  [BUGGY]  this.enUsFormat  =  EnUsFormat.getInstance(dateType,  localFormat);  [CE]  cannot  find  symbol  EnUsFormat  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  EnUsFormat.getInstance(dateType,  localFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  EnUsFormat.getInstance(dateType,  localFormat);	  this.enUsFormat    =    EnUsFormat.getInstance(dateType);    	non-compiled	[CE]  cannot  find  symbol  EnUsFormat	81	None	replace
365	[BUG]  [BUGGY]  this.enUsFormat  =  EnUsFormat.getInstance(dateType,  locale);  [CE]  cannot  find  symbol  locale  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  EnUsFormat.getInstance(dateType,  locale);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  EnUsFormat.getInstance(dateType,  locale);	  this.enUsFormat    =    EnUsFormat.getInstance(dateType);    	non-compiled	[CE]  cannot  find  symbol  locale	81	None	replace
366	[BUG]  [BUGGY]  this.enUsFormat  =  EnUsFormat.getInstance(localFormat);  [CE]  cannot  find  symbol  EnUsFormat  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  EnUsFormat.getInstance(localFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  EnUsFormat.getInstance(localFormat);	  this.enUsFormat    =    EnUsFormat.getInstance(dateType);    	non-compiled	[CE]  cannot  find  symbol  EnUsFormat	81	None	replace
367	[BUG]  [BUGGY]  this.enUsFormat  =  EnUsFormat.getInstance(dateType,  enUsFormat);  [CE]  cannot  find  symbol  EnUsFormat  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  EnUsFormat.getInstance(dateType,  enUsFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  EnUsFormat.getInstance(dateType,  enUsFormat);	  this.enUsFormat    =    EnUsFormat.getInstance(dateType);    	non-compiled	[CE]  cannot  find  symbol  EnUsFormat	81	None	replace
368	[BUG]  [BUGGY]  this.enUsFormat  =  EnUsFormat.getInstance(type);  [CE]  cannot  find  symbol  type  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  EnUsFormat.getInstance(type);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  EnUsFormat.getInstance(type);	  this.enUsFormat    =    EnUsFormat.getInstance(dateType);    	non-compiled	[CE]  cannot  find  symbol  type	81	None	replace
369	[BUG]  [BUGGY]  DateFormat  localFormat  =  enUsFormat.getDefault();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  DateFormat  localFormat  =  enUsFormat.getDefault();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	DateFormat  localFormat  =  enUsFormat.getDefault();	  DateFormat    localFormat    =    Locale.getDefault();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	60	None	replace
370	[BUG]  [BUGGY]  DateFormat  localFormat  =  new  Locale(Locale.getDefault());  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  DateFormat  localFormat  =  new  Locale(Locale.getDefault());  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	DateFormat  localFormat  =  new  Locale(Locale.getDefault());	  DateFormat    localFormat    =    Locale.getDefault();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	60	None	replace
371	[BUG]  [BUGGY]  DateFormat  localFormat  =  enUsFormat.getLocalFormat();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  DateFormat  localFormat  =  enUsFormat.getLocalFormat();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	DateFormat  localFormat  =  enUsFormat.getLocalFormat();	  DateFormat    localFormat    =    Locale.getDefault();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	60	None	replace
372	[BUG]  [BUGGY]  DateFormat  localFormat  =  locale.getDefault();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  DateFormat  localFormat  =  locale.getDefault();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	DateFormat  localFormat  =  locale.getDefault();	  DateFormat    localFormat    =    Locale.getDefault();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	60	None	replace
373	[BUG]  [BUGGY]  DateFormat  localFormat  =  DateFormat.getLocale();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  DateFormat  localFormat  =  DateFormat.getLocale();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	DateFormat  localFormat  =  DateFormat.getLocale();	  DateFormat    localFormat    =    Locale.getDefault();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	60	None	replace
374	[BUG]  [BUGGY]  DateFormat  localFormat  =  dateType.getLocale();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  DateFormat  localFormat  =  dateType.getLocale();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	DateFormat  localFormat  =  dateType.getLocale();	  DateFormat    localFormat    =    Locale.getDefault();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	60	None	replace
375	[BUG]  [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(dateType,  enUsFormat,  locale);  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(dateType,  enUsFormat,  locale);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DefaultDateFormat(dateType,  enUsFormat,  locale);	  this.enUsFormat    =    new    DefaultDateFormat(dateType,    locale);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
376	[BUG]  [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(dateType,  locale,  enUsFormat);  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(dateType,  locale,  enUsFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DefaultDateFormat(dateType,  locale,  enUsFormat);	  this.enUsFormat    =    new    DefaultDateFormat(dateType,    locale);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
377	[BUG]  [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(dateType,  datePattern);  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(dateType,  datePattern);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DefaultDateFormat(dateType,  datePattern);	  this.enUsFormat    =    new    DefaultDateFormat(dateType,    locale);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
378	[BUG]  [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(this.localFormat);  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(this.localFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DefaultDateFormat(this.localFormat);	  this.enUsFormat    =    new    DefaultDateFormat(enUsFormat);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
379	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:< "[Jan  1  [FE]                  junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	add	if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }	  this.enUsFormat    =    localFormat;    if(localFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:< "[Jan  1  	33	3	replace
380	[BUG]  [BUGGY]  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [FE]  junit.framework.ComparisonFailure:  expected:< "[Jan  1  [FE]                  junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }	  this.enUsFormat    =    localFormat;    if(localFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:< "[Jan  1  	33	3	replace
381	[BUG]  [BUGGY]  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [CE]  ';'  expected  [FE]                    junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }	  this.enUsFormat    =    localFormat;    if(localFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	non-compiled	[CE]  ';'  expected	33	None	replace
382	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getDefault();  }  else  {  this.localFormat  =  LocalFormat.getInstance();  }  [CE]  illegal  start  of  type  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.localFormat  =  LocalFormat.getDefault();  }  else  {  this.localFormat  =  LocalFormat.getInstance();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.localFormat  =  LocalFormat.getDefault();  }  else  {  this.localFormat  =  LocalFormat.getInstance();  }	  if(localFormat    ==    null)    {    this.localFormat    =    LocalFormat.getDefault();    }    else    {    this.localFormat    =    LocalFormat.getInstance();    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
383	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getDefault();  }  else  if(dateType  ==  Date.class)  {  this.localFormat  =  LocalFormat.getInstance();  }  [CE]  illegal  start  of  type  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.localFormat  =  LocalFormat.getDefault();  }  else  if(dateType  ==  Date.class)  {  this.localFormat  =  LocalFormat.getInstance();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.localFormat  =  LocalFormat.getDefault();  }  else  if(dateType  ==  Date.class)  {  this.localFormat  =  LocalFormat.getInstance();  }	  if(localFormat    ==    null)    {    this.localFormat    =    LocalFormat.getDefault();    }    else    {    this.localFormat    =    LocalFormat.getInstance();    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
384	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getDefault();  }  else  if(dateType!=  Date.class)  {  this.localFormat  =  LocalFormat.getInstance();  }  [CE]  illegal  start  of  type  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.localFormat  =  LocalFormat.getDefault();  }  else  if(dateType!=  Date.class)  {  this.localFormat  =  LocalFormat.getInstance();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.localFormat  =  LocalFormat.getDefault();  }  else  if(dateType!=  Date.class)  {  this.localFormat  =  LocalFormat.getInstance();  }	  if(localFormat    ==    null)    {    this.localFormat    =    LocalFormat.getDefault();    }    else    {    this.localFormat    =    LocalFormat.getInstance();    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
385	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getDefault();  }  else  if(enUsFormat  ==  null)  {  this.localFormat  =  LocalFormat.getInstance();  }  [CE]  illegal  start  of  type  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.localFormat  =  LocalFormat.getDefault();  }  else  if(enUsFormat  ==  null)  {  this.localFormat  =  LocalFormat.getInstance();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.localFormat  =  LocalFormat.getDefault();  }  else  if(enUsFormat  ==  null)  {  this.localFormat  =  LocalFormat.getInstance();  }	  if(localFormat    ==    null)    {    this.localFormat    =    LocalFormat.getDefault();    }    else    {    this.localFormat    =    LocalFormat.getInstance();    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
386	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getDefault();  }  else  if(enUsFormat!=  null)  {  this.localFormat  =  LocalFormat.getInstance();  }  [CE]  illegal  start  of  type  [FE]                                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.localFormat  =  LocalFormat.getDefault();  }  else  if(enUsFormat!=  null)  {  this.localFormat  =  LocalFormat.getInstance();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.localFormat  =  LocalFormat.getDefault();  }  else  if(enUsFormat!=  null)  {  this.localFormat  =  LocalFormat.getInstance();  }	  if(localFormat    ==    null)    {    this.localFormat    =    LocalFormat.getDefault();    }    else    {    this.localFormat    =    LocalFormat.getInstance();    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
387	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localeFormat;  }  [CE]  cannot  find  symbol  localeFormat  [FE]            junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localeFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.enUsFormat  =  localeFormat;  }	  this.enUsFormat    =    localFormat;    if(localFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    	non-compiled	[CE]  cannot  find  symbol  localeFormat	30	None	replace
388	[BUG]  [BUGGY]  this.localFormat  =  new  DateFormat(enUsFormat,  enUsFormat);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.localFormat  =  new  DateFormat(enUsFormat,  enUsFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.localFormat  =  new  DateFormat(enUsFormat,  enUsFormat);	  this.localFormat    =    localFormat;    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	13	None	replace
389	[BUG]  [BUGGY]  this.localFormat  =  new  LocalFormat(enUsFormat);  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.localFormat  =  new  LocalFormat(enUsFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.localFormat  =  new  LocalFormat(enUsFormat);	  this.localFormat    =    localFormat;    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
390	[BUG]  [BUGGY]  this.enUsFormat  =  dateType  +  10;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  dateType  +  10;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  dateType  +  10;	  this.enUsFormat    =    enUsFormat    +    10;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	65	None	replace
391	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  +  5;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat  +  5;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  +  5;	  this.enUsFormat    =    enUsFormat    +    10;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	65	None	replace
392	[BUG]  [BUGGY]  this.enUsFormat  =  type.getInstance();  [CE]  cannot  find  symbol  type  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  type.getInstance();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  type.getInstance();	  this.enUsFormat    =    enType.getInstance();    	non-compiled	[CE]  cannot  find  symbol  type	46	None	replace
393	[BUG]  [BUGGY]  this.enUsFormat  =  localeType.getInstance();  [CE]  cannot  find  symbol  localeType  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  localeType.getInstance();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  localeType.getInstance();	  this.enUsFormat    =    enType.getInstance();    	non-compiled	[CE]  cannot  find  symbol  localeType	46	None	replace
394	[BUG]  [BUGGY]  this.enUsFormat  =  dataType.getInstance();  [CE]  cannot  find  symbol  dataType  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  dataType.getInstance();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  dataType.getInstance();	  this.enUsFormat    =    enType.getInstance();    	non-compiled	[CE]  cannot  find  symbol  dataType	46	None	replace
395	[BUG]  [BUGGY]  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }  [CE]  ';'  expected  [FE]                      junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }	  this.enUsFormat    =    localFormat;    if(localFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-null.   ");    }    	non-compiled	[CE]  ';'  expected	35	None	replace
396	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:< "[Jan  1  [FE]                        junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	add	if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }	  this.enUsFormat    =    localFormat;    if(localFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-null.   ");    }    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:< "[Jan  1  	35	3	replace
397	[BUG]  [BUGGY]  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }  [FE]  junit.framework.ComparisonFailure:  expected:< "[Jan  1  [FE]                        junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }	  this.enUsFormat    =    localFormat;    if(localFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-null.   ");    }    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:< "[Jan  1  	35	3	replace
398	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }  [CE]  ';'  expected  [FE]                          junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }	  this.enUsFormat    =    localFormat;    if(localFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-null.   ");    }    	non-compiled	[CE]  ';'  expected	35	None	replace
399	[BUG]  [BUGGY]  DateFormat  localFormat  =  enUsFormat.get(dateType);  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  DateFormat  localFormat  =  enUsFormat.get(dateType);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	DateFormat  localFormat  =  enUsFormat.get(dateType);	  DateFormat    localFormat    =    enUsFormat.get(localFormat);    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	98	None	replace
400	[BUG]  [BUGGY]  DateFormat  localFormat  =  localFormat.get(enUsFormat);  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  DateFormat  localFormat  =  localFormat.get(enUsFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	DateFormat  localFormat  =  localFormat.get(enUsFormat);	  DateFormat    localFormat    =    enUsFormat.get(localFormat);    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	98	None	replace
401	[BUG]  [BUGGY]  DateFormat  localFormat  =  enUsFormat.get(this.dateType);  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  DateFormat  localFormat  =  enUsFormat.get(this.dateType);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	DateFormat  localFormat  =  enUsFormat.get(this.dateType);	  DateFormat    localFormat    =    enUsFormat.get(localFormat);    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	98	None	replace
402	[BUG]  [BUGGY]  DateFormat  localFormat  =  enUsFormat.get(this.localFormat);  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  DateFormat  localFormat  =  enUsFormat.get(this.localFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	DateFormat  localFormat  =  enUsFormat.get(this.localFormat);	  DateFormat    localFormat    =    enUsFormat.get(localFormat);    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	98	None	replace
403	[BUG]  [BUGGY]  DateFormat  localFormat  =  localFormat.get(dateType);  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  DateFormat  localFormat  =  localFormat.get(dateType);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	DateFormat  localFormat  =  localFormat.get(dateType);	  DateFormat    localFormat    =    enUsFormat.get(localFormat);    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	98	None	replace
404	[BUG]  [BUGGY]  DateFormat  localFormat  =  this.enUsFormat.get(localFormat);  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  DateFormat  localFormat  =  this.enUsFormat.get(localFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	DateFormat  localFormat  =  this.enUsFormat.get(localFormat);	  DateFormat    localFormat    =    enUsFormat.get(localFormat);    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	98	None	replace
405	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  + ".,   "  +  localFormat;  [CE]  incompatible  types  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat  + ".,   "  +  localFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  + ".,   "  +  localFormat;	  this.enUsFormat    =    localFormat    +   ",       "    +    enUsFormat;    	non-compiled	[CE]  incompatible  types	51	None	replace
406	[BUG]  [BUGGY]  this.localFormat  =  new  DefaultDateFormat(dateType,  localeFormat);  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.localFormat  =  new  DefaultDateFormat(dateType,  localeFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.localFormat  =  new  DefaultDateFormat(dateType,  localeFormat);	  this.enUsFormat    =    new    DefaultDateFormat(dateType,    localeFormat);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
407	[BUG]  [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(dateType,  localeFormat,  enUsFormat);  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(dateType,  localeFormat,  enUsFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DefaultDateFormat(dateType,  localeFormat,  enUsFormat);	  this.enUsFormat    =    new    DefaultDateFormat(dateType,    localeFormat);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
408	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(this.dateType,  enUsFormat);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(this.dateType,  enUsFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(this.dateType,  enUsFormat);	  this.enUsFormat    =    new    DateFormat(this.dateType);    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	56	None	replace
409	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(this.dateType,  localFormat);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(this.dateType,  localFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(this.dateType,  localFormat);	  this.enUsFormat    =    new    DateFormat(this.dateType);    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	56	None	replace
410	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(this.dateType,  dateType);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(this.dateType,  dateType);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(this.dateType,  dateType);	  this.enUsFormat    =    new    DateFormat(this.dateType);    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	56	None	replace
411	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  Locale.getDefault(),  localFormat);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  Locale.getDefault(),  localFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType,  Locale.getDefault(),  localFormat);	  this.enUsFormat    =    new    DateFormat(dateType,    Locale.getDefault());    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	55	None	replace
412	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  Locale.getDefault(),  locale);  [CE]  cannot  find  symbol  locale  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  Locale.getDefault(),  locale);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType,  Locale.getDefault(),  locale);	  this.enUsFormat    =    new    DateFormat(dateType,    Locale.getDefault());    	non-compiled	[CE]  cannot  find  symbol  locale	55	None	replace
413	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(localFormat,  Locale.getDefault());  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(localFormat,  Locale.getDefault());  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(localFormat,  Locale.getDefault());	  this.enUsFormat    =    new    DateFormat(dateType,    Locale.getDefault());    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	55	None	replace
414	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  localFormat.getDefault());  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  localFormat.getDefault());  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType,  localFormat.getDefault());	  this.enUsFormat    =    new    DateFormat(dateType,    Locale.getDefault());    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
415	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  Locale.getDefault()  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  Locale.getDefault()  +  1);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType,  Locale.getDefault()  +  1);	  this.enUsFormat    =    new    DateFormat(dateType,    Locale.getDefault());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	55	None	replace
416	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  Locale.getDefault(),  true);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  Locale.getDefault(),  true);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType,  Locale.getDefault(),  true);	  this.enUsFormat    =    new    DateFormat(dateType,    Locale.getDefault());    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	55	None	replace
417	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  return  new  DateFormat(dateType,  enUsFormat,  localFormat);  }  [CE]  cannot  return  a  value  from  method  whose  result  type  is  void  [FE]                junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  return  new  DateFormat(dateType,  enUsFormat,  localFormat);  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  return  new  DateFormat(dateType,  enUsFormat,  localFormat);  }	  if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    return    new    DateFormat(dateType,    enUsFormat,    localFormat);    }    	non-compiled	[CE]  cannot  return  a  value  from  method  whose  result  type  is  void	93	None	replace
418	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  new  DateFormat(dateType,  enUsFormat,  localFormat);  }  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                  junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  new  DateFormat(dateType,  enUsFormat,  localFormat);  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.enUsFormat  =  new  DateFormat(dateType,  enUsFormat,  localFormat);  }	  if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    return    new    DateFormat(dateType,    enUsFormat,    localFormat);    }    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	93	None	replace
419	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localeFormat;  }  else  {  return  new  DateFormat(dateType,  enUsFormat,  localFormat);  }  [CE]  cannot  find  symbol  localeFormat  [FE]                    junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localeFormat;  }  else  {  return  new  DateFormat(dateType,  enUsFormat,  localFormat);  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.enUsFormat  =  localeFormat;  }  else  {  return  new  DateFormat(dateType,  enUsFormat,  localFormat);  }	  if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    return    new    DateFormat(dateType,    enUsFormat,    localFormat);    }    	non-compiled	[CE]  cannot  find  symbol  localeFormat	93	None	replace
420	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  enUsFormat;  }  else  {  return  new  DateFormat(dateType,  localFormat);  }  [CE]  cannot  return  a  value  from  method  whose  result  type  is  void  [FE]                      junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  enUsFormat;  }  else  {  return  new  DateFormat(dateType,  localFormat);  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.enUsFormat  =  enUsFormat;  }  else  {  return  new  DateFormat(dateType,  localFormat);  }	  if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    return    new    DateFormat(dateType,    enUsFormat,    localFormat);    }    	non-compiled	[CE]  cannot  return  a  value  from  method  whose  result  type  is  void	93	None	replace
421	[BUG]  [BUGGY]  this.enUsFormat  =  dateType,  enUsFormat;  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  dateType,  enUsFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  dateType,  enUsFormat;	  this.enUsFormat    =    localeFormat,    enUsFormat;    	non-compiled	[CE]  ';'  expected	10	None	replace
422	[BUG]  [BUGGY]  this.enUsFormat  =  localFormat,  localeFormat;  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  localFormat,  localeFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  localFormat,  localeFormat;	  this.enUsFormat    =    localeFormat,    enUsFormat;    	non-compiled	[CE]  ';'  expected	10	None	replace
423	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat,  LocalFormat.localFormat);  [CE]  ';'  expected  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat,  LocalFormat.localFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat,  LocalFormat.localFormat);	  this.enUsFormat    =    enUsFormat,    LocalFormat.class);    	non-compiled	[CE]  ';'  expected	102	None	replace
424	[BUG]  [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(dateType,  Locale.getDefault());  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(dateType,  Locale.getDefault());  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DefaultDateFormat(dateType,  Locale.getDefault());	  this.enUsFormat    =    new    DefaultDateFormat(dateType,    locale);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
425	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  +  2,  localeFormat;  [CE]  ';'  expected  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat  +  2,  localeFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  +  2,  localeFormat;	  this.enUsFormat    =    enUsFormat    +    1,    localeFormat;    	non-compiled	[CE]  ';'  expected	95	None	replace
426	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  +  1,  localePattern;  [CE]  ';'  expected  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat  +  1,  localePattern;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  +  1,  localePattern;	  this.enUsFormat    =    enUsFormat    +    1,    localeFormat;    	non-compiled	[CE]  ';'  expected	95	None	replace
427	[BUG]  [BUGGY]  this.enUsFormat  =  EnUsFormat.class,  localeFormat;  [CE]  ';'  expected  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  EnUsFormat.class,  localeFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  EnUsFormat.class,  localeFormat;	  this.enUsFormat    =    dateType,    localeFormat;    	non-compiled	[CE]  ';'  expected	27	None	replace
428	[BUG]  [BUGGY]  enUsFormat  =  localeFormat;  [CE]  cannot  find  symbol  localeFormat  [FE]        junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  enUsFormat  =  localeFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	enUsFormat  =  localeFormat;	  enUsFormat    =    enUsFormat;    	non-compiled	[CE]  cannot  find  symbol  localeFormat	21	None	replace
429	[BUG]  [BUGGY]  enUsFormat  =  this.dateType;  [CE]  incompatible  types  [FE]          junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  enUsFormat  =  this.dateType;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	enUsFormat  =  this.dateType;	  enUsFormat    =    enUsFormat;    	non-compiled	[CE]  incompatible  types	21	None	replace
430	[BUG]  [BUGGY]  DateFormat  localFormat  =  localFormat.getLocalFamily();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  DateFormat  localFormat  =  localFormat.getLocalFamily();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	DateFormat  localFormat  =  localFormat.getLocalFamily();	  DateFormat    localFormat    =    enUsFormat.getLocalFamily();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	101	None	replace
431	[BUG]  [BUGGY]  DateFormat  localFormat  =  enUsFormat.withUTC();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  DateFormat  localFormat  =  enUsFormat.withUTC();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	DateFormat  localFormat  =  enUsFormat.withUTC();	  DateFormat    localFormat    =    enUsFormat.getLocalFamily();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	101	None	replace
432	[BUG]  [BUGGY]  DateFormat  localFormat  =  enUsFormat.toLocalFamily();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  DateFormat  localFormat  =  enUsFormat.toLocalFamily();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	DateFormat  localFormat  =  enUsFormat.toLocalFamily();	  DateFormat    localFormat    =    enUsFormat.getLocalFamily();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	101	None	replace
433	[BUG]  [BUGGY]  DateFormat  localFormat  =  enUsFormat.getLocalName();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  DateFormat  localFormat  =  enUsFormat.getLocalName();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	DateFormat  localFormat  =  enUsFormat.getLocalName();	  DateFormat    localFormat    =    enUsFormat.getLocalFamily();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	101	None	replace
434	[BUG]  [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(enUsFormat,  localeFormat);  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(enUsFormat,  localeFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DefaultDateFormat(enUsFormat,  localeFormat);	  this.enUsFormat    =    new    DefaultDateFormat(type);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
435	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(enUsFormat,  enUsFormat);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(enUsFormat,  enUsFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(enUsFormat,  enUsFormat);	  this.enUsFormat    =    new    DateFormat(type,    enUsFormat);    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	25	None	replace
436	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(enUsFormat,  dateType);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(enUsFormat,  dateType);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(enUsFormat,  dateType);	  this.enUsFormat    =    new    DateFormat(type,    enUsFormat);    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	25	None	replace
437	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  +  LocalFormat.localFormat;  [CE]  cannot  find  symbol  LocalFormat  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat  +  LocalFormat.localFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  +  LocalFormat.localFormat;	  this.enUsFormat    =    enUsFormat    +    dateType;    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	39	None	replace
438	[BUG]  [BUGGY]  this.dateType  =  new  DateFormat(dateType,  enUsFormat);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.dateType  =  new  DateFormat(dateType,  enUsFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.dateType  =  new  DateFormat(dateType,  enUsFormat);	  this.dateType    =    enUsFormat;    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	36	None	replace
439	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat.withInstanceType(dateType);  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat.withInstanceType(dateType);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat.withInstanceType(dateType);	  this.enUsFormat    =    enUsFormat.getInstanceType();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
440	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat.withInstanceType(instanceType);  [CE]  cannot  find  symbol  instanceType  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat.withInstanceType(instanceType);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat.withInstanceType(instanceType);	  this.enUsFormat    =    enUsFormat.getInstanceType();    	non-compiled	[CE]  cannot  find  symbol  instanceType	45	None	replace
441	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat.getEncoding();  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat.getEncoding();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat.getEncoding();	  this.enUsFormat    =    enUsFormat.getInstanceType();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
442	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat.withInstanceType(localFormat);  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat.withInstanceType(localFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat.withInstanceType(localFormat);	  this.enUsFormat    =    enUsFormat.getInstanceType();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
443	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  LocalFormat.getLocalFormat();  }  [CE]  cannot  find  symbol  LocalFormat  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  LocalFormat.getLocalFormat();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  LocalFormat.getLocalFormat();  }	  if(localFormat    ==    null)    {    this.localFormat    =    LocalFormat.getDefault();    }    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	97	None	replace
444	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  LocalFormat.newInstance();  }  [CE]  cannot  find  symbol  LocalFormat  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  LocalFormat.newInstance();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  LocalFormat.newInstance();  }	  if(localFormat    ==    null)    {    this.localFormat    =    LocalFormat.getDefault();    }    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	97	None	replace
445	[BUG]  [BUGGY]  this.enUsFormat  =  ENUsFormat.UTF8;  [CE]  cannot  find  symbol  ENUsFormat  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  ENUsFormat.UTF8;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  ENUsFormat.UTF8;	  this.enUsFormat    =    EnUsFormat.UTF8;    	non-compiled	[CE]  cannot  find  symbol  ENUsFormat	72	None	replace
446	[BUG]  [BUGGY]  this.enUsFormat  =  EnUsFormat.UNKNOWN;  [CE]  cannot  find  symbol  EnUsFormat  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  EnUsFormat.UNKNOWN;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  EnUsFormat.UNKNOWN;	  this.enUsFormat    =    EnUsFormat.UTF8;    	non-compiled	[CE]  cannot  find  symbol  EnUsFormat	72	None	replace
447	[BUG]  [BUGGY]  this.enUsFormat  =  EnUsFormat.US_ASCII;  [CE]  cannot  find  symbol  EnUsFormat  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  EnUsFormat.US_ASCII;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  EnUsFormat.US_ASCII;	  this.enUsFormat    =    EnUsFormat.UTF8;    	non-compiled	[CE]  cannot  find  symbol  EnUsFormat	72	None	replace
448	[BUG]  [BUGGY]  this.enUsFormat  =  EnUsFormat.UTF8  +  1;  [CE]  cannot  find  symbol  EnUsFormat  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  EnUsFormat.UTF8  +  1;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  EnUsFormat.UTF8  +  1;	  this.enUsFormat    =    EnUsFormat.UTF8;    	non-compiled	[CE]  cannot  find  symbol  EnUsFormat	72	None	replace
449	[BUG]  [BUGGY]  this.enUsFormat  =  EnUsFormat.UTF8);  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  EnUsFormat.UTF8);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  EnUsFormat.UTF8);	  this.enUsFormat    =    EnUsFormat.UTF8;    	non-compiled	[CE]  ';'  expected	72	None	replace
450	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  +  LocalFormat.class;  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat  +  LocalFormat.class;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  +  LocalFormat.class;	  this.enUsFormat    =    enUsFormat    +    localFormat;    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
451	[BUG]  [BUGGY]  this.enUsFormat  =  LocalFormat.getDefault();  [CE]  cannot  find  symbol  LocalFormat  [FE]                  junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  LocalFormat.getDefault();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  LocalFormat.getDefault();	  if(enUsFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	94	None	replace
452	[BUG]  [BUGGY]  This.enUsFormat  =  localFormat;  [CE]  cannot  find  symbol  This  [FE]                    junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  This.enUsFormat  =  localFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	This.enUsFormat  =  localFormat;	  if(enUsFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    	non-compiled	[CE]  cannot  find  symbol  This	94	None	replace
453	[BUG]  [BUGGY]  this.enUsFormat  =  LocalFormat.getInstance();  [CE]  cannot  find  symbol  LocalFormat  [FE]                      junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  LocalFormat.getInstance();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  LocalFormat.getInstance();	  if(enUsFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	94	None	replace
454	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  return  new  DateFormat(dateType,  enUsFormat,  localeFormat);  }  [CE]  cannot  return  a  value  from  method  whose  result  type  is  void  [FE]                junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  return  new  DateFormat(dateType,  enUsFormat,  localeFormat);  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  return  new  DateFormat(dateType,  enUsFormat,  localeFormat);  }	  if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    return    new    DateFormat(dateType,    enUsFormat,    localFormat);    }    	non-compiled	[CE]  cannot  return  a  value  from  method  whose  result  type  is  void	93	None	replace
455	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  dateType;  }  else  {  return  new  DateFormat(dateType,  enUsFormat,  localFormat);  }  [CE]  incompatible  types  [FE]                  junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  dateType;  }  else  {  return  new  DateFormat(dateType,  enUsFormat,  localFormat);  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.enUsFormat  =  dateType;  }  else  {  return  new  DateFormat(dateType,  enUsFormat,  localFormat);  }	  if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    return    new    DateFormat(dateType,    enUsFormat,    localFormat);    }    	non-compiled	[CE]  incompatible  types	93	None	replace
456	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  new  DateFormat(dateType,  enUsFormat);  }  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                    junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  new  DateFormat(dateType,  enUsFormat);  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.enUsFormat  =  new  DateFormat(dateType,  enUsFormat);  }	  if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    return    new    DateFormat(dateType,    enUsFormat,    localFormat);    }    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	93	None	replace
457	[BUG]  [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(dateType,  enUsFormat,  LocalFormat.class);  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(dateType,  enUsFormat,  LocalFormat.class);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DefaultDateFormat(dateType,  enUsFormat,  LocalFormat.class);	  this.enUsFormat    =    new    DefaultDateFormat(dateType,    enUsFormat);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
458	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  enUsFormat,  globalFormat);  [CE]  cannot  find  symbol  globalFormat  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  enUsFormat,  globalFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType,  enUsFormat,  globalFormat);	  this.enUsFormat    =    new    DateFormat(dateType,    enUsFormat,    localeFormat);    	non-compiled	[CE]  cannot  find  symbol  globalFormat	23	None	replace
459	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  +  6;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat  +  6;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  +  6;	  this.enUsFormat    =    enUsFormat    +    4;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	64	None	replace
460	[BUG]  [BUGGY]  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  this.enUsFormat  =  localFormat;  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]        junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  this.enUsFormat  =  localFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  this.enUsFormat  =  localFormat;  }	  this.enUsFormat    =    localFormat;    this.enUsFormat    =    localFormat;    	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	28	None	replace
461	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  this.enUsFormat  =  localFormat;  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]          junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  this.enUsFormat  =  localFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  this.enUsFormat  =  localFormat;  }	  this.enUsFormat    =    localFormat;    this.enUsFormat    =    localFormat;    	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	28	None	replace
462	[BUG]  [BUGGY]  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]            junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  this.enUsFormat    =    localFormat;    this.enUsFormat    =    localFormat;    	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	28	None	replace
463	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]              junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  this.enUsFormat    =    localFormat;    this.enUsFormat    =    localFormat;    	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	28	None	replace
464	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  LocalFormat.getDefault();  }  [CE]  cannot  find  symbol  LocalFormat  [FE]                junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  LocalFormat.getDefault();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  LocalFormat.getDefault();  }	  this.enUsFormat    =    localFormat;    this.enUsFormat    =    localFormat;    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	28	None	replace
465	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  this.enUsFormat  =  localeFormat;  }  [CE]  cannot  find  symbol  localeFormat  [FE]                  junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  this.enUsFormat  =  localeFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  this.enUsFormat  =  localeFormat;  }	  this.enUsFormat    =    localFormat;    this.enUsFormat    =    localFormat;    	non-compiled	[CE]  cannot  find  symbol  localeFormat	28	None	replace
466	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException(   "Date  type  must  not  be  null.   ");  }  If(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.   ");  }  [CE]  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException(   "Date  type  must  not  be  null.   ");  }  If(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.   ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    If(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.   ");  }	  	non-compiled	[CE]  	114	None	add
467	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  this.enUsFormat  =  LocalFormat.getDefault();  }  [CE]  ';'  expected  [FE]          junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(dateType!=  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  this.enUsFormat  =  LocalFormat.getDefault();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(dateType!=  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  this.enUsFormat  =  LocalFormat.getDefault();  }	  this.enUsFormat    =    localFormat;    if(localFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    	non-compiled	[CE]  ';'  expected	29	None	replace
468	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat;  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]                    junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat;  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat;  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }	  this.enUsFormat    =    localFormat;    if(localFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    be    null.   ");    }    	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	34	None	replace
469	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat;  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]                      junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat;  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat;  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }	  this.enUsFormat    =    localFormat;    if(localFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    be    null.   ");    }    	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	34	None	replace
470	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [CE]  ';'  expected  [FE]                        junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(dateType!=  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(dateType!=  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }	  this.enUsFormat    =    localFormat;    if(localFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    be    null.   ");    }    	non-compiled	[CE]  ';'  expected	34	None	replace
471	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat,  locationFormat);  [CE]  ';'  expected  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat,  locationFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat,  locationFormat);	  this.enUsFormat    =    localeFormat,    enUsFormat);    	non-compiled	[CE]  ';'  expected	7	None	replace
472	[BUG]  [BUGGY]  this.localFormat  =  new  DateFormat(dateType);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.localFormat  =  new  DateFormat(dateType);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.localFormat  =  new  DateFormat(dateType);	  this.localFormat    =    enUsFormat;    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	12	None	replace
473	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat,  localFormat  +  1L;  [CE]  ';'  expected  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat,  localFormat  +  1L;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat,  localFormat  +  1L;	  this.enUsFormat    =    enUsFormat,    localFormat    +    1;    	non-compiled	[CE]  ';'  expected	48	None	replace
474	[BUG]  [BUGGY]  this.enUsFormat  =  localFormat.getInstance();  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  else  {  Class  <?  extends  Date>  localFormat  =  localFormat.getInstance();  this.enUsFormat  =  localFormat.getInstance();  }  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]    junit.framework.ComparisonFailure:  expected:<   "[March  18    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  localFormat.getInstance();  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  else  {  Class  <?  extends  Date>  localFormat  =  localFormat.getInstance();  this.enUsFormat  =  localFormat.getInstance();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat    =    localFormat.getInstance();    if(localFormat!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  else  {  Class  <?  extends  Date>  localFormat  =  localFormat.getInstance();  this.enUsFormat  =  localFormat.getInstance();  }	  	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	42	None	add
475	[BUG]  [BUGGY]  this.enUsFormat  =  localFormat.getInstance();  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  else  {  Class  <?  extends  Date>  localFormat  =  localFormat.getInstance();  this.localFormat  =  localFormat.getInstance();  }  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]      junit.framework.ComparisonFailure:  expected:<   "[March  18    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  localFormat.getInstance();  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  else  {  Class  <?  extends  Date>  localFormat  =  localFormat.getInstance();  this.localFormat  =  localFormat.getInstance();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat    =    localFormat.getInstance();    if(localFormat!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  else  {  Class  <?  extends  Date>  localFormat  =  localFormat.getInstance();  this.localFormat  =  localFormat.getInstance();  }	  	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	42	None	add
476	[BUG]  [BUGGY]  this.enUsFormat  =  localFormat.getInstance();  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  else  {  DateFormat  localFormat  =  localFormat.getInstance();  }  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]        junit.framework.ComparisonFailure:  expected:<   "[March  18    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  localFormat.getInstance();  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  else  {  DateFormat  localFormat  =  localFormat.getInstance();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat    =    localFormat.getInstance();    if(localFormat!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  else  {  DateFormat  localFormat  =  localFormat.getInstance();  }	  	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	42	None	add
477	[BUG]  [BUGGY]  this.enUsFormat  =  localFormat.getInstance();  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  else  {  Class  <?  extends  Date>  localFormat  =  localFormat.getInstance();  this.datePattern  =  localFormat.getInstance();  }  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]          junit.framework.ComparisonFailure:  expected:<   "[March  18    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  localFormat.getInstance();  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  else  {  Class  <?  extends  Date>  localFormat  =  localFormat.getInstance();  this.datePattern  =  localFormat.getInstance();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat    =    localFormat.getInstance();    if(localFormat!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  else  {  Class  <?  extends  Date>  localFormat  =  localFormat.getInstance();  this.datePattern  =  localFormat.getInstance();  }	  	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	42	None	add
478	[BUG]  [BUGGY]  this.enUsFormat  =  eUsFormat.getInstance();  [CE]  cannot  find  symbol  eUsFormat  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  eUsFormat.getInstance();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  eUsFormat.getInstance();	  this.enUsFormat    =    ENUsFormat.getInstance();    	non-compiled	[CE]  cannot  find  symbol  eUsFormat	80	None	replace
479	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat,  localFormat,  1);  [CE]  ';'  expected  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat,  localFormat,  1);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat,  localFormat,  1);	  this.enUsFormat    =    enUsFormat,    localFormat,    SIMPLE_NAME);    	non-compiled	[CE]  ';'  expected	8	None	replace
480	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat,  localFormat,  3);  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat,  localFormat,  3);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat,  localFormat,  3);	  this.enUsFormat    =    enUsFormat,    localFormat,    SIMPLE_NAME);    	non-compiled	[CE]  ';'  expected	8	None	replace
481	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat,  localFormat,  SIMPLE_NAME  +  1);  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat,  localFormat,  SIMPLE_NAME  +  1);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat,  localFormat,  SIMPLE_NAME  +  1);	  this.enUsFormat    =    enUsFormat,    localFormat,    SIMPLE_NAME);    	non-compiled	[CE]  ';'  expected	8	None	replace
482	[BUG]  [BUGGY]  if(localFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  localFormat  =  Locale.getDefault();  }  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  localFormat  =  Locale.getDefault();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  localFormat  =  Locale.getDefault();  }	  if(localFormat    ==    null)    {    Class    <?    extends    Date>    localFormat    =    Locale.getDefault();    if(localFormat!=    null)    {    localFormat    =    Locale.getDefault();    }    	non-compiled	[CE]  ';'  expected	59	None	replace
483	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  localFormat  =  Locale.getDefault();  }  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(dateType!=  Date.class)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  localFormat  =  Locale.getDefault();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(dateType!=  Date.class)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  localFormat  =  Locale.getDefault();  }	  if(localFormat    ==    null)    {    Class    <?    extends    Date>    localFormat    =    Locale.getDefault();    if(localFormat!=    null)    {    localFormat    =    Locale.getDefault();    }    	non-compiled	[CE]  ';'  expected	59	None	replace
484	[BUG]  [BUGGY]  if(enUsFormat  ==  null  ||  localFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  localFormat  =  Locale.getDefault();  }  [CE]  ';'  expected  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null  ||  localFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  localFormat  =  Locale.getDefault();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat  ==  null  ||  localFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  localFormat  =  Locale.getDefault();  }	  if(localFormat    ==    null)    {    Class    <?    extends    Date>    localFormat    =    Locale.getDefault();    if(localFormat!=    null)    {    localFormat    =    Locale.getDefault();    }    	non-compiled	[CE]  ';'  expected	59	None	replace
485	[BUG]  [BUGGY]  if(localFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat  ==  null)  {  localFormat  =  Locale.getDefault();  }  [CE]  ';'  expected  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat  ==  null)  {  localFormat  =  Locale.getDefault();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat  ==  null)  {  localFormat  =  Locale.getDefault();  }	  if(localFormat    ==    null)    {    Class    <?    extends    Date>    localFormat    =    Locale.getDefault();    if(localFormat!=    null)    {    localFormat    =    Locale.getDefault();    }    	non-compiled	[CE]  ';'  expected	59	None	replace
486	[BUG]  [BUGGY]  this.enUsFormat  =  enUsformat,  localFormat;  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsformat,  localFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsformat,  localFormat;	  this.enUsFormat    =    dateType,    localFormat;    	non-compiled	[CE]  ';'  expected	11	None	replace
487	[BUG]  [BUGGY]  Class  <?  extends  Date>  localFormat  =  DateFormat.getLocale();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  Class  <?  extends  Date>  localFormat  =  DateFormat.getLocale();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	Class  <?  extends  Date>  localFormat  =  DateFormat.getLocale();	  Class    <?    extends    Date>    localFormat    =    Locale.getDefault();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	77	None	replace
488	[BUG]  [BUGGY]  Class  <?  extends  Date>  localFormat  =  locale;  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  Class  <?  extends  Date>  localFormat  =  locale;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	Class  <?  extends  Date>  localFormat  =  locale;	  Class    <?    extends    Date>    localFormat    =    Locale.getDefault();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	77	None	replace
489	[BUG]  [BUGGY]  Class  <?  extends  Date>  localFormat  =  DateFormat.getDefault();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  Class  <?  extends  Date>  localFormat  =  DateFormat.getDefault();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	Class  <?  extends  Date>  localFormat  =  DateFormat.getDefault();	  Class    <?    extends    Date>    localFormat    =    Locale.getDefault();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	77	None	replace
490	[BUG]  [BUGGY]  this.enUsFormat  =  EnUsFormat.ENUsFormat;  [CE]  cannot  find  symbol  EnUsFormat  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  EnUsFormat.ENUsFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  EnUsFormat.ENUsFormat;	  this.enUsFormat    =    EnUsFormat.class;    	non-compiled	[CE]  cannot  find  symbol  EnUsFormat	71	None	replace
491	[BUG]  [BUGGY]  this.enUsFormat  =  EnUsFormat.US;  [CE]  cannot  find  symbol  EnUsFormat  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  EnUsFormat.US;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  EnUsFormat.US;	  this.enUsFormat    =    EnUsFormat.class;    	non-compiled	[CE]  cannot  find  symbol  EnUsFormat	71	None	replace
492	[BUG]  [BUGGY]  DateFormat  localFormat  =  localeFormat.get(enUsFormat);  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  DateFormat  localFormat  =  localeFormat.get(enUsFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	DateFormat  localFormat  =  localeFormat.get(enUsFormat);	  DateFormat    localFormat    =    enUsFormat.get(localFormat);    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	98	None	replace
493	[BUG]  [BUGGY]  this.localFormat  =  dateUsFormat;  [CE]  cannot  find  symbol  dateUsFormat  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.localFormat  =  dateUsFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.localFormat  =  dateUsFormat;	  this.localFormat    =    localFormat;    	non-compiled	[CE]  cannot  find  symbol  dateUsFormat	13	None	replace
494	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  LocalFormat.getInstance();  }  else  {  this.localFormat  =  LocalFormat.getInstance();  }  [CE]  cannot  find  symbol  LocalFormat  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  LocalFormat.getInstance();  }  else  {  this.localFormat  =  LocalFormat.getInstance();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  LocalFormat.getInstance();  }  else  {  this.localFormat  =  LocalFormat.getInstance();  }	  if(localFormat    ==    null)    {    this.localFormat    =    LocalFormat.getDefault();    }    else    {    this.localFormat    =    LocalFormat.getInstance();    }    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	100	None	replace
495	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  localFormat.getDefault();  }  else  {  this.localFormat  =  LocalFormat.getInstance();  }  [CE]  cannot  find  symbol  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  localFormat.getDefault();  }  else  {  this.localFormat  =  LocalFormat.getInstance();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  localFormat.getDefault();  }  else  {  this.localFormat  =  LocalFormat.getInstance();  }	  if(localFormat    ==    null)    {    this.localFormat    =    LocalFormat.getDefault();    }    else    {    this.localFormat    =    LocalFormat.getInstance();    }    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
496	[BUG]  [BUGGY]  if(dateType  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  DateFormat  enUsFormat  =  new  DateFormat(dateType);  enUsFormat  =  enUsFormat;  }  [CE]  variable  enUsFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]        junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(dateType  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  DateFormat  enUsFormat  =  new  DateFormat(dateType);  enUsFormat  =  enUsFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(dateType  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  DateFormat  enUsFormat  =  new  DateFormat(dateType);  enUsFormat  =  enUsFormat;  }	  if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    DateFormat    enUsFormat    =    new    DateFormat(dateType);    enUsFormat    =    enUsFormat;    }    	non-compiled	[CE]  variable  enUsFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	111	None	replace
497	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  new  DateFormat(dateType);  enUsFormat  =  enUsFormat;  }  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]          junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  new  DateFormat(dateType);  enUsFormat  =  enUsFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.enUsFormat  =  new  DateFormat(dateType);  enUsFormat  =  enUsFormat;  }	  if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    DateFormat    enUsFormat    =    new    DateFormat(dateType);    enUsFormat    =    enUsFormat;    }    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	111	None	replace
498	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localeFormat;  }  else  {  DateFormat  enUsFormat  =  new  DateFormat(dateType);  enUsFormat  =  enUsFormat;  }  [CE]  cannot  find  symbol  localeFormat  [FE]            junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localeFormat;  }  else  {  DateFormat  enUsFormat  =  new  DateFormat(dateType);  enUsFormat  =  enUsFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.enUsFormat  =  localeFormat;  }  else  {  DateFormat  enUsFormat  =  new  DateFormat(dateType);  enUsFormat  =  enUsFormat;  }	  if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    DateFormat    enUsFormat    =    new    DateFormat(dateType);    enUsFormat    =    enUsFormat;    }    	non-compiled	[CE]  cannot  find  symbol  localeFormat	111	None	replace
499	[BUG]  [BUGGY]  if(dateType  ==  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]              junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(dateType  ==  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(dateType  ==  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  this.enUsFormat    =    localFormat;    if(localFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	31	None	replace
500	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  this.enUsFormat  =  localeFormat;  }  [CE]  ';'  expected  [FE]                junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(dateType!=  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  this.enUsFormat  =  localeFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(dateType!=  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  this.enUsFormat  =  localeFormat;  }	  this.enUsFormat    =    localFormat;    if(localFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	31	None	replace
501	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  +  8;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat  +  8;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  +  8;	  this.enUsFormat    =    enUsFormat    +    10;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	65	None	replace
502	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat,  LocalFormat.withUTC();  [CE]  ';'  expected  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat,  LocalFormat.withUTC();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat,  LocalFormat.withUTC();	  this.enUsFormat    =    enUsFormat,    LocalFormat;    	non-compiled	[CE]  ';'  expected	107	None	replace
503	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat,  LocalFormat.DEFAULT;  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat,  LocalFormat.DEFAULT;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat,  LocalFormat.DEFAULT;	  this.enUsFormat    =    enUsFormat,    LocalFormat;    	non-compiled	[CE]  ';'  expected	107	None	replace
504	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  ||  context;  [CE]  cannot  find  symbol  context  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat  ||  context;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  ||  context;	  this.enUsFormat    =    localeFormat    ||    enUsFormat;    	non-compiled	[CE]  cannot  find  symbol  context	2	None	replace
505	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  ||  locationFormat;  [CE]  cannot  find  symbol  locationFormat  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat  ||  locationFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  ||  locationFormat;	  this.enUsFormat    =    localeFormat    ||    enUsFormat;    	non-compiled	[CE]  cannot  find  symbol  locationFormat	2	None	replace
506	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  enUsFormat;  }  if(dateType  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  localFormat;  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  enUsFormat;  }  if(dateType  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  localFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    this.enUsFormat    =    enUsFormat;    }    if(dateType  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  localFormat;  }	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	112	None	add
507	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  enUsFormat;  }  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  localeFormat;  }  [CE]  cannot  find  symbol  localeFormat  [FE]      JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  enUsFormat;  }  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  localeFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    this.enUsFormat    =    enUsFormat;    }    if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  localeFormat;  }	  	non-compiled	[CE]  cannot  find  symbol  localeFormat	112	None	add
508	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  enUsFormat;  }  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  dateType;  }  [CE]  incompatible  types  [FE]        JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  enUsFormat;  }  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  dateType;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    this.enUsFormat    =    enUsFormat;    }    if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  dateType;  }	  	non-compiled	[CE]  incompatible  types	112	None	add
509	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  enUsFormat;  }  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  new  DateFormat();  }  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]          JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  enUsFormat;  }  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  new  DateFormat();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    this.enUsFormat    =    enUsFormat;    }    if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  new  DateFormat();  }	  	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	112	None	add
510	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(dateType!=  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(dateType!=  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  this.enUsFormat    =    localFormat;    if(localFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	32	None	replace
511	[BUG]  [BUGGY]  if(dateType  ==  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                  junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(dateType  ==  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(dateType  ==  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  this.enUsFormat    =    localFormat;    if(localFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	32	None	replace
512	[BUG]  [BUGGY]  if(localFormat!=  null)  {  this.localFormat  =  Locale.getDefault();  }  else  {  this.localFormat  =  Locale.getDefault();  }  [CE]  incompatible  types  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat!=  null)  {  this.localFormat  =  Locale.getDefault();  }  else  {  this.localFormat  =  Locale.getDefault();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat!=  null)  {  this.localFormat  =  Locale.getDefault();  }  else  {  this.localFormat  =  Locale.getDefault();  }	  if(localFormat    ==    null)    {    this.localFormat    =    Locale.getDefault();    }    else    {    this.localFormat    =    Locale.getDefault();    }    	non-compiled	[CE]  incompatible  types	76	None	replace
513	[BUG]  [BUGGY]  if(localFormat!=  null)  {  this.localFormat  =  Locale.getDefault();  }  [CE]  incompatible  types  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat!=  null)  {  this.localFormat  =  Locale.getDefault();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat!=  null)  {  this.localFormat  =  Locale.getDefault();  }	  if(localFormat    ==    null)    {    this.localFormat    =    Locale.getDefault();    }    else    {    this.localFormat    =    Locale.getDefault();    }    	non-compiled	[CE]  incompatible  types	76	None	replace
514	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  DateFormat.getDefault();  }  else  {  this.localFormat  =  Locale.getDefault();  }  [CE]  cannot  find  symbol  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  DateFormat.getDefault();  }  else  {  this.localFormat  =  Locale.getDefault();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  DateFormat.getDefault();  }  else  {  this.localFormat  =  Locale.getDefault();  }	  if(localFormat    ==    null)    {    this.localFormat    =    Locale.getDefault();    }    else    {    this.localFormat    =    Locale.getDefault();    }    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
515	[BUG]  [BUGGY]  this.enUsFormat  =  new  EnUsFormat();  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  EnUsFormat();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  EnUsFormat();	  this.enUsFormat    =    EnUsFormat;    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
516	[BUG]  [BUGGY]  this.enUsFormat  =  new  EnUsFormat(dateType);  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  EnUsFormat(dateType);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  EnUsFormat(dateType);	  this.enUsFormat    =    EnUsFormat;    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
517	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  JsonParseException(   "   ");  }  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  JsonParseException( " "));  }  [CE]  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  JsonParseException(   "   ");  }  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  JsonParseException( " "));  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    JsonParseException(   "   ");    }    if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  JsonParseException( " "));  }	  	non-compiled	[CE]  	91	None	add
518	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  JsonParseException(   "   ");  }  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  JsonParseException( " ",  localFormat);  }  [CE]  no  suitable  constructor  found  for  JsonParseException(String,DateFormat)  [FE]      JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  JsonParseException(   "   ");  }  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  JsonParseException( " ",  localFormat);  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    JsonParseException(   "   ");    }    if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  JsonParseException( " ",  localFormat);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,DateFormat)	91	None	add
519	[BUG]  [BUGGY]  if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]    junit.framework.ComparisonFailure:  expected:<   "[Jan  1    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	89	None	add
520	[BUG]  [BUGGY]  if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]      junit.framework.ComparisonFailure:  expected:<   "[Jan  1    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " "));  }	  	non-compiled	[CE]  	89	None	add
521	[BUG]  [BUGGY]  if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(enUsFormat!=  null)  {  this.enUsFormat  =  localeFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  localeFormat  [FE]        junit.framework.ComparisonFailure:  expected:<   "[Jan  1    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(enUsFormat!=  null)  {  this.enUsFormat  =  localeFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(enUsFormat!=  null)  {  this.enUsFormat  =  localeFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  cannot  find  symbol  localeFormat	89	None	add
522	[BUG]  [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(this.dateType,  enUsFormat);  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(this.dateType,  enUsFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DefaultDateFormat(this.dateType,  enUsFormat);	  this.enUsFormat    =    new    DefaultDateFormat(this.dateType);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
523	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  LocalFormat.getDefault();  }  [CE]  cannot  find  symbol  LocalFormat  [FE]            junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  LocalFormat.getDefault();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.enUsFormat  =  LocalFormat.getDefault();  }	  this.enUsFormat    =    localFormat;    if(localFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	30	None	replace
524	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  new  DateFormat();  }  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]              junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  new  DateFormat();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.enUsFormat  =  new  DateFormat();  }	  this.enUsFormat    =    localFormat;    if(localFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	30	None	replace
525	[BUG]  [BUGGY]  if(dateType  ==  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(dateType  ==  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(dateType  ==  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    Class    <?    extends    Date>    localFormat    =    Locale.getDefault();    if(localFormat!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	58	None	replace
526	[BUG]  [BUGGY]  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    Class    <?    extends    Date>    localFormat    =    Locale.getDefault();    if(localFormat!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	58	None	replace
527	[BUG]  [BUGGY]  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    Class    <?    extends    Date>    localFormat    =    Locale.getDefault();    if(localFormat!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	58	None	replace
528	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	add	if(enUsFormat  ==  null)  {  this.enUsFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	87	10	replace
529	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat  ==  null)  {  this.enUsFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	87	10	replace
530	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat,  new  DateFormat(this.dateType));  [CE]  ';'  expected  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat,  new  DateFormat(this.dateType));  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat,  new  DateFormat(this.dateType));	  this.enUsFormat    =    enUsFormat,    new    DateFormat(localFormat));    	non-compiled	[CE]  ';'  expected	103	None	replace
531	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType.getSimplePattern());  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType.getSimplePattern());  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType.getSimplePattern());	  this.enUsFormat    =    new    DateFormat(dateType.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
532	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(userUsFormat);  [CE]  cannot  find  symbol  userUsFormat  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(userUsFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(userUsFormat);	  this.enUsFormat    =    new    DateFormat(type);    	non-compiled	[CE]  cannot  find  symbol  userUsFormat	57	None	replace
533	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat,  LocalFormat.getInstance());  [CE]  ';'  expected  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat,  LocalFormat.getInstance());  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat,  LocalFormat.getInstance());	  this.enUsFormat    =    enUsFormat,    LocalFormat.getDefault());    	non-compiled	[CE]  ';'  expected	85	None	replace
534	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat,  localFormat.getParent());  [CE]  ';'  expected  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat,  localFormat.getParent());  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat,  localFormat.getParent());	  this.enUsFormat    =    enUsFormat,    LocalFormat.getDefault());    	non-compiled	[CE]  ';'  expected	85	None	replace
535	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:< "[Jan  1  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  enUsFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	add	if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  enUsFormat;  }	  this.enUsFormat    =    localFormat,    enUsFormat;    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:< "[Jan  1  	9	3	replace
536	[BUG]  [BUGGY]  if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  enUsFormat;  }  [FE]  junit.framework.ComparisonFailure:  expected:< "[Jan  1  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  enUsFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  enUsFormat;  }	  this.enUsFormat    =    localFormat,    enUsFormat;    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:< "[Jan  1  	9	3	replace
537	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat.getInstance();  if(enUsFormat!=  null)  {  this.enUsFormat  =  enUsFormat.getInstance();  }  else  {  Class  <?  extends  Date>  localFormat  =  localFormat.getInstance();  this.localFormat  =  localFormat;  }  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]    junit.framework.ComparisonFailure:  expected:<   "[March  18    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat.getInstance();  if(enUsFormat!=  null)  {  this.enUsFormat  =  enUsFormat.getInstance();  }  else  {  Class  <?  extends  Date>  localFormat  =  localFormat.getInstance();  this.localFormat  =  localFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat    =    enUsFormat.getInstance();    if(enUsFormat!=  null)  {  this.enUsFormat  =  enUsFormat.getInstance();  }  else  {  Class  <?  extends  Date>  localFormat  =  localFormat.getInstance();  this.localFormat  =  localFormat;  }	  	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	40	None	add
538	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat.getInstance();  if(enUsFormat!=  null)  {  this.localFormat  =  localFormat.getInstance();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]      junit.framework.ComparisonFailure:  expected:<   "[March  18    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat.getInstance();  if(enUsFormat!=  null)  {  this.localFormat  =  localFormat.getInstance();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat    =    enUsFormat.getInstance();    if(enUsFormat!=  null)  {  this.localFormat  =  localFormat.getInstance();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	40	None	add
539	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat.getInstance();  This.enUsFormat  =  enUsFormat.getInstance();  [CE]  cannot  find  symbol  This  [FE]        junit.framework.ComparisonFailure:  expected:<   "[March  18    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat.getInstance();  This.enUsFormat  =  enUsFormat.getInstance();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat    =    enUsFormat.getInstance();    This.enUsFormat  =  enUsFormat.getInstance();	  	non-compiled	[CE]  cannot  find  symbol  This	40	None	add
540	[BUG]  [BUGGY]  if(dateType  ==  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(dateType  ==  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(dateType  ==  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    Class    <?    extends    Date>    localFormat    =    Locale.getDefault();    if(localFormat    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	62	None	replace
541	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  if(localFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(dateType!=  Date.class)  {  if(localFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(dateType!=  Date.class)  {  if(localFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    Class    <?    extends    Date>    localFormat    =    Locale.getDefault();    if(localFormat    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	62	None	replace
542	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(dateType!=  Date.class)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(dateType!=  Date.class)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    Class    <?    extends    Date>    localFormat    =    Locale.getDefault();    if(localFormat    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	62	None	replace
543	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	add	if(enUsFormat  ==  null)  {  this.enUsFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }	  if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	compilable	  [FE]  IllegalArgumentException  	115	10	replace
544	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat  ==  null)  {  this.enUsFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }	  if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	compilable	  [FE]  IllegalArgumentException  	115	10	replace
545	[BUG]  [BUGGY]  this.localFormat  =  localeFormat.getLocale();  [CE]  cannot  find  symbol  localeFormat  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.localFormat  =  localeFormat.getLocale();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.localFormat  =  localeFormat.getLocale();	  this.localFormat    =    Locale.getDefault();    	non-compiled	[CE]  cannot  find  symbol  localeFormat	63	None	replace
546	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }  [CE]  ';'  expected  [FE]                      junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(dateType!=  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(dateType!=  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }	  this.enUsFormat    =    localFormat;    if(localFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-null.   ");    }    	non-compiled	[CE]  ';'  expected	35	None	replace
547	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  [CE]  ';'  expected  [FE]                        junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }	  this.enUsFormat    =    localFormat;    if(localFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-null.   ");    }    	non-compiled	[CE]  ';'  expected	35	None	replace
548	[BUG]  [BUGGY]  this.dateUsFormat  =  new  DateFormat(dateType);  [CE]  cannot  find  symbol  dateUsFormat  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.dateUsFormat  =  new  DateFormat(dateType);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.dateUsFormat  =  new  DateFormat(dateType);	  this.enUsFormat    =    new    DateFormat(this.dateType);    	non-compiled	[CE]  cannot  find  symbol  dateUsFormat	56	None	replace
549	[BUG]  [BUGGY]  this.dateFormat  =  new  DateFormat(dateType,  localeFormat);  [CE]  cannot  find  symbol  dateFormat  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.dateFormat  =  new  DateFormat(dateType,  localeFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.dateFormat  =  new  DateFormat(dateType,  localeFormat);	  this.dateFormat    =    new    DateFormat(dateType,    enUsFormat);    	non-compiled	[CE]  cannot  find  symbol  dateFormat	110	None	replace
550	[BUG]  [BUGGY]  this.dateFormat  =  new  DateFormat(dateType,  LocalFormat.class);  [CE]  cannot  find  symbol  dateFormat  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.dateFormat  =  new  DateFormat(dateType,  LocalFormat.class);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.dateFormat  =  new  DateFormat(dateType,  LocalFormat.class);	  this.dateFormat    =    new    DateFormat(dateType,    enUsFormat);    	non-compiled	[CE]  cannot  find  symbol  dateFormat	110	None	replace
551	[BUG]  [BUGGY]  this.enUsFormat  =  EnUsFormat.getInstance(dateType,  LocalFormat.class);  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  EnUsFormat.getInstance(dateType,  LocalFormat.class);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  EnUsFormat.getInstance(dateType,  LocalFormat.class);	  this.enUsFormat    =    EnUsFormat.getInstance(dateType);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
552	[BUG]  [BUGGY]  this.enUsFormat  =  EnUsFormat.getInstance(dateType,  localeFormat);  [CE]  cannot  find  symbol  localeFormat  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  EnUsFormat.getInstance(dateType,  localeFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  EnUsFormat.getInstance(dateType,  localeFormat);	  this.enUsFormat    =    EnUsFormat.getInstance(dateType);    	non-compiled	[CE]  cannot  find  symbol  localeFormat	81	None	replace
553	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat,  new  DateFormat(this.dateType);  [CE]  ';'  expected  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat,  new  DateFormat(this.dateType);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat,  new  DateFormat(this.dateType);	  this.enUsFormat    =    enUsFormat,    new    DateFormat(localFormat);    	non-compiled	[CE]  ';'  expected	106	None	replace
554	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat  ==  null)  {  this.enUsFormat  =  new  DateFormat();  }  [CE]  ';'  expected  [FE]          junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(dateType!=  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat  ==  null)  {  this.enUsFormat  =  new  DateFormat();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(dateType!=  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat  ==  null)  {  this.enUsFormat  =  new  DateFormat();  }	  this.enUsFormat    =    localFormat;    if(localFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    this.enUsFormat    =    localFormat;    }    	non-compiled	[CE]  ';'  expected	84	None	replace
555	[BUG]  [BUGGY]  if(dateType  ==  null)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(dateType  ==  null)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(dateType  ==  null)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    Class    <?    extends    Date>    localFormat    =    localFormat.getClass();    if(localFormat!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	61	None	replace
556	[BUG]  [BUGGY]  if(dateType!=  null)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(dateType!=  null)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(dateType!=  null)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    Class    <?    extends    Date>    localFormat    =    localFormat.getClass();    if(localFormat!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	61	None	replace
557	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(dateType!=  Date.class)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(dateType!=  Date.class)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    Class    <?    extends    Date>    localFormat    =    localFormat.getClass();    if(localFormat!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	61	None	replace
558	[BUG]  [BUGGY]  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    Class    <?    extends    Date>    localFormat    =    localFormat.getClass();    if(localFormat!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	61	None	replace
559	[BUG]  [BUGGY]  if(dateType  ==  null)  {  Class  <?  extends  Date>  localFormat  =  localeFormat.getClass();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(dateType  ==  null)  {  Class  <?  extends  Date>  localFormat  =  localeFormat.getClass();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(dateType  ==  null)  {  Class  <?  extends  Date>  localFormat  =  localeFormat.getClass();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    Class    <?    extends    Date>    localFormat    =    localFormat.getClass();    if(localFormat!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	61	None	replace
560	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ".class);  }  [CE]  <identifier>  expected  [FE]                                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ".class);  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ".class);  }	  if(localFormat    ==    null)    {    Class    <?    extends    Date>    localFormat    =    localFormat.getClass();    if(localFormat!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
561	[BUG]  [BUGGY]  this.enUsFormat  =  localFormat  +  2;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  localFormat  +  2;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  localFormat  +  2;	  this.enUsFormat    =    enUsFormat    +    2;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	47	None	replace
562	[BUG]  [BUGGY]  DateFormat  localFormat  =(localFormat  ==  null)?  Locale.getDefault()  :  Locale.getDefault();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  DateFormat  localFormat  =(localFormat  ==  null)?  Locale.getDefault()  :  Locale.getDefault();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	DateFormat  localFormat  =(localFormat  ==  null)?  Locale.getDefault()  :  Locale.getDefault();	  DateFormat    localFormat    =    Locale.getDefault();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	60	None	replace
563	[BUG]  [BUGGY]  DateFormat  localFormat  =  enUsFormat.getLocale();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  DateFormat  localFormat  =  enUsFormat.getLocale();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	DateFormat  localFormat  =  enUsFormat.getLocale();	  DateFormat    localFormat    =    Locale.getDefault();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	60	None	replace
564	[BUG]  [BUGGY]  DateFormat  localFormat  =(localFormat  ==  null?  Locale.getDefault()  :  Locale.getDefault());  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  DateFormat  localFormat  =(localFormat  ==  null?  Locale.getDefault()  :  Locale.getDefault());  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	DateFormat  localFormat  =(localFormat  ==  null?  Locale.getDefault()  :  Locale.getDefault());	  DateFormat    localFormat    =    Locale.getDefault();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	60	None	replace
565	[BUG]  [BUGGY]  DateFormat  localFormat  =(localFormat  ==  null)?  Locale.getDefault()  :  locale;  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  DateFormat  localFormat  =(localFormat  ==  null)?  Locale.getDefault()  :  locale;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	DateFormat  localFormat  =(localFormat  ==  null)?  Locale.getDefault()  :  locale;	  DateFormat    localFormat    =    Locale.getDefault();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	60	None	replace
566	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  enUsFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	add	if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  enUsFormat;  }	  if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    this.enUsFormat    =    enUsFormat;    }    	compilable	  [FE]  JsonParseException  	113	2	replace
567	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  enUsFormat;  }  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  enUsFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  enUsFormat;  }	  if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    this.enUsFormat    =    enUsFormat;    }    	compilable	  [FE]  JsonParseException  	113	2	replace
568	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localeFormat;  }  else  {  this.enUsFormat  =  enUsFormat;  }  [CE]  cannot  find  symbol  localeFormat  [FE]      JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localeFormat;  }  else  {  this.enUsFormat  =  enUsFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.enUsFormat  =  localeFormat;  }  else  {  this.enUsFormat  =  enUsFormat;  }	  if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    this.enUsFormat    =    enUsFormat;    }    	non-compiled	[CE]  cannot  find  symbol  localeFormat	113	None	replace
569	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  +   ",  localFormat;  [CE]  unclosed  string  literal  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat  +   ",  localFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  +   ",  localFormat;	  this.enUsFormat    =    enUsFormat    +    1,    localFormat;    	non-compiled	[CE]  unclosed  string  literal	108	None	replace
570	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  +  3,  localFormat;  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat  +  3,  localFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  +  3,  localFormat;	  this.enUsFormat    =    enUsFormat    +    1,    localFormat;    	non-compiled	[CE]  ';'  expected	108	None	replace
571	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  Locale.getDefault())+  1;  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  Locale.getDefault())+  1;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType,  Locale.getDefault())+  1;	  this.enUsFormat    =    new    DateFormat(dateType,    Locale.getDefault());    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	55	None	replace
572	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  Locale.getDefault(),  datePattern);  [CE]  cannot  find  symbol  datePattern  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  Locale.getDefault(),  datePattern);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType,  Locale.getDefault(),  datePattern);	  this.enUsFormat    =    new    DateFormat(dateType,    Locale.getDefault());    	non-compiled	[CE]  cannot  find  symbol  datePattern	55	None	replace
573	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " "));  }	  	non-compiled	[CE]  	86	None	add
574	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType  +  datePattern);  [CE]  cannot  find  symbol  datePattern  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType  +  datePattern);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType  +  datePattern);	  this.enUsFormat    =    new    DateFormat(dateType    +    SIMPLE_NAME);    	non-compiled	[CE]  cannot  find  symbol  datePattern	79	None	replace
575	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(datePattern  +  SIMPLE_NAME);  [CE]  cannot  find  symbol  datePattern  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(datePattern  +  SIMPLE_NAME);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(datePattern  +  SIMPLE_NAME);	  this.enUsFormat    =    new    DateFormat(dateType    +    SIMPLE_NAME);    	non-compiled	[CE]  cannot  find  symbol  datePattern	79	None	replace
576	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  + ",,   "  +  localFormat;  [CE]  incompatible  types  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat  + ",,   "  +  localFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  + ",,   "  +  localFormat;	  this.enUsFormat    =    localFormat    +   ",       "    +    enUsFormat;    	non-compiled	[CE]  incompatible  types	51	None	replace
577	[BUG]  [BUGGY]  this.enUsFormat  =  localeFormat  + ",  localFormat,   "  +  enUsFormat;  [CE]  cannot  find  symbol  localeFormat  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  localeFormat  + ",  localFormat,   "  +  enUsFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  localeFormat  + ",  localFormat,   "  +  enUsFormat;	  this.enUsFormat    =    enUsFormat    +   ",    localFormat,       "    +    localFormat;    	non-compiled	[CE]  cannot  find  symbol  localeFormat	52	None	replace
578	[BUG]  [BUGGY]  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  else  {  return  new  DateFormat(dateType,  enUsFormat,  localFormat);  }  [CE]  cannot  return  a  value  from  method  whose  result  type  is  void  [FE]    junit.framework.ComparisonFailure:  expected:<   "[March  18    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  else  {  return  new  DateFormat(dateType,  enUsFormat,  localFormat);  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  else  {  return  new  DateFormat(dateType,  enUsFormat,  localFormat);  }	  this.enUsFormat    =    localFormat.getInstance();    	non-compiled	[CE]  cannot  return  a  value  from  method  whose  result  type  is  void	43	None	replace
579	[BUG]  [BUGGY]  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  else  {  return  new  DateFormat(dateType,  enUsFormat);  }  [CE]  cannot  return  a  value  from  method  whose  result  type  is  void  [FE]      junit.framework.ComparisonFailure:  expected:<   "[March  18    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  else  {  return  new  DateFormat(dateType,  enUsFormat);  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  else  {  return  new  DateFormat(dateType,  enUsFormat);  }	  this.enUsFormat    =    localFormat.getInstance();    	non-compiled	[CE]  cannot  return  a  value  from  method  whose  result  type  is  void	43	None	replace
580	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:< "[March  18  [FE]        junit.framework.ComparisonFailure:  expected:<   "[March  18    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	add	if(localFormat!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }	  this.enUsFormat    =    localFormat.getInstance();    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:< "[March  18  	43	7	replace
581	[BUG]  [BUGGY]  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [FE]  junit.framework.ComparisonFailure:  expected:< "[March  18  [FE]        junit.framework.ComparisonFailure:  expected:<   "[March  18    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }	  this.enUsFormat    =    localFormat.getInstance();    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:< "[March  18  	43	7	replace
582	[BUG]  [BUGGY]  this.dateFormat  =  DateFormat.getInstance();  [CE]  cannot  find  symbol  dateFormat  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.dateFormat  =  DateFormat.getInstance();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.dateFormat  =  DateFormat.getInstance();	  this.dateFormat    =    enUsFormat;    	non-compiled	[CE]  cannot  find  symbol  dateFormat	96	None	replace
583	[BUG]  [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(enUsFormat,  LocalFormat.class);  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(enUsFormat,  LocalFormat.class);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DefaultDateFormat(enUsFormat,  LocalFormat.class);	  this.enUsFormat    =    new    DefaultDateFormat(enUsFormat);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
584	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localeFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  localeFormat  [FE]    junit.framework.ComparisonFailure:  expected:<   "[Jan  1    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localeFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat  ==  null)  {  this.enUsFormat  =  localeFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(enUsFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  localeFormat	90	None	replace
585	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType.getClass());  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType.getClass());  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType.getClass());	  this.enUsFormat    =    new    DateFormat(dateType.getClass().getName());    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	38	None	replace
586	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat,  enUsFormat);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat,  enUsFormat);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat,  enUsFormat);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  this.enUsFormat    =    localFormat,    enUsFormat);    	non-compiled	[CE]  	5	None	replace
587	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat,  enUsFormat);  }  [CE]  ';'  expected  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat,  enUsFormat);  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat,  enUsFormat);  }	  this.enUsFormat    =    localFormat,    enUsFormat);    	non-compiled	[CE]  ';'  expected	5	None	replace
588	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat,  enUsFormat);  }  else  {  throw  new  JsonParseException( " ");  }  [CE]  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat,  enUsFormat);  }  else  {  throw  new  JsonParseException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat,  enUsFormat);  }  else  {  throw  new  JsonParseException( " ");  }	  this.enUsFormat    =    localFormat,    enUsFormat);    	non-compiled	[CE]  	5	None	replace
589	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat,  enUsFormat);  }  else  {  System.arraycopy(dateType,  0,  this.enUsFormat,  dateType);  }  [CE]  ';'  expected  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat,  enUsFormat);  }  else  {  System.arraycopy(dateType,  0,  this.enUsFormat,  dateType);  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat,  enUsFormat);  }  else  {  System.arraycopy(dateType,  0,  this.enUsFormat,  dateType);  }	  this.enUsFormat    =    localFormat,    enUsFormat);    	non-compiled	[CE]  ';'  expected	5	None	replace
590	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [CE]  ';'  expected  [FE]                  junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(dateType!=  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(dateType!=  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }	  this.enUsFormat    =    localFormat;    if(localFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	non-compiled	[CE]  ';'  expected	33	None	replace
591	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [CE]  ';'  expected  [FE]                    junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(dateType!=  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(dateType!=  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }	  this.enUsFormat    =    localFormat;    if(localFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	non-compiled	[CE]  ';'  expected	33	None	replace
592	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  LocalFormat.class);  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  LocalFormat.class);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType,  LocalFormat.class);	  this.enUsFormat    =    new    DateFormat(dateType,    enUsFormat,    LocalFormat.class);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
593	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  localeFormat,  LocalFormat.class);  [CE]  cannot  find  symbol  localeFormat  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  localeFormat,  LocalFormat.class);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType,  localeFormat,  LocalFormat.class);	  this.enUsFormat    =    new    DateFormat(dateType,    enUsFormat,    LocalFormat.class);    	non-compiled	[CE]  cannot  find  symbol  localeFormat	26	None	replace
594	[BUG]  [BUGGY]  this.enUsFormat  =  ENUsFormat.getDefault();  [CE]  cannot  find  symbol  ENUsFormat  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  ENUsFormat.getDefault();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  ENUsFormat.getDefault();	  this.enUsFormat    =    EnUsFormat.getDefault();    	non-compiled	[CE]  cannot  find  symbol  ENUsFormat	104	None	replace
595	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  +  1l;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat  +  1l;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  +  1l;	  this.enUsFormat    =    enUsFormat    +    1L;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	49	None	replace
596	[BUG]  [BUGGY]  this.enUsFormat  =  inUsFormat  +  1L;  [CE]  cannot  find  symbol  inUsFormat  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  inUsFormat  +  1L;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  inUsFormat  +  1L;	  this.enUsFormat    =    enUsFormat    +    1L;    	non-compiled	[CE]  cannot  find  symbol  inUsFormat	49	None	replace
597	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  +  datePattern;  [CE]  cannot  find  symbol  datePattern  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat  +  datePattern;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  +  datePattern;	  this.enUsFormat    =    enUsFormat    +    localeFormat;    	non-compiled	[CE]  cannot  find  symbol  datePattern	70	None	replace
598	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  +  format;  [CE]  cannot  find  symbol  format  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat  +  format;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  +  format;	  this.enUsFormat    =    enUsFormat    +    localeFormat;    	non-compiled	[CE]  cannot  find  symbol  format	70	None	replace
599	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  enUsFormat;  }  else  {  throw  new  JsonParseException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	add	if(enUsFormat  ==  null)  {  this.enUsFormat  =  enUsFormat;  }  else  {  throw  new  JsonParseException( " ");  }	  if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    JsonParseException(   "   ");    }    	compilable	  [FE]  JsonParseException  	92	10	replace
600	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  enUsFormat;  }  else  {  throw  new  JsonParseException( " ");  }  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  enUsFormat;  }  else  {  throw  new  JsonParseException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat  ==  null)  {  this.enUsFormat  =  enUsFormat;  }  else  {  throw  new  JsonParseException( " ");  }	  if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    JsonParseException(   "   ");    }    	compilable	  [FE]  JsonParseException  	92	10	replace
601	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localeFormat;  }  else  {  throw  new  JsonParseException( " ");  }  [CE]  cannot  find  symbol  localeFormat  [FE]      JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localeFormat;  }  else  {  throw  new  JsonParseException( " ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat  ==  null)  {  this.enUsFormat  =  localeFormat;  }  else  {  throw  new  JsonParseException( " ");  }	  if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    JsonParseException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  localeFormat	92	None	replace
602	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(enUsFormat,  localeFormat);  [CE]  cannot  find  symbol  localeFormat  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(enUsFormat,  localeFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(enUsFormat,  localeFormat);	  this.enUsFormat    =    new    DateFormat(enUsFormat);    	non-compiled	[CE]  cannot  find  symbol  localeFormat	109	None	replace
603	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(enUsFormat,  enPattern);  [CE]  cannot  find  symbol  enPattern  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(enUsFormat,  enPattern);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(enUsFormat,  enPattern);	  this.enUsFormat    =    new    DateFormat(enUsFormat);    	non-compiled	[CE]  cannot  find  symbol  enPattern	109	None	replace
604	[BUG]  [BUGGY]  if(dateType  ==  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  this.enUsFormat  =  new  DateFormat();  }  [CE]  ';'  expected  [FE]        junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(dateType  ==  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  this.enUsFormat  =  new  DateFormat();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(dateType  ==  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  this.enUsFormat  =  new  DateFormat();  }	  this.enUsFormat    =    localFormat;    if(localFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    else    {    this.enUsFormat    =    localFormat;    }    	non-compiled	[CE]  ';'  expected	83	None	replace
605	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat,  localFormat.getInstance();  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat,  localFormat.getInstance();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat,  localFormat.getInstance();	  this.enUsFormat    =    enType.getInstance();    	non-compiled	[CE]  ';'  expected	46	None	replace
606	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [CE]  ';'  expected  [FE]                    junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(dateType!=  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(dateType!=  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }	  this.enUsFormat    =    localFormat;    if(localFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    be    null.   ");    }    	non-compiled	[CE]  ';'  expected	34	None	replace
607	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  new  DateFormat();  }  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  new  DateFormat();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  new  DateFormat();  }	  this.enUsFormat    =    localFormat,    enUsFormat;    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	9	None	replace
608	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType  +  SIMPLE_NAME,  localeFormat);  [CE]  cannot  find  symbol  localeFormat  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType  +  SIMPLE_NAME,  localeFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType  +  SIMPLE_NAME,  localeFormat);	  this.enUsFormat    =    new    DateFormat(dateType    +    SIMPLE_NAME);    	non-compiled	[CE]  cannot  find  symbol  localeFormat	79	None	replace
609	[BUG]  [BUGGY]  if(localFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }  [CE]  ';'  expected  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }	  if(localFormat    ==    null)    {    Class    <?    extends    Date>    localFormat    =    Locale.getDefault();    if(localFormat    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	62	None	replace
610	[BUG]  [BUGGY]  if(localFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }  [CE]  ';'  expected  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }	  if(localFormat    ==    null)    {    Class    <?    extends    Date>    localFormat    =    Locale.getDefault();    if(localFormat    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	62	None	replace
611	[BUG]  [BUGGY]  this.eUsFormat  =  enUsFormat;  [CE]  cannot  find  symbol  eUsFormat  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.eUsFormat  =  enUsFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.eUsFormat  =  enUsFormat;	  this.enUsFormat    =    eUsFormat;    	non-compiled	[CE]  cannot  find  symbol  eUsFormat	73	None	replace
612	[BUG]  [BUGGY]  if(localFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }  [CE]  ';'  expected  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }	  if(localFormat    ==    null)    {    Class    <?    extends    Date>    localFormat    =    localFormat.getClass();    if(localFormat!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	61	None	replace
613	[BUG]  [BUGGY]  if(localFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  ')'  expected  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  if(localFormat    ==    null)    {    Class    <?    extends    Date>    localFormat    =    localFormat.getClass();    if(localFormat!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	61	None	replace
614	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  ')'  expected  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  if(localFormat    ==    null)    {    Class    <?    extends    Date>    localFormat    =    localFormat.getClass();    if(localFormat!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	61	None	replace
615	[BUG]  [BUGGY]  if(localFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }  [CE]  ';'  expected  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }	  if(localFormat    ==    null)    {    Class    <?    extends    Date>    localFormat    =    localFormat.getClass();    if(localFormat!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	61	None	replace
616	[BUG]  [BUGGY]  if(dateType.equals(Date.class))  {  this.enUsFormat  =  localFormat;  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  [CE]  ';'  expected  [FE]          junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(dateType.equals(Date.class))  {  this.enUsFormat  =  localFormat;  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(dateType.equals(Date.class))  {  this.enUsFormat  =  localFormat;  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }	  this.enUsFormat    =    localFormat;    if(localFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    this.enUsFormat    =    localFormat;    }    	non-compiled	[CE]  ';'  expected	84	None	replace
617	[BUG]  [BUGGY]  if(dateType  ==  Date.class)  {  this.enUsFormat  =  localFormat;  }  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]            junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(dateType  ==  Date.class)  {  this.enUsFormat  =  localFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(dateType  ==  Date.class)  {  this.enUsFormat  =  localFormat;  }	  this.enUsFormat    =    localFormat;    if(localFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    this.enUsFormat    =    localFormat;    }    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	84	None	replace
618	[BUG]  [BUGGY]  if(dateType  ==  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat  ==  null)  {  this.enUsFormat  =  localeFormat;  }  [CE]  ';'  expected  [FE]              junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(dateType  ==  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat  ==  null)  {  this.enUsFormat  =  localeFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(dateType  ==  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat  ==  null)  {  this.enUsFormat  =  localeFormat;  }	  this.enUsFormat    =    localFormat;    if(localFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    this.enUsFormat    =    localFormat;    }    	non-compiled	[CE]  ';'  expected	84	None	replace
619	[BUG]  [BUGGY]  if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]    junit.framework.ComparisonFailure:  expected:<   "[Jan  1    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	89	None	add
620	[BUG]  [BUGGY]  if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "... ");  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]      junit.framework.ComparisonFailure:  expected:<   "[Jan  1    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "... ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "... ");  }	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	89	None	add
621	[BUG]  [BUGGY]  DateFormat  localFormat  =  enUsFormat.get(timeType);  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  DateFormat  localFormat  =  enUsFormat.get(timeType);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	DateFormat  localFormat  =  enUsFormat.get(timeType);	  DateFormat    localFormat    =    enUsFormat.get(localFormat);    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	98	None	replace
622	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  +  SIMPLE_NAME;  [CE]  incompatible  types  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat  +  SIMPLE_NAME;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  +  SIMPLE_NAME;	  this.enUsFormat    =    enUsFormat    +    localeFormat;    	non-compiled	[CE]  incompatible  types	70	None	replace
623	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  +  DateFormat.class;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat  +  DateFormat.class;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  +  DateFormat.class;	  this.enUsFormat    =    enUsFormat    +    localeFormat;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	70	None	replace
624	[BUG]  [BUGGY]  if(localFormat!=  null)  {  this.enUsFormat  =  LocalFormat.getDefault();  }  [CE]  cannot  find  symbol  LocalFormat  [FE]          junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat!=  null)  {  this.enUsFormat  =  LocalFormat.getDefault();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat!=  null)  {  this.enUsFormat  =  LocalFormat.getDefault();  }	  this.enUsFormat    =    localFormat;    if(localFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	29	None	replace
625	[BUG]  [BUGGY]  if(localFormat!=  null)  {  this.enUsFormat  =  LocalFormat.getInstance();  }  [CE]  cannot  find  symbol  LocalFormat  [FE]            junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat!=  null)  {  this.enUsFormat  =  LocalFormat.getInstance();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat!=  null)  {  this.enUsFormat  =  LocalFormat.getInstance();  }	  this.enUsFormat    =    localFormat;    if(localFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	29	None	replace
626	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  +  DateFormat.localFormat;  [CE]  cannot  find  symbol  localFormat  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat  +  DateFormat.localFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  +  DateFormat.localFormat;	  this.enUsFormat    =    enUsFormat    +    localFormat;    	non-compiled	[CE]  cannot  find  symbol  localFormat	14	None	replace
627	[BUG]  [BUGGY]  this.enUsFormat  =  ENUsFormat;  [CE]  cannot  find  symbol  ENUsFormat  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  ENUsFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  ENUsFormat;	  this.enUsFormat    =    EnUsFormat;    	non-compiled	[CE]  cannot  find  symbol  ENUsFormat	69	None	replace
628	[BUG]  [BUGGY]  enUsFormat  =  enUsFormat.cloneTree();  [CE]  cannot  find  symbol  [FE]        junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  enUsFormat  =  enUsFormat.cloneTree();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	enUsFormat  =  enUsFormat.cloneTree();	  enUsFormat    =    enUsFormat;    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
629	[BUG]  [BUGGY]  enUsFormat  =  enUsFormat.clone();  [CE]  incompatible  types  [FE]          junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  enUsFormat  =  enUsFormat.clone();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	enUsFormat  =  enUsFormat.clone();	  enUsFormat    =    enUsFormat;    	non-compiled	[CE]  incompatible  types	21	None	replace
630	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  this.enUsFormat  =  localFormat;  }  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]        junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(dateType!=  Date.class)  {  this.enUsFormat  =  localFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(dateType!=  Date.class)  {  this.enUsFormat  =  localFormat;  }	  this.enUsFormat    =    localFormat;    if(localFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    else    {    this.enUsFormat    =    localFormat;    }    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	83	None	replace
631	[BUG]  [BUGGY]  if(localFormat!=  null)  {  this.localFormat  =  LocalFormat.getDefault();  }  [CE]  cannot  find  symbol  LocalFormat  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat!=  null)  {  this.localFormat  =  LocalFormat.getDefault();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat!=  null)  {  this.localFormat  =  LocalFormat.getDefault();  }	  if(localFormat    ==    null)    {    this.localFormat    =    LocalFormat.getDefault();    }    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	97	None	replace
632	[BUG]  [BUGGY]  this.endUsFormat  =  endUsFormat,  localFormat;  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.endUsFormat  =  endUsFormat,  localFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.endUsFormat  =  endUsFormat,  localFormat;	  this.enUsFormat    =    dateType,    localFormat;    	non-compiled	[CE]  ';'  expected	11	None	replace
633	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  localFormat  =  Locale.getDefault();  }  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  localFormat  =  Locale.getDefault();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  localFormat  =  Locale.getDefault();  }	  if(localFormat    ==    null)    {    Class    <?    extends    Date>    localFormat    =    Locale.getDefault();    if(localFormat!=    null)    {    localFormat    =    Locale.getDefault();    }    	non-compiled	[CE]  ';'  expected	59	None	replace
634	[BUG]  [BUGGY]  this.eUsFormat  =  enUsFormat.getInstance();  [CE]  cannot  find  symbol  eUsFormat  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.eUsFormat  =  enUsFormat.getInstance();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.eUsFormat  =  enUsFormat.getInstance();	  this.enUsFormat    =    ENUsFormat.getInstance();    	non-compiled	[CE]  cannot  find  symbol  eUsFormat	80	None	replace
635	[BUG]  [BUGGY]  this.dateType  =  new  DateFormat(enUsFormat);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.dateType  =  new  DateFormat(enUsFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.dateType  =  new  DateFormat(enUsFormat);	  this.dateType    =    enUsFormat;    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	36	None	replace
636	[BUG]  [BUGGY]  this.dateType  =  DateFormat.class;  [CE]  incompatible  types  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.dateType  =  DateFormat.class;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.dateType  =  DateFormat.class;	  this.dateType    =    enUsFormat;    	non-compiled	[CE]  incompatible  types	36	None	replace
637	[BUG]  [BUGGY]  this.eUsFormat  =  enUsFormat,  localeFormat;  [CE]  ';'  expected  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.eUsFormat  =  enUsFormat,  localeFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.eUsFormat  =  enUsFormat,  localeFormat;	  this.enUsFormat    =    dateType,    localeFormat;    	non-compiled	[CE]  ';'  expected	27	None	replace
638	[BUG]  [BUGGY]  this.endUsFormat  =  endUsFormat,  localeFormat;  [CE]  ';'  expected  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.endUsFormat  =  endUsFormat,  localeFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.endUsFormat  =  endUsFormat,  localeFormat;	  this.enUsFormat    =    dateType,    localeFormat;    	non-compiled	[CE]  ';'  expected	27	None	replace
639	[BUG]  [BUGGY]  this.localFormat  =  new  LocalFormat(enUsFormat,  enUsFormat);  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.localFormat  =  new  LocalFormat(enUsFormat,  enUsFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.localFormat  =  new  LocalFormat(enUsFormat,  enUsFormat);	  this.localFormat    =    localFormat;    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
640	[BUG]  [BUGGY]  this.localFormat  =  new  LocalFormat(enUsFormat,  localFormat);  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.localFormat  =  new  LocalFormat(enUsFormat,  localFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.localFormat  =  new  LocalFormat(enUsFormat,  localFormat);	  this.localFormat    =    localFormat;    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
641	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat;  }  [CE]  illegal  start  of  type  [FE]                  junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat;  }	  if(enUsFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
642	[BUG]  [BUGGY]  if(localFormat!=  null)  {  this.enUsFormat  =  enUsFormat;  }  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]    junit.framework.ComparisonFailure:  expected:<   "[Jan  1    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat!=  null)  {  this.enUsFormat  =  enUsFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat!=  null)  {  this.enUsFormat  =  enUsFormat;  }	  if(enUsFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	90	None	replace
643	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat  ==  null)  {  this.enUsFormat  =  localeFormat;  }  [CE]  ';'  expected  [FE]                junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(dateType!=  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat  ==  null)  {  this.enUsFormat  =  localeFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(dateType!=  Date.class)  {  this.enUsFormat  =  localFormat;  if(localFormat  ==  null)  {  this.enUsFormat  =  localeFormat;  }	  this.enUsFormat    =    localFormat;    if(localFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	32	None	replace
644	[BUG]  [BUGGY]  this.enUsFormat  =  EnUsFormat.class,  enUsFormat;  [CE]  ';'  expected  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  EnUsFormat.class,  enUsFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  EnUsFormat.class,  enUsFormat;	  this.enUsFormat    =    EnUsFormat.class;    	non-compiled	[CE]  ';'  expected	71	None	replace
645	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType.getClass(),  localFormat);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType.getClass(),  localFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType.getClass(),  localFormat);	  this.enUsFormat    =    new    DateFormat(dateType.getClass().getName());    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	38	None	replace
646	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat,  localFormat  +   "; ";  [CE]  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat,  localFormat  +   "; ";  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat,  localFormat  +   "; ";	  this.enUsFormat    =    enUsFormat,    localFormat    +    1;    	non-compiled	[CE]  	48	None	replace
647	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localeFormat;  }  else  {  this.enUsFormat  =  enUsFormat;  }  [CE]  cannot  find  symbol  localeFormat  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localeFormat;  }  else  {  this.enUsFormat  =  enUsFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat  ==  null)  {  this.enUsFormat  =  localeFormat;  }  else  {  this.enUsFormat  =  enUsFormat;  }	  this.enUsFormat    =    localeFormat,    enUsFormat;    	non-compiled	[CE]  cannot  find  symbol  localeFormat	10	None	replace
648	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localeFormat;  }  [CE]  cannot  find  symbol  localeFormat  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localeFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat  ==  null)  {  this.enUsFormat  =  localeFormat;  }	  this.enUsFormat    =    localeFormat,    enUsFormat;    	non-compiled	[CE]  cannot  find  symbol  localeFormat	10	None	replace
649	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localeFormat;  }  else  {  this.enUsFormat  =  new  DateFormat(dateType,  enUsFormat);  }  [CE]  cannot  find  symbol  localeFormat  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localeFormat;  }  else  {  this.enUsFormat  =  new  DateFormat(dateType,  enUsFormat);  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat  ==  null)  {  this.enUsFormat  =  localeFormat;  }  else  {  this.enUsFormat  =  new  DateFormat(dateType,  enUsFormat);  }	  this.enUsFormat    =    localeFormat,    enUsFormat;    	non-compiled	[CE]  cannot  find  symbol  localeFormat	10	None	replace
650	[BUG]  [BUGGY]  this.localFormat  =  inUsFormat;  [CE]  cannot  find  symbol  inUsFormat  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.localFormat  =  inUsFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.localFormat  =  inUsFormat;	  if(localFormat    ==    null)    {    this.localFormat    =    localFormat;    }    	non-compiled	[CE]  cannot  find  symbol  inUsFormat	74	None	replace
651	[BUG]  [BUGGY]  if(dateType.isPrimitive())  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  [CE]  ';'  expected  [FE]                      junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(dateType.isPrimitive())  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(dateType.isPrimitive())  {  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }	  this.enUsFormat    =    localFormat;    if(localFormat!=    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-null.   ");    }    	non-compiled	[CE]  ';'  expected	35	None	replace
652	[BUG]  [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(this.enUsFormat);  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(this.enUsFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DefaultDateFormat(this.enUsFormat);	  this.enUsFormat    =    new    DefaultDateFormat(enUsFormat);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
653	[BUG]  [BUGGY]  this.dateType  =  new  DateFormat(this.enUsFormat);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.dateType  =  new  DateFormat(this.enUsFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.dateType  =  new  DateFormat(this.enUsFormat);	  this.enUsFormat    =    new    DateFormat(this.dateType);    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	56	None	replace
654	[BUG]  [BUGGY]  DateFormat  localFormat  =  enUsFormat.getLocalFile();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  DateFormat  localFormat  =  enUsFormat.getLocalFile();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	DateFormat  localFormat  =  enUsFormat.getLocalFile();	  DateFormat    localFormat    =    Locale.getDefault();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	60	None	replace
655	[BUG]  [BUGGY]  DateFormat  localFormat  =  DateFormat.getLocalFile();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  DateFormat  localFormat  =  DateFormat.getLocalFile();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	DateFormat  localFormat  =  DateFormat.getLocalFile();	  DateFormat    localFormat    =    Locale.getDefault();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	60	None	replace
656	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat.getInstance();  if(enUsFormat!=  null)  {  this.enUsFormat  =  enUsFormat.getInstance();  }  else  {  this.enUsFormat  =  enUsFormat.getInstance();  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]    junit.framework.ComparisonFailure:  expected:<   "[March  18    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat.getInstance();  if(enUsFormat!=  null)  {  this.enUsFormat  =  enUsFormat.getInstance();  }  else  {  this.enUsFormat  =  enUsFormat.getInstance();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat    =    enUsFormat.getInstance();    if(enUsFormat!=  null)  {  this.enUsFormat  =  enUsFormat.getInstance();  }  else  {  this.enUsFormat  =  enUsFormat.getInstance();  }	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	40	None	add
657	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat.getInstance();  if(enUsFormat!=  null)  {  this.enUsFormat  =  enUsFormat.getInstance();  }  else  {  this.enUsFormat  =  localFormat.getInstance();  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]      junit.framework.ComparisonFailure:  expected:<   "[March  18    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat.getInstance();  if(enUsFormat!=  null)  {  this.enUsFormat  =  enUsFormat.getInstance();  }  else  {  this.enUsFormat  =  localFormat.getInstance();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat    =    enUsFormat.getInstance();    if(enUsFormat!=  null)  {  this.enUsFormat  =  enUsFormat.getInstance();  }  else  {  this.enUsFormat  =  localFormat.getInstance();  }	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	40	None	add
658	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat.getInstance();  if(enUsFormat!=  null)  {  this.enUsFormat  =  enUsFormat.getInstance();  }  else  {  this.localFormat  =  localeFormat;  }  [CE]  cannot  find  symbol  localeFormat  [FE]        junit.framework.ComparisonFailure:  expected:<   "[March  18    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat.getInstance();  if(enUsFormat!=  null)  {  this.enUsFormat  =  enUsFormat.getInstance();  }  else  {  this.localFormat  =  localeFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat    =    enUsFormat.getInstance();    if(enUsFormat!=  null)  {  this.enUsFormat  =  enUsFormat.getInstance();  }  else  {  this.localFormat  =  localeFormat;  }	  	non-compiled	[CE]  cannot  find  symbol  localeFormat	40	None	add
659	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat,  enUsFormat);  }  else  {  this.enUsFormat  =  enUsFormat;  }  [CE]  ';'  expected  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat,  enUsFormat);  }  else  {  this.enUsFormat  =  enUsFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat,  enUsFormat);  }  else  {  this.enUsFormat  =  enUsFormat;  }	  this.enUsFormat    =    localFormat,    enUsFormat);    	non-compiled	[CE]  ';'  expected	5	None	replace
660	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  Locale.getDefault();  }  else  {  this.localFormat  =  localeFormat;  }  [CE]  incompatible  types  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  Locale.getDefault();  }  else  {  this.localFormat  =  localeFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  Locale.getDefault();  }  else  {  this.localFormat  =  localeFormat;  }	  if(localFormat    ==    null)    {    this.localFormat    =    Locale.getDefault();    }    else    {    this.localFormat    =    Locale.getDefault();    }    	non-compiled	[CE]  incompatible  types	76	None	replace
661	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  Locale.getDefault(),  enUsFormat);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  Locale.getDefault(),  enUsFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType,  Locale.getDefault(),  enUsFormat);	  this.enUsFormat    =    new    DateFormat(dateType,    Locale.getDefault());    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	55	None	replace
662	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat.get();  [CE]  no  suitable  method  found  for  get()  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat.get();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat.get();	  this.enUsFormat    =    EnUsFormat.getDefault();    	non-compiled	[CE]  no  suitable  method  found  for  get()	104	None	replace
663	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType);  enUsFormat  =  enUsFormat;  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]        junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType);  enUsFormat  =  enUsFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType);  enUsFormat  =  enUsFormat;	  if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    DateFormat    enUsFormat    =    new    DateFormat(dateType);    enUsFormat    =    enUsFormat;    }    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	111	None	replace
664	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat,  new  LocalFormat();  [CE]  ';'  expected  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat,  new  LocalFormat();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat,  new  LocalFormat();	  this.enUsFormat    =    enUsFormat,    LocalFormat;    	non-compiled	[CE]  ';'  expected	107	None	replace
665	[BUG]  [BUGGY]  this.dateFormat  =  enUsFormat,  localFormat;  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.dateFormat  =  enUsFormat,  localFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.dateFormat  =  enUsFormat,  localFormat;	  this.dateFormat    =    enUsFormat;    	non-compiled	[CE]  ';'  expected	96	None	replace
666	[BUG]  [BUGGY]  this.dateFormat  =  enUsFormat  +  1;  [CE]  cannot  find  symbol  dateFormat  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.dateFormat  =  enUsFormat  +  1;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.dateFormat  =  enUsFormat  +  1;	  this.dateFormat    =    enUsFormat;    	non-compiled	[CE]  cannot  find  symbol  dateFormat	96	None	replace
667	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat.cloneTree();  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat.cloneTree();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat.cloneTree();	  this.enUsFormat    =    enUsFormat.getInstanceType();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
668	[BUG]  [BUGGY]  this.dateFormat  =  new  DefaultDateFormat(dateType,  enUsFormat,  localeFormat);  [CE]  cannot  find  symbol  dateFormat  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.dateFormat  =  new  DefaultDateFormat(dateType,  enUsFormat,  localeFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.dateFormat  =  new  DefaultDateFormat(dateType,  enUsFormat,  localeFormat);	  this.enUsFormat    =    new    DefaultDateFormat(dateType,    localeFormat);    	non-compiled	[CE]  cannot  find  symbol  dateFormat	67	None	replace
669	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat,  localFormat,  null);  [CE]  ';'  expected  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat,  localFormat,  null);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat,  localFormat,  null);	  this.enUsFormat    =    enUsFormat,    localFormat,    SIMPLE_NAME);    	non-compiled	[CE]  ';'  expected	8	None	replace
670	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat,  localFormat,  dateType);  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat,  localFormat,  dateType);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat,  localFormat,  dateType);	  this.enUsFormat    =    enUsFormat,    localFormat,    SIMPLE_NAME);    	non-compiled	[CE]  ';'  expected	8	None	replace
671	[BUG]  [BUGGY]  if(localFormat!=  null)  {  this.localFormat  =  LocalFormat.getInstance();  }  [CE]  cannot  find  symbol  LocalFormat  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat!=  null)  {  this.localFormat  =  LocalFormat.getInstance();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat!=  null)  {  this.localFormat  =  LocalFormat.getInstance();  }	  if(localFormat    ==    null)    {    this.localFormat    =    LocalFormat.getInstance();    }    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	99	None	replace
672	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(enUsFormat,  LocalFormat.class);  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(enUsFormat,  LocalFormat.class);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(enUsFormat,  LocalFormat.class);	  this.enUsFormat    =    new    DateFormat(enUsFormat);    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
673	[BUG]  [BUGGY]  if(localFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  ')'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  if(localFormat    ==    null)    {    Class    <?    extends    Date>    localFormat    =    Locale.getDefault();    if(localFormat!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	58	None	replace
674	[BUG]  [BUGGY]  if(localFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }	  if(localFormat    ==    null)    {    Class    <?    extends    Date>    localFormat    =    Locale.getDefault();    if(localFormat!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	58	None	replace
675	[BUG]  [BUGGY]  if(localFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-none. ");  }  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-none. ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-none. ");  }	  if(localFormat    ==    null)    {    Class    <?    extends    Date>    localFormat    =    Locale.getDefault();    if(localFormat!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	58	None	replace
676	[BUG]  [BUGGY]  if(localFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date  [CE]  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date	  if(localFormat    ==    null)    {    Class    <?    extends    Date>    localFormat    =    Locale.getDefault();    if(localFormat!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	58	None	replace
677	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  LocalFormat.getInstance();  }  [CE]  cannot  find  symbol  LocalFormat  [FE]            junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  LocalFormat.getInstance();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.enUsFormat  =  LocalFormat.getInstance();  }	  this.enUsFormat    =    localFormat;    if(localFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	30	None	replace
678	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  LocalFormat.getDefault();  }  else  {  this.localFormat  =  localFormat;  }  [CE]  cannot  find  symbol  LocalFormat  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  LocalFormat.getDefault();  }  else  {  this.localFormat  =  localFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  LocalFormat.getDefault();  }  else  {  this.localFormat  =  localFormat;  }	  if(localFormat    ==    null)    {    this.localFormat    =    LocalFormat.getDefault();    }    else    {    this.localFormat    =    LocalFormat.getInstance();    }    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	100	None	replace
679	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  ||  enPattern;  [CE]  cannot  find  symbol  enPattern  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat  ||  enPattern;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  ||  enPattern;	  this.enUsFormat    =    enUsFormat    ||    localeFormat;    	non-compiled	[CE]  cannot  find  symbol  enPattern	3	None	replace
680	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  ||  enLocale;  [CE]  cannot  find  symbol  enLocale  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat  ||  enLocale;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  ||  enLocale;	  this.enUsFormat    =    enUsFormat    ||    localeFormat;    	non-compiled	[CE]  cannot  find  symbol  enLocale	3	None	replace
681	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  ||  enType;  [CE]  cannot  find  symbol  enType  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat  ||  enType;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  ||  enType;	  this.enUsFormat    =    enUsFormat    ||    localeFormat;    	non-compiled	[CE]  cannot  find  symbol  enType	3	None	replace
682	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  +  3,  localeFormat;  [CE]  ';'  expected  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat  +  3,  localeFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  +  3,  localeFormat;	  this.enUsFormat    =    enUsFormat    +    1,    localeFormat;    	non-compiled	[CE]  ';'  expected	95	None	replace
683	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  LocalFormat.getInstance();  }  [CE]  cannot  find  symbol  LocalFormat  [FE]        junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  LocalFormat.getInstance();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  LocalFormat.getInstance();  }	  this.enUsFormat    =    localFormat;    this.enUsFormat    =    localFormat;    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	28	None	replace
684	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  new  DateFormat();  }  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]          junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  new  DateFormat();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  new  DateFormat();  }	  this.enUsFormat    =    localFormat;    this.enUsFormat    =    localFormat;    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	28	None	replace
685	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  new  DateFormat(dateType);  }  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]            junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  new  DateFormat(dateType);  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  new  DateFormat(dateType);  }	  this.enUsFormat    =    localFormat;    this.enUsFormat    =    localFormat;    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	28	None	replace
686	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  localeFormat;  }  [CE]  cannot  find  symbol  localeFormat  [FE]              junit.framework.ComparisonFailure:  expected:<     "[Jan  1      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  localeFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  localeFormat;  }	  this.enUsFormat    =    localFormat;    this.enUsFormat    =    localFormat;    	non-compiled	[CE]  cannot  find  symbol  localeFormat	28	None	replace
687	[BUG]  [BUGGY]  this.enUsFormat  =  localFormat.getInstance();  if(  localFormat!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  else  {  this.localFormat  =  localFormat.getInstance();  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]    junit.framework.ComparisonFailure:  expected:<   "[March  18    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  localFormat.getInstance();  if(  localFormat!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  else  {  this.localFormat  =  localFormat.getInstance();  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat    =    localFormat.getInstance();    if(  localFormat!=  null)  {  this.enUsFormat  =  localFormat.getInstance();  }  else  {  this.localFormat  =  localFormat.getInstance();  }	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	42	None	add
688	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  enUsFormat;  }  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  inUsFormat;  }  [CE]  cannot  find  symbol  inUsFormat  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  enUsFormat;  }  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  inUsFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    this.enUsFormat    =    enUsFormat;    }    if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  inUsFormat;  }	  	non-compiled	[CE]  cannot  find  symbol  inUsFormat	112	None	add
689	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat.getInstance(localFormat);  [CE]  method  getInstance  in  class  DateFormat  cannot  be  applied  to  given  types;  [FE]    junit.framework.ComparisonFailure:  expected:<   "[March  18    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat.getInstance(localFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat.getInstance(localFormat);	  this.enUsFormat    =    localFormat.getInstance();    	non-compiled	[CE]  method  getInstance  in  class  DateFormat  cannot  be  applied  to  given  types;	43	None	replace
690	[BUG]  [BUGGY]  This.enUsFormat  =  enUsFormat.getInstance();  [CE]  cannot  find  symbol  This  [FE]      junit.framework.ComparisonFailure:  expected:<   "[March  18    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  This.enUsFormat  =  enUsFormat.getInstance();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	This.enUsFormat  =  enUsFormat.getInstance();	  this.enUsFormat    =    localFormat.getInstance();    	non-compiled	[CE]  cannot  find  symbol  This	43	None	replace
691	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat.getLocalFile();  [CE]  cannot  find  symbol  [FE]        junit.framework.ComparisonFailure:  expected:<   "[March  18    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat.getLocalFile();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat.getLocalFile();	  this.enUsFormat    =    localFormat.getInstance();    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
692	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat.toInstance();  [CE]  cannot  find  symbol  [FE]          junit.framework.ComparisonFailure:  expected:<   "[March  18    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat.toInstance();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat.toInstance();	  this.enUsFormat    =    localFormat.getInstance();    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
693	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [CE]  illegal  start  of  type  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }	  if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
694	[BUG]  [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(EnUsFormat.class);  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(EnUsFormat.class);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DefaultDateFormat(EnUsFormat.class);	  this.enUsFormat    =    new    DefaultDateFormat(localFormat);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
695	[BUG]  [BUGGY]  DateFormat  localFormat  =  enUsFormat.withLocalMillis(localFormat);  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  DateFormat  localFormat  =  enUsFormat.withLocalMillis(localFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	DateFormat  localFormat  =  enUsFormat.withLocalMillis(localFormat);	  DateFormat    localFormat    =    enUsFormat.getLocalFamily();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	101	None	replace
696	[BUG]  [BUGGY]  DateFormat  localFormat  =  enUsFormat.newInstance();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  DateFormat  localFormat  =  enUsFormat.newInstance();  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	DateFormat  localFormat  =  enUsFormat.newInstance();	  DateFormat    localFormat    =    enUsFormat.getLocalFamily();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	101	None	replace
697	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  enUsFormat;  }  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  enUsFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat  ==  null)  {  this.enUsFormat  =  enUsFormat;  }	  if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    JsonParseException(   "   ");    }    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	92	None	replace
698	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  enUsFormat;  }  else  {  throw  new  JsonParseException( " ".getMessage());  }  [CE]  cannot  find  symbol  [FE]      JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  enUsFormat;  }  else  {  throw  new  JsonParseException( " ".getMessage());  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat  ==  null)  {  this.enUsFormat  =  enUsFormat;  }  else  {  throw  new  JsonParseException( " ".getMessage());  }	  if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    JsonParseException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
699	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	add	if(enUsFormat  ==  null)  {  this.enUsFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }	  if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	87	10	replace
700	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat  ==  null)  {  this.enUsFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }	  if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	87	10	replace
701	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat,  LocalFormat.class,  localeFormat);  [CE]  ';'  expected  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat,  LocalFormat.class,  localeFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat,  LocalFormat.class,  localeFormat);	  this.enUsFormat    =    enUsFormat,    LocalFormat.class);    	non-compiled	[CE]  ';'  expected	102	None	replace
702	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  enUsFormat,  LocalFormat);  [CE]  cannot  find  symbol  LocalFormat  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  enUsFormat,  LocalFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType,  enUsFormat,  LocalFormat);	  this.enUsFormat    =    new    DateFormat(dateType,    enUsFormat,    localeFormat);    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	23	None	replace
703	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  enUsFormat,  LOCALE_NAME);  [CE]  cannot  find  symbol  LOCALE_NAME  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  enUsFormat,  LOCALE_NAME);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType,  enUsFormat,  LOCALE_NAME);	  this.enUsFormat    =    new    DateFormat(dateType,    enUsFormat,    localeFormat);    	non-compiled	[CE]  cannot  find  symbol  LOCALE_NAME	23	None	replace
704	[BUG]  [BUGGY]  this.localFormat  =  new  LocalFormat(dateType);  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.localFormat  =  new  LocalFormat(dateType);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.localFormat  =  new  LocalFormat(dateType);	  this.localFormat    =    enUsFormat;    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
705	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat,  LocalFormat.getLocalFileName());  [CE]  ';'  expected  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat,  LocalFormat.getLocalFileName());  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat,  LocalFormat.getLocalFileName());	  this.enUsFormat    =    enUsFormat,    LocalFormat.getDefault());    	non-compiled	[CE]  ';'  expected	85	None	replace
706	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat,  LocalFormat.instance());  [CE]  ';'  expected  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat,  LocalFormat.instance());  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat,  LocalFormat.instance());	  this.enUsFormat    =    enUsFormat,    LocalFormat.getDefault());    	non-compiled	[CE]  ';'  expected	85	None	replace
707	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat,  LocalFormat.getLocalFormat());  [CE]  ';'  expected  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat,  LocalFormat.getLocalFormat());  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat,  LocalFormat.getLocalFormat());	  this.enUsFormat    =    enUsFormat,    LocalFormat.getDefault());    	non-compiled	[CE]  ';'  expected	85	None	replace
708	[BUG]  [BUGGY]  this.dateFormat  =  new  DefaultDateFormat(dateType,  enUsFormat);  [CE]  cannot  find  symbol  dateFormat  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.dateFormat  =  new  DefaultDateFormat(dateType,  enUsFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.dateFormat  =  new  DefaultDateFormat(dateType,  enUsFormat);	  this.enUsFormat    =    new    DefaultDateFormat(dateType,    localFormat);    	non-compiled	[CE]  cannot  find  symbol  dateFormat	15	None	replace
709	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  +  DateFormat.DEFAULT;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat  +  DateFormat.DEFAULT;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  +  DateFormat.DEFAULT;	  this.enUsFormat    =    enUsFormat    +    3;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	50	None	replace
710	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  ||  urlFormat;  [CE]  cannot  find  symbol  urlFormat  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.enUsFormat  =  enUsFormat  ||  urlFormat;  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  ||  urlFormat;	  this.enUsFormat    =    localeFormat    ||    enUsFormat;    	non-compiled	[CE]  cannot  find  symbol  urlFormat	2	None	replace
711	[BUG]  [BUGGY]  this.localFormat  =  Locale.getLocalFile(enUsFormat);  [CE]  cannot  find  symbol  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.localFormat  =  Locale.getLocalFile(enUsFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.localFormat  =  Locale.getLocalFile(enUsFormat);	  this.localFormat    =    Locale.getDefault();    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
712	[BUG]  [BUGGY]  this.localFormat  =  Locale.getDefault(localFormat);  [CE]  no  suitable  method  found  for  getDefault(DateFormat)  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  this.localFormat  =  Locale.getDefault(localFormat);  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.localFormat  =  Locale.getDefault(localFormat);	  this.localFormat    =    Locale.getDefault();    	non-compiled	[CE]  no  suitable  method  found  for  getDefault(DateFormat)	63	None	replace
713	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  localeFormat;  }  [CE]  cannot  find  symbol  localeFormat  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  localeFormat;  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  localeFormat;  }	  if(localFormat    ==    null)    {    this.localFormat    =    Locale.getDefault();    }    	non-compiled	[CE]  cannot  find  symbol  localeFormat	78	None	replace
714	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( ".   ");  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;      [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]      this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat    ==    null)    {    this.enUsFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( ".   ");  }	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	86	None	add
