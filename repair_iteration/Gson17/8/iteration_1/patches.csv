bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  this.enUsFormat  =  localFormat  ||  enUsFormat;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  localFormat  ||  enUsFormat;  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  localFormat  ||  enUsFormat;	  this.enUsFormat    =    enUsFormat    ||    localFormat;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	7	None	replace
2	[BUG]  [BUGGY]  this.enUsFormat  =  localeFormat  ||  enUsFormat;  [CE]  cannot  find  symbol  localeFormat  [FE]                    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  localeFormat  ||  enUsFormat;  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  localeFormat  ||  enUsFormat;	  this.enUsFormat    =    enUsFormat    ||    localFormat;    	non-compiled	[CE]  cannot  find  symbol  localeFormat	7	None	replace
3	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  ||  localeFormat;  [CE]  cannot  find  symbol  localeFormat  [FE]                      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  enUsFormat  ||  localeFormat;  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  ||  localeFormat;	  this.enUsFormat    =    enUsFormat    ||    localFormat;    	non-compiled	[CE]  cannot  find  symbol  localeFormat	7	None	replace
4	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  &&  localFormat;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  enUsFormat  &&  localFormat;  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  &&  localFormat;	  this.enUsFormat    =    enUsFormat    ||    localFormat;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	7	None	replace
5	[BUG]  [BUGGY]  this.enUsFormat  =  localFormat,  enUsFormat);  [CE]  ';'  expected  [FE]        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  localFormat,  enUsFormat);  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  localFormat,  enUsFormat);	  this.enUsFormat    =    enUsFormat,    localFormat);    	non-compiled	[CE]  ';'  expected	12	None	replace
6	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat,  localeFormat);  [CE]  ';'  expected  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  enUsFormat,  localeFormat);  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat,  localeFormat);	  this.enUsFormat    =    enUsFormat,    localFormat);    	non-compiled	[CE]  ';'  expected	12	None	replace
7	[BUG]  [BUGGY]  this.enUsFormat  =  localeFormat,  enUsFormat);  [CE]  ';'  expected  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  localeFormat,  enUsFormat);  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  localeFormat,  enUsFormat);	  this.enUsFormat    =    enUsFormat,    localFormat);    	non-compiled	[CE]  ';'  expected	12	None	replace
8	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat,  localFormat,  SIMPLE_NAME);  [CE]  ';'  expected  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  enUsFormat,  localFormat,  SIMPLE_NAME);  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat,  localFormat,  SIMPLE_NAME);	  this.enUsFormat    =    enUsFormat,    localFormat);    	non-compiled	[CE]  ';'  expected	12	None	replace
9	[BUG]  [BUGGY]  this.enUsFormat  =  localFormat,  enUsFormat;  [CE]  ';'  expected  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  localFormat,  enUsFormat;  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  localFormat,  enUsFormat;	  this.enUsFormat    =    enUsFormat,    localFormat;    	non-compiled	[CE]  ';'  expected	5	None	replace
10	[BUG]  [BUGGY]  this.enUsFormat  =  localeFormat,  enUsFormat;  [CE]  ';'  expected  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  localeFormat,  enUsFormat;  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  localeFormat,  enUsFormat;	  this.enUsFormat    =    enUsFormat,    localFormat;    	non-compiled	[CE]  ';'  expected	5	None	replace
11	[BUG]  [BUGGY]  this.enUsFormat  =  dateType,  localFormat;  [CE]  ';'  expected  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  dateType,  localFormat;  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  dateType,  localFormat;	  this.enUsFormat    =    enUsFormat,    localFormat;    	non-compiled	[CE]  ';'  expected	5	None	replace
12	[BUG]  [BUGGY]  this.localFormat  =  enUsFormat;  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.localFormat  =  enUsFormat;  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.localFormat  =  enUsFormat;	  this.enUsFormat    =    localeFormat;    	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	3	None	replace
13	[BUG]  [BUGGY]  this.localFormat  =  localFormat;  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.localFormat  =  localFormat;  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.localFormat  =  localFormat;	  this.enUsFormat    =    localeFormat;    	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	3	None	replace
14	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  +  localFormat;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  enUsFormat  +  localFormat;  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  +  localFormat;	  this.enUsFormat    =    localeFormat;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	3	None	replace
15	[BUG]  [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(dateType,  localFormat);  [CE]  cannot  find  symbol  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(dateType,  localFormat);  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DefaultDateFormat(dateType,  localFormat);	  this.enUsFormat    =    new    DefaultDateFormat(dateType);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
16	[BUG]  [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(dateType,  locale);  [CE]  cannot  find  symbol  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(dateType,  locale);  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DefaultDateFormat(dateType,  locale);	  this.enUsFormat    =    new    DefaultDateFormat(dateType);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
17	[BUG]  [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(dateType,  enUsFormat);  [CE]  cannot  find  symbol  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(dateType,  enUsFormat);  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DefaultDateFormat(dateType,  enUsFormat);	  this.enUsFormat    =    new    DefaultDateFormat(dateType);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
18	[BUG]  [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(type);  [CE]  cannot  find  symbol  [FE]                    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(type);  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DefaultDateFormat(type);	  this.enUsFormat    =    new    DefaultDateFormat(dateType);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
19	[BUG]  [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(localFormat);  [CE]  cannot  find  symbol  [FE]                      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(localFormat);  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DefaultDateFormat(localFormat);	  this.enUsFormat    =    new    DefaultDateFormat(dateType);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
20	[BUG]  [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(this.dateType);  [CE]  cannot  find  symbol  [FE]                        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(this.dateType);  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DefaultDateFormat(this.dateType);	  this.enUsFormat    =    new    DefaultDateFormat(dateType);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
21	[BUG]  [BUGGY]  enUsFormat  =  enUsFormat;  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]    junit.framework.ComparisonFailure:  expected:<   "[Jan  1    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  enUsFormat  =  enUsFormat;  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	enUsFormat  =  enUsFormat;	  this.enUsFormat    =    localFormat;    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	2	None	replace
22	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  enUsFormat,  localFormat);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  enUsFormat,  localFormat);  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType,  enUsFormat,  localFormat);	  this.enUsFormat    =    new    DateFormat(dateType,    enUsFormat);    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	4	None	replace
23	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  enUsFormat,  localeFormat);  [CE]  cannot  find  symbol  localeFormat  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  enUsFormat,  localeFormat);  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType,  enUsFormat,  localeFormat);	  this.enUsFormat    =    new    DateFormat(dateType,    enUsFormat);    	non-compiled	[CE]  cannot  find  symbol  localeFormat	4	None	replace
24	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  localFormat);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  localFormat);  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType,  localFormat);	  this.enUsFormat    =    new    DateFormat(dateType,    enUsFormat);    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	4	None	replace
25	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(type,  enUsFormat);  [CE]  cannot  find  symbol  type  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  new  DateFormat(type,  enUsFormat);  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(type,  enUsFormat);	  this.enUsFormat    =    new    DateFormat(dateType,    enUsFormat);    	non-compiled	[CE]  cannot  find  symbol  type	4	None	replace
26	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  enUsFormat,  LocalFormat.class);  [CE]  cannot  find  symbol  [FE]                    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  enUsFormat,  LocalFormat.class);  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType,  enUsFormat,  LocalFormat.class);	  this.enUsFormat    =    new    DateFormat(dateType,    enUsFormat);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
27	[BUG]  [BUGGY]  this.enUsFormat  =  dateType,  localeFormat;  [CE]  ';'  expected  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  dateType,  localeFormat;  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  dateType,  localeFormat;	  this.enUsFormat    =    enUsFormat,    localeFormat;    	non-compiled	[CE]  ';'  expected	14	None	replace
28	[BUG]  [BUGGY]  this.enUsFormat  =  localFormat;  this.enUsFormat  =  localFormat;  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]    junit.framework.ComparisonFailure:  expected:<   "[Jan  1    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  localFormat;  this.enUsFormat  =  localFormat;  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat    =    localFormat;    this.enUsFormat  =  localFormat;	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	1	None	add
29	[BUG]  [BUGGY]  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]      junit.framework.ComparisonFailure:  expected:<   "[Jan  1    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat    =    localFormat;    if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	1	None	add
30	[BUG]  [BUGGY]  this.enUsFormat  =  localFormat;  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]        junit.framework.ComparisonFailure:  expected:<   "[Jan  1    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  localFormat;  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat    =    localFormat;    if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	1	None	add
31	[BUG]  [BUGGY]  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]          junit.framework.ComparisonFailure:  expected:<   "[Jan  1    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat    =    localFormat;    if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	1	None	add
32	[BUG]  [BUGGY]  this.enUsFormat  =  localFormat;  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]            junit.framework.ComparisonFailure:  expected:<   "[Jan  1    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  localFormat;  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat    =    localFormat;    if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	1	None	add
33	[BUG]  [BUGGY]  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]              junit.framework.ComparisonFailure:  expected:<   "[Jan  1    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat    =    localFormat;    if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	1	None	add
34	[BUG]  [BUGGY]  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]                junit.framework.ComparisonFailure:  expected:<   "[Jan  1    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat    =    localFormat;    if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	1	None	add
35	[BUG]  [BUGGY]  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]                  junit.framework.ComparisonFailure:  expected:<   "[Jan  1    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat    =    localFormat;    if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	1	None	add
36	[BUG]  [BUGGY]  this.dateType  =  enUsFormat;  [CE]  incompatible  types  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.dateType  =  enUsFormat;  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.dateType  =  enUsFormat;	  this.enUsFormat    =    dateType;    	non-compiled	[CE]  incompatible  types	6	None	replace
37	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType.getSimpleName());  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType.getSimpleName());  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType.getSimpleName());	  this.enUsFormat    =    dateType;    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	6	None	replace
38	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType.getClass().getName());  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType.getClass().getName());  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType.getClass().getName());	  this.enUsFormat    =    dateType;    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	6	None	replace
39	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  +  dateType;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  enUsFormat  +  dateType;  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  +  dateType;	  this.enUsFormat    =    dateType;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	6	None	replace
40	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:< "[March  18  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  enUsFormat.getInstance();  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	add	this.enUsFormat  =  enUsFormat.getInstance();	  this.enUsFormat    =    EnUsFormat.getInstance();    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:< "[March  18  	13	7	replace
41	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat.getInstance();  [FE]  junit.framework.ComparisonFailure:  expected:< "[March  18  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  enUsFormat.getInstance();  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat.getInstance();	  this.enUsFormat    =    EnUsFormat.getInstance();    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:< "[March  18  	13	7	replace
42	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:< "[March  18  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  localFormat.getInstance();  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	add	this.enUsFormat  =  localFormat.getInstance();	  this.enUsFormat    =    EnUsFormat.getInstance();    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:< "[March  18  	13	7	replace
43	[BUG]  [BUGGY]  this.enUsFormat  =  localFormat.getInstance();  [FE]  junit.framework.ComparisonFailure:  expected:< "[March  18  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  localFormat.getInstance();  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  localFormat.getInstance();	  this.enUsFormat    =    EnUsFormat.getInstance();    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:< "[March  18  	13	7	replace
44	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat.getInstanceUTC();  [CE]  cannot  find  symbol  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  enUsFormat.getInstanceUTC();  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat.getInstanceUTC();	  this.enUsFormat    =    EnUsFormat.getInstance();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
45	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat.getInstanceType();  [CE]  cannot  find  symbol  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  enUsFormat.getInstanceType();  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat.getInstanceType();	  this.enUsFormat    =    EnUsFormat.getInstance();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
46	[BUG]  [BUGGY]  this.enUsFormat  =  enType.getInstance();  [CE]  cannot  find  symbol  enType  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  enType.getInstance();  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enType.getInstance();	  this.enUsFormat    =    EnUsFormat.getInstance();    	non-compiled	[CE]  cannot  find  symbol  enType	13	None	replace
47	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  +  2;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  enUsFormat  +  2;  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  +  2;	  this.enUsFormat    =    enUsFormat    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	9	None	replace
48	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat,  localFormat  +  1;  [CE]  ';'  expected  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  enUsFormat,  localFormat  +  1;  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat,  localFormat  +  1;	  this.enUsFormat    =    enUsFormat    +    1;    	non-compiled	[CE]  ';'  expected	9	None	replace
49	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  +  1L;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  enUsFormat  +  1L;  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  +  1L;	  this.enUsFormat    =    enUsFormat    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	9	None	replace
50	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  +  3;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  enUsFormat  +  3;  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  +  3;	  this.enUsFormat    =    enUsFormat    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	9	None	replace
51	[BUG]  [BUGGY]  this.enUsFormat  =  localFormat  + ",   "  +  enUsFormat;  [CE]  incompatible  types  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  localFormat  + ",   "  +  enUsFormat;  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  localFormat  + ",   "  +  enUsFormat;	  this.enUsFormat    =    enUsFormat    +   ",   "    +    localFormat;    	non-compiled	[CE]  incompatible  types	10	None	replace
52	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  + ",  localFormat,   "  +  localFormat;  [CE]  incompatible  types  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  enUsFormat  + ",  localFormat,   "  +  localFormat;  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  + ",  localFormat,   "  +  localFormat;	  this.enUsFormat    =    enUsFormat    +   ",   "    +    localFormat;    	non-compiled	[CE]  incompatible  types	10	None	replace
53	[BUG]  [BUGGY]  this.enUsFormat  =  localeFormat  + ",   "  +  enUsFormat;  [CE]  cannot  find  symbol  localeFormat  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  localeFormat  + ",   "  +  enUsFormat;  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  localeFormat  + ",   "  +  enUsFormat;	  this.enUsFormat    =    enUsFormat    +   ",   "    +    localFormat;    	non-compiled	[CE]  cannot  find  symbol  localeFormat	10	None	replace
54	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  locale);  [CE]  cannot  find  symbol  locale  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  locale);  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType,  locale);	  this.enUsFormat    =    new    DateFormat(dateType);    	non-compiled	[CE]  cannot  find  symbol  locale	11	None	replace
55	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  Locale.getDefault());  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  Locale.getDefault());  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType,  Locale.getDefault());	  this.enUsFormat    =    new    DateFormat(dateType);    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	11	None	replace
56	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(this.dateType);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  new  DateFormat(this.dateType);  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(this.dateType);	  this.enUsFormat    =    new    DateFormat(dateType);    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	11	None	replace
57	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(type);  [CE]  cannot  find  symbol  type  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  new  DateFormat(type);  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(type);	  this.enUsFormat    =    new    DateFormat(dateType);    	non-compiled	[CE]  cannot  find  symbol  type	11	None	replace
58	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  if(localFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
59	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  localFormat  =  Locale.getDefault();  }  [CE]  ';'  expected  [FE]                      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  if(localFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  localFormat  =  Locale.getDefault();  }  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat!=  null)  {  localFormat  =  Locale.getDefault();  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
60	[BUG]  [BUGGY]  DateFormat  localFormat  =  Locale.getDefault();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  DateFormat  localFormat  =  Locale.getDefault();  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	DateFormat  localFormat  =  Locale.getDefault();	      	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	8	None	replace
61	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  if(localFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
62	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  if(localFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
63	[BUG]  [BUGGY]  this.localFormat  =  Locale.getDefault();  [CE]  incompatible  types  [FE]                              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.localFormat  =  Locale.getDefault();  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.localFormat  =  Locale.getDefault();	      	non-compiled	[CE]  incompatible  types	8	None	replace
64	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  +  4;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  enUsFormat  +  4;  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  +  4;	  this.enUsFormat    =    enUsFormat    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	9	None	replace
65	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  +  10;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  enUsFormat  +  10;  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  +  10;	  this.enUsFormat    =    enUsFormat    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	9	None	replace
66	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  localeFormat);  [CE]  cannot  find  symbol  localeFormat  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  localeFormat);  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType,  localeFormat);	  this.enUsFormat    =    new    DateFormat(dateType,    enUsFormat);    	non-compiled	[CE]  cannot  find  symbol  localeFormat	4	None	replace
67	[BUG]  [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(dateType,  localeFormat);  [CE]  cannot  find  symbol  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(dateType,  localeFormat);  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DefaultDateFormat(dateType,  localeFormat);	  this.enUsFormat    =    new    DefaultDateFormat(dateType);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
68	[BUG]  [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(enUsFormat);  [CE]  cannot  find  symbol  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(enUsFormat);  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DefaultDateFormat(enUsFormat);	  this.enUsFormat    =    new    DefaultDateFormat(dateType);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
69	[BUG]  [BUGGY]  this.enUsFormat  =  EnUsFormat;  [CE]  cannot  find  symbol  EnUsFormat  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  EnUsFormat;  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  EnUsFormat;	  this.enUsFormat    =    localeFormat;    	non-compiled	[CE]  cannot  find  symbol  EnUsFormat	3	None	replace
70	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  +  localeFormat;  [CE]  cannot  find  symbol  localeFormat  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  enUsFormat  +  localeFormat;  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  +  localeFormat;	  this.enUsFormat    =    localeFormat;    	non-compiled	[CE]  cannot  find  symbol  localeFormat	3	None	replace
71	[BUG]  [BUGGY]  this.enUsFormat  =  EnUsFormat.class;  [CE]  cannot  find  symbol  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  EnUsFormat.class;  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  EnUsFormat.class;	  this.enUsFormat    =    localeFormat;    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
72	[BUG]  [BUGGY]  this.enUsFormat  =  EnUsFormat.UTF8;  [CE]  cannot  find  symbol  EnUsFormat  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  EnUsFormat.UTF8;  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  EnUsFormat.UTF8;	  this.enUsFormat    =    localeFormat;    	non-compiled	[CE]  cannot  find  symbol  EnUsFormat	3	None	replace
73	[BUG]  [BUGGY]  this.enUsFormat  =  eUsFormat;  [CE]  cannot  find  symbol  eUsFormat  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  eUsFormat;  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  eUsFormat;	  this.enUsFormat    =    dateType;    	non-compiled	[CE]  cannot  find  symbol  eUsFormat	6	None	replace
74	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]                    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }	      	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	8	None	replace
75	[BUG]  [BUGGY]  if(localFormat!=  null)  {  this.localFormat  =  localFormat;  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]                      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  if(localFormat!=  null)  {  this.localFormat  =  localFormat;  }  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat!=  null)  {  this.localFormat  =  localFormat;  }	      	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	8	None	replace
76	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  Locale.getDefault();  }  else  {  this.localFormat  =  Locale.getDefault();  }  [CE]  incompatible  types  [FE]                        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  Locale.getDefault();  }  else  {  this.localFormat  =  Locale.getDefault();  }  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  Locale.getDefault();  }  else  {  this.localFormat  =  Locale.getDefault();  }	      	non-compiled	[CE]  incompatible  types	8	None	replace
77	[BUG]  [BUGGY]  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	Class  <?  extends  Date>  localFormat  =  Locale.getDefault();	      	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	8	None	replace
78	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  Locale.getDefault();  }  [CE]  incompatible  types  [FE]                            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  Locale.getDefault();  }  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  Locale.getDefault();  }	      	non-compiled	[CE]  incompatible  types	8	None	replace
79	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType  +  SIMPLE_NAME);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType  +  SIMPLE_NAME);  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType  +  SIMPLE_NAME);	  this.enUsFormat    =    new    DateFormat(dateType);    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	11	None	replace
80	[BUG]  [BUGGY]  this.enUsFormat  =  ENUsFormat.getInstance();  [CE]  cannot  find  symbol  ENUsFormat  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  ENUsFormat.getInstance();  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  ENUsFormat.getInstance();	  this.enUsFormat    =    EnUsFormat.getInstance();    	non-compiled	[CE]  cannot  find  symbol  ENUsFormat	13	None	replace
81	[BUG]  [BUGGY]  this.enUsFormat  =  EnUsFormat.getInstance(dateType);  [CE]  cannot  find  symbol  EnUsFormat  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  EnUsFormat.getInstance(dateType);  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  EnUsFormat.getInstance(dateType);	  this.enUsFormat    =    EnUsFormat.getInstance();    	non-compiled	[CE]  cannot  find  symbol  EnUsFormat	13	None	replace
82	[BUG]  [BUGGY]  this.enUsFormat  =  EnUsFormat.class.getInstance();  [CE]  cannot  find  symbol  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  EnUsFormat.class.getInstance();  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  EnUsFormat.class.getInstance();	  this.enUsFormat    =    EnUsFormat.getInstance();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
83	[BUG]  [BUGGY]  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  localFormat;  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]    junit.framework.ComparisonFailure:  expected:<   "[Jan  1    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  localFormat;  if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  localFormat;  }  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat    =    localFormat;    if(localFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  localFormat;  }	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	1	None	add
84	[BUG]  [BUGGY]  this.enUsFormat  =  localFormat;  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  localFormat;  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]      junit.framework.ComparisonFailure:  expected:<   "[Jan  1    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  localFormat;  if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  localFormat;  }  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat    =    localFormat;    if(localFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  localFormat;  }	  	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	1	None	add
85	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat,  LocalFormat.getDefault());  [CE]  ';'  expected  [FE]        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  enUsFormat,  LocalFormat.getDefault());  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat,  LocalFormat.getDefault());	  this.enUsFormat    =    enUsFormat,    localFormat);    	non-compiled	[CE]  ';'  expected	12	None	replace
86	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    junit.framework.ComparisonFailure:  expected:<   "[Jan  1    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	add	if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  this.enUsFormat    =    localFormat;    	compilable	  [FE]  IllegalArgumentException  	2	10	replace
87	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]    junit.framework.ComparisonFailure:  expected:<   "[Jan  1    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  this.enUsFormat    =    localFormat;    	compilable	  [FE]  IllegalArgumentException  	2	10	replace
88	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]      junit.framework.ComparisonFailure:  expected:<   "[Jan  1    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }	  this.enUsFormat    =    localFormat;    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	2	None	replace
89	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:< "[Jan  1  [FE]        junit.framework.ComparisonFailure:  expected:<   "[Jan  1    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	add	if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  this.enUsFormat    =    localFormat;    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:< "[Jan  1  	2	3	replace
90	[BUG]  [BUGGY]  if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  junit.framework.ComparisonFailure:  expected:< "[Jan  1  [FE]        junit.framework.ComparisonFailure:  expected:<   "[Jan  1    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  this.enUsFormat    =    localFormat;    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:< "[Jan  1  	2	3	replace
91	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]          junit.framework.ComparisonFailure:  expected:<   "[Jan  1    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  JsonParseException( " ");  }  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	add	if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  JsonParseException( " ");  }	  this.enUsFormat    =    localFormat;    	compilable	  [FE]  JsonParseException  	2	10	replace
92	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  JsonParseException( " ");  }  [FE]  JsonParseException  [FE]          junit.framework.ComparisonFailure:  expected:<   "[Jan  1    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  JsonParseException( " ");  }  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  JsonParseException( " ");  }	  this.enUsFormat    =    localFormat;    	compilable	  [FE]  JsonParseException  	2	10	replace
93	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  return  new  DateFormat(dateType,  enUsFormat,  localFormat);  }  [CE]  cannot  return  a  value  from  method  whose  result  type  is  void  [FE]            junit.framework.ComparisonFailure:  expected:<   "[Jan  1    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  return  new  DateFormat(dateType,  enUsFormat,  localFormat);  }  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  return  new  DateFormat(dateType,  enUsFormat,  localFormat);  }	  this.enUsFormat    =    localFormat;    	non-compiled	[CE]  cannot  return  a  value  from  method  whose  result  type  is  void	2	None	replace
94	[BUG]  [BUGGY]  if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]              junit.framework.ComparisonFailure:  expected:<   "[Jan  1    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat!=  null)  {  this.enUsFormat  =  localFormat;  }	  this.enUsFormat    =    localFormat;    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	2	None	replace
95	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  +  1,  localeFormat;  [CE]  ';'  expected  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  enUsFormat  +  1,  localeFormat;  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  +  1,  localeFormat;	  this.enUsFormat    =    enUsFormat,    localeFormat;    	non-compiled	[CE]  ';'  expected	14	None	replace
96	[BUG]  [BUGGY]  this.dateFormat  =  enUsFormat;  [CE]  cannot  find  symbol  dateFormat  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.dateFormat  =  enUsFormat;  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.dateFormat  =  enUsFormat;	  this.enUsFormat    =    dateType;    	non-compiled	[CE]  cannot  find  symbol  dateFormat	6	None	replace
97	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  LocalFormat.getDefault();  }  [CE]  cannot  find  symbol  LocalFormat  [FE]                    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  LocalFormat.getDefault();  }  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  LocalFormat.getDefault();  }	      	non-compiled	[CE]  cannot  find  symbol  LocalFormat	8	None	replace
98	[BUG]  [BUGGY]  DateFormat  localFormat  =  enUsFormat.get(localFormat);  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  DateFormat  localFormat  =  enUsFormat.get(localFormat);  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	DateFormat  localFormat  =  enUsFormat.get(localFormat);	      	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	8	None	replace
99	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  LocalFormat.getInstance();  }  [CE]  cannot  find  symbol  LocalFormat  [FE]                        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  LocalFormat.getInstance();  }  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  LocalFormat.getInstance();  }	      	non-compiled	[CE]  cannot  find  symbol  LocalFormat	8	None	replace
100	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  LocalFormat.getDefault();  }  else  {  this.localFormat  =  LocalFormat.getInstance();  }  [CE]  cannot  find  symbol  LocalFormat  [FE]                          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  LocalFormat.getDefault();  }  else  {  this.localFormat  =  LocalFormat.getInstance();  }  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  LocalFormat.getDefault();  }  else  {  this.localFormat  =  LocalFormat.getInstance();  }	      	non-compiled	[CE]  cannot  find  symbol  LocalFormat	8	None	replace
101	[BUG]  [BUGGY]  DateFormat  localFormat  =  enUsFormat.getLocalFamily();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  DateFormat  localFormat  =  enUsFormat.getLocalFamily();  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	DateFormat  localFormat  =  enUsFormat.getLocalFamily();	      	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	8	None	replace
102	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat,  LocalFormat.class);  [CE]  ';'  expected  [FE]        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  enUsFormat,  LocalFormat.class);  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat,  LocalFormat.class);	  this.enUsFormat    =    enUsFormat,    localFormat);    	non-compiled	[CE]  ';'  expected	12	None	replace
103	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat,  new  DateFormat(localFormat));  [CE]  ';'  expected  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  enUsFormat,  new  DateFormat(localFormat));  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat,  new  DateFormat(localFormat));	  this.enUsFormat    =    enUsFormat,    localFormat);    	non-compiled	[CE]  ';'  expected	12	None	replace
104	[BUG]  [BUGGY]  this.enUsFormat  =  EnUsFormat.getDefault();  [CE]  cannot  find  symbol  EnUsFormat  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  EnUsFormat.getDefault();  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  EnUsFormat.getDefault();	  this.enUsFormat    =    EnUsFormat.getInstance();    	non-compiled	[CE]  cannot  find  symbol  EnUsFormat	13	None	replace
105	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  + ",  localFormat: "  +  localFormat;  [CE]  incompatible  types  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  enUsFormat  + ",  localFormat: "  +  localFormat;  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  + ",  localFormat: "  +  localFormat;	  this.enUsFormat    =    enUsFormat    +   ",   "    +    localFormat;    	non-compiled	[CE]  incompatible  types	10	None	replace
106	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat,  new  DateFormat(localFormat);  [CE]  ';'  expected  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  enUsFormat,  new  DateFormat(localFormat);  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat,  new  DateFormat(localFormat);	  this.enUsFormat    =    enUsFormat,    localeFormat;    	non-compiled	[CE]  ';'  expected	14	None	replace
107	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat,  LocalFormat;  [CE]  ';'  expected  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  enUsFormat,  LocalFormat;  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat,  LocalFormat;	  this.enUsFormat    =    enUsFormat,    localeFormat;    	non-compiled	[CE]  ';'  expected	14	None	replace
108	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  +  1,  localFormat;  [CE]  ';'  expected  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  enUsFormat  +  1,  localFormat;  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  +  1,  localFormat;	  this.enUsFormat    =    enUsFormat,    localFormat;    	non-compiled	[CE]  ';'  expected	5	None	replace
109	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(enUsFormat);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.enUsFormat  =  new  DateFormat(enUsFormat);  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(enUsFormat);	  this.enUsFormat    =    new    DateFormat(dateType);    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	11	None	replace
110	[BUG]  [BUGGY]  this.dateFormat  =  new  DateFormat(dateType,  enUsFormat);  [CE]  cannot  find  symbol  dateFormat  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  this.dateFormat  =  new  DateFormat(dateType,  enUsFormat);  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.dateFormat  =  new  DateFormat(dateType,  enUsFormat);	  this.enUsFormat    =    new    DateFormat(dateType);    	non-compiled	[CE]  cannot  find  symbol  dateFormat	11	None	replace
111	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  DateFormat  enUsFormat  =  new  DateFormat(dateType);  enUsFormat  =  enUsFormat;  }  [CE]  variable  enUsFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]    junit.framework.ComparisonFailure:  expected:<   "[Jan  1    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  DateFormat  enUsFormat  =  new  DateFormat(dateType);  enUsFormat  =  enUsFormat;  }  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  DateFormat  enUsFormat  =  new  DateFormat(dateType);  enUsFormat  =  enUsFormat;  }	  this.enUsFormat    =    localFormat;    	non-compiled	[CE]  variable  enUsFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	2	None	replace
112	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      junit.framework.ComparisonFailure:  expected:<   "[Jan  1    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  enUsFormat;  }  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	add	if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  enUsFormat;  }	  this.enUsFormat    =    localFormat;    	compilable	  [FE]  JsonParseException  	2	2	replace
113	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  enUsFormat;  }  [FE]  JsonParseException  [FE]      junit.framework.ComparisonFailure:  expected:<   "[Jan  1    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  enUsFormat;  }  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  this.enUsFormat  =  enUsFormat;  }	  this.enUsFormat    =    localFormat;    	compilable	  [FE]  JsonParseException  	2	2	replace
114	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        junit.framework.ComparisonFailure:  expected:<   "[Jan  1    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	add	if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }	  this.enUsFormat    =    localFormat;    	compilable	  [FE]  IllegalArgumentException  	2	10	replace
115	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [FE]  IllegalArgumentException  [FE]        junit.framework.ComparisonFailure:  expected:<   "[Jan  1    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;    [BUGGY]  if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [BUGGY]    this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	if(enUsFormat  ==  null)  {  this.enUsFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }	  this.enUsFormat    =    localFormat;    	compilable	  [FE]  IllegalArgumentException  	2	10	replace
