bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:< "[Jan  1  [FE]    JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  [BUGGY]  this.enUsFormat  =  localFormat;  [BUGGY]  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	add	this.enUsFormat  =  localFormat;	this.enUsFormat  =  enUsFormat;  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:< "[Jan  1  	15	3	replace
2	[BUG]  [BUGGY]  this.enUsFormat  =  localFormat;  [FE]  junit.framework.ComparisonFailure:  expected:< "[Jan  1  [FE]    JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  [BUGGY]  this.enUsFormat  =  localFormat;  [BUGGY]  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  localFormat;	this.enUsFormat  =  enUsFormat;  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:< "[Jan  1  	15	3	replace
3	[BUG]  [BUGGY]  this.enUsFormat  =  localeFormat;  [CE]  cannot  find  symbol  localeFormat  [FE]      JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  [BUGGY]  this.enUsFormat  =  localeFormat;  [BUGGY]  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  localeFormat;	this.enUsFormat  =  enUsFormat;  	non-compiled	[CE]  cannot  find  symbol  localeFormat	15	None	replace
4	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  enUsFormat);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]        JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType,  enUsFormat);  [BUGGY]  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType,  enUsFormat);	this.enUsFormat  =  enUsFormat;  	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	15	None	replace
5	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat,  localFormat;  [CE]  ';'  expected  [FE]          JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  [BUGGY]  this.enUsFormat  =  enUsFormat,  localFormat;  [BUGGY]  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat,  localFormat;	this.enUsFormat  =  enUsFormat;  	non-compiled	[CE]  ';'  expected	15	None	replace
6	[BUG]  [BUGGY]  this.enUsFormat  =  dateType;  [CE]  incompatible  types  [FE]            JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  [BUGGY]  this.enUsFormat  =  dateType;  [BUGGY]  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  dateType;	this.enUsFormat  =  enUsFormat;  	non-compiled	[CE]  incompatible  types	15	None	replace
7	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  ||  localFormat;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]              JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  [BUGGY]  this.enUsFormat  =  enUsFormat  ||  localFormat;  [BUGGY]  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  ||  localFormat;	this.enUsFormat  =  enUsFormat;  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	15	None	replace
8	[BUG]  [BUGGY]    [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]                JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  [BUGGY]    [BUGGY]  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	  	this.enUsFormat  =  enUsFormat;  	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	15	None	replace
9	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]    JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  [BUGGY]  this.enUsFormat  =  enUsFormat  +  1;  [BUGGY]  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  +  1;	this.enUsFormat  =  enUsFormat;  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	15	None	replace
10	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat  + ", "  +  localFormat;  [CE]  incompatible  types  [FE]      JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  [BUGGY]  this.enUsFormat  =  enUsFormat  + ", "  +  localFormat;  [BUGGY]  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat  + ", "  +  localFormat;	this.enUsFormat  =  enUsFormat;  	non-compiled	[CE]  incompatible  types	15	None	replace
11	[BUG]  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]        JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  [BUGGY]  this.enUsFormat  =  new  DateFormat(dateType);  [BUGGY]  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DateFormat(dateType);	this.enUsFormat  =  enUsFormat;  	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	15	None	replace
12	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat,  localFormat);  [CE]  ';'  expected  [FE]    JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  [BUGGY]  this.enUsFormat  =  enUsFormat,  localFormat);  [BUGGY]  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat,  localFormat);	this.enUsFormat  =  enUsFormat;  	non-compiled	[CE]  ';'  expected	15	None	replace
13	[BUG]  [BUGGY]  this.enUsFormat  =  EnUsFormat.getInstance();  [CE]  cannot  find  symbol  EnUsFormat  [FE]      JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  [BUGGY]  this.enUsFormat  =  EnUsFormat.getInstance();  [BUGGY]  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  EnUsFormat.getInstance();	this.enUsFormat  =  enUsFormat;  	non-compiled	[CE]  cannot  find  symbol  EnUsFormat	15	None	replace
14	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat,  localeFormat;  [CE]  ';'  expected  [FE]        JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  [BUGGY]  this.enUsFormat  =  enUsFormat,  localeFormat;  [BUGGY]  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  enUsFormat,  localeFormat;	this.enUsFormat  =  enUsFormat;  	non-compiled	[CE]  ';'  expected	15	None	replace
15	[BUG]  [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(dateType);  [CE]  cannot  find  symbol  [FE]          JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  [BUGGY]  this.enUsFormat  =  new  DefaultDateFormat(dateType);  [BUGGY]  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	79	79	2	replace	this.enUsFormat  =  new  DefaultDateFormat(dateType);	this.enUsFormat  =  enUsFormat;  	non-compiled	[CE]  cannot  find  symbol	15	None	replace
