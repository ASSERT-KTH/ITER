bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] return false; [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] default: for(Node sibling = n.getNext(); sibling != null; sibling = sibling.getNext()) { if (!ControlFlowGraph.isEnteringNewCfgNode(sibling)) { state = isVariableReadBeforeKill(sibling, variable);  if (state == VariableLiveness.READ) { return true; } else if (state == VariableLiveness.KILL) { [BUGGY] return false; [BUGGY] } } } } n = n.getParent(); } return false; } [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean  Node n Node exprRoot String variable [VARIABLES] AbstractCompiler compiler boolean Node exprRoot n sibling String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.75	316	316	4	replace	
2	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] default: for(Node sibling = n.getNext(); sibling != null; sibling = sibling.getNext()) { if (!ControlFlowGraph.isEnteringNewCfgNode(sibling)) { state = isVariableReadBeforeKill(sibling, variable);  if (state == VariableLiveness.READ) { return true; } else if (state == VariableLiveness.KILL) { [BUGGY] [BUGGY] return false; } } } } n = n.getParent(); } return false; } [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean  Node n Node exprRoot String variable [VARIABLES] AbstractCompiler compiler boolean Node exprRoot n sibling String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.75	316	316	4	add	
3	[BUG] [BUGGY] return VariableLiveness.KILL; [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] if (NodeUtil.isLhs(n, n.getParent())) { Preconditions.checkState(n.getParent().getType() == Token.ASSIGN);    Node rhs = n.getNext(); VariableLiveness state = isVariableReadBeforeKill(rhs, variable); if (state == VariableLiveness.READ) { return state; } [BUGGY] return VariableLiveness.KILL; [BUGGY] } else { return VariableLiveness.READ; } [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableReadBeforeKill [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness  Node n String variable [VARIABLES] AbstractCompiler compiler boolean Node child n rhs String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.75	352	352	4	replace	
4	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] if (NodeUtil.isLhs(n, n.getParent())) { Preconditions.checkState(n.getParent().getType() == Token.ASSIGN);    Node rhs = n.getNext(); VariableLiveness state = isVariableReadBeforeKill(rhs, variable); if (state == VariableLiveness.READ) { return state; } [BUGGY] [BUGGY] return VariableLiveness.KILL; } else { return VariableLiveness.READ; } [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableReadBeforeKill [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness  Node n String variable [VARIABLES] AbstractCompiler compiler boolean Node child n rhs String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.75	352	352	4	add	
5	[BUG] [BUGGY] } else if (state == VariableLiveness.KILL) { [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] default: for(Node sibling = n.getNext(); sibling != null; sibling = sibling.getNext()) { if (!ControlFlowGraph.isEnteringNewCfgNode(sibling)) { state = isVariableReadBeforeKill(sibling, variable);  if (state == VariableLiveness.READ) { return true; [BUGGY] } else if (state == VariableLiveness.KILL) { [BUGGY] return false; } } } } n = n.getParent(); } return false; } [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean  Node n Node exprRoot String variable [VARIABLES] AbstractCompiler compiler boolean Node exprRoot n sibling String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.6123724356957946	315	315	4	replace	
6	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] default: for(Node sibling = n.getNext(); sibling != null; sibling = sibling.getNext()) { if (!ControlFlowGraph.isEnteringNewCfgNode(sibling)) { state = isVariableReadBeforeKill(sibling, variable);  if (state == VariableLiveness.READ) { return true; [BUGGY] [BUGGY] } else if (state == VariableLiveness.KILL) { return false; } } } } n = n.getParent(); } return false; } [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean  Node n Node exprRoot String variable [VARIABLES] AbstractCompiler compiler boolean Node exprRoot n sibling String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.6123724356957946	315	315	4	add	
7	[BUG] [BUGGY] return; [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT]           [BUGGY] return; [BUGGY] } [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] tryRemoveAssignment [RETURN_TYPE] void  NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler compiler FlowState state boolean Scope scope NodeTraversal t Var var Node c exprRoot lhs n next op parent rhs String name VariableLiveness KILL MAYBE_LIVE READ LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5345224838248488	230	230	4	replace	
8	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT]           [BUGGY] [BUGGY] return; } [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] tryRemoveAssignment [RETURN_TYPE] void  NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler compiler FlowState state boolean Scope scope NodeTraversal t Var var Node c exprRoot lhs n next op parent rhs String name VariableLiveness KILL MAYBE_LIVE READ LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5345224838248488	230	230	4	add	
9	[BUG] [BUGGY] return true; [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT]  default: for(Node sibling = n.getNext(); sibling != null; sibling = sibling.getNext()) { if (!ControlFlowGraph.isEnteringNewCfgNode(sibling)) { state = isVariableReadBeforeKill(sibling, variable);  if (state == VariableLiveness.READ) { [BUGGY] return true; [BUGGY] } else if (state == VariableLiveness.KILL) { return false; } } } } n = n.getParent(); } return false; } [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean  Node n Node exprRoot String variable [VARIABLES] AbstractCompiler compiler boolean Node exprRoot n sibling String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5345224838248488	314	314	4	replace	
10	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT]  default: for(Node sibling = n.getNext(); sibling != null; sibling = sibling.getNext()) { if (!ControlFlowGraph.isEnteringNewCfgNode(sibling)) { state = isVariableReadBeforeKill(sibling, variable);  if (state == VariableLiveness.READ) { [BUGGY] [BUGGY] return true; } else if (state == VariableLiveness.KILL) { return false; } } } } n = n.getParent(); } return false; } [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean  Node n Node exprRoot String variable [VARIABLES] AbstractCompiler compiler boolean Node exprRoot n sibling String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5345224838248488	314	314	4	add	
11	[BUG] [BUGGY] if (NodeUtil.isLhs(n, n.getParent())) { [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] Node n, String variable) { if (NodeUtil.isName(n) && variable.equals(n.getString())) { [BUGGY] if (NodeUtil.isLhs(n, n.getParent())) { [BUGGY] Preconditions.checkState(n.getParent().getType() == Token.ASSIGN);    Node rhs = n.getNext(); VariableLiveness state = isVariableReadBeforeKill(rhs, variable); if (state == VariableLiveness.READ) { return state; } return VariableLiveness.KILL; [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableReadBeforeKill [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness  Node n String variable [VARIABLES] AbstractCompiler compiler boolean Node child n rhs String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5345224838248488	342	342	4	replace	
12	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] Node n, String variable) { if (NodeUtil.isName(n) && variable.equals(n.getString())) { [BUGGY] [BUGGY] if (NodeUtil.isLhs(n, n.getParent())) { Preconditions.checkState(n.getParent().getType() == Token.ASSIGN);    Node rhs = n.getNext(); VariableLiveness state = isVariableReadBeforeKill(rhs, variable); if (state == VariableLiveness.READ) { return state; } return VariableLiveness.KILL; [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableReadBeforeKill [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness  Node n String variable [VARIABLES] AbstractCompiler compiler boolean Node child n rhs String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5345224838248488	342	342	4	add	
13	[BUG] [BUGGY] return VariableLiveness.READ; [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT]    Node rhs = n.getNext(); VariableLiveness state = isVariableReadBeforeKill(rhs, variable); if (state == VariableLiveness.READ) { return state; } return VariableLiveness.KILL; } else { [BUGGY] return VariableLiveness.READ; [BUGGY] } [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableReadBeforeKill [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness  Node n String variable [VARIABLES] AbstractCompiler compiler boolean Node child n rhs String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5345224838248488	354	354	4	replace	
14	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT]    Node rhs = n.getNext(); VariableLiveness state = isVariableReadBeforeKill(rhs, variable); if (state == VariableLiveness.READ) { return state; } return VariableLiveness.KILL; } else { [BUGGY] [BUGGY] return VariableLiveness.READ; } [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableReadBeforeKill [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness  Node n String variable [VARIABLES] AbstractCompiler compiler boolean Node child n rhs String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5345224838248488	354	354	4	add	
15	[BUG] [BUGGY] if (!ControlFlowGraph.isEnteringNewCfgNode(sibling)) { [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT]  case Token.HOOK:    default: for(Node sibling = n.getNext(); sibling != null; sibling = sibling.getNext()) { [BUGGY] if (!ControlFlowGraph.isEnteringNewCfgNode(sibling)) { [BUGGY] state = isVariableReadBeforeKill(sibling, variable);  if (state == VariableLiveness.READ) { return true; } else if (state == VariableLiveness.KILL) { return false; } } } [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean  Node n Node exprRoot String variable [VARIABLES] AbstractCompiler compiler boolean Node exprRoot n sibling String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5	309	309	4	replace	
16	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT]  case Token.HOOK:    default: for(Node sibling = n.getNext(); sibling != null; sibling = sibling.getNext()) { [BUGGY] [BUGGY] if (!ControlFlowGraph.isEnteringNewCfgNode(sibling)) { state = isVariableReadBeforeKill(sibling, variable);  if (state == VariableLiveness.READ) { return true; } else if (state == VariableLiveness.KILL) { return false; } } } [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean  Node n Node exprRoot String variable [VARIABLES] AbstractCompiler compiler boolean Node exprRoot n sibling String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5	309	309	4	add	
17	[BUG] [BUGGY] state = isVariableReadBeforeKill(sibling, variable); [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] case Token.HOOK:    default: for(Node sibling = n.getNext(); sibling != null; sibling = sibling.getNext()) { if (!ControlFlowGraph.isEnteringNewCfgNode(sibling)) { [BUGGY] state = isVariableReadBeforeKill(sibling, variable); [BUGGY]   if (state == VariableLiveness.READ) { return true; } else if (state == VariableLiveness.KILL) { return false; } } } } [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean  Node n Node exprRoot String variable [VARIABLES] AbstractCompiler compiler boolean Node exprRoot n sibling String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5	310	310	4	replace	
18	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] case Token.HOOK:    default: for(Node sibling = n.getNext(); sibling != null; sibling = sibling.getNext()) { if (!ControlFlowGraph.isEnteringNewCfgNode(sibling)) { [BUGGY] [BUGGY] state = isVariableReadBeforeKill(sibling, variable);  if (state == VariableLiveness.READ) { return true; } else if (state == VariableLiveness.KILL) { return false; } } } } [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean  Node n Node exprRoot String variable [VARIABLES] AbstractCompiler compiler boolean Node exprRoot n sibling String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5	310	310	4	add	
19	[BUG] [BUGGY] if (state == VariableLiveness.READ) { [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT]   default: for(Node sibling = n.getNext(); sibling != null; sibling = sibling.getNext()) { if (!ControlFlowGraph.isEnteringNewCfgNode(sibling)) { state = isVariableReadBeforeKill(sibling, variable);  [BUGGY] if (state == VariableLiveness.READ) { [BUGGY] return true; } else if (state == VariableLiveness.KILL) { return false; } } } } n = n.getParent(); } return false; [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean  Node n Node exprRoot String variable [VARIABLES] AbstractCompiler compiler boolean Node exprRoot n sibling String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5	313	313	4	replace	
20	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT]   default: for(Node sibling = n.getNext(); sibling != null; sibling = sibling.getNext()) { if (!ControlFlowGraph.isEnteringNewCfgNode(sibling)) { state = isVariableReadBeforeKill(sibling, variable);  [BUGGY] [BUGGY] if (state == VariableLiveness.READ) { return true; } else if (state == VariableLiveness.KILL) { return false; } } } } n = n.getParent(); } return false; [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean  Node n Node exprRoot String variable [VARIABLES] AbstractCompiler compiler boolean Node exprRoot n sibling String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5	313	313	4	add	
21	[BUG] [BUGGY] if (NodeUtil.isName(n) && variable.equals(n.getString())) { [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] Node n, String variable) { [BUGGY] if (NodeUtil.isName(n) && variable.equals(n.getString())) { [BUGGY] if (NodeUtil.isLhs(n, n.getParent())) { Preconditions.checkState(n.getParent().getType() == Token.ASSIGN);    Node rhs = n.getNext(); VariableLiveness state = isVariableReadBeforeKill(rhs, variable); if (state == VariableLiveness.READ) { return state; } [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableReadBeforeKill [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness  Node n String variable [VARIABLES] AbstractCompiler compiler boolean Node child n rhs String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5	341	341	4	replace	
22	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] Node n, String variable) { [BUGGY] [BUGGY] if (NodeUtil.isName(n) && variable.equals(n.getString())) { if (NodeUtil.isLhs(n, n.getParent())) { Preconditions.checkState(n.getParent().getType() == Token.ASSIGN);    Node rhs = n.getNext(); VariableLiveness state = isVariableReadBeforeKill(rhs, variable); if (state == VariableLiveness.READ) { return state; } [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableReadBeforeKill [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness  Node n String variable [VARIABLES] AbstractCompiler compiler boolean Node child n rhs String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5	341	341	4	add	
23	[BUG] [BUGGY] Preconditions.checkState(n.getParent().getType() == Token.ASSIGN); [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] Node n, String variable) { if (NodeUtil.isName(n) && variable.equals(n.getString())) { if (NodeUtil.isLhs(n, n.getParent())) { [BUGGY] Preconditions.checkState(n.getParent().getType() == Token.ASSIGN); [BUGGY]    Node rhs = n.getNext(); VariableLiveness state = isVariableReadBeforeKill(rhs, variable); if (state == VariableLiveness.READ) { return state; } return VariableLiveness.KILL; } else { [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableReadBeforeKill [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness  Node n String variable [VARIABLES] AbstractCompiler compiler boolean Node child n rhs String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5	343	343	4	replace	
24	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] Node n, String variable) { if (NodeUtil.isName(n) && variable.equals(n.getString())) { if (NodeUtil.isLhs(n, n.getParent())) { [BUGGY] [BUGGY] Preconditions.checkState(n.getParent().getType() == Token.ASSIGN);    Node rhs = n.getNext(); VariableLiveness state = isVariableReadBeforeKill(rhs, variable); if (state == VariableLiveness.READ) { return state; } return VariableLiveness.KILL; } else { [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableReadBeforeKill [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness  Node n String variable [VARIABLES] AbstractCompiler compiler boolean Node child n rhs String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5	343	343	4	add	
25	[BUG] [BUGGY] Node rhs = n.getNext(); [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] Node n, String variable) { if (NodeUtil.isName(n) && variable.equals(n.getString())) { if (NodeUtil.isLhs(n, n.getParent())) { Preconditions.checkState(n.getParent().getType() == Token.ASSIGN);    [BUGGY] Node rhs = n.getNext(); [BUGGY] VariableLiveness state = isVariableReadBeforeKill(rhs, variable); if (state == VariableLiveness.READ) { return state; } return VariableLiveness.KILL; } else { return VariableLiveness.READ; } }  [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableReadBeforeKill [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness  Node n String variable [VARIABLES] AbstractCompiler compiler boolean Node child n rhs String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5	347	347	4	replace	
26	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] Node n, String variable) { if (NodeUtil.isName(n) && variable.equals(n.getString())) { if (NodeUtil.isLhs(n, n.getParent())) { Preconditions.checkState(n.getParent().getType() == Token.ASSIGN);    [BUGGY] [BUGGY] Node rhs = n.getNext(); VariableLiveness state = isVariableReadBeforeKill(rhs, variable); if (state == VariableLiveness.READ) { return state; } return VariableLiveness.KILL; } else { return VariableLiveness.READ; } }  [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableReadBeforeKill [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness  Node n String variable [VARIABLES] AbstractCompiler compiler boolean Node child n rhs String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5	347	347	4	add	
27	[BUG] [BUGGY] VariableLiveness state = isVariableReadBeforeKill(rhs, variable); [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] Node n, String variable) { if (NodeUtil.isName(n) && variable.equals(n.getString())) { if (NodeUtil.isLhs(n, n.getParent())) { Preconditions.checkState(n.getParent().getType() == Token.ASSIGN);    Node rhs = n.getNext(); [BUGGY] VariableLiveness state = isVariableReadBeforeKill(rhs, variable); [BUGGY] if (state == VariableLiveness.READ) { return state; } return VariableLiveness.KILL; } else { return VariableLiveness.READ; } } switch (n.getType()) { [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableReadBeforeKill [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness  Node n String variable [VARIABLES] AbstractCompiler compiler boolean Node child n rhs String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5	348	348	4	replace	
28	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] Node n, String variable) { if (NodeUtil.isName(n) && variable.equals(n.getString())) { if (NodeUtil.isLhs(n, n.getParent())) { Preconditions.checkState(n.getParent().getType() == Token.ASSIGN);    Node rhs = n.getNext(); [BUGGY] [BUGGY] VariableLiveness state = isVariableReadBeforeKill(rhs, variable); if (state == VariableLiveness.READ) { return state; } return VariableLiveness.KILL; } else { return VariableLiveness.READ; } } switch (n.getType()) { [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableReadBeforeKill [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness  Node n String variable [VARIABLES] AbstractCompiler compiler boolean Node child n rhs String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5	348	348	4	add	
29	[BUG] [BUGGY] if (state == VariableLiveness.READ) { [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] Node n, String variable) { if (NodeUtil.isName(n) && variable.equals(n.getString())) { if (NodeUtil.isLhs(n, n.getParent())) { Preconditions.checkState(n.getParent().getType() == Token.ASSIGN);    Node rhs = n.getNext(); VariableLiveness state = isVariableReadBeforeKill(rhs, variable); [BUGGY] if (state == VariableLiveness.READ) { [BUGGY] return state; } return VariableLiveness.KILL; } else { return VariableLiveness.READ; } } switch (n.getType()) {  [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableReadBeforeKill [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness  Node n String variable [VARIABLES] AbstractCompiler compiler boolean Node child n rhs String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5	349	349	4	replace	
30	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] Node n, String variable) { if (NodeUtil.isName(n) && variable.equals(n.getString())) { if (NodeUtil.isLhs(n, n.getParent())) { Preconditions.checkState(n.getParent().getType() == Token.ASSIGN);    Node rhs = n.getNext(); VariableLiveness state = isVariableReadBeforeKill(rhs, variable); [BUGGY] [BUGGY] if (state == VariableLiveness.READ) { return state; } return VariableLiveness.KILL; } else { return VariableLiveness.READ; } } switch (n.getType()) {  [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableReadBeforeKill [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness  Node n String variable [VARIABLES] AbstractCompiler compiler boolean Node child n rhs String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5	349	349	4	add	
31	[BUG] [BUGGY] switch (n.getType()) { [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] VariableLiveness state = isVariableReadBeforeKill(rhs, variable); if (state == VariableLiveness.READ) { return state; } return VariableLiveness.KILL; } else { return VariableLiveness.READ; } } [BUGGY] switch (n.getType()) { [BUGGY]  case Token.OR: case Token.AND:   case Token.HOOK: return checkHookBranchReadBeforeKill( n.getFirstChild().getNext(), n.getLastChild(), variable); default: [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableReadBeforeKill [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness  Node n String variable [VARIABLES] AbstractCompiler compiler boolean Node child n rhs String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5	358	358	4	replace	
32	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] VariableLiveness state = isVariableReadBeforeKill(rhs, variable); if (state == VariableLiveness.READ) { return state; } return VariableLiveness.KILL; } else { return VariableLiveness.READ; } } [BUGGY] [BUGGY] switch (n.getType()) {  case Token.OR: case Token.AND:   case Token.HOOK: return checkHookBranchReadBeforeKill( n.getFirstChild().getNext(), n.getLastChild(), variable); default: [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableReadBeforeKill [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness  Node n String variable [VARIABLES] AbstractCompiler compiler boolean Node child n rhs String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5	358	358	4	add	
33	[BUG] [BUGGY] return; // Variable not dead. } [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] NodeUtil.isName(rhs) && rhs.getString().equals(var.name) && NodeUtil.isAssign(n)) { n.removeChild(rhs); n.getParent().replaceChild(n, rhs); compiler.reportCodeChange(); return; } if (state.getOut().isLive(var)) { [BUGGY] return; // Variable not dead.  } [BUGGY] } if (state.getIn().isLive(var) && isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {       [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] tryRemoveAssignment [RETURN_TYPE] void  NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler compiler FlowState state boolean Scope scope NodeTraversal t Var var Node c exprRoot lhs n next op parent rhs String name VariableLiveness KILL MAYBE_LIVE READ LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.42640143271122083	215	216	4	replace	
34	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] NodeUtil.isName(rhs) && rhs.getString().equals(var.name) && NodeUtil.isAssign(n)) { n.removeChild(rhs); n.getParent().replaceChild(n, rhs); compiler.reportCodeChange(); return; } if (state.getOut().isLive(var)) { [BUGGY] [BUGGY] return; // Variable not dead.  } } if (state.getIn().isLive(var) && isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {       [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] tryRemoveAssignment [RETURN_TYPE] void  NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler compiler FlowState state boolean Scope scope NodeTraversal t Var var Node c exprRoot lhs n next op parent rhs String name VariableLiveness KILL MAYBE_LIVE READ LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.42640143271122083	215	216	4	add	
35	[BUG] [BUGGY] VariableLiveness state = VariableLiveness.MAYBE_LIVE; [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] Node n, Node exprRoot, String variable) { while (n != exprRoot) { [BUGGY] VariableLiveness state = VariableLiveness.MAYBE_LIVE; [BUGGY] switch (n.getParent().getType()) { case Token.OR: case Token.AND:    case Token.HOOK:   [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean  Node n Node exprRoot String variable [VARIABLES] AbstractCompiler compiler boolean Node exprRoot n sibling String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.41702882811414954	293	293	4	replace	
36	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] Node n, Node exprRoot, String variable) { while (n != exprRoot) { [BUGGY] [BUGGY] VariableLiveness state = VariableLiveness.MAYBE_LIVE; switch (n.getParent().getType()) { case Token.OR: case Token.AND:    case Token.HOOK:   [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean  Node n Node exprRoot String variable [VARIABLES] AbstractCompiler compiler boolean Node exprRoot n sibling String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.41702882811414954	293	293	4	add	
37	[BUG] [BUGGY] switch (n.getParent().getType()) { [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] Node n, Node exprRoot, String variable) { while (n != exprRoot) { VariableLiveness state = VariableLiveness.MAYBE_LIVE; [BUGGY] switch (n.getParent().getType()) { [BUGGY] case Token.OR: case Token.AND:    case Token.HOOK:    [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean  Node n Node exprRoot String variable [VARIABLES] AbstractCompiler compiler boolean Node exprRoot n sibling String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.41702882811414954	294	294	4	replace	
38	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] Node n, Node exprRoot, String variable) { while (n != exprRoot) { VariableLiveness state = VariableLiveness.MAYBE_LIVE; [BUGGY] [BUGGY] switch (n.getParent().getType()) { case Token.OR: case Token.AND:    case Token.HOOK:    [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean  Node n Node exprRoot String variable [VARIABLES] AbstractCompiler compiler boolean Node exprRoot n sibling String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.41702882811414954	294	294	4	add	
39	[BUG] [BUGGY] for(Node sibling = n.getNext(); sibling != null; [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT]    case Token.HOOK:    default: [BUGGY] for(Node sibling = n.getNext(); sibling != null; [BUGGY] sibling = sibling.getNext()) { if (!ControlFlowGraph.isEnteringNewCfgNode(sibling)) { state = isVariableReadBeforeKill(sibling, variable);  if (state == VariableLiveness.READ) { return true; } else if (state == VariableLiveness.KILL) { return false; } [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean  Node n Node exprRoot String variable [VARIABLES] AbstractCompiler compiler boolean Node exprRoot n sibling String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.41702882811414954	307	307	4	replace	
40	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT]    case Token.HOOK:    default: [BUGGY] [BUGGY] for(Node sibling = n.getNext(); sibling != null; sibling = sibling.getNext()) { if (!ControlFlowGraph.isEnteringNewCfgNode(sibling)) { state = isVariableReadBeforeKill(sibling, variable);  if (state == VariableLiveness.READ) { return true; } else if (state == VariableLiveness.KILL) { return false; } [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean  Node n Node exprRoot String variable [VARIABLES] AbstractCompiler compiler boolean Node exprRoot n sibling String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.41702882811414954	307	307	4	add	
41	[BUG] [BUGGY] if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION VariableLiveness state = isVariableReadBeforeKill(child, variable); [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT]   case Token.HOOK: return checkHookBranchReadBeforeKill( n.getFirstChild().getNext(), n.getLastChild(), variable); default:  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) { [BUGGY] if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION   VariableLiveness state = isVariableReadBeforeKill(child, variable); [BUGGY] VariableLiveness state = isVariableReadBeforeKill(child, variable); if (state != VariableLiveness.MAYBE_LIVE) { return state; } } } } return VariableLiveness.MAYBE_LIVE; } [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableReadBeforeKill [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness  Node n String variable [VARIABLES] AbstractCompiler compiler boolean Node child n rhs String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.41602514716892186	372	373	4	replace	
42	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT]   case Token.HOOK: return checkHookBranchReadBeforeKill( n.getFirstChild().getNext(), n.getLastChild(), variable); default:  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) { [BUGGY] [BUGGY] if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION   VariableLiveness state = isVariableReadBeforeKill(child, variable); VariableLiveness state = isVariableReadBeforeKill(child, variable); if (state != VariableLiveness.MAYBE_LIVE) { return state; } } } } return VariableLiveness.MAYBE_LIVE; } [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableReadBeforeKill [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness  Node n String variable [VARIABLES] AbstractCompiler compiler boolean Node child n rhs String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.41602514716892186	372	373	4	add	
43	[BUG] [BUGGY] VariableLiveness state = isVariableReadBeforeKill(child, variable); [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT]  case Token.HOOK: return checkHookBranchReadBeforeKill( n.getFirstChild().getNext(), n.getLastChild(), variable); default:  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) { if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION [BUGGY] VariableLiveness state = isVariableReadBeforeKill(child, variable); [BUGGY] if (state != VariableLiveness.MAYBE_LIVE) { return state; } } } } return VariableLiveness.MAYBE_LIVE; } [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableReadBeforeKill [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness  Node n String variable [VARIABLES] AbstractCompiler compiler boolean Node child n rhs String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.41602514716892186	373	373	4	replace	
44	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT]  case Token.HOOK: return checkHookBranchReadBeforeKill( n.getFirstChild().getNext(), n.getLastChild(), variable); default:  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) { if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION [BUGGY] [BUGGY] VariableLiveness state = isVariableReadBeforeKill(child, variable); if (state != VariableLiveness.MAYBE_LIVE) { return state; } } } } return VariableLiveness.MAYBE_LIVE; } [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableReadBeforeKill [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness  Node n String variable [VARIABLES] AbstractCompiler compiler boolean Node child n rhs String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.41602514716892186	373	373	4	add	
45	[BUG] [BUGGY] if (state != VariableLiveness.MAYBE_LIVE) { [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] case Token.HOOK: return checkHookBranchReadBeforeKill( n.getFirstChild().getNext(), n.getLastChild(), variable); default:  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) { if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION VariableLiveness state = isVariableReadBeforeKill(child, variable); [BUGGY] if (state != VariableLiveness.MAYBE_LIVE) { [BUGGY] return state; } } } } return VariableLiveness.MAYBE_LIVE; } [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableReadBeforeKill [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness  Node n String variable [VARIABLES] AbstractCompiler compiler boolean Node child n rhs String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.41602514716892186	374	374	4	replace	
46	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] case Token.HOOK: return checkHookBranchReadBeforeKill( n.getFirstChild().getNext(), n.getLastChild(), variable); default:  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) { if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION VariableLiveness state = isVariableReadBeforeKill(child, variable); [BUGGY] [BUGGY] if (state != VariableLiveness.MAYBE_LIVE) { return state; } } } } return VariableLiveness.MAYBE_LIVE; } [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableReadBeforeKill [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness  Node n String variable [VARIABLES] AbstractCompiler compiler boolean Node child n rhs String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.41602514716892186	374	374	4	add	
47	[BUG] [BUGGY] return state; [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] return checkHookBranchReadBeforeKill( n.getFirstChild().getNext(), n.getLastChild(), variable); default:  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) { if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION VariableLiveness state = isVariableReadBeforeKill(child, variable); if (state != VariableLiveness.MAYBE_LIVE) { [BUGGY] return state; [BUGGY] } } } } return VariableLiveness.MAYBE_LIVE; } [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableReadBeforeKill [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness  Node n String variable [VARIABLES] AbstractCompiler compiler boolean Node child n rhs String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.41602514716892186	375	375	4	replace	
48	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] return checkHookBranchReadBeforeKill( n.getFirstChild().getNext(), n.getLastChild(), variable); default:  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) { if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION VariableLiveness state = isVariableReadBeforeKill(child, variable); if (state != VariableLiveness.MAYBE_LIVE) { [BUGGY] [BUGGY] return state; } } } } return VariableLiveness.MAYBE_LIVE; } [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableReadBeforeKill [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness  Node n String variable [VARIABLES] AbstractCompiler compiler boolean Node child n rhs String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.41602514716892186	375	375	4	add	
49	[BUG] [BUGGY] return VariableLiveness.MAYBE_LIVE; [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] child != null; child = child.getNext()) { if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION VariableLiveness state = isVariableReadBeforeKill(child, variable); if (state != VariableLiveness.MAYBE_LIVE) { return state; } } } } [BUGGY] return VariableLiveness.MAYBE_LIVE; [BUGGY] } [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableReadBeforeKill [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness  Node n String variable [VARIABLES] AbstractCompiler compiler boolean Node child n rhs String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.41602514716892186	381	381	4	replace	
50	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] child != null; child = child.getNext()) { if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION VariableLiveness state = isVariableReadBeforeKill(child, variable); if (state != VariableLiveness.MAYBE_LIVE) { return state; } } } } [BUGGY] [BUGGY] return VariableLiveness.MAYBE_LIVE; } [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableReadBeforeKill [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness  Node n String variable [VARIABLES] AbstractCompiler compiler boolean Node child n rhs String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.41602514716892186	381	381	4	add	
51	[BUG] [BUGGY] while (n != exprRoot) { [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] Node n, Node exprRoot, String variable) { [BUGGY] while (n != exprRoot) { [BUGGY] VariableLiveness state = VariableLiveness.MAYBE_LIVE; switch (n.getParent().getType()) { case Token.OR: case Token.AND:    case Token.HOOK:  [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean  Node n Node exprRoot String variable [VARIABLES] AbstractCompiler compiler boolean Node exprRoot n sibling String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.4082482904638631	292	292	4	replace	
52	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] Node n, Node exprRoot, String variable) { [BUGGY] [BUGGY] while (n != exprRoot) { VariableLiveness state = VariableLiveness.MAYBE_LIVE; switch (n.getParent().getType()) { case Token.OR: case Token.AND:    case Token.HOOK:  [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean  Node n Node exprRoot String variable [VARIABLES] AbstractCompiler compiler boolean Node exprRoot n sibling String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.4082482904638631	292	292	4	add	
53	[BUG] [BUGGY] for (Node child = n.getFirstChild(); [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] case Token.OR: case Token.AND:   case Token.HOOK: return checkHookBranchReadBeforeKill( n.getFirstChild().getNext(), n.getLastChild(), variable); default:  [BUGGY] for (Node child = n.getFirstChild(); [BUGGY] child != null; child = child.getNext()) { if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION VariableLiveness state = isVariableReadBeforeKill(child, variable); if (state != VariableLiveness.MAYBE_LIVE) { return state; } } } }  [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableReadBeforeKill [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness  Node n String variable [VARIABLES] AbstractCompiler compiler boolean Node child n rhs String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.3872983346207417	370	370	4	replace	
54	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] case Token.OR: case Token.AND:   case Token.HOOK: return checkHookBranchReadBeforeKill( n.getFirstChild().getNext(), n.getLastChild(), variable); default:  [BUGGY] [BUGGY] for (Node child = n.getFirstChild(); child != null; child = child.getNext()) { if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION VariableLiveness state = isVariableReadBeforeKill(child, variable); if (state != VariableLiveness.MAYBE_LIVE) { return state; } } } }  [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableReadBeforeKill [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness  Node n String variable [VARIABLES] AbstractCompiler compiler boolean Node child n rhs String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.3872983346207417	370	370	4	add	
55	[BUG] [BUGGY] child != null; child = child.getNext()) { [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] case Token.AND:   case Token.HOOK: return checkHookBranchReadBeforeKill( n.getFirstChild().getNext(), n.getLastChild(), variable); default:  for (Node child = n.getFirstChild(); [BUGGY] child != null; child = child.getNext()) { [BUGGY] if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION VariableLiveness state = isVariableReadBeforeKill(child, variable); if (state != VariableLiveness.MAYBE_LIVE) { return state; } } } } return VariableLiveness.MAYBE_LIVE; [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableReadBeforeKill [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness  Node n String variable [VARIABLES] AbstractCompiler compiler boolean Node child n rhs String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.3872983346207417	371	371	4	replace	
56	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] case Token.AND:   case Token.HOOK: return checkHookBranchReadBeforeKill( n.getFirstChild().getNext(), n.getLastChild(), variable); default:  for (Node child = n.getFirstChild(); [BUGGY] [BUGGY] child != null; child = child.getNext()) { if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION VariableLiveness state = isVariableReadBeforeKill(child, variable); if (state != VariableLiveness.MAYBE_LIVE) { return state; } } } } return VariableLiveness.MAYBE_LIVE; [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableReadBeforeKill [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness  Node n String variable [VARIABLES] AbstractCompiler compiler boolean Node child n rhs String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.3872983346207417	371	371	4	add	
57	[BUG] [BUGGY] if (n.hasChildren()) { [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] continue; case Token.FOR: if (!NodeUtil.isForIn(n)) { tryRemoveAssignment( t, NodeUtil.getConditionExpression(n), state); } continue; case Token.SWITCH: case Token.CASE: case Token.RETURN: [BUGGY] if (n.hasChildren()) { [BUGGY] tryRemoveAssignment(t, n.getFirstChild(), state); } continue;  } tryRemoveAssignment(t, n, state); } } [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void  NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler compiler DiGraphNode cfgNode FlowState state boolean Iterable nodes NodeTraversal t ControlFlowGraph cfg Node n VariableLiveness KILL MAYBE_LIVE READ LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.375	143	143	4	replace	
58	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] continue; case Token.FOR: if (!NodeUtil.isForIn(n)) { tryRemoveAssignment( t, NodeUtil.getConditionExpression(n), state); } continue; case Token.SWITCH: case Token.CASE: case Token.RETURN: [BUGGY] [BUGGY] if (n.hasChildren()) { tryRemoveAssignment(t, n.getFirstChild(), state); } continue;  } tryRemoveAssignment(t, n, state); } } [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void  NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler compiler DiGraphNode cfgNode FlowState state boolean Iterable nodes NodeTraversal t ControlFlowGraph cfg Node n VariableLiveness KILL MAYBE_LIVE READ LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.375	143	143	4	add	
59	[BUG] [BUGGY] tryRemoveAssignment(t, n.getFirstChild(), state); [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] case Token.FOR: if (!NodeUtil.isForIn(n)) { tryRemoveAssignment( t, NodeUtil.getConditionExpression(n), state); } continue; case Token.SWITCH: case Token.CASE: case Token.RETURN: if (n.hasChildren()) { [BUGGY] tryRemoveAssignment(t, n.getFirstChild(), state); [BUGGY] } continue;  } tryRemoveAssignment(t, n, state); } } [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void  NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler compiler DiGraphNode cfgNode FlowState state boolean Iterable nodes NodeTraversal t ControlFlowGraph cfg Node n VariableLiveness KILL MAYBE_LIVE READ LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.375	144	144	4	replace	
60	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] case Token.FOR: if (!NodeUtil.isForIn(n)) { tryRemoveAssignment( t, NodeUtil.getConditionExpression(n), state); } continue; case Token.SWITCH: case Token.CASE: case Token.RETURN: if (n.hasChildren()) { [BUGGY] [BUGGY] tryRemoveAssignment(t, n.getFirstChild(), state); } continue;  } tryRemoveAssignment(t, n, state); } } [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void  NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler compiler DiGraphNode cfgNode FlowState state boolean Iterable nodes NodeTraversal t ControlFlowGraph cfg Node n VariableLiveness KILL MAYBE_LIVE READ LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.375	144	144	4	add	
61	[BUG] [BUGGY] return checkHookBranchReadBeforeKill( n.getFirstChild().getNext(), n.getLastChild(), variable); [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] } } switch (n.getType()) {  case Token.OR: case Token.AND:   case Token.HOOK: [BUGGY] return checkHookBranchReadBeforeKill(   n.getFirstChild().getNext(), n.getLastChild(), variable); [BUGGY] n.getFirstChild().getNext(), n.getLastChild(), variable); default:  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) { if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION VariableLiveness state = isVariableReadBeforeKill(child, variable); if (state != VariableLiveness.MAYBE_LIVE) { return state; [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableReadBeforeKill [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness  Node n String variable [VARIABLES] AbstractCompiler compiler boolean Node child n rhs String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.35355339059327373	365	366	4	replace	
62	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] } } switch (n.getType()) {  case Token.OR: case Token.AND:   case Token.HOOK: [BUGGY] [BUGGY] return checkHookBranchReadBeforeKill(   n.getFirstChild().getNext(), n.getLastChild(), variable); n.getFirstChild().getNext(), n.getLastChild(), variable); default:  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) { if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION VariableLiveness state = isVariableReadBeforeKill(child, variable); if (state != VariableLiveness.MAYBE_LIVE) { return state; [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableReadBeforeKill [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness  Node n String variable [VARIABLES] AbstractCompiler compiler boolean Node child n rhs String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.35355339059327373	365	366	4	add	
63	[BUG] [BUGGY] VariableLiveness v1 = isVariableReadBeforeKill( trueCase, variable); [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] private VariableLiveness checkHookBranchReadBeforeKill( Node trueCase, Node falseCase, String variable) { [BUGGY] VariableLiveness v1 = isVariableReadBeforeKill(  trueCase, variable); [BUGGY] trueCase, variable); VariableLiveness v2 = isVariableReadBeforeKill( falseCase, variable);    if (v1 == VariableLiveness.READ || v2 == VariableLiveness.READ) { return VariableLiveness.READ; } else if (v1 == VariableLiveness.KILL && v2 == VariableLiveness.KILL) { return VariableLiveness.KILL; [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] checkHookBranchReadBeforeKill [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness  Node trueCase Node falseCase String variable [VARIABLES] AbstractCompiler compiler boolean Node falseCase trueCase String variable VariableLiveness KILL MAYBE_LIVE READ state v1 v2 LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.35355339059327373	386	387	4	replace	
64	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] private VariableLiveness checkHookBranchReadBeforeKill( Node trueCase, Node falseCase, String variable) { [BUGGY] [BUGGY] VariableLiveness v1 = isVariableReadBeforeKill(  trueCase, variable); trueCase, variable); VariableLiveness v2 = isVariableReadBeforeKill( falseCase, variable);    if (v1 == VariableLiveness.READ || v2 == VariableLiveness.READ) { return VariableLiveness.READ; } else if (v1 == VariableLiveness.KILL && v2 == VariableLiveness.KILL) { return VariableLiveness.KILL; [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] checkHookBranchReadBeforeKill [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness  Node trueCase Node falseCase String variable [VARIABLES] AbstractCompiler compiler boolean Node falseCase trueCase String variable VariableLiveness KILL MAYBE_LIVE READ state v1 v2 LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.35355339059327373	386	387	4	add	
65	[BUG] [BUGGY] VariableLiveness v2 = isVariableReadBeforeKill( falseCase, variable); [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] private VariableLiveness checkHookBranchReadBeforeKill( Node trueCase, Node falseCase, String variable) { VariableLiveness v1 = isVariableReadBeforeKill( trueCase, variable); [BUGGY] VariableLiveness v2 = isVariableReadBeforeKill(  falseCase, variable); [BUGGY] falseCase, variable);    if (v1 == VariableLiveness.READ || v2 == VariableLiveness.READ) { return VariableLiveness.READ; } else if (v1 == VariableLiveness.KILL && v2 == VariableLiveness.KILL) { return VariableLiveness.KILL; } else { return VariableLiveness.MAYBE_LIVE; [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] checkHookBranchReadBeforeKill [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness  Node trueCase Node falseCase String variable [VARIABLES] AbstractCompiler compiler boolean Node falseCase trueCase String variable VariableLiveness KILL MAYBE_LIVE READ state v1 v2 LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.35355339059327373	388	389	4	replace	
66	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] private VariableLiveness checkHookBranchReadBeforeKill( Node trueCase, Node falseCase, String variable) { VariableLiveness v1 = isVariableReadBeforeKill( trueCase, variable); [BUGGY] [BUGGY] VariableLiveness v2 = isVariableReadBeforeKill(  falseCase, variable); falseCase, variable);    if (v1 == VariableLiveness.READ || v2 == VariableLiveness.READ) { return VariableLiveness.READ; } else if (v1 == VariableLiveness.KILL && v2 == VariableLiveness.KILL) { return VariableLiveness.KILL; } else { return VariableLiveness.MAYBE_LIVE; [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] checkHookBranchReadBeforeKill [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness  Node trueCase Node falseCase String variable [VARIABLES] AbstractCompiler compiler boolean Node falseCase trueCase String variable VariableLiveness KILL MAYBE_LIVE READ state v1 v2 LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.35355339059327373	388	389	4	add	
67	[BUG] [BUGGY] if (v1 == VariableLiveness.READ || v2 == VariableLiveness.READ) { [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] private VariableLiveness checkHookBranchReadBeforeKill( Node trueCase, Node falseCase, String variable) { VariableLiveness v1 = isVariableReadBeforeKill( trueCase, variable); VariableLiveness v2 = isVariableReadBeforeKill( falseCase, variable);    [BUGGY] if (v1 == VariableLiveness.READ || v2 == VariableLiveness.READ) { [BUGGY] return VariableLiveness.READ; } else if (v1 == VariableLiveness.KILL && v2 == VariableLiveness.KILL) { return VariableLiveness.KILL; } else { return VariableLiveness.MAYBE_LIVE; } } [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] checkHookBranchReadBeforeKill [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness  Node trueCase Node falseCase String variable [VARIABLES] AbstractCompiler compiler boolean Node falseCase trueCase String variable VariableLiveness KILL MAYBE_LIVE READ state v1 v2 LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.35355339059327373	393	393	4	replace	
68	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] private VariableLiveness checkHookBranchReadBeforeKill( Node trueCase, Node falseCase, String variable) { VariableLiveness v1 = isVariableReadBeforeKill( trueCase, variable); VariableLiveness v2 = isVariableReadBeforeKill( falseCase, variable);    [BUGGY] [BUGGY] if (v1 == VariableLiveness.READ || v2 == VariableLiveness.READ) { return VariableLiveness.READ; } else if (v1 == VariableLiveness.KILL && v2 == VariableLiveness.KILL) { return VariableLiveness.KILL; } else { return VariableLiveness.MAYBE_LIVE; } } [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] checkHookBranchReadBeforeKill [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness  Node trueCase Node falseCase String variable [VARIABLES] AbstractCompiler compiler boolean Node falseCase trueCase String variable VariableLiveness KILL MAYBE_LIVE READ state v1 v2 LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.35355339059327373	393	393	4	add	
69	[BUG] [BUGGY] return VariableLiveness.READ; [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] private VariableLiveness checkHookBranchReadBeforeKill( Node trueCase, Node falseCase, String variable) { VariableLiveness v1 = isVariableReadBeforeKill( trueCase, variable); VariableLiveness v2 = isVariableReadBeforeKill( falseCase, variable);    if (v1 == VariableLiveness.READ || v2 == VariableLiveness.READ) { [BUGGY] return VariableLiveness.READ; [BUGGY] } else if (v1 == VariableLiveness.KILL && v2 == VariableLiveness.KILL) { return VariableLiveness.KILL; } else { return VariableLiveness.MAYBE_LIVE; } } [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] checkHookBranchReadBeforeKill [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness  Node trueCase Node falseCase String variable [VARIABLES] AbstractCompiler compiler boolean Node falseCase trueCase String variable VariableLiveness KILL MAYBE_LIVE READ state v1 v2 LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.35355339059327373	394	394	4	replace	
70	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] private VariableLiveness checkHookBranchReadBeforeKill( Node trueCase, Node falseCase, String variable) { VariableLiveness v1 = isVariableReadBeforeKill( trueCase, variable); VariableLiveness v2 = isVariableReadBeforeKill( falseCase, variable);    if (v1 == VariableLiveness.READ || v2 == VariableLiveness.READ) { [BUGGY] [BUGGY] return VariableLiveness.READ; } else if (v1 == VariableLiveness.KILL && v2 == VariableLiveness.KILL) { return VariableLiveness.KILL; } else { return VariableLiveness.MAYBE_LIVE; } } [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] checkHookBranchReadBeforeKill [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness  Node trueCase Node falseCase String variable [VARIABLES] AbstractCompiler compiler boolean Node falseCase trueCase String variable VariableLiveness KILL MAYBE_LIVE READ state v1 v2 LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.35355339059327373	394	394	4	add	
71	[BUG] [BUGGY] if (state.getIn().isLive(var) && isVariableStillLiveWithinExpression(n, exprRoot, var.name)) { [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] n.removeChild(rhs); n.getParent().replaceChild(n, rhs); compiler.reportCodeChange(); return; } if (state.getOut().isLive(var)) { return; // Variable not dead. } [BUGGY] if (state.getIn().isLive(var) &&   isVariableStillLiveWithinExpression(n, exprRoot, var.name)) { [BUGGY] isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {          [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] tryRemoveAssignment [RETURN_TYPE] void  NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler compiler FlowState state boolean Scope scope NodeTraversal t Var var Node c exprRoot lhs n next op parent rhs String name VariableLiveness KILL MAYBE_LIVE READ LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.34299717028501764	218	219	4	replace	
72	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] n.removeChild(rhs); n.getParent().replaceChild(n, rhs); compiler.reportCodeChange(); return; } if (state.getOut().isLive(var)) { return; // Variable not dead. } [BUGGY] [BUGGY] if (state.getIn().isLive(var) &&   isVariableStillLiveWithinExpression(n, exprRoot, var.name)) { isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {          [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] tryRemoveAssignment [RETURN_TYPE] void  NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler compiler FlowState state boolean Scope scope NodeTraversal t Var var Node c exprRoot lhs n next op parent rhs String name VariableLiveness KILL MAYBE_LIVE READ LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.34299717028501764	218	219	4	add	
73	[BUG] [BUGGY] n = n.getParent(); [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT]  if (state == VariableLiveness.READ) { return true; } else if (state == VariableLiveness.KILL) { return false; } } } } [BUGGY] n = n.getParent(); [BUGGY] } return false; } [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean  Node n Node exprRoot String variable [VARIABLES] AbstractCompiler compiler boolean Node exprRoot n sibling String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.3273268353539886	321	321	4	replace	
74	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT]  if (state == VariableLiveness.READ) { return true; } else if (state == VariableLiveness.KILL) { return false; } } } } [BUGGY] [BUGGY] n = n.getParent(); } return false; } [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean  Node n Node exprRoot String variable [VARIABLES] AbstractCompiler compiler boolean Node exprRoot n sibling String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.3273268353539886	321	321	4	add	
75	[BUG] [BUGGY] } [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT]  if (state == VariableLiveness.READ) { return true; } else if (state == VariableLiveness.KILL) { return false; } } } } n = n.getParent(); [BUGGY] } [BUGGY] return false; } [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean  Node n Node exprRoot String variable [VARIABLES] AbstractCompiler compiler boolean Node exprRoot n sibling String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.3273268353539886	322	322	4	replace	
76	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT]  if (state == VariableLiveness.READ) { return true; } else if (state == VariableLiveness.KILL) { return false; } } } } n = n.getParent(); [BUGGY] [BUGGY] } return false; } [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean  Node n Node exprRoot String variable [VARIABLES] AbstractCompiler compiler boolean Node exprRoot n sibling String variable VariableLiveness KILL MAYBE_LIVE READ state LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.3273268353539886	322	322	4	add	
77	[BUG] [BUGGY] if (state.getOut().isLive(var)) { [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] if (rhs != null && NodeUtil.isName(rhs) && rhs.getString().equals(var.name) && NodeUtil.isAssign(n)) { n.removeChild(rhs); n.getParent().replaceChild(n, rhs); compiler.reportCodeChange(); return; } [BUGGY] if (state.getOut().isLive(var)) { [BUGGY] return; // Variable not dead. } if (state.getIn().isLive(var) && isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {      [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] tryRemoveAssignment [RETURN_TYPE] void  NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler compiler FlowState state boolean Scope scope NodeTraversal t Var var Node c exprRoot lhs n next op parent rhs String name VariableLiveness KILL MAYBE_LIVE READ LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.31622776601683794	214	214	4	replace	
78	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] if (rhs != null && NodeUtil.isName(rhs) && rhs.getString().equals(var.name) && NodeUtil.isAssign(n)) { n.removeChild(rhs); n.getParent().replaceChild(n, rhs); compiler.reportCodeChange(); return; } [BUGGY] [BUGGY] if (state.getOut().isLive(var)) { return; // Variable not dead. } if (state.getIn().isLive(var) && isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {      [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] tryRemoveAssignment [RETURN_TYPE] void  NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler compiler FlowState state boolean Scope scope NodeTraversal t Var var Node c exprRoot lhs n next op parent rhs String name VariableLiveness KILL MAYBE_LIVE READ LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.31622776601683794	214	214	4	add	
79	[BUG] [BUGGY] Var var = scope.getVar(name); [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] } Scope scope = t.getScope(); if (!NodeUtil.isName(lhs)) { return; // Not a local variable assignment. } String name = lhs.getString(); if (!scope.isDeclared(name, false)) { return; } [BUGGY] Var var = scope.getVar(name); [BUGGY]  if (liveness.getEscapedLocals().contains(var)) { return; // Local variable that might be escaped due to closures. }    if (rhs != null && NodeUtil.isName(rhs) && [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] tryRemoveAssignment [RETURN_TYPE] void  NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler compiler FlowState state boolean Scope scope NodeTraversal t Var var Node c exprRoot lhs n next op parent rhs String name VariableLiveness KILL MAYBE_LIVE READ LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.3086066999241838	195	195	4	replace	
80	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] } Scope scope = t.getScope(); if (!NodeUtil.isName(lhs)) { return; // Not a local variable assignment. } String name = lhs.getString(); if (!scope.isDeclared(name, false)) { return; } [BUGGY] [BUGGY] Var var = scope.getVar(name); if (liveness.getEscapedLocals().contains(var)) { return; // Local variable that might be escaped due to closures. }    if (rhs != null && NodeUtil.isName(rhs) && [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] tryRemoveAssignment [RETURN_TYPE] void  NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler compiler FlowState state boolean Scope scope NodeTraversal t Var var Node c exprRoot lhs n next op parent rhs String name VariableLiveness KILL MAYBE_LIVE READ LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.3086066999241838	195	195	4	add	
81	[BUG] [BUGGY] if (liveness.getEscapedLocals().contains(var)) { [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] Scope scope = t.getScope(); if (!NodeUtil.isName(lhs)) { return; // Not a local variable assignment. } String name = lhs.getString(); if (!scope.isDeclared(name, false)) { return; } Var var = scope.getVar(name); [BUGGY] if (liveness.getEscapedLocals().contains(var)) { [BUGGY] return; // Local variable that might be escaped due to closures. }    if (rhs != null && NodeUtil.isName(rhs) && rhs.getString().equals(var.name) && NodeUtil.isAssign(n)) { [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] tryRemoveAssignment [RETURN_TYPE] void  NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler compiler FlowState state boolean Scope scope NodeTraversal t Var var Node c exprRoot lhs n next op parent rhs String name VariableLiveness KILL MAYBE_LIVE READ LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.3086066999241838	197	197	4	replace	
82	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] Scope scope = t.getScope(); if (!NodeUtil.isName(lhs)) { return; // Not a local variable assignment. } String name = lhs.getString(); if (!scope.isDeclared(name, false)) { return; } Var var = scope.getVar(name); [BUGGY] [BUGGY] if (liveness.getEscapedLocals().contains(var)) { return; // Local variable that might be escaped due to closures. }    if (rhs != null && NodeUtil.isName(rhs) && rhs.getString().equals(var.name) && NodeUtil.isAssign(n)) { [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] tryRemoveAssignment [RETURN_TYPE] void  NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler compiler FlowState state boolean Scope scope NodeTraversal t Var var Node c exprRoot lhs n next op parent rhs String name VariableLiveness KILL MAYBE_LIVE READ LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.3086066999241838	197	197	4	add	
83	[BUG] [BUGGY] if (rhs != null && NodeUtil.isName(rhs) &&  rhs.getString().equals(var.name) && [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] } Var var = scope.getVar(name); if (liveness.getEscapedLocals().contains(var)) { return; // Local variable that might be escaped due to closures. }    [BUGGY] if (rhs != null &&   NodeUtil.isName(rhs) &&     rhs.getString().equals(var.name) && [BUGGY] NodeUtil.isName(rhs) && rhs.getString().equals(var.name) && NodeUtil.isAssign(n)) { n.removeChild(rhs); n.getParent().replaceChild(n, rhs); compiler.reportCodeChange(); return; } if (state.getOut().isLive(var)) { [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] tryRemoveAssignment [RETURN_TYPE] void  NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler compiler FlowState state boolean Scope scope NodeTraversal t Var var Node c exprRoot lhs n next op parent rhs String name VariableLiveness KILL MAYBE_LIVE READ LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.3086066999241838	204	206	4	replace	
84	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] } Var var = scope.getVar(name); if (liveness.getEscapedLocals().contains(var)) { return; // Local variable that might be escaped due to closures. }    [BUGGY] [BUGGY] if (rhs != null &&   NodeUtil.isName(rhs) &&     rhs.getString().equals(var.name) && NodeUtil.isName(rhs) && rhs.getString().equals(var.name) && NodeUtil.isAssign(n)) { n.removeChild(rhs); n.getParent().replaceChild(n, rhs); compiler.reportCodeChange(); return; } if (state.getOut().isLive(var)) { [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] tryRemoveAssignment [RETURN_TYPE] void  NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler compiler FlowState state boolean Scope scope NodeTraversal t Var var Node c exprRoot lhs n next op parent rhs String name VariableLiveness KILL MAYBE_LIVE READ LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.3086066999241838	204	206	4	add	
85	[BUG] [BUGGY] tryRemoveAssignment(t, rhs, exprRoot, state); [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] if (NodeUtil.isAssignmentOp(n) || n.getType() == Token.INC || n.getType() == Token.DEC) { Node lhs = n.getFirstChild(); Node rhs = lhs.getNext();   if (rhs != null) { [BUGGY] tryRemoveAssignment(t, rhs, exprRoot, state); [BUGGY] rhs = lhs.getNext(); } Scope scope = t.getScope(); if (!NodeUtil.isName(lhs)) { return; // Not a local variable assignment. } String name = lhs.getString(); if (!scope.isDeclared(name, false)) { return; [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] tryRemoveAssignment [RETURN_TYPE] void  NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler compiler FlowState state boolean Scope scope NodeTraversal t Var var Node c exprRoot lhs n next op parent rhs String name VariableLiveness KILL MAYBE_LIVE READ LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.30499714066520933	183	183	4	replace	
86	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] if (NodeUtil.isAssignmentOp(n) || n.getType() == Token.INC || n.getType() == Token.DEC) { Node lhs = n.getFirstChild(); Node rhs = lhs.getNext();   if (rhs != null) { [BUGGY] [BUGGY] tryRemoveAssignment(t, rhs, exprRoot, state); rhs = lhs.getNext(); } Scope scope = t.getScope(); if (!NodeUtil.isName(lhs)) { return; // Not a local variable assignment. } String name = lhs.getString(); if (!scope.isDeclared(name, false)) { return; [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] tryRemoveAssignment [RETURN_TYPE] void  NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler compiler FlowState state boolean Scope scope NodeTraversal t Var var Node c exprRoot lhs n next op parent rhs String name VariableLiveness KILL MAYBE_LIVE READ LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.30499714066520933	183	183	4	add	
87	[BUG] [BUGGY] rhs = lhs.getNext(); [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] if (NodeUtil.isAssignmentOp(n) || n.getType() == Token.INC || n.getType() == Token.DEC) { Node lhs = n.getFirstChild(); Node rhs = lhs.getNext();   if (rhs != null) { tryRemoveAssignment(t, rhs, exprRoot, state); [BUGGY] rhs = lhs.getNext(); [BUGGY] } Scope scope = t.getScope(); if (!NodeUtil.isName(lhs)) { return; // Not a local variable assignment. } String name = lhs.getString(); if (!scope.isDeclared(name, false)) { return; } [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] tryRemoveAssignment [RETURN_TYPE] void  NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler compiler FlowState state boolean Scope scope NodeTraversal t Var var Node c exprRoot lhs n next op parent rhs String name VariableLiveness KILL MAYBE_LIVE READ LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.30499714066520933	184	184	4	replace	
88	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] if (NodeUtil.isAssignmentOp(n) || n.getType() == Token.INC || n.getType() == Token.DEC) { Node lhs = n.getFirstChild(); Node rhs = lhs.getNext();   if (rhs != null) { tryRemoveAssignment(t, rhs, exprRoot, state); [BUGGY] [BUGGY] rhs = lhs.getNext(); } Scope scope = t.getScope(); if (!NodeUtil.isName(lhs)) { return; // Not a local variable assignment. } String name = lhs.getString(); if (!scope.isDeclared(name, false)) { return; } [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] tryRemoveAssignment [RETURN_TYPE] void  NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler compiler FlowState state boolean Scope scope NodeTraversal t Var var Node c exprRoot lhs n next op parent rhs String name VariableLiveness KILL MAYBE_LIVE READ LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.30499714066520933	184	184	4	add	
89	[BUG] [BUGGY] ControlFlowGraph<Node> cfg = t.getControlFlowGraph(); [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] }   if (!NodeUtil.has(fnBlock, matchRemovableAssigns, Predicates.<Node>alwaysTrue())) { return; }  [BUGGY] ControlFlowGraph<Node> cfg = t.getControlFlowGraph(); [BUGGY] liveness = new LiveVariablesAnalysis(cfg, scope, compiler); liveness.analyze(); tryRemoveDeadAssignments(t, cfg); } [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] AbstractCompiler compiler boolean Scope scope NodeTraversal t Node fnBlock ControlFlowGraph cfg VariableLiveness KILL MAYBE_LIVE READ LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.30151134457776363	95	95	4	replace	
90	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] }   if (!NodeUtil.has(fnBlock, matchRemovableAssigns, Predicates.<Node>alwaysTrue())) { return; }  [BUGGY] [BUGGY] ControlFlowGraph<Node> cfg = t.getControlFlowGraph(); liveness = new LiveVariablesAnalysis(cfg, scope, compiler); liveness.analyze(); tryRemoveDeadAssignments(t, cfg); } [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] AbstractCompiler compiler boolean Scope scope NodeTraversal t Node fnBlock ControlFlowGraph cfg VariableLiveness KILL MAYBE_LIVE READ LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.30151134457776363	95	95	4	add	
91	[BUG] [BUGGY] liveness = new LiveVariablesAnalysis(cfg, scope, compiler); [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT]   if (!NodeUtil.has(fnBlock, matchRemovableAssigns, Predicates.<Node>alwaysTrue())) { return; }  ControlFlowGraph<Node> cfg = t.getControlFlowGraph(); [BUGGY] liveness = new LiveVariablesAnalysis(cfg, scope, compiler); [BUGGY] liveness.analyze(); tryRemoveDeadAssignments(t, cfg); } [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] AbstractCompiler compiler boolean Scope scope NodeTraversal t Node fnBlock ControlFlowGraph cfg VariableLiveness KILL MAYBE_LIVE READ LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.30151134457776363	96	96	4	replace	
92	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT]   if (!NodeUtil.has(fnBlock, matchRemovableAssigns, Predicates.<Node>alwaysTrue())) { return; }  ControlFlowGraph<Node> cfg = t.getControlFlowGraph(); [BUGGY] [BUGGY] liveness = new LiveVariablesAnalysis(cfg, scope, compiler); liveness.analyze(); tryRemoveDeadAssignments(t, cfg); } [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] AbstractCompiler compiler boolean Scope scope NodeTraversal t Node fnBlock ControlFlowGraph cfg VariableLiveness KILL MAYBE_LIVE READ LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.30151134457776363	96	96	4	add	
93	[BUG] [BUGGY] liveness.analyze(); [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT]   if (!NodeUtil.has(fnBlock, matchRemovableAssigns, Predicates.<Node>alwaysTrue())) { return; }  ControlFlowGraph<Node> cfg = t.getControlFlowGraph(); liveness = new LiveVariablesAnalysis(cfg, scope, compiler); [BUGGY] liveness.analyze(); [BUGGY] tryRemoveDeadAssignments(t, cfg); } [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] AbstractCompiler compiler boolean Scope scope NodeTraversal t Node fnBlock ControlFlowGraph cfg VariableLiveness KILL MAYBE_LIVE READ LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.30151134457776363	97	97	4	replace	
94	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT]   if (!NodeUtil.has(fnBlock, matchRemovableAssigns, Predicates.<Node>alwaysTrue())) { return; }  ControlFlowGraph<Node> cfg = t.getControlFlowGraph(); liveness = new LiveVariablesAnalysis(cfg, scope, compiler); [BUGGY] [BUGGY] liveness.analyze(); tryRemoveDeadAssignments(t, cfg); } [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] AbstractCompiler compiler boolean Scope scope NodeTraversal t Node fnBlock ControlFlowGraph cfg VariableLiveness KILL MAYBE_LIVE READ LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.30151134457776363	97	97	4	add	
95	[BUG] [BUGGY] tryRemoveDeadAssignments(t, cfg); [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT]  if (!NodeUtil.has(fnBlock, matchRemovableAssigns, Predicates.<Node>alwaysTrue())) { return; }  ControlFlowGraph<Node> cfg = t.getControlFlowGraph(); liveness = new LiveVariablesAnalysis(cfg, scope, compiler); liveness.analyze(); [BUGGY] tryRemoveDeadAssignments(t, cfg); [BUGGY] } [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] AbstractCompiler compiler boolean Scope scope NodeTraversal t Node fnBlock ControlFlowGraph cfg VariableLiveness KILL MAYBE_LIVE READ LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.30151134457776363	98	98	4	replace	
96	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT]  if (!NodeUtil.has(fnBlock, matchRemovableAssigns, Predicates.<Node>alwaysTrue())) { return; }  ControlFlowGraph<Node> cfg = t.getControlFlowGraph(); liveness = new LiveVariablesAnalysis(cfg, scope, compiler); liveness.analyze(); [BUGGY] [BUGGY] tryRemoveDeadAssignments(t, cfg); } [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] AbstractCompiler compiler boolean Scope scope NodeTraversal t Node fnBlock ControlFlowGraph cfg VariableLiveness KILL MAYBE_LIVE READ LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.30151134457776363	98	98	4	add	
97	[BUG] [BUGGY] } [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] if (!NodeUtil.has(fnBlock, matchRemovableAssigns, Predicates.<Node>alwaysTrue())) { return; }  ControlFlowGraph<Node> cfg = t.getControlFlowGraph(); liveness = new LiveVariablesAnalysis(cfg, scope, compiler); liveness.analyze(); tryRemoveDeadAssignments(t, cfg); [BUGGY] } [BUGGY]  [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] AbstractCompiler compiler boolean Scope scope NodeTraversal t Node fnBlock ControlFlowGraph cfg VariableLiveness KILL MAYBE_LIVE READ LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.30151134457776363	99	99	4	replace	
98	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] if (!NodeUtil.has(fnBlock, matchRemovableAssigns, Predicates.<Node>alwaysTrue())) { return; }  ControlFlowGraph<Node> cfg = t.getControlFlowGraph(); liveness = new LiveVariablesAnalysis(cfg, scope, compiler); liveness.analyze(); tryRemoveDeadAssignments(t, cfg); [BUGGY] [BUGGY] } [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] AbstractCompiler compiler boolean Scope scope NodeTraversal t Node fnBlock ControlFlowGraph cfg VariableLiveness KILL MAYBE_LIVE READ LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.30151134457776363	99	99	4	add	
99	[BUG] [BUGGY] Iterable<DiGraphNode<Node, Branch>> nodes = cfg.getDirectedGraphNodes(); [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] ControlFlowGraph<Node> cfg) { [BUGGY] Iterable<DiGraphNode<Node, Branch>> nodes = cfg.getDirectedGraphNodes(); [BUGGY]  for (DiGraphNode<Node, Branch> cfgNode : nodes) { FlowState<LiveVariableLattice> state = cfgNode.getAnnotation(); Node n = cfgNode.getValue(); if (n == null) { continue; } switch (n.getType()) { case Token.IF: [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void  NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler compiler DiGraphNode cfgNode FlowState state boolean Iterable nodes NodeTraversal t ControlFlowGraph cfg Node n VariableLiveness KILL MAYBE_LIVE READ LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.30151134457776363	119	119	4	replace	
100	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function FUNC(param1 [CONTEXT] ControlFlowGraph<Node> cfg) { [BUGGY] [BUGGY] Iterable<DiGraphNode<Node, Branch>> nodes = cfg.getDirectedGraphNodes(); for (DiGraphNode<Node, Branch> cfgNode : nodes) { FlowState<LiveVariableLattice> state = cfgNode.getAnnotation(); Node n = cfgNode.getValue(); if (n == null) { continue; } switch (n.getType()) { case Token.IF: [CLASS] DeadAssignmentsElimination 1 VariableLiveness [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void  NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler compiler DiGraphNode cfgNode FlowState state boolean Iterable nodes NodeTraversal t ControlFlowGraph cfg Node n VariableLiveness KILL MAYBE_LIVE READ LiveVariablesAnalysis liveness Predicate matchRemovableAssigns  	projects/Closure76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.30151134457776363	119	119	4	add	
