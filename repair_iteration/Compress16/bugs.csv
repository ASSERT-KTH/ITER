bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader)); [FE] AssertionError [CONTEXT] final byte[] tarheader = new byte[512]; in.mark(tarheader.length); signatureLength = in.read(tarheader); in.reset(); if (TarArchiveInputStream.matches(tarheader, signatureLength)) { return new TarArchiveInputStream(in); }  if (signatureLength >= 512) { try { [BUGGY] TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader)); [BUGGY]  tais.getNextEntry(); return new TarArchiveInputStream(in); } catch (Exception e) { // NOPMD     } } [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR CPIO DUMP JAR TAR ZIP archiverName IOException e int signatureLength Exception e  	projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	242	242	1	replace	
2	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final byte[] tarheader = new byte[512]; in.mark(tarheader.length); signatureLength = in.read(tarheader); in.reset(); if (TarArchiveInputStream.matches(tarheader, signatureLength)) { return new TarArchiveInputStream(in); }  if (signatureLength >= 512) { try { [BUGGY] [BUGGY] TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));  tais.getNextEntry(); return new TarArchiveInputStream(in); } catch (Exception e) { // NOPMD     } } [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR CPIO DUMP JAR TAR ZIP archiverName IOException e int signatureLength Exception e  	projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	242	242	1	add	
3	[BUG] [BUGGY] tais.getNextEntry(); [FE] AssertionError [CONTEXT] signatureLength = in.read(tarheader); in.reset(); if (TarArchiveInputStream.matches(tarheader, signatureLength)) { return new TarArchiveInputStream(in); }  if (signatureLength >= 512) { try { TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));  [BUGGY] tais.getNextEntry(); [BUGGY] return new TarArchiveInputStream(in); } catch (Exception e) { // NOPMD     } } } catch (IOException e) { throw new ArchiveException("Could not use reset and mark operations.", e); [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR CPIO DUMP JAR TAR ZIP archiverName IOException e int signatureLength Exception e  	projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	244	244	1	replace	
4	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] signatureLength = in.read(tarheader); in.reset(); if (TarArchiveInputStream.matches(tarheader, signatureLength)) { return new TarArchiveInputStream(in); }  if (signatureLength >= 512) { try { TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));  [BUGGY] [BUGGY] tais.getNextEntry(); return new TarArchiveInputStream(in); } catch (Exception e) { // NOPMD     } } } catch (IOException e) { throw new ArchiveException("Could not use reset and mark operations.", e); [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR CPIO DUMP JAR TAR ZIP archiverName IOException e int signatureLength Exception e  	projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	244	244	1	add	
5	[BUG] [BUGGY] return new TarArchiveInputStream(in); [FE] AssertionError [CONTEXT] in.reset(); if (TarArchiveInputStream.matches(tarheader, signatureLength)) { return new TarArchiveInputStream(in); }  if (signatureLength >= 512) { try { TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));  tais.getNextEntry(); [BUGGY] return new TarArchiveInputStream(in); [BUGGY] } catch (Exception e) { // NOPMD     } } } catch (IOException e) { throw new ArchiveException("Could not use reset and mark operations.", e); } [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR CPIO DUMP JAR TAR ZIP archiverName IOException e int signatureLength Exception e  	projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	245	245	1	replace	
6	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] in.reset(); if (TarArchiveInputStream.matches(tarheader, signatureLength)) { return new TarArchiveInputStream(in); }  if (signatureLength >= 512) { try { TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));  tais.getNextEntry(); [BUGGY] [BUGGY] return new TarArchiveInputStream(in); } catch (Exception e) { // NOPMD     } } } catch (IOException e) { throw new ArchiveException("Could not use reset and mark operations.", e); } [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR CPIO DUMP JAR TAR ZIP archiverName IOException e int signatureLength Exception e  	projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	245	245	1	add	
8	[BUG] [BUGGY] if (in == null) { [FE] AssertionError [CONTEXT] throws ArchiveException { [BUGGY] if (in == null) { [BUGGY] throw new IllegalArgumentException("Stream must not be null."); } if (!in.markSupported()) { throw new IllegalArgumentException("Mark is not supported."); } final byte[] signature = new byte[12]; in.mark(signature.length); try { [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR CPIO DUMP JAR TAR ZIP archiverName IOException e int signatureLength Exception e  	projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.7071067811865475	199	199	1	replace	
9	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws ArchiveException { [BUGGY] [BUGGY] if (in == null) { throw new IllegalArgumentException("Stream must not be null."); } if (!in.markSupported()) { throw new IllegalArgumentException("Mark is not supported."); } final byte[] signature = new byte[12]; in.mark(signature.length); try { [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR CPIO DUMP JAR TAR ZIP archiverName IOException e int signatureLength Exception e  	projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.7071067811865475	199	199	1	add	
10	[BUG] [BUGGY] if (!in.markSupported()) { [FE] AssertionError [CONTEXT] throws ArchiveException { if (in == null) { throw new IllegalArgumentException("Stream must not be null."); } [BUGGY] if (!in.markSupported()) { [BUGGY] throw new IllegalArgumentException("Mark is not supported."); } final byte[] signature = new byte[12]; in.mark(signature.length); try { int signatureLength = in.read(signature); in.reset(); if (ZipArchiveInputStream.matches(signature, signatureLength)) { return new ZipArchiveInputStream(in); [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR CPIO DUMP JAR TAR ZIP archiverName IOException e int signatureLength Exception e  	projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.7071067811865475	203	203	1	replace	
11	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws ArchiveException { if (in == null) { throw new IllegalArgumentException("Stream must not be null."); } [BUGGY] [BUGGY] if (!in.markSupported()) { throw new IllegalArgumentException("Mark is not supported."); } final byte[] signature = new byte[12]; in.mark(signature.length); try { int signatureLength = in.read(signature); in.reset(); if (ZipArchiveInputStream.matches(signature, signatureLength)) { return new ZipArchiveInputStream(in); [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR CPIO DUMP JAR TAR ZIP archiverName IOException e int signatureLength Exception e  	projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.7071067811865475	203	203	1	add	
12	[BUG] [BUGGY] final byte[] signature = new byte[12]; [FE] AssertionError [CONTEXT] throws ArchiveException { if (in == null) { throw new IllegalArgumentException("Stream must not be null."); } if (!in.markSupported()) { throw new IllegalArgumentException("Mark is not supported."); } [BUGGY] final byte[] signature = new byte[12]; [BUGGY] in.mark(signature.length); try { int signatureLength = in.read(signature); in.reset(); if (ZipArchiveInputStream.matches(signature, signatureLength)) { return new ZipArchiveInputStream(in); } else if (JarArchiveInputStream.matches(signature, signatureLength)) { return new JarArchiveInputStream(in); } else if (ArArchiveInputStream.matches(signature, signatureLength)) { return new ArArchiveInputStream(in); [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR CPIO DUMP JAR TAR ZIP archiverName IOException e int signatureLength Exception e  	projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.7071067811865475	207	207	1	replace	
13	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws ArchiveException { if (in == null) { throw new IllegalArgumentException("Stream must not be null."); } if (!in.markSupported()) { throw new IllegalArgumentException("Mark is not supported."); } [BUGGY] [BUGGY] final byte[] signature = new byte[12]; in.mark(signature.length); try { int signatureLength = in.read(signature); in.reset(); if (ZipArchiveInputStream.matches(signature, signatureLength)) { return new ZipArchiveInputStream(in); } else if (JarArchiveInputStream.matches(signature, signatureLength)) { return new JarArchiveInputStream(in); } else if (ArArchiveInputStream.matches(signature, signatureLength)) { return new ArArchiveInputStream(in); [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR CPIO DUMP JAR TAR ZIP archiverName IOException e int signatureLength Exception e  	projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.7071067811865475	207	207	1	add	
14	[BUG] [BUGGY] in.mark(signature.length); [FE] AssertionError [CONTEXT] throws ArchiveException { if (in == null) { throw new IllegalArgumentException("Stream must not be null."); } if (!in.markSupported()) { throw new IllegalArgumentException("Mark is not supported."); } final byte[] signature = new byte[12]; [BUGGY] in.mark(signature.length); [BUGGY] try { int signatureLength = in.read(signature); in.reset(); if (ZipArchiveInputStream.matches(signature, signatureLength)) { return new ZipArchiveInputStream(in); } else if (JarArchiveInputStream.matches(signature, signatureLength)) { return new JarArchiveInputStream(in); } else if (ArArchiveInputStream.matches(signature, signatureLength)) { return new ArArchiveInputStream(in); } else if (CpioArchiveInputStream.matches(signature, signatureLength)) { [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR CPIO DUMP JAR TAR ZIP archiverName IOException e int signatureLength Exception e  	projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.7071067811865475	208	208	1	replace	
15	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws ArchiveException { if (in == null) { throw new IllegalArgumentException("Stream must not be null."); } if (!in.markSupported()) { throw new IllegalArgumentException("Mark is not supported."); } final byte[] signature = new byte[12]; [BUGGY] [BUGGY] in.mark(signature.length); try { int signatureLength = in.read(signature); in.reset(); if (ZipArchiveInputStream.matches(signature, signatureLength)) { return new ZipArchiveInputStream(in); } else if (JarArchiveInputStream.matches(signature, signatureLength)) { return new JarArchiveInputStream(in); } else if (ArArchiveInputStream.matches(signature, signatureLength)) { return new ArArchiveInputStream(in); } else if (CpioArchiveInputStream.matches(signature, signatureLength)) { [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR CPIO DUMP JAR TAR ZIP archiverName IOException e int signatureLength Exception e  	projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.7071067811865475	208	208	1	add	
16	[BUG] [BUGGY] int signatureLength = in.read(signature); [FE] AssertionError [CONTEXT] throw new IllegalArgumentException("Stream must not be null."); } if (!in.markSupported()) { throw new IllegalArgumentException("Mark is not supported."); } final byte[] signature = new byte[12]; in.mark(signature.length); try { [BUGGY] int signatureLength = in.read(signature); [BUGGY] in.reset(); if (ZipArchiveInputStream.matches(signature, signatureLength)) { return new ZipArchiveInputStream(in); } else if (JarArchiveInputStream.matches(signature, signatureLength)) { return new JarArchiveInputStream(in); } else if (ArArchiveInputStream.matches(signature, signatureLength)) { return new ArArchiveInputStream(in); } else if (CpioArchiveInputStream.matches(signature, signatureLength)) { return new CpioArchiveInputStream(in); } [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR CPIO DUMP JAR TAR ZIP archiverName IOException e int signatureLength Exception e  	projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.7071067811865475	210	210	1	replace	
17	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throw new IllegalArgumentException("Stream must not be null."); } if (!in.markSupported()) { throw new IllegalArgumentException("Mark is not supported."); } final byte[] signature = new byte[12]; in.mark(signature.length); try { [BUGGY] [BUGGY] int signatureLength = in.read(signature); in.reset(); if (ZipArchiveInputStream.matches(signature, signatureLength)) { return new ZipArchiveInputStream(in); } else if (JarArchiveInputStream.matches(signature, signatureLength)) { return new JarArchiveInputStream(in); } else if (ArArchiveInputStream.matches(signature, signatureLength)) { return new ArArchiveInputStream(in); } else if (CpioArchiveInputStream.matches(signature, signatureLength)) { return new CpioArchiveInputStream(in); } [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR CPIO DUMP JAR TAR ZIP archiverName IOException e int signatureLength Exception e  	projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.7071067811865475	210	210	1	add	
18	[BUG] [BUGGY] in.reset(); [FE] AssertionError [CONTEXT] } if (!in.markSupported()) { throw new IllegalArgumentException("Mark is not supported."); } final byte[] signature = new byte[12]; in.mark(signature.length); try { int signatureLength = in.read(signature); [BUGGY] in.reset(); [BUGGY] if (ZipArchiveInputStream.matches(signature, signatureLength)) { return new ZipArchiveInputStream(in); } else if (JarArchiveInputStream.matches(signature, signatureLength)) { return new JarArchiveInputStream(in); } else if (ArArchiveInputStream.matches(signature, signatureLength)) { return new ArArchiveInputStream(in); } else if (CpioArchiveInputStream.matches(signature, signatureLength)) { return new CpioArchiveInputStream(in); }  [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR CPIO DUMP JAR TAR ZIP archiverName IOException e int signatureLength Exception e  	projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.7071067811865475	211	211	1	replace	
19	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } if (!in.markSupported()) { throw new IllegalArgumentException("Mark is not supported."); } final byte[] signature = new byte[12]; in.mark(signature.length); try { int signatureLength = in.read(signature); [BUGGY] [BUGGY] in.reset(); if (ZipArchiveInputStream.matches(signature, signatureLength)) { return new ZipArchiveInputStream(in); } else if (JarArchiveInputStream.matches(signature, signatureLength)) { return new JarArchiveInputStream(in); } else if (ArArchiveInputStream.matches(signature, signatureLength)) { return new ArArchiveInputStream(in); } else if (CpioArchiveInputStream.matches(signature, signatureLength)) { return new CpioArchiveInputStream(in); }  [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR CPIO DUMP JAR TAR ZIP archiverName IOException e int signatureLength Exception e  	projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.7071067811865475	211	211	1	add	
20	[BUG] [BUGGY] if (ZipArchiveInputStream.matches(signature, signatureLength)) { [FE] AssertionError [CONTEXT] if (!in.markSupported()) { throw new IllegalArgumentException("Mark is not supported."); } final byte[] signature = new byte[12]; in.mark(signature.length); try { int signatureLength = in.read(signature); in.reset(); [BUGGY] if (ZipArchiveInputStream.matches(signature, signatureLength)) { [BUGGY] return new ZipArchiveInputStream(in); } else if (JarArchiveInputStream.matches(signature, signatureLength)) { return new JarArchiveInputStream(in); } else if (ArArchiveInputStream.matches(signature, signatureLength)) { return new ArArchiveInputStream(in); } else if (CpioArchiveInputStream.matches(signature, signatureLength)) { return new CpioArchiveInputStream(in); }   [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR CPIO DUMP JAR TAR ZIP archiverName IOException e int signatureLength Exception e  	projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.7071067811865475	212	212	1	replace	
21	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (!in.markSupported()) { throw new IllegalArgumentException("Mark is not supported."); } final byte[] signature = new byte[12]; in.mark(signature.length); try { int signatureLength = in.read(signature); in.reset(); [BUGGY] [BUGGY] if (ZipArchiveInputStream.matches(signature, signatureLength)) { return new ZipArchiveInputStream(in); } else if (JarArchiveInputStream.matches(signature, signatureLength)) { return new JarArchiveInputStream(in); } else if (ArArchiveInputStream.matches(signature, signatureLength)) { return new ArArchiveInputStream(in); } else if (CpioArchiveInputStream.matches(signature, signatureLength)) { return new CpioArchiveInputStream(in); }   [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR CPIO DUMP JAR TAR ZIP archiverName IOException e int signatureLength Exception e  	projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.7071067811865475	212	212	1	add	
22	[BUG] [BUGGY] } else if (JarArchiveInputStream.matches(signature, signatureLength)) { [FE] AssertionError [CONTEXT] throw new IllegalArgumentException("Mark is not supported."); } final byte[] signature = new byte[12]; in.mark(signature.length); try { int signatureLength = in.read(signature); in.reset(); if (ZipArchiveInputStream.matches(signature, signatureLength)) { return new ZipArchiveInputStream(in); [BUGGY] } else if (JarArchiveInputStream.matches(signature, signatureLength)) { [BUGGY] return new JarArchiveInputStream(in); } else if (ArArchiveInputStream.matches(signature, signatureLength)) { return new ArArchiveInputStream(in); } else if (CpioArchiveInputStream.matches(signature, signatureLength)) { return new CpioArchiveInputStream(in); }  final byte[] dumpsig = new byte[32]; in.mark(dumpsig.length); [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR CPIO DUMP JAR TAR ZIP archiverName IOException e int signatureLength Exception e  	projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.7071067811865475	214	214	1	replace	
23	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throw new IllegalArgumentException("Mark is not supported."); } final byte[] signature = new byte[12]; in.mark(signature.length); try { int signatureLength = in.read(signature); in.reset(); if (ZipArchiveInputStream.matches(signature, signatureLength)) { return new ZipArchiveInputStream(in); [BUGGY] [BUGGY] } else if (JarArchiveInputStream.matches(signature, signatureLength)) { return new JarArchiveInputStream(in); } else if (ArArchiveInputStream.matches(signature, signatureLength)) { return new ArArchiveInputStream(in); } else if (CpioArchiveInputStream.matches(signature, signatureLength)) { return new CpioArchiveInputStream(in); }  final byte[] dumpsig = new byte[32]; in.mark(dumpsig.length); [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR CPIO DUMP JAR TAR ZIP archiverName IOException e int signatureLength Exception e  	projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.7071067811865475	214	214	1	add	
24	[BUG] [BUGGY] } else if (ArArchiveInputStream.matches(signature, signatureLength)) { [FE] AssertionError [CONTEXT] final byte[] signature = new byte[12]; in.mark(signature.length); try { int signatureLength = in.read(signature); in.reset(); if (ZipArchiveInputStream.matches(signature, signatureLength)) { return new ZipArchiveInputStream(in); } else if (JarArchiveInputStream.matches(signature, signatureLength)) { return new JarArchiveInputStream(in); [BUGGY] } else if (ArArchiveInputStream.matches(signature, signatureLength)) { [BUGGY] return new ArArchiveInputStream(in); } else if (CpioArchiveInputStream.matches(signature, signatureLength)) { return new CpioArchiveInputStream(in); }  final byte[] dumpsig = new byte[32]; in.mark(dumpsig.length); signatureLength = in.read(dumpsig); in.reset(); [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR CPIO DUMP JAR TAR ZIP archiverName IOException e int signatureLength Exception e  	projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.7071067811865475	216	216	1	replace	
25	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final byte[] signature = new byte[12]; in.mark(signature.length); try { int signatureLength = in.read(signature); in.reset(); if (ZipArchiveInputStream.matches(signature, signatureLength)) { return new ZipArchiveInputStream(in); } else if (JarArchiveInputStream.matches(signature, signatureLength)) { return new JarArchiveInputStream(in); [BUGGY] [BUGGY] } else if (ArArchiveInputStream.matches(signature, signatureLength)) { return new ArArchiveInputStream(in); } else if (CpioArchiveInputStream.matches(signature, signatureLength)) { return new CpioArchiveInputStream(in); }  final byte[] dumpsig = new byte[32]; in.mark(dumpsig.length); signatureLength = in.read(dumpsig); in.reset(); [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR CPIO DUMP JAR TAR ZIP archiverName IOException e int signatureLength Exception e  	projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.7071067811865475	216	216	1	add	
26	[BUG] [BUGGY] } else if (CpioArchiveInputStream.matches(signature, signatureLength)) { [FE] AssertionError [CONTEXT] in.mark(signature.length); try { int signatureLength = in.read(signature); in.reset(); if (ZipArchiveInputStream.matches(signature, signatureLength)) { return new ZipArchiveInputStream(in); } else if (JarArchiveInputStream.matches(signature, signatureLength)) { return new JarArchiveInputStream(in); } else if (ArArchiveInputStream.matches(signature, signatureLength)) { return new ArArchiveInputStream(in); [BUGGY] } else if (CpioArchiveInputStream.matches(signature, signatureLength)) { [BUGGY] return new CpioArchiveInputStream(in); }  final byte[] dumpsig = new byte[32]; in.mark(dumpsig.length); signatureLength = in.read(dumpsig); in.reset(); if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) { return new DumpArchiveInputStream(in); [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR CPIO DUMP JAR TAR ZIP archiverName IOException e int signatureLength Exception e  	projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.7071067811865475	218	218	1	replace	
27	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] in.mark(signature.length); try { int signatureLength = in.read(signature); in.reset(); if (ZipArchiveInputStream.matches(signature, signatureLength)) { return new ZipArchiveInputStream(in); } else if (JarArchiveInputStream.matches(signature, signatureLength)) { return new JarArchiveInputStream(in); } else if (ArArchiveInputStream.matches(signature, signatureLength)) { return new ArArchiveInputStream(in); [BUGGY] [BUGGY] } else if (CpioArchiveInputStream.matches(signature, signatureLength)) { return new CpioArchiveInputStream(in); }  final byte[] dumpsig = new byte[32]; in.mark(dumpsig.length); signatureLength = in.read(dumpsig); in.reset(); if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) { return new DumpArchiveInputStream(in); [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR CPIO DUMP JAR TAR ZIP archiverName IOException e int signatureLength Exception e  	projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.7071067811865475	218	218	1	add	
28	[BUG] [BUGGY] final byte[] dumpsig = new byte[32]; [FE] AssertionError [CONTEXT] return new ZipArchiveInputStream(in); } else if (JarArchiveInputStream.matches(signature, signatureLength)) { return new JarArchiveInputStream(in); } else if (ArArchiveInputStream.matches(signature, signatureLength)) { return new ArArchiveInputStream(in); } else if (CpioArchiveInputStream.matches(signature, signatureLength)) { return new CpioArchiveInputStream(in); }  [BUGGY] final byte[] dumpsig = new byte[32]; [BUGGY] in.mark(dumpsig.length); signatureLength = in.read(dumpsig); in.reset(); if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) { return new DumpArchiveInputStream(in); }  final byte[] tarheader = new byte[512]; in.mark(tarheader.length); [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR CPIO DUMP JAR TAR ZIP archiverName IOException e int signatureLength Exception e  	projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.7071067811865475	223	223	1	replace	
29	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] return new ZipArchiveInputStream(in); } else if (JarArchiveInputStream.matches(signature, signatureLength)) { return new JarArchiveInputStream(in); } else if (ArArchiveInputStream.matches(signature, signatureLength)) { return new ArArchiveInputStream(in); } else if (CpioArchiveInputStream.matches(signature, signatureLength)) { return new CpioArchiveInputStream(in); }  [BUGGY] [BUGGY] final byte[] dumpsig = new byte[32]; in.mark(dumpsig.length); signatureLength = in.read(dumpsig); in.reset(); if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) { return new DumpArchiveInputStream(in); }  final byte[] tarheader = new byte[512]; in.mark(tarheader.length); [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR CPIO DUMP JAR TAR ZIP archiverName IOException e int signatureLength Exception e  	projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.7071067811865475	223	223	1	add	
30	[BUG] [BUGGY] in.mark(dumpsig.length); [FE] AssertionError [CONTEXT] } else if (JarArchiveInputStream.matches(signature, signatureLength)) { return new JarArchiveInputStream(in); } else if (ArArchiveInputStream.matches(signature, signatureLength)) { return new ArArchiveInputStream(in); } else if (CpioArchiveInputStream.matches(signature, signatureLength)) { return new CpioArchiveInputStream(in); }  final byte[] dumpsig = new byte[32]; [BUGGY] in.mark(dumpsig.length); [BUGGY] signatureLength = in.read(dumpsig); in.reset(); if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) { return new DumpArchiveInputStream(in); }  final byte[] tarheader = new byte[512]; in.mark(tarheader.length); signatureLength = in.read(tarheader); [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR CPIO DUMP JAR TAR ZIP archiverName IOException e int signatureLength Exception e  	projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.7071067811865475	224	224	1	replace	
31	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } else if (JarArchiveInputStream.matches(signature, signatureLength)) { return new JarArchiveInputStream(in); } else if (ArArchiveInputStream.matches(signature, signatureLength)) { return new ArArchiveInputStream(in); } else if (CpioArchiveInputStream.matches(signature, signatureLength)) { return new CpioArchiveInputStream(in); }  final byte[] dumpsig = new byte[32]; [BUGGY] [BUGGY] in.mark(dumpsig.length); signatureLength = in.read(dumpsig); in.reset(); if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) { return new DumpArchiveInputStream(in); }  final byte[] tarheader = new byte[512]; in.mark(tarheader.length); signatureLength = in.read(tarheader); [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR CPIO DUMP JAR TAR ZIP archiverName IOException e int signatureLength Exception e  	projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.7071067811865475	224	224	1	add	
32	[BUG] [BUGGY] signatureLength = in.read(dumpsig); [FE] AssertionError [CONTEXT] return new JarArchiveInputStream(in); } else if (ArArchiveInputStream.matches(signature, signatureLength)) { return new ArArchiveInputStream(in); } else if (CpioArchiveInputStream.matches(signature, signatureLength)) { return new CpioArchiveInputStream(in); }  final byte[] dumpsig = new byte[32]; in.mark(dumpsig.length); [BUGGY] signatureLength = in.read(dumpsig); [BUGGY] in.reset(); if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) { return new DumpArchiveInputStream(in); }  final byte[] tarheader = new byte[512]; in.mark(tarheader.length); signatureLength = in.read(tarheader); in.reset(); [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR CPIO DUMP JAR TAR ZIP archiverName IOException e int signatureLength Exception e  	projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.7071067811865475	225	225	1	replace	
33	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] return new JarArchiveInputStream(in); } else if (ArArchiveInputStream.matches(signature, signatureLength)) { return new ArArchiveInputStream(in); } else if (CpioArchiveInputStream.matches(signature, signatureLength)) { return new CpioArchiveInputStream(in); }  final byte[] dumpsig = new byte[32]; in.mark(dumpsig.length); [BUGGY] [BUGGY] signatureLength = in.read(dumpsig); in.reset(); if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) { return new DumpArchiveInputStream(in); }  final byte[] tarheader = new byte[512]; in.mark(tarheader.length); signatureLength = in.read(tarheader); in.reset(); [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR CPIO DUMP JAR TAR ZIP archiverName IOException e int signatureLength Exception e  	projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.7071067811865475	225	225	1	add	
34	[BUG] [BUGGY] in.reset(); [FE] AssertionError [CONTEXT] } else if (ArArchiveInputStream.matches(signature, signatureLength)) { return new ArArchiveInputStream(in); } else if (CpioArchiveInputStream.matches(signature, signatureLength)) { return new CpioArchiveInputStream(in); }  final byte[] dumpsig = new byte[32]; in.mark(dumpsig.length); signatureLength = in.read(dumpsig); [BUGGY] in.reset(); [BUGGY] if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) { return new DumpArchiveInputStream(in); }  final byte[] tarheader = new byte[512]; in.mark(tarheader.length); signatureLength = in.read(tarheader); in.reset(); if (TarArchiveInputStream.matches(tarheader, signatureLength)) { [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR CPIO DUMP JAR TAR ZIP archiverName IOException e int signatureLength Exception e  	projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.7071067811865475	226	226	1	replace	
35	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } else if (ArArchiveInputStream.matches(signature, signatureLength)) { return new ArArchiveInputStream(in); } else if (CpioArchiveInputStream.matches(signature, signatureLength)) { return new CpioArchiveInputStream(in); }  final byte[] dumpsig = new byte[32]; in.mark(dumpsig.length); signatureLength = in.read(dumpsig); [BUGGY] [BUGGY] in.reset(); if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) { return new DumpArchiveInputStream(in); }  final byte[] tarheader = new byte[512]; in.mark(tarheader.length); signatureLength = in.read(tarheader); in.reset(); if (TarArchiveInputStream.matches(tarheader, signatureLength)) { [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR CPIO DUMP JAR TAR ZIP archiverName IOException e int signatureLength Exception e  	projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.7071067811865475	226	226	1	add	
36	[BUG] [BUGGY] if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) { [FE] AssertionError [CONTEXT] return new ArArchiveInputStream(in); } else if (CpioArchiveInputStream.matches(signature, signatureLength)) { return new CpioArchiveInputStream(in); }  final byte[] dumpsig = new byte[32]; in.mark(dumpsig.length); signatureLength = in.read(dumpsig); in.reset(); [BUGGY] if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) { [BUGGY] return new DumpArchiveInputStream(in); }  final byte[] tarheader = new byte[512]; in.mark(tarheader.length); signatureLength = in.read(tarheader); in.reset(); if (TarArchiveInputStream.matches(tarheader, signatureLength)) { return new TarArchiveInputStream(in); [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR CPIO DUMP JAR TAR ZIP archiverName IOException e int signatureLength Exception e  	projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.7071067811865475	227	227	1	replace	
37	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] return new ArArchiveInputStream(in); } else if (CpioArchiveInputStream.matches(signature, signatureLength)) { return new CpioArchiveInputStream(in); }  final byte[] dumpsig = new byte[32]; in.mark(dumpsig.length); signatureLength = in.read(dumpsig); in.reset(); [BUGGY] [BUGGY] if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) { return new DumpArchiveInputStream(in); }  final byte[] tarheader = new byte[512]; in.mark(tarheader.length); signatureLength = in.read(tarheader); in.reset(); if (TarArchiveInputStream.matches(tarheader, signatureLength)) { return new TarArchiveInputStream(in); [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR CPIO DUMP JAR TAR ZIP archiverName IOException e int signatureLength Exception e  	projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.7071067811865475	227	227	1	add	
38	[BUG] [BUGGY] final byte[] tarheader = new byte[512]; [FE] AssertionError [CONTEXT]  final byte[] dumpsig = new byte[32]; in.mark(dumpsig.length); signatureLength = in.read(dumpsig); in.reset(); if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) { return new DumpArchiveInputStream(in); }  [BUGGY] final byte[] tarheader = new byte[512]; [BUGGY] in.mark(tarheader.length); signatureLength = in.read(tarheader); in.reset(); if (TarArchiveInputStream.matches(tarheader, signatureLength)) { return new TarArchiveInputStream(in); }  if (signatureLength >= 512) { try { TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader)); [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR CPIO DUMP JAR TAR ZIP archiverName IOException e int signatureLength Exception e  	projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.7071067811865475	232	232	1	replace	
39	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  final byte[] dumpsig = new byte[32]; in.mark(dumpsig.length); signatureLength = in.read(dumpsig); in.reset(); if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) { return new DumpArchiveInputStream(in); }  [BUGGY] [BUGGY] final byte[] tarheader = new byte[512]; in.mark(tarheader.length); signatureLength = in.read(tarheader); in.reset(); if (TarArchiveInputStream.matches(tarheader, signatureLength)) { return new TarArchiveInputStream(in); }  if (signatureLength >= 512) { try { TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader)); [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR CPIO DUMP JAR TAR ZIP archiverName IOException e int signatureLength Exception e  	projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.7071067811865475	232	232	1	add	
40	[BUG] [BUGGY] in.mark(tarheader.length); [FE] AssertionError [CONTEXT] final byte[] dumpsig = new byte[32]; in.mark(dumpsig.length); signatureLength = in.read(dumpsig); in.reset(); if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) { return new DumpArchiveInputStream(in); }  final byte[] tarheader = new byte[512]; [BUGGY] in.mark(tarheader.length); [BUGGY] signatureLength = in.read(tarheader); in.reset(); if (TarArchiveInputStream.matches(tarheader, signatureLength)) { return new TarArchiveInputStream(in); }  if (signatureLength >= 512) { try { TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));  [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR CPIO DUMP JAR TAR ZIP archiverName IOException e int signatureLength Exception e  	projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.7071067811865475	233	233	1	replace	
41	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final byte[] dumpsig = new byte[32]; in.mark(dumpsig.length); signatureLength = in.read(dumpsig); in.reset(); if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) { return new DumpArchiveInputStream(in); }  final byte[] tarheader = new byte[512]; [BUGGY] [BUGGY] in.mark(tarheader.length); signatureLength = in.read(tarheader); in.reset(); if (TarArchiveInputStream.matches(tarheader, signatureLength)) { return new TarArchiveInputStream(in); }  if (signatureLength >= 512) { try { TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));  [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR CPIO DUMP JAR TAR ZIP archiverName IOException e int signatureLength Exception e  	projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.7071067811865475	233	233	1	add	
42	[BUG] [BUGGY] signatureLength = in.read(tarheader); [FE] AssertionError [CONTEXT] in.mark(dumpsig.length); signatureLength = in.read(dumpsig); in.reset(); if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) { return new DumpArchiveInputStream(in); }  final byte[] tarheader = new byte[512]; in.mark(tarheader.length); [BUGGY] signatureLength = in.read(tarheader); [BUGGY] in.reset(); if (TarArchiveInputStream.matches(tarheader, signatureLength)) { return new TarArchiveInputStream(in); }  if (signatureLength >= 512) { try { TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));  tais.getNextEntry(); [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR CPIO DUMP JAR TAR ZIP archiverName IOException e int signatureLength Exception e  	projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.7071067811865475	234	234	1	replace	
43	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] in.mark(dumpsig.length); signatureLength = in.read(dumpsig); in.reset(); if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) { return new DumpArchiveInputStream(in); }  final byte[] tarheader = new byte[512]; in.mark(tarheader.length); [BUGGY] [BUGGY] signatureLength = in.read(tarheader); in.reset(); if (TarArchiveInputStream.matches(tarheader, signatureLength)) { return new TarArchiveInputStream(in); }  if (signatureLength >= 512) { try { TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));  tais.getNextEntry(); [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR CPIO DUMP JAR TAR ZIP archiverName IOException e int signatureLength Exception e  	projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.7071067811865475	234	234	1	add	
44	[BUG] [BUGGY] in.reset(); [FE] AssertionError [CONTEXT] signatureLength = in.read(dumpsig); in.reset(); if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) { return new DumpArchiveInputStream(in); }  final byte[] tarheader = new byte[512]; in.mark(tarheader.length); signatureLength = in.read(tarheader); [BUGGY] in.reset(); [BUGGY] if (TarArchiveInputStream.matches(tarheader, signatureLength)) { return new TarArchiveInputStream(in); }  if (signatureLength >= 512) { try { TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));  tais.getNextEntry(); return new TarArchiveInputStream(in); [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR CPIO DUMP JAR TAR ZIP archiverName IOException e int signatureLength Exception e  	projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.7071067811865475	235	235	1	replace	
45	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] signatureLength = in.read(dumpsig); in.reset(); if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) { return new DumpArchiveInputStream(in); }  final byte[] tarheader = new byte[512]; in.mark(tarheader.length); signatureLength = in.read(tarheader); [BUGGY] [BUGGY] in.reset(); if (TarArchiveInputStream.matches(tarheader, signatureLength)) { return new TarArchiveInputStream(in); }  if (signatureLength >= 512) { try { TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));  tais.getNextEntry(); return new TarArchiveInputStream(in); [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR CPIO DUMP JAR TAR ZIP archiverName IOException e int signatureLength Exception e  	projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.7071067811865475	235	235	1	add	
46	[BUG] [BUGGY] if (TarArchiveInputStream.matches(tarheader, signatureLength)) { [FE] AssertionError [CONTEXT] in.reset(); if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) { return new DumpArchiveInputStream(in); }  final byte[] tarheader = new byte[512]; in.mark(tarheader.length); signatureLength = in.read(tarheader); in.reset(); [BUGGY] if (TarArchiveInputStream.matches(tarheader, signatureLength)) { [BUGGY] return new TarArchiveInputStream(in); }  if (signatureLength >= 512) { try { TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));  tais.getNextEntry(); return new TarArchiveInputStream(in); } catch (Exception e) { // NOPMD [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR CPIO DUMP JAR TAR ZIP archiverName IOException e int signatureLength Exception e  	projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.7071067811865475	236	236	1	replace	
47	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] in.reset(); if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) { return new DumpArchiveInputStream(in); }  final byte[] tarheader = new byte[512]; in.mark(tarheader.length); signatureLength = in.read(tarheader); in.reset(); [BUGGY] [BUGGY] if (TarArchiveInputStream.matches(tarheader, signatureLength)) { return new TarArchiveInputStream(in); }  if (signatureLength >= 512) { try { TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));  tais.getNextEntry(); return new TarArchiveInputStream(in); } catch (Exception e) { // NOPMD [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR CPIO DUMP JAR TAR ZIP archiverName IOException e int signatureLength Exception e  	projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.7071067811865475	236	236	1	add	
48	[BUG] [BUGGY] if (signatureLength >= 512) { [FE] AssertionError [CONTEXT]  final byte[] tarheader = new byte[512]; in.mark(tarheader.length); signatureLength = in.read(tarheader); in.reset(); if (TarArchiveInputStream.matches(tarheader, signatureLength)) { return new TarArchiveInputStream(in); }  [BUGGY] if (signatureLength >= 512) { [BUGGY] try { TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));  tais.getNextEntry(); return new TarArchiveInputStream(in); } catch (Exception e) { // NOPMD     [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR CPIO DUMP JAR TAR ZIP archiverName IOException e int signatureLength Exception e  	projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.7071067811865475	240	240	1	replace	
49	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  final byte[] tarheader = new byte[512]; in.mark(tarheader.length); signatureLength = in.read(tarheader); in.reset(); if (TarArchiveInputStream.matches(tarheader, signatureLength)) { return new TarArchiveInputStream(in); }  [BUGGY] [BUGGY] if (signatureLength >= 512) { try { TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));  tais.getNextEntry(); return new TarArchiveInputStream(in); } catch (Exception e) { // NOPMD     [CLASS] ArchiveStreamFactory [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream  InputStream in [VARIABLES] byte[] dumpsig signature tarheader TarArchiveInputStream tais boolean InputStream in String AR CPIO DUMP JAR TAR ZIP archiverName IOException e int signatureLength Exception e  	projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	0.7071067811865475	240	240	1	add	
