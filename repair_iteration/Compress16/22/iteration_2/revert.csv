projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235in.reset();
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235in.mark(signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength==512){in.reset();}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength!=512){in.reset();}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>512){in.reset();}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength==512){in.reset();}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength!=512){in.reset();}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>512){in.reset();}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength==0){in.reset();}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength!=0){in.reset();}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength!=256){in.reset();}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>512){in.reset();}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>512){in.reset();}else{in.mark(signatureLength);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>=512){in.reset();}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>0){in.reset();}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=in.readInt();
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newFileInputStream(tarheader.getPath());
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>=0){in.reset();}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>512){thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength==0){in.reset();}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>0){in.reset();}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235finalintsignatureLength=in.read(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(in.mark(tarheader.length));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235nisipLength=in.read(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength!=512){in.mark(signatureLength);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength==512){in.reset();}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>0){in.reset();}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>512){in.read();}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength!=0){in.reset();}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235TarArchiveInputStreamin=newTarArchiveInputStream(in);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235TarArchiveInputStreamin=newTarArchiveInputStream(in.read());
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235in.mark(signatureLength);tarheader=in.read(signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235tarheader=in.read(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength!=256){in.mark(signatureLength);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength==256){in.reset();}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>=256){in.reset();}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength==0){in.mark(signatureLength);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength!=0){in.mark(signatureLength);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength==0){in.close();}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength!=0){in.read();}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>0){in.reset();}else{in.mark(signatureLength);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235in.mark(signatureLength+1);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235in.mark(signatureLength,tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235tarheader.mark(signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235in.mark(tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235in.mark(signatureLength-1);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235in.mark(signatureLength+2);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>512){in.mark(signatureLength);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>512){in.mark(signatureLength);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength!=256){in.close();}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235in.mark(signatureLength+512);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235in.set(signatureLength,tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235in.set(signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength!=0){in.close();}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength!=0){in.set();}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(in.mark(signatureLength));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newFileInputStream(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength!=512){in.reset();}else{in.mark(signatureLength);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength==512){in.reset();}else{in.mark(signatureLength);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>=512){in.reset();}else{in.mark(signatureLength);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength!=0){in.reset();}else{in.mark(signatureLength);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength==512){in.mark(signatureLength);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength==512){returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235finalintsignatureLength=in.read(signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength!=512){in.reset();}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength==0){in.reset();}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength!=0){in.reset();}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength==0){in.set();}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength==0){in.reset();}else{thrownewIllegalArgumentException("".);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength<512){in.reset();}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>512){in.mark(signatureLength);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>512){in.close();}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength<512){in.reset();}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>0){in.mark(signatureLength);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(in.read(tarheader.length));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(in.read(tarheader));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength<512){in.reset();}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=in.read(signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>256){in.reset();}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength!=512){in.mark(signatureLength);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength<0){in.reset();}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength<512){in.reset();}else{in.mark(signatureLength);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>512){in.set();}else{in.mark(signatureLength);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235nisipLength=in.read(signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235nisipLength=in.mark(signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength==0){in.reset();}else{in.mark(signatureLength);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>0){in.read();}else{in.mark(signatureLength);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>0){thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(signatureLength,tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(signature.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(in.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(signatureLength+tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(dumpsig.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>0){if(signatureLength>=512){in.reset();}else{in.mark(signatureLength);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>0){if(signatureLength!=512){in.reset();}else{in.mark(signatureLength);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>0){if(signatureLength>=512){returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>0){if(signatureLength>=512){in.reset();}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>0){in.mark(signatureLength);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>0){in.close();}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>=256){in.mark(signatureLength);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newFileInputStream(tarheader.getAbsolutePath());
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newFileInputStream(tarheader.getPath()+1);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newFileInputStream(tarheader.getCanonicalPath());
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newFileInputStream(archiverName.getPath());
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newFileInputStream(tarheader.getPath(),signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newFileInputStream(file.getPath());
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>0){in.reset();}else{thrownewIllegalArgumentException("".);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>0){in.reset();}else{thrownewIllegalArgumentException(".");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235in.mark(signatureLength+4);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235in.mark(signatureLength+3);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235in.mark(signatureLength+5);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235nisipLength=in.read(tarheader,TAR);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235nisipLength=in.read(tarheader,signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235nisipLength=in.read();
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235nisipLength=in.read(tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235nisipLength=in.readFully(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235nisipLength=in.read(tarheader,512);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235in.close();
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength==512){in.close();}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>0){in.close();}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength==512){in.close();}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235SignatureLength=in.read(signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(signatureLength,tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(dumpsig,signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>512){returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength==0){returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newTarArchiveInputStream(in);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235finalbytesignatureLength=in.read(signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235finalintsignatureLength=in.read(tarheader,signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235finalStringsignatureLength=in.read(signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235finallongsignatureLength=in.read(signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235finaldoublesignatureLength=in.read(signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235finalintsignatureLength=in.read();
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=in.readUTF();
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=tarheader.readInt();
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=this.in.readInt();
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=in.readFully();
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=this.tarheader.readInt();
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=in.readInt()-1;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235in.set();
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength==0){in.set();}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>0){in.set();}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>=0){in.set();}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength!=512){in.set();}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newFileInputStream(signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newFileInputStream(tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newFileInputStream(dumpsig,signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newFileInputStream(tarheader.getBytes());
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newFileInputStream(in);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newFileInputStream(in,signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newFileInputStream(signatureLength,tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>0){in.set();}else{in.mark(signatureLength);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength==256){in.mark(signatureLength);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>0){in.set();}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength!=0){in.set();}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>0){in.mark(signatureLength);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>512){in.mark(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(tarheader.mark(signatureLength));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(in.mark(signatureLength),tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(in.mark(signatureLength+1));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(in.mark(signatureLength)+1);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(in.mark(dumpsig,signatureLength));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength<0){in.mark(signatureLength);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>512){if(signatureLength<512){in.reset();}else{in.mark(signatureLength);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>0){if(signatureLength<512){in.reset();}else{in.mark(signatureLength);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>512){if(signatureLength<512){returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>0){if(signatureLength<512){in.reset();}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>0){if(signatureLength<512){returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>512){if(signatureLength<512){thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235in.mark(signatureLength+256);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235in.mark(signatureLength/1);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>0){if(signatureLength<512){in.reset();}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>256){in.mark(signatureLength);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength<256){in.reset();}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>0){in.set();}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>0){in.read();}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>256){in.mark(signatureLength);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235tarheader=in.read(signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235in.mark(signatureLength);tarheader=in.read(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235in.mark(tarheader.length);tarheader=in.read(signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235finalbyte[]tarheader=in.read(signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235in.mark(signatureLength);tarheader=in.read();
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235finalbyte[]tarheader=in.read(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>=0){in.mark(signatureLength);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235tarheader=in.read(tarheader,signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235tarheader=in.read();
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235tarheader=in.read(tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235in.mark(signatureLength-2);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235tarheader.mark(signatureLength-1);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235in.mark(signatureLength-4);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength==512){in.read();}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength<512){in.read();}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235in.read();
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>0){in.read();}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>=0){in.close();}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>=0){in.reset();}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength==0){in.set();}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(signatureLength,in.mark(tarheader.length));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(signatureLength.mark(tarheader.length));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(tarheader.getBytes());
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(in.mark(signatureLength,tarheader.length));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength==0){in.read();}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>=0){in.read();}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength!=512){in.read();}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(in.read(tarheader,signatureLength));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(in.read(tarheader,512));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(in.read(tarheader,256));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(in.read(signatureLength));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(in.read(tarheader),signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(in.readFully(tarheader));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235in.mark(signatureLength,tarheader.length+1);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235in.mark(tarheader,signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>=0){in.reset();}else{in.mark(signatureLength);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>0){if(signatureLength!=0){in.reset();}else{in.mark(signatureLength);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>0){if(signatureLength!=0){returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength==512){in.mark(tarheader.length);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength==512){in.mark(tarheader.length);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>512){in.mark(tarheader.length);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>512){in.mark(tarheader.length);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength!=512){in.mark(tarheader.length);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength==0){in.mark(tarheader.length);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(signatureLength+1);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(signatureLength-1);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(signatureLength+2);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235tarheader.mark(signatureLength+1);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235tarheader.set(signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235TarArchiveInputStream.mark(signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235finalbyte[]signatureLength=in.read(signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235finalbyte[]signatureLength=in.read(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235in.set(signatureLength,tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235in.set(signatureLength+1);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235in.set(signatureLength-1);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235in.set(tarheader,signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=in.read();
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=in.read(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=in.read(tarheader,signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=tarheader.read(signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=this.in.read(signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=in.readFully(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235in.mark(signatureLength+100.0);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235in.mark(signatureLength+1000);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength==0){in.close();}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235finalbytesignatureLength=in.read(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235finalintsignatureLength=in.read(tarheader,TAR);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235finalStringsignatureLength=in.read(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235finalintsignatureLength=in.read(tarheader,512);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235finalintsignatureLength=in.read(tarheader,256);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235TarArchiveInputStreamin=newTarArchiveInputStream(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235TarArchiveInputStreamin=newTarArchiveInputStream(signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235finalTarArchiveInputStreamin=newTarArchiveInputStream(in);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235TarArchiveInputStreamin=newTarArchiveInputStream(in,signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235TarArchiveInputStreamin=newTarArchiveInputStream(tarheader,signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235TarArchiveInputStreamin=newTarArchiveInputStream(in,tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(in.read(tarheader.length),signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(in.read(tarheader.length+1));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(in.read(tarheader.length),512);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(in.read(tarheader.length-1));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength==512){thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235thrownewIllegalArgumentException("");
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235finalintsignatureLength=512;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235TarArchiveInputStreamin=newTarArchiveInputStream(tarheader.read());
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235TarArchiveInputStreamin=newTarArchiveInputStream(in.read(),in.read());
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235TarArchiveInputStreamin=newTarArchiveInputStream(in.readLine());
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235TarArchiveInputStreamin=newTarArchiveInputStream(in.read(),in.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235TarArchiveInputStreamin=newTarArchiveInputStream(in.read()+1);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235TarArchiveInputStreamin=newTarArchiveInputStream(in.read(),signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>0){if(signatureLength==512){in.reset();}else{in.mark(signatureLength);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>0){if(signatureLength==512){returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength!=512){in.close();}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength==256){in.close();}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>=256){in.close();}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235in.set(signatureLength,tarheader.length+1);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235tarheader.set(signatureLength,tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235in.set(signatureLength,tarheader.length-1);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235in.set(dumpsig,tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235in.set(signatureLength,tarheader.length+2);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength!=512){in.set();}else{in.mark(signatureLength);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength==512){in.set();}else{in.mark(signatureLength);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength!=0){in.set();}else{in.mark(signatureLength);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(in.mark(tarheader.length),signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(tarheader.length+1);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength!=0){in.set();}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength!=0){in.close();}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(signature);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(dumpsig);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength==0){in.set();}else{in.mark(signatureLength);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength==0){in.close();}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength!=0){in.close();}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength!=0){in.mark(signatureLength);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength==0){in.mark(signatureLength);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength==512){in.mark(signatureLength);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235IntegersignatureLength=in.read(signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newBufferedInputStream(tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235in.mark(signatureLength+tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235in.mark(signatureLength-tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235tarheader.setLength(signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235tarheader.setSignal(signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235tarheader.reset();
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235tarheader.mark(signatureLength+2);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235TarArchiveInputStreamin=newTarArchiveInputStream(in.read(),tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235TarArchiveInputStreamin=newTarArchiveInputStream(in.read(tarheader));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235TarArchiveInputStreamin=newTarArchiveInputStream(in,in.read());
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength!=512){in.close();}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235(signatureLength==0)){in.read();}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>0){in.mark(signatureLength+1);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235nisipLength=in.read(tarheader,TAR_SIZE);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength!=0){returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235finalintsignatureLength=in.read(tarheader,tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength==512){in.mark(tarheader.length);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength!=512){in.mark(tarheader.length);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength==0){in.mark(tarheader.length);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength!=512){in.mark(tarheader.length);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235finalintsignatureLength=in.read(tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235finalintsignatureLength=in.read(tarheader,0);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235finalintsignatureLength=in.read(tarheader)+1;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=this.archiverName.readInt();
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235in.mark(signatureLength-512);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235in.mark(signatureLength*1);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength==0){in.set();}else{thrownewIllegalArgumentException("".);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235in.set(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235in.set(signatureLength+512);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(in.read(tarheader,0));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235(signatureLength==0)){in.set();}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(in.read(tarheader,tarheader.length));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235in.mark(tarheader.length);tarheader=in.read(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235in.mark(tarheader.length);tarheader=in.read(tarheaderLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=this.tarheader.read(signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=this.archiverName.read(signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235in.set(tarheader,tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength!=512){in.mark(signatureLength);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength==512){in.mark(signatureLength);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength!=0){in.mark(signatureLength);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newFileInputStream(tarheader,signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(in.mark(tarheader));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(in.mark(tarheader,signatureLength));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(in.mark(tarheaderLength));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(in.mark(signatureLength+512));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength!=512){in.read();}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength==0){in.read();}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength!=0){in.read();}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength==512){in.read();}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength!=512){thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength==0){thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength!=0){thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength==0){in.mark(tarheader);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235in.mark(tarheader.length+512);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235in.mark(signatureLength+1024);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength!=0){in.reset();}else{thrownewIllegalArgumentException("".);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(signatureLength+512);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(signatureLength+4);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(in.read());
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>0){in.skipChildren();}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength<0){in.close();}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>512){in.set(signatureLength);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength<0){in.reset();}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235tarheader=in.read(tarheader)+1;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength<0){in.reset();}else{in.mark(signatureLength);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength<512){in.mark(signatureLength);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>256){in.mark(signatureLength);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235in.mark(signatureLength-1,tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235in.mark(signatureLength,tarheader.length).reset();
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235tarheader.setImplicitPrototype(PROTOTYPE_PROTOTYPE);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235tarheader.set(signatureLength+1);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235tarheader.setBytes(in.readByteArray());
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235in.mark(signatureLength/2);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235nisipLength=in.read(tarheader,256);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newFileInputStream(tarheader.getPath(),dumpsig);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newFileInputStream(zipsig.getPath());
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(in.mark(signatureLength-512));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235TarArchiveInputStreamin=newTarArchiveInputStream(in.readDigest());
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newFileInputStream(zipsig);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newFileInputStream(archiverName);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength<256){in.mark(signatureLength);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235finalintsignatureLength=in.read(signature);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235finalintsignatureLength=in.read(dumpsig);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235in.mark(signatureLength/512);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength<512){in.close();}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength<512){in.close();}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235in.set(signatureLength,tarheader.length-2);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=in.read(signatureLength,tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>256){in.close();}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(tarheader!=null){in.mark(signatureLength);tarheader=in.read(signatureLength);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(tarheader!=null){in.mark(signatureLength);tarheader=in.read(signatureLength);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(tarheader!=null){in.mark(signatureLength);tarheader=in.read(signatureLength);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(tarheader!=null){in.mark(signatureLength);tarheader=in.read(signatureLength);}else{thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(in.read(tarheader.length),256);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength<2){in.reset();}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=in.readIO();
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235finalintsignatureLength=in.read(signatureLength,tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235finalintsignatureLength=in.read(signatureLength-1);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235TarArchiveInputStreamin=newTarArchiveInputStream(in.read(),in.mark(signatureLength));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(signatureLength,TarArchiveInputStream.DEFAULT);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(signatureLength,TarArchiveInputStream.DEFAULT_SIZE);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(signatureLength,TarArchiveInputStream.class);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength<512){in.set();}else{in.mark(signatureLength);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>=512){in.set();}else{in.mark(signatureLength);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>512){in.mark(tarheader.length);}else{thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(in.mark(signatureLength+tarheader.length));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235InputStreamin=newByteArrayInputStream(out.mark(signatureLength));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength>0){returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength==2){returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength<512){thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java235if(signatureLength<0){in.set();}else{thrownewIllegalArgumentException("");}
