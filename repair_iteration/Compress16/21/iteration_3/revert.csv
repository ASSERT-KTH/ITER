projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234signatureLength=in.read(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==512){signatureLength=in.read(tarheader);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==512){signatureLength=in.read(tarheader);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234signatureLength=in.read(tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234signatureLength=in.read();
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==512){signatureLength=in.read(tarheader);}else{returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==512){signatureLength=in.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=in.read(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.read(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234signatureLength=in.read(tarheader)+1;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234signatureLength=in.read(signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==512){signatureLength=in.read(tarheader);}else{thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(tarheader)+1;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLength=in.read(tarheader)+1;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234signatureLength=in.read(tarheader)+2;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=in.read(tarheader)+1;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.read(tarheader)+1;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234signatureLength=in.read(tarheader)+512;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234TarArchiveInputStreamin=newTarArchiveInputStream(newByteArrayInputStream(tarheader.length));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234in.mark(tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234finalintsignatureLength=in.read(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234InputStreamin=newByteArrayInputStream(tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234TarArchiveInputStreamin=newTarArchiveInputStream(newByteArrayInputStream(tarheader));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234TarArchiveInputStreamin=newTarArchiveInputStream(in);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234TarArchiveInputStreamin=newTarArchiveInputStream(in.read());
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>512){signatureLength=in.read(tarheader);}else{thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader.length==512){signatureLength=in.read(tarheader);}else{thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>0){signatureLength=in.read(tarheader);}else{thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234nisipLength=in.read(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>0){signatureLength=in.read(tarheader);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader.setLength(in.read(tarheader.length));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.read(tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234in.read(tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader.length=in.read(tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234signatureLength=in.read(tarheader.length-1);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=in.read(signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.read(signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLength=in.read(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234sigLength=in.read(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234in.read(signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.read();
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.read(tarheader,signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.readFully(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234finalbyte[]tarheader=in.read(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>512){signatureLength=in.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader.length==512){signatureLength=in.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>0){signatureLength=in.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader.length==512){SignatureLength=in.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=in.read();
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=in.read(tarheader,signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=in.read(tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLength=in.read();
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read();
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234finalintsignatureLength=in.read();
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>512){signatureLength=in.read(tarheader);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader.length==512){signatureLength=in.read(tarheader);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>0){signatureLength=in.read(tarheader);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>512){signatureLength=in.read(tarheader);}else{returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader.length==512){signatureLength=in.read(tarheader);}else{returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>0){signatureLength=in.read(tarheader);}else{returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>512){signatureLength=in.read(tarheader);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234in.read(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(tarheader,TAR);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(tarheader,TARIO);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(tarheader,512);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(tarheader,0);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234signatureLength=in.read(tarheader,tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader.setLength(in.read(tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234signatureLength=in.read(tarheader)+4;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(tarheader)+512;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(tarheader)+2;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthtarheader=in.read(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234InputStreamin=newFileInputStream(tarheader.getAbsolutePath());
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength==512){signatureLength=in.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){signatureLength=in.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==0){signatureLength=in.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength==256){signatureLength=in.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength==0){signatureLength=in.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength==512){signatureLength=in.read(tarheader);}else{returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){signatureLength=in.read(tarheader);}else{returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength==256){signatureLength=in.read(tarheader);}else{returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength==0){signatureLength=in.read(tarheader);}else{returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength==512){signatureLength=in.read(tarheader);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=in.read(tarheader)+dumpsig.length;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=in.read(tarheader,4096);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=TarArchiveInputStream.read(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){signatureLength=in.read(tarheader);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==0){signatureLength=in.read(tarheader);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength!=0){signatureLength=in.read(tarheader);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234InputStreamin=newByteArrayInputStream(tarheader.getBytes());
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234TarArchiveInputStreamin=newTarArchiveInputStream(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234InputStreamin=newByteArrayInputStream(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234signatureLength=in.read(tarheader,signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){signatureLength=in.read(tarheader);}else{thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==0){signatureLength=in.read(tarheader);}else{thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength!=0){signatureLength=in.read(tarheader);}else{thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(tarheader,archiverName);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(signature);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.read(tarheader,buffer);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.read(tarheader).length;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(tarheader,256);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.read(tarheader,1);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.read(tarheader,4096);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.read(tarheader)-1;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==512){signatureLength=in.read(tarheader.length);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==512){signatureLength=in.read(tarheader.length);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==0){signatureLength=in.read(tarheader.length);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==512){signatureLength=in.read(tarheader.length);}else{thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==512){returnin.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==512){in.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==512){signatureLength=in.read();}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==512){signatureLength=in.read();}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==0){signatureLength=in.read();}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==512){signatureLength=in.read();}else{thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==512){signatureLength=in.read();}else{thrownewIOException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234in.read();
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234InputStreamin=newFileInputStream(tarheader.getBytes());
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234InputStreamin=newFileInputStream(tarheader.getPath());
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength!=512){signatureLength=in.read(signatureLength);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==512){signatureLength=in.read(signatureLength);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==0){signatureLength=in.read(signatureLength);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength<512){signatureLength=in.read(tarheader);}else{returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==0){signatureLength=in.read(tarheader);}else{returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==0){signatureLength=in.read(tarheader);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength<512){signatureLength=in.read(tarheader);}else{thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234signatureLength=in.read(tarheader)/1;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength<512){signatureLength=in.read(tarheader);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==512){thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=this.tarheader.read(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=in.read(tarheader,1);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength<512){signatureLength=in.read(tarheader);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.read(tarheader,0,buffer.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.read(tarheader,buffer,signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.read(tarheader,buffer.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=buffer.read(tarheader,in);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.read(tarheader,100);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.read(tarheader,512);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.read(tarheader,256);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.read(tarheader,0,signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.read(tarheader,0);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(tarheader,0,tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=tarheader.read();
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength!=512){signatureLength=in.read(tarheader);}else{returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength!=512){if(tarheader!=null){signatureLength=in.read(tarheader);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==512){if(tarheader!=null){signatureLength=in.read(tarheader);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength!=512){signatureLength=in.read(tarheader);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader==null){if(signatureLength==512){signatureLength=in.read(tarheader);}else{returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength>512){signatureLength=in.read(tarheader);}else{returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength==2){signatureLength=in.read(tarheader);}else{returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=in.read(tarheader)+2;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=in.read(tarheader)/1;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=in.read(tarheader)+3;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=in.read(tarheader)+4;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=in.read(tarheader)-1;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>0){signatureLength=in.read(tarheader.length);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader.length==0){signatureLength=in.read(tarheader.length);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader.length!=0){signatureLength=in.read(tarheader.length);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234nisipLength=in.read(tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234finalintsignatureLength=in.read(tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.read(tarheader,1024);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.read(tarheader,10000);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.read(tarheader,0,4096);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.read(tarheader,4192);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader.length<512){signatureLength=in.read(tarheader);}else{returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>0){if(signatureLength<512){signatureLength=in.read(tarheader);}else{returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>512){if(signatureLength<512){signatureLength=in.read(tarheader);}else{returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>0){if(signatureLength<512){signatureLength=in.read(tarheader);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader.length=in.read(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader.length=in.read();
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader.length=in.read(tarheader,0,tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader.length=in.readFully(tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader.length=in.read(tarheader.length+1);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader.length=in.read(tarheader,signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=in.read(tarheader,100);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=in.read(tarheader,10000);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=in.read(tarheader,1024);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=in.read(tarheader,0,4096);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=in.read(tarheader,4096L);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader.length==512){signatureLength=in.read(tarheader.length);}else{thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader.length!=512){signatureLength=in.read(tarheader.length);}else{thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader.length==0){signatureLength=in.read(tarheader.length);}else{thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(tarheader,signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=tarheader.read(signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234finalSignatureLengthsignatureLength=in.read(signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.read(tarheader)/1;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.read()-1;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.read(tarheader)-2;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.read(tarheader),signatureLength-1;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader==null){if(signatureLength==256){signatureLength=in.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==512){if(tarheader!=null){signatureLength=in.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader==null){if(signatureLength==512){signatureLength=in.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==256){signatureLength=in.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234signatureLength=in.read(tarheader)+3;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234signatureLength=in.read(tarheader,512);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength!=512){signatureLength=in.read(tarheader,signatureLength);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234signatureLength=in.read(tarheader,256);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234signatureLength=in.read(tarheader,0);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength!=512){signatureLength=in.read(tarheader,signatureLength);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234in.read(tarheader,signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234InputStreamin=newFileInputStream(tarheader.getAbsolutePath()+1);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234InputStreamin=newFileInputStream(tarheader.getAbsolutePath(),TAR);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234InputStreamin=newFileInputStream(archiverName.getAbsolutePath());
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234InputStreamin=newFileInputStream(tarheader.getCanonicalPath());
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234InputStreamin=newFileInputStream(tarheader.getAbsolutePath()+2);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234TarArchiveInputStreamin=newTarArchiveInputStream(newByteArrayInputStream(signatureLength));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234TarArchiveInputStreamin=newTarArchiveInputStream(newByteArrayInputStream(tarheader.length),signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234TarArchiveInputStreamin=newTarArchiveInputStream(newByteArrayInputStream(tarheader.length+1));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234TarArchiveInputStreamin=newTarArchiveInputStream(newByteArrayInputStream(tarheader.length-1));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234TarArchiveInputStreamin=newTarArchiveInputStream(newByteArrayInputStream(tarheader.length,signatureLength));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234TarArchiveInputStreamin=newTarArchiveInputStream(newByteArrayInputStream(signature.length));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234in.readFully(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234in.readFully(tarheader,signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader.read(signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.read(tarheader)+2;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.read(tarheader)+4;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.read(tarheader)+3;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.read(tarheader)+6;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234finalSignatureLengthtarheader=in.read(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthtarheader=in.read();
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthtarheader=in.read(signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthtarheader=in.read(tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234TarArchiveInputStreamin=newTarArchiveInputStream(tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234finalTarArchiveInputStreamin=newTarArchiveInputStream(in);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234TarArchiveInputStreamin=newTarArchiveInputStream(in,tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234TarArchiveInputStreamin=newTarArchiveInputStream(in,tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234TarArchiveInputStreamin=newTarArchiveInputStream(signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(tarheader.length-1);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader.length=in.read(tarheader.length-1);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLength=in.read(tarheader.length-1);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234sigLength=in.read(tarheader.length-1);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLength=in.read(signatureLength-1);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader.setLength(in.read(tarheader.length-1);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234nisipLength=in.read();
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234nisipLength=in.read(tarheader,TAR);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234nisipLength=in.readFully(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234nisipLength=in.read(tarheader,signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234nisipLength=in.read(tarheader,512);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(tarheader,AR);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(tarheader,DUMP);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(tarheader,JAR);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader.length>0){signatureLength=in.read(tarheader);}else{thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>512){signatureLength=in.read();}else{thrownewIOException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader.length==512){signatureLength=in.read();}else{thrownewIOException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==0){signatureLength=in.read();}else{thrownewIOException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>0){signatureLength=in.read();}else{thrownewIOException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>0){signatureLength=in.read();}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>512){signatureLength=in.read();}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader.length>0){signatureLength=in.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength!=0){signatureLength=in.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>0){in.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234in.skipChildren();
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234InputStreamin=newFileInputStream(tarheader.getPath()+1);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234InputStreamin=newFileInputStream(archiverName.getPath());
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234InputStreamin=newFileInputStream(tarheader.getPath(),TAR);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234InputStreamin=newFileInputStream(tarheader.getName());
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(tarheader,32);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(tarheader,0,256);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(tarheader,1024);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(tarheader,100);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(tarheader,1);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader==null){if(signatureLength==256){signatureLength=in.read(tarheader);}else{returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==512){if(tarheader!=null){signatureLength=in.read(tarheader);}else{returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==256){signatureLength=in.read(tarheader);}else{returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=in.read(tarheader,2);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=in.read(tarheader,0,1);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=in.read(tarheader,32);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=in.read(tarheader,4);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=in.read(tarheader,0,0);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=this.tarheader.read();
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234finalbyte[]tarheader=this.tarheader.read(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234TarArchiveInputStreamin=this.tarheader.read(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader.length>512){signatureLength=in.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader.length>512){SignatureLength=in.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==256){signatureLength=in.read(tarheader);}else{thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==512){signatureLength=in.read(tarheader);}else{thrownewIllegalStateException(".");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader.length>512){signatureLength=in.read(tarheader);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.readFully(signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.readFully(tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.readFully(tarheader,signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength!=512){signatureLength=in.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength!=512){if(tarheader!=null){signatureLength=in.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234InputStreamin=newByteArrayInputStream(signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234InputStreamin=newByteArrayInputStream(signatureLength,tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234InputStreamin=newByteArrayInputStream(dumpsig.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234InputStreamin=newByteArrayInputStream(signature);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234InputStreamin=newByteArrayInputStream(dumpsig,tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234InputStreamin=newByteArrayInputStream(signatureLength,tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(tarheader,2);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>512){thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==0){thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength!=0){thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>0){thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==2){thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234finalintsignatureLength=512;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader.length!=512){signatureLength=in.read(tarheader.length);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader.length==512){signatureLength=in.read(tarheader.length);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(tarheader)/1;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(tarheader)+4;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(tarheader)+3;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(tarheader)+256;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234in.mark(signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>512){in.mark(tarheader.length);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>512){in.mark(tarheader.length);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==512){in.mark(tarheader.length);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==512){in.mark(tarheader.length);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>0){in.mark(tarheader.length);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader.setLength(in.read(tarheader.length),signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader.setLength(in.read(tarheader.length)+1);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader.setLength(in.read(tarheader,signatureLength));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader.setLength(in.read());
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader.setLength(in.read(tarheader.length+1));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader.setLength(in.readFully(tarheader.length));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(tarheader)/2;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>512){in.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==0){in.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>512){in.read();}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234finalTarArchiveInputStreamin=newTarArchiveInputStream(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234TarArchiveInputStreamin=newTarArchiveInputStream(dumpsig,tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader.length>512){signatureLength=in.read(tarheader);}else{returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>0){signatureLength=in.read();}else{returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLength=in.read(tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader.set(signatureLength,in.read(tarheader.length));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.read(tarheader,0,tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.read(tarheader),signatureLength;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader.length==0){signatureLength=in.read(tarheader);}else{thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader==null){if(signatureLength==0){signatureLength=in.read(tarheader);}else{returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength==1){signatureLength=in.read(tarheader);}else{returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader.length==0){signatureLength=in.read(tarheader);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader.length!=0){signatureLength=in.read(tarheader);}else{thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>=0){signatureLength=in.read(tarheader);}else{thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(tarheader)+128;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(tarheader)+1024;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(tarheader)/512;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(tarheader)+10.0;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(tarheader)+1000;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLength=in.read(tarheader)+2;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLength=in.read(tarheader)+512;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLength=in.read(tarheader)/1;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLength=in.read(tarheader)+3;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLength=in.read(tarheader)+4;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLength=in.read(tarheader)+256;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(tarheader,archiverName.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(tarheader,TAR_SIZE);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(tarheader,TAR_NAME);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader==null){if(signatureLength==0){signatureLength=in.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==0){if(tarheader!=null){signatureLength=in.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength==2){signatureLength=in.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength!=512){signatureLength=in.read(tarheader);}else{thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234finalbyte[]tarheader=in.read();
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234finalbyte[]tarheader=in.read(tarheader,signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234finalbyte[]tarheader=in.read(tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234finalbyte[]tarheader=in.read(tarheader,4096);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234finalbyte[]tarheader=in.read(tarheader,dumpsig);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234finalbyte[]tarheader=in.readFully(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength!=512){signatureLength=in.read(tarheader);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234signatureLength=in.read(tarheader)/2;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLength=in.read(tarheader)/2;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234signatureLength=in.read(tarheader)/4;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234sigLength=in.read(tarheader)/2;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234signatureLength=in.read(tarheader)/3;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader.setSignalLength(signatureLength);signatureLength=in.read();
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader.set(signatureLength);signatureLength=in.read();
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=in.read(tarheader,0,signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=in.read(tarheader,512);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=in.read(tarheader,256);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader.length!=0){signatureLength=in.read(tarheader);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>=0){signatureLength=in.read(tarheader);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.read(tarheader.length+1);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(tarheader,TARIO.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLength=in.read(tarheader,TAR);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLength=in.read(tarheader,512);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLength=in.read(tarheader,256);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLength=in.read(tarheader,0);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(tarheader,0,512);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234nisipLength=in.read(signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLength=in.read(signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234semnLength=in.read(signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234in.readFully(tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234in.read(tarheader,0,tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234in.read(tarheader.length-1);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader.length==0){signatureLength=in.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==0){signatureLength=in.read();}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234InputStreamin=newByteArrayInputStream(tarheader.getBytes("UTF-8"));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234InputStreamin=newByteArrayInputStream(tarheader.getBytes(),signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234InputStreamin=newByteArrayInputStream(tarheader.getBytes()+1);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234InputStreamin=newByteArrayInputStream(tarheader.getBytes(256));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234InputStreamin=newByteArrayInputStream(tarheader.getBytes(),512);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234InputStreamin=newByteArrayInputStream(tarheader.getBytes(64));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader.length>0){signatureLength=in.read(tarheader);}else{returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength!=0){signatureLength=in.read(tarheader);}else{returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=in.read(tarheader)+tarheader.length;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=in.read(tarheader)/dumpsig.length;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=in.read(tarheader)+signatureLength;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=in.read()+tarheader.length;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234TarArchiveInputStreamin=newTarArchiveInputStream(tarheader.read());
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234TarArchiveInputStreamin=newTarArchiveInputStream(in.read(),tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234TarArchiveInputStreamin=newTarArchiveInputStream(in.read(),tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234finalTarArchiveInputStreamin=newTarArchiveInputStream(in.read());
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234TarArchiveInputStreamin=newTarArchiveInputStream(arheader.read());
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234TarArchiveInputStreamin=newTarArchiveInputStream(in.readLine());
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==256){signatureLength=in.read(tarheader);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==512){signatureLength=in.read(tarheader);}else{thrownewIllegalArgumentException(".");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==512){signatureLength=in.read();}else{returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234finalbyte[]signature=in.read(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader==null){if(signatureLength==512){signatureLength=in.read(tarheader);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength==0){signatureLength=in.read(tarheader);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength==256){signatureLength=in.read(tarheader);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength==2){signatureLength=in.read(tarheader);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==512){sigLength=in.read(tarheader);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength!=512){sigLength=in.read(tarheader);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==512){sigLength=in.read(tarheader);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength!=512){sigLength=in.read(tarheader);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==512){sigLength=in.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader.setLength(in.read(tarheader,signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader.setLength(in.readValue(tarheader.length));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader.setLength(in.readByte(tarheader.length));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=in.readFully(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234finalbyte[]signature=in.read(signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader.length<512){signatureLength=in.read(tarheader);}else{thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>0){if(signatureLength<512){signatureLength=in.read(tarheader);}else{thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234InputStreamin=newFileInputStream(tarheader.getBytes("UTF-8"));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234InputStreamin=newFileInputStream(tarheader.getBytes(),signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234InputStreamin=newFileInputStream(archiverName.getBytes());
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234InputStreamin=newFileInputStream(tarheader.getBytes()+1);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234InputStreamin=newFileInputStream(tarheader.getBytes(),TAR);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234InputStreamin=newFileInputStream(tarheader.getBytes(PRINT_SIGNATURE));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==512){SignatureLength=in.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==512){SignatureLength=in.read(signature);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==256){SignatureLength=in.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==512){SignatureLength=in.read(signatureLength);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==512){SignatureLength=in.read(tarheader);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234finalbyte[]signatureLength=in.read(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader.length>0){signatureLength=in.read(tarheader);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.read(tarheader,2);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.read(tarheader,32);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.read(tarheader,4);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.read(tarheader,3);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.read(tarheader,10);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234finalbytesignatureLength=in.read();
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234finalintsignatureLength=in.read(tarheader,0,tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234finalintsignatureLength=in.read(tarheader,0);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234finalintsignatureLength=in.read(tarheader,tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234finalStringsignatureLength=in.read();
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=in.read(tarheader,0,tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=in.read(tarheader.length+1);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=in.read(tarheader.length,dumpsig.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=tarheader.read(signature);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234finalSignatureLengthsignatureLength=in.read(signature);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234TarArchiveInputStreamin=newTarArchiveInputStream(in.read());tarheaderLength=in.read();
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength>512){signatureLength=in.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234TarArchiveInputStreamin=newTarArchiveInputStream(newByteArrayInputStream(tarheader,signatureLength));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234finalTarArchiveInputStreamin=newTarArchiveInputStream(newByteArrayInputStream(tarheader));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234TarArchiveInputStreamin=newTarArchiveInputStream(newByteArrayInputStream(signature));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader.length>512){signatureLength=in.read(tarheader);}else{thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>512){signatureLength=in.read();}else{thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader.length==512){signatureLength=in.read();}else{thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader.length!=512){signatureLength=in.read();}else{thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==0){signatureLength=in.read();}else{thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>0){signatureLength=in.read();}else{thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=in.read(tarheader,tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLength=in.read(tarheader,tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader.setLength(in.read(tarheader,tarheader.length));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.read(tarheader,tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234in.read(tarheader,tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader.length=in.read(tarheader,tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234finalbytesignatureLength=in.read(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234finalintsignatureLength=in.read(tarheader,TAR);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234finalStringsignatureLength=in.read(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234InputStreamin=newByteArrayInputStream(signature.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234InputStreamin=newByteArrayInputStream(tarheader.length-1);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234InputStreamin=newByteArrayInputStream(tarheader.length+1);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLength=in.read(tarheader,0,tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLength=in.read()+tarheader.length;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLength=tarheader.read();
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=in.read(tarheader)+512;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234signatureLength=in.read(tarheader)+128;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234signatureLength=in.read(tarheader)+1024;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader.length==0){signatureLength=in.read(tarheader);}else{returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234TarArchiveInputStreamin=TarArchiveInputStream.read(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=TarArchiveInputStream.read(in);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=TarArchiveInputStream.read(tarheader,in);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234finalbyte[]tarheader=TarArchiveInputStream.read(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=TarArchiveInputStream.read(tarheader,signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(tarheader,tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(tarheader.length,512);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(dumpsig.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>512){signatureLength=in.read();}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader.length==512){signatureLength=in.read();}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader.length!=512){signatureLength=in.read();}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>0){signatureLength=in.read();}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader.length==512){returnin.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader.length!=512){returnin.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>512){returnin.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==0){returnin.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234finalbyte[]tarheader=in.read(signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader.length<512){signatureLength=in.read(tarheader);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>0){if(signatureLength<512){signatureLength=in.read(tarheader);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader.length==0){signatureLength=in.read();}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength!=0){signatureLength=in.read();}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>0){signatureLength=in.read(signatureLength);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==512){signatureLength=in.read();}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234in.mark(tarheader.length);signatureLength=in.read(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234TarArchiveInputStreamin=newTarArchiveInputStream(newByteArrayInputStream(tarheader,512));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234TarArchiveInputStreamin=newTarArchiveInputStream(newByteArrayInputStream(tarheader,256));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthin=in.read();
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){in.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.readFully(tarheader)+1;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength==512){returnin.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){returnin.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength==256){returnin.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength==0){returnin.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength==512){returnin.read(tarheader);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(SignatureLength==0){signatureLength=in.read(tarheader);}else{returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader.setLength(in.read(tarheader));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader.setLength(in.read(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader.setLength(in.read(tarheader.length+1);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader.setLength(in.read(tarheader,0,tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength>0){signatureLength=in.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength>0){signatureLength=in.read(tarheader);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength>0){signatureLength=in.read(tarheader);}else{returnnewTarArchiveInputStream(in
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength>0){returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=this.archiverName.read(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=in.readByte(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(tarheader,16);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader.length=in.read(tarheader).length;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234InputStreamin=newByteArrayInputStream(tarheader,signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234signatureLength=in.read(tarheader,tarheader.length+1);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.read(tarheader,100).length;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.read(tarheader,4096).length;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){signatureLength=in.read(tarheader.length);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(dumpsig,tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(signature,tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==512){if(tarheader!=null){signatureLength=in.read(tarheader);}else{thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader==null){signatureLength=in.read(tarheader);}else{thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234nisipLength=in.read(tarheader,TAR_SIZE);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234nisipLength=in.read(tarheader,archiverName);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234nisipLength=in.read(tarheader)+1;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234nisipLength=in.read(tarheader,TARIO);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength==512){signatureLength=in.read();}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader==null){signatureLength=in.read();}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){signatureLength=in.read();}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength==512){signatureLength=in.read();}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234TarArchiveInputStreamin=newTarArchiveInputStream(newByteArrayInputStream(tarheader.length),TARIO);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234TarArchiveInputStreamin=newTarArchiveInputStream(newByteArrayInputStream(tarheader.length+2));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=in.read(tarheader,0);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(dumpsig);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=this.tarheader.read(signature);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234signatureLength=in.read(tarheader.length-2);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.read(tarheader.length-1);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234signatureLength=in.read(tarheader.length*1);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234sigLength=in.read(signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.readByte(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==512){signatureLength=in.read(tarheader);}else{thrownewIllegalArgumentException("".);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==512){signatureLength=in.read(signatureLength);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.read(tarheader,16);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=TarArchiveInputStream.read(tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=TarArchiveInputStream.read(tarheader,sourceName);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=TarArchiveInputStream.read(tarheader,out);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=in.read(tarheader,4096+1);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=in.read(tarheader,400);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength!=0){signatureLength=in.read(tarheader);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength==512){signatureLength=in.read(tarheader.length);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength==512){signatureLength=in.read();}else{thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader==null){signatureLength=in.read();}else{thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){signatureLength=in.read();}else{thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader.length==0){signatureLength=in.read();}else{thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234finalintsignatureLength=in.read(tarheader)+1;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234finalintsignatureLength=in.read(tarheader,TARIO);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.read(tarheader,archiverName);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234InputStreamin=newFileInputStream(tarheader.getAbsolutePath()+4);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234in.close();
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234signatureLength=in.read(tarheader)/1024;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234signatureLength=in.read(tarheader)/8;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(tarheader)/4;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==0){thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader.length==512){thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==512){if(tarheader!=null){signatureLength=in.read(tarheader);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader==null){signatureLength=in.read(tarheader);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=this.tarheader.read(tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=this.tarheader.readFully(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234InputStreamin=newFileInputStream(tarheader.getBytes(DEFAULT_TEST_NAME));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234InputStreamin=newFileInputStream(tarheader.getBytes(JAR));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader.setIsArchive();
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength<512){signatureLength=in.read(tarheader);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength<256){signatureLength=in.read(tarheader);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength<0){signatureLength=in.read(tarheader);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength<512){signatureLength=in.read(tarheader);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(SignatureLength==512){signatureLength=in.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234finalintsignatureLength=tarheader.read();
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234finalintsignatureLength=in.read(tarheader).read();
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(SignatureLength==512){signatureLength=in.read(tarheader);}else{returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234finalbyte[]tarheader=in.read(tarheader)+dumpsig.length;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234finalbyte[]tarheader=in.read(tarheader,archiverName);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234finalbyte[]tarheader=in.read(tarheader,buffer);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234TarArchiveInputStreamin=newTarArchiveInputStream(in.read(),TAR);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234TarArchiveInputStreamin=newTarArchiveInputStream(in.read(tarheader));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(tarheader,CPIO);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=in.read(tarheader)+cacherName.length;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=in.read(tarheader)+dumpsig.length+1;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=in.read(tarheader)+buffer.length;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=in.read(tarheader)+6;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==512){signatureLength=in.read(signatureLength);}else{returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==512){signatureLength=in.read(signature);}else{returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength>0){signatureLength=in.read(tarheader);}else{thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader==null){signatureLength=in.read(tarheader);}else{returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength!=512){if(tarheader!=null){signatureLength=in.read(tarheader);}else{returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==512){signatureLength=in.read(tarheader);}else{thrownewIllegalStateException("".);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==512){signatureLength=in.read(signatureLength);}else{thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength>0){signatureLength=in.read(tarheader);}else{returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength>0){returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLength=in.read(tarheader).read();
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader==null){signatureLength=in.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==0){in.mark(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthtarheader=in.read(tarheader,archiverName);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength<512){signatureLength=in.read(tarheader);}else{returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength<256){signatureLength=in.read(tarheader);}else{returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength<0){signatureLength=in.read(tarheader);}else{returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength<0){signatureLength=in.read(tarheader);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength<10){signatureLength=in.read(tarheader);}else{returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(SignatureLength==0){signatureLength=in.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength==1){signatureLength=in.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==512){signatureLength=in.read(signatureLength);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==512){signatureLength=in.read(signature);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength==512){signatureLength=in.read();}else{thrownewIOException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader.length==0){signatureLength=in.read();}else{thrownewIOException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){signatureLength=in.read();}else{thrownewIOException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==0){signatureLength=in.read();}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){signatureLength=in.read(tarheader.length);}else{thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(SignatureLength==256){signatureLength=in.read(tarheader);}else{returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(SignatureLength==256){signatureLength=in.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength==0){signatureLength=in.read();}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength==0){signatureLength=in.read();}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){SignatureLength=in.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==512){SignatureLength=in.read(signatureLength);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==0){in.mark(tarheader);}else{returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==0){in.read(tarheader);}else{returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234InputStreamin=newFileInputStream(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.read(tarheader).read();
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLength=in.read(tarheader,archiverName);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLength=in.read(tarheader,TARIO);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234TarArchiveInputStreamin=newTarArchiveInputStream(tarheader,signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength>512){signatureLength=in.read(tarheader);}else{thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength>512){signatureLength=in.read(tarheader);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength>256){signatureLength=in.read(tarheader);}else{thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==512){in.mark(tarheader.length);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234in.mark(tarheader.length-1);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==0){in.mark(tarheader.length);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength>256){signatureLength=in.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234InputStreamin=newByteArrayInputStream(tarheader.length,512);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234in.read(tarheader,0);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234InputStreamin=newFileInputStream(tarheader.getFile());
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength>512){signatureLength=in.read(tarheader);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength>256){signatureLength=in.read(tarheader);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.read(tarheader)-4;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.read(tarheader)-3;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=this.archiverName.read();
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=this.tarheader.read(signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader.setLength(in.read(tarheader,0,tarheader.length));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader.setLength(in.read(tarheader.length)-1);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234in.readFully(tarheader,0,tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength<512){signatureLength=in.read(tarheader);}else{thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength<256){signatureLength=in.read(tarheader);}else{thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength<0){signatureLength=in.read(tarheader);}else{thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength>0){signatureLength=in.read(tarheader);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader==null){if(signatureLength>0){signatureLength=in.read(tarheader);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234in.set(tarheader,signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(tarheader).read();
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.readFully(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength>256){signatureLength=in.read(tarheader);}else{returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength>512){signLength=in.read(tarheader);}else{returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(tarheader,TAR_SIGNATURE_LENGTH);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength<512){thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234thrownewIllegalArgumentException("");
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength<0){signatureLength=in.read(tarheader);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234InputStreamin=newByteArrayInputStream(64);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234InputStreamin=newByteArrayInputStream(tarheader,512);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthtarheader=in.read(tarheader,1);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>512){signatureLength=in.read(tarheader.length);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>0){signatureLength=in.read(tarheader.length);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength<512){signatureLength=in.read(tarheader.length);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength<0){signatureLength=in.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>=0){signatureLength=in.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234TarArchiveInputStreamin=newTarArchiveInputStream(newByteArrayInputStream(tarheader.length+512));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234TarArchiveInputStreamin=newTarArchiveInputStream(newByteArrayInputStream(tarheader.length),0);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength!=512){signatureLength=in.read(signatureLength);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength<0){signatureLength=in.read(tarheader);}else{thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength!=0){thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>=512){signatureLength=in.read(tarheader);}else{thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader.setLength(in.read(tarheader,in.length));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>0){in.mark(tarheader.length);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(signatureLength,256);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(tarheader,64);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(tarheader,128);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=in.read(tarheaderLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=this.tarheader.read(signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234InputStreamin=newFileInputStream(zipsig.getPath());
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234InputStreamin=newFileInputStream(file.getPath());
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(SignatureLength==512){SignatureLength=in.read(signatureLength);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(SignatureLength==512){SignatureLength=in.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234finalbyte[]tarheader=in.read(tarheader,1);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234InputStreamin=newByteArrayInputStream(tarheader.length-2);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>512){signatureLength=in.read(signatureLength);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength<512){signatureLength=in.read(signatureLength);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength>=512){signatureLength=in.read(tarheader);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>512){in.read(tarheader);}else{returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>512){in.mark(tarheader);}else{returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>=512){signatureLength=in.read(tarheader);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength!=512){signatureLength=in.read(signatureLength);}else{returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength<512){signatureLength=in.read(tarheader.length);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>512){signatureLength=in.read(tarheader.length);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==0){signatureLength=in.read(tarheader.length);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=in.read(tarheader)/2;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.read(tarheader)/2;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengtht=in.read(tarheader)/1;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength<0){signatureLength=in.read(tarheader);}else{returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength<512){returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader.setLength(in.read(tarheader.length-1));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=in.read(tarheader.length-1);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234signatureLength=in.read(signatureLength-1);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234InputStreamin=newByteArrayInputStream(tarheader.getBytes(JAR));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>512){signatureLength=in.read(tarheader.length);}else{thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength<512){signatureLength=in.read(tarheader.length);}else{thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==0){signatureLength=in.read(tarheader.length);}else{thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>0){signatureLength=in.read(tarheader.length);}else{thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength<512){signatureLength=in.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLength=in.read(signatureLength)+1;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==512){returnin.read();}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength<0){signatureLength=in.read(tarheader);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader.setLength(in.read(tarheader),tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader.length==512){in.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength<512){in.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==512){in.read();}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234InputStreamin=in.read(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength<2){signatureLength=in.read(tarheader);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>0){in.read(tarheader);}else{returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==0){in.readFully(tarheader);}else{returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(tarheader,ARCPIO);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234nisipLength=in.read(tarheader,256);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234nisipLength=in.read(tarheader,0);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234nisipLength=in.read(tarheader,4096);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength<0){signatureLength=in.read();}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>=0){signatureLength=in.read();}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==0){in.read();}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==256){signatureLength=in.read(signatureLength);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==0){signatureLength=in.read(signatureLength);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength<2){signatureLength=in.read(tarheader);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength<512){signatureLength=in.read();}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234InputStreamin=newFileInputStream(zipsig.getBytes());
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234InputStreamin=newFileInputStream(tarheader.getBytes(PRINT_NAME));
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234TarArchiveInputStreamin=newTarArchiveInputStream(in,TARIO);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234in.set(signatureLength,tarheader.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.read(tarheader,JAR);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.read(tarheader,2096);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.read(tarheader,400);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(tarheader!=null){if(signatureLength<256){signatureLength=in.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==0){sigLength=in.read(tarheader);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==0){sigLength=in.read(tarheader);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(tarheader,TAR_SIGNATURE);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader.setLength(in.read(tarheader,in.length);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=this.in.read();
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==512){signatureLength=in.read(tarheader,signatureLength);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==512){signatureLength=in.read(tarheader,signatureLength);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==512){signatureLength=in.read(tarheader,signatureLength);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength<512){signatureLength=in.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>=512){signatureLength=in.read(tarheader);}else{returnnewTarArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=TarArchiveInputStream.read(signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=TarArchiveInputStream.read();
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=TarArchiveInputStream.read(tarheader,JAR);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>=0){signatureLength=in.read(tarheader);}else{returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>0){in.mark(tarheader);}else{returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=this.tarheader.read(tarheader);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=in.read(tarheader,16);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=in.read(tarheader,3);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=in.read()+dumpsig.length;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==null){signatureLength=in.read(tarheader);}else{thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>=0){signatureLength=in.read(tarheader);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==null){signatureLength=in.read(tarheader);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLengthsignatureLength=in.read(tarheader)+6;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234SignatureLength=in.read(tarheader,4096);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234sigLength=in.read(tarheader)+1;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength<512){signatureLength=in.read();}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=in.read(tarheader.length,512);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength<512){signatureLength=in.read();}else{thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234TarArchiveInputStreamin=newTarArchiveInputStream(dumpsig);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>0){in.read(tarheader);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>0){in.read(tarheader);}else{thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>0){thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength!=0){signatureLength=in.read(signatureLength);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength<0){signatureLength=in.read(signatureLength);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>=0){signatureLength=in.read(signatureLength);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234finalintsignatureLength=in.read(tarheader,512);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234finalintsignatureLength=in.read(tarheader,256);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234finalintsignatureLength=in.read(signatureLength);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(in!=null){in.read(tarheader);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(in!=null){in.read(tarheader);}else{thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(in!=null){in.read(tarheader);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234finalintsignatureLength=this.tarheader.read();
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength!=0){signatureLength=in.read(tarheader.length);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength<0){signatureLength=in.read(tarheader.length);}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength<2){signatureLength=in.read(tarheader);}else{thrownewIllegalStateException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.readFully(tarheader)-1;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==256){signatureLength=in.read(signatureLength);}else{returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength==512){returnin.read(tarheader);}else{returnnewArchiveInputStream(in);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength>=512){signatureLength=in.read(signatureLength);}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234InputStreamin=newFileInputStream(zipsig.getAbsolutePath());
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength<512){signatureLength=in.read();}else{thrownewIOException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(signatureLength!=512){signatureLength=in.read();}else{thrownewIOException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheaderLength=in.read(tarheader)+512;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234signatureLength=in.read(tarheader)/512;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234in.read(tarheader)+512;
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=in.read(tarheader,2096);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234tarheader=this.tarheader.read(tarheader,this.zip);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234TarArchiveInputStreamin=newTarArchiveInputStream(in.read(),TARIO);
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(in!=null){in.read();}else{thrownewIllegalArgumentException("");}
projects/Compress16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java234if(in!=null){in.read();}else{thrownewIllegalStateException("");}
