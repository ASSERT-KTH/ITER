bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    tType  =  -5;  [CE]  <identifier>  expected  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;    [BUGGY]    tType  =  -5;  [BUGGY]  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	    tType  =  -5;		non-compiled	[CE]  <identifier>  expected	50	None	add
2	[BUG]  [BUGGY]    tType  =  0.5  *  dMin;  [CE]  <identifier>  expected  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;    [BUGGY]    tType  =  0.5  *  dMin;  [BUGGY]  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	    tType  =  0.5  *  dMin;		non-compiled	[CE]  <identifier>  expected	50	None	add
3	[BUG]  [BUGGY]    int  pingPong  =  Math.max(tType,  Math.min(tType,  s));  [CE]  <identifier>  expected  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;    [BUGGY]    int  pingPong  =  Math.max(tType,  Math.min(tType,  s));  [BUGGY]  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	    int  pingPong  =  Math.max(tType,  Math.min(tType,  s));		non-compiled	[CE]  <identifier>  expected	50	None	add
4	[BUG]  [BUGGY]    tType  =  -tType;  [CE]  <identifier>  expected  [FE]          ArrayIndexOutOfBoundsException  [CONTEXT]  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;    [BUGGY]    tType  =  -tType;  [BUGGY]  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	    tType  =  -tType;		non-compiled	[CE]  <identifier>  expected	50	None	add
5	[BUG]  [BUGGY]    int  pingPong  =  Math.max(tType,  Math.min(tType,  dMin));  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException  [CONTEXT]  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;    [BUGGY]    int  pingPong  =  Math.max(tType,  Math.min(tType,  dMin));  [BUGGY]  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	    int  pingPong  =  Math.max(tType,  Math.min(tType,  dMin));		non-compiled	[CE]  <identifier>  expected	50	None	add
6	[BUG]  [BUGGY]  final  int  np  =  np  -  2  *  s;  [CE]  <identifier>  expected  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;    [BUGGY]  final  int  np  =  np  -  2  *  s;  [BUGGY]  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	final  int  np  =  np  -  2  *  s;	final  int  np  =  nn  -  2  *  pingPong;  	non-compiled	[CE]  <identifier>  expected	49	None	replace
7	[BUG]  [BUGGY]  final  double  np  =  nn  -  2  *  pingPong;  [CE]  <identifier>  expected  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;    [BUGGY]  final  double  np  =  nn  -  2  *  pingPong;  [BUGGY]  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	final  double  np  =  nn  -  2  *  pingPong;	final  int  np  =  nn  -  2  *  pingPong;  	non-compiled	[CE]  <identifier>  expected	49	None	replace
8	[BUG]  [BUGGY]  final  int  np  =  np  -  2  *  tType;  [CE]  <identifier>  expected  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;    [BUGGY]  final  int  np  =  np  -  2  *  tType;  [BUGGY]  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	final  int  np  =  np  -  2  *  tType;	final  int  np  =  nn  -  2  *  pingPong;  	non-compiled	[CE]  <identifier>  expected	49	None	replace
9	[BUG]  [BUGGY]  final  int  np  =  np  -  2  *  dN2;  [CE]  <identifier>  expected  [FE]          ArrayIndexOutOfBoundsException  [CONTEXT]  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;    [BUGGY]  final  int  np  =  np  -  2  *  dN2;  [BUGGY]  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	final  int  np  =  np  -  2  *  dN2;	final  int  np  =  nn  -  2  *  pingPong;  	non-compiled	[CE]  <identifier>  expected	49	None	replace
10	[BUG]  [BUGGY]    double  pingPong  =  Math.min(tType,  dN2);  [CE]  <identifier>  expected  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;    [BUGGY]    double  pingPong  =  Math.min(tType,  dN2);  [BUGGY]  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	    double  pingPong  =  Math.min(tType,  dN2);		non-compiled	[CE]  <identifier>  expected	50	None	add
11	[BUG]  [BUGGY]    final  int  pingPong  =  Math.min(tType,  dN2);  [CE]  <identifier>  expected  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;    [BUGGY]    final  int  pingPong  =  Math.min(tType,  dN2);  [BUGGY]  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	    final  int  pingPong  =  Math.min(tType,  dN2);		non-compiled	[CE]  <identifier>  expected	50	None	add
12	[BUG]  [BUGGY]    double  pingPong  =  Math.pow(10,  tType);  [CE]  <identifier>  expected  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;    [BUGGY]    double  pingPong  =  Math.pow(10,  tType);  [BUGGY]  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	    double  pingPong  =  Math.pow(10,  tType);		non-compiled	[CE]  <identifier>  expected	50	None	add
13	[BUG]  [BUGGY]    double  pingPong  =  Math.min(tType,  s);  [CE]  <identifier>  expected  [FE]          ArrayIndexOutOfBoundsException  [CONTEXT]  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;    [BUGGY]    double  pingPong  =  Math.min(tType,  s);  [BUGGY]  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	    double  pingPong  =  Math.min(tType,  s);		non-compiled	[CE]  <identifier>  expected	50	None	add
14	[BUG]  [BUGGY]    double  pingPong  =  Math.min(tType,  dMin);  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException  [CONTEXT]  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;    [BUGGY]    double  pingPong  =  Math.min(tType,  dMin);  [BUGGY]  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	    double  pingPong  =  Math.min(tType,  dMin);		non-compiled	[CE]  <identifier>  expected	50	None	add
15	[BUG]  [BUGGY]  final  int  np  =  np  -  2  *  dMin;  [CE]  <identifier>  expected  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;    [BUGGY]  final  int  np  =  np  -  2  *  dMin;  [BUGGY]  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	final  int  np  =  np  -  2  *  dMin;	final  int  np  =  nn  -  2  *  pingPong;  	non-compiled	[CE]  <identifier>  expected	49	None	replace
16	[BUG]  [BUGGY]    double  np  =  Math.min(tType,  dN2);  [CE]  <identifier>  expected  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;    [BUGGY]    double  np  =  Math.min(tType,  dN2);  [BUGGY]  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	    double  np  =  Math.min(tType,  dN2);		non-compiled	[CE]  <identifier>  expected	50	None	add
17	[BUG]  [BUGGY]    np  =  Math.min(tType,  dN2);  [CE]  <identifier>  expected  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;    [BUGGY]    np  =  Math.min(tType,  dN2);  [BUGGY]  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	    np  =  Math.min(tType,  dN2);		non-compiled	[CE]  <identifier>  expected	50	None	add
18	[BUG]  [BUGGY]    int  pingPong  =  Math.min(tType,  dN2);  [CE]  <identifier>  expected  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;    [BUGGY]    int  pingPong  =  Math.min(tType,  dN2);  [BUGGY]  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	    int  pingPong  =  Math.min(tType,  dN2);		non-compiled	[CE]  <identifier>  expected	50	None	add
19	[BUG]  [BUGGY]    int  pingPong  =  Math.min(tType,  dMin);  [CE]  <identifier>  expected  [FE]          ArrayIndexOutOfBoundsException  [CONTEXT]  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;    [BUGGY]    int  pingPong  =  Math.min(tType,  dMin);  [BUGGY]  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	    int  pingPong  =  Math.min(tType,  dMin);		non-compiled	[CE]  <identifier>  expected	50	None	add
