bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double  s  =  squaredSecondary[i]  *  splitTolerance;  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  final  double  s  =  squaredSecondary[i]  *  splitTolerance;  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  squaredSecondary[i]  *  splitTolerance;	  final    double    s    =    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	1	None	replace
2	[BUG]  [BUGGY]  final  double  s  =  squaredSecondary[i]  +  1;  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  final  double  s  =  squaredSecondary[i]  +  1;  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  squaredSecondary[i]  +  1;	  final    double    s    =    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	1	None	replace
3	[BUG]  [BUGGY]  final  double  s  =  squaredSecondary[i  +  1];  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  final  double  s  =  squaredSecondary[i  +  1];  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  squaredSecondary[i  +  1];	  final    double    s    =    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	1	None	replace
4	[BUG]  [BUGGY]  final  double  s  =  sqlSecondary[i]  *  squaredSecondary[i];  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  final  double  s  =  sqlSecondary[i]  *  squaredSecondary[i];  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  sqlSecondary[i]  *  squaredSecondary[i];	  final    double    s    =    sqlSecondary[i];    	non-compiled	[CE]  ';'  expected	16	None	replace
5	[BUG]  [BUGGY]  final  double  s  =  sqlSecondary[i]  *  squaredSecondary.length;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  final  double  s  =  sqlSecondary[i]  *  squaredSecondary.length;  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  sqlSecondary[i]  *  squaredSecondary.length;	  final    double    s    =    sqlSecondary[i];    	non-compiled	[CE]  ';'  expected	16	None	replace
6	[BUG]  [BUGGY]  squaredSecondary[i]  =  1;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  squaredSecondary[i]  =  1;  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  1;	      squaredSecondary[i]    =    0;    	non-compiled	[CE]  ';'  expected	8	None	replace
7	[BUG]  [BUGGY]  squaredSecondary[i]  =  -1;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  squaredSecondary[i]  =  -1;  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  -1;	      squaredSecondary[i]    =    0;    	non-compiled	[CE]  ';'  expected	8	None	replace
8	[BUG]  [BUGGY]  squaredSecondary[i]  =  0L;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  squaredSecondary[i]  =  0L;  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  0L;	      squaredSecondary[i]    =    0;    	non-compiled	[CE]  ';'  expected	8	None	replace
9	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i]  -  1);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i]  -  1);  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i]  -  1);	      squaredSecondary[i]    =    Math.max(0,    squaredSecondary[i]);    	non-compiled	[CE]  ';'  expected	6	None	replace
10	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i].length);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i].length);  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i].length);	      squaredSecondary[i]    =    Math.max(0,    squaredSecondary[i]);    	non-compiled	[CE]  ';'  expected	6	None	replace
11	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i],  splitTolerance);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i],  splitTolerance);  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i],  splitTolerance);	      squaredSecondary[i]    =    Math.max(0,    squaredSecondary[i]);    	non-compiled	[CE]  ';'  expected	6	None	replace
12	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i]  +  1);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i]  +  1);  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i]  +  1);	      squaredSecondary[i]    =    Math.max(0,    squaredSecondary[i]);    	non-compiled	[CE]  ';'  expected	6	None	replace
13	[BUG]  [BUGGY]  double[]  secondary  =  squaredSecondary.get(i  +  1);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  double[]  secondary  =  squaredSecondary.get(i  +  1);  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	double[]  secondary  =  squaredSecondary.get(i  +  1);	      double[]    secondary    =    squaredSecondary.get(i);    	non-compiled	[CE]  ';'  expected	19	None	replace
14	[BUG]  [BUGGY]  double[]  secondary  =  squaredSecondary.get(i  -  1);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  double[]  secondary  =  squaredSecondary.get(i  -  1);  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	double[]  secondary  =  squaredSecondary.get(i  -  1);	      double[]    secondary    =    squaredSecondary.get(i);    	non-compiled	[CE]  ';'  expected	19	None	replace
15	[BUG]  [BUGGY]  double[]  secondary  =  squaredSecondary.get(i,  splitTolerance);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  double[]  secondary  =  squaredSecondary.get(i,  splitTolerance);  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	double[]  secondary  =  squaredSecondary.get(i,  splitTolerance);	      double[]    secondary    =    squaredSecondary.get(i);    	non-compiled	[CE]  ';'  expected	19	None	replace
16	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[i  +  1]);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[i  +  1]);  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[i  +  1]);	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    ArrayRealVector[i]);    	non-compiled	[CE]  ';'  expected	17	None	replace
17	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[i],  squaredSecondary[i]);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[i],  squaredSecondary[i]);  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[i],  squaredSecondary[i]);	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    ArrayRealVector[i]);    	non-compiled	[CE]  ';'  expected	17	None	replace
18	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[0]);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[0]);  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[0]);	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    ArrayRealVector[i]);    	non-compiled	[CE]  ';'  expected	17	None	replace
19	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[i],  squaredSecondary[i]);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[i],  squaredSecondary[i]);  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[i],  squaredSecondary[i]);	      ArrayRealVector[]    secondary    =    squaredSecondary.toArray(new    ArrayRealVector[i]);    	non-compiled	[CE]  ';'  expected	18	None	replace
20	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[i  +  1]);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[i  +  1]);  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[i  +  1]);	      ArrayRealVector[]    secondary    =    squaredSecondary.toArray(new    ArrayRealVector[i]);    	non-compiled	[CE]  ';'  expected	18	None	replace
21	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[0]);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[0]);  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[0]);	      ArrayRealVector[]    secondary    =    squaredSecondary.toArray(new    ArrayRealVector[i]);    	non-compiled	[CE]  ';'  expected	18	None	replace
22	[BUG]  [BUGGY]  double  s  =  squaredSecondary[i]  +  1;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  double  s  =  squaredSecondary[i]  +  1;  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	double  s  =  squaredSecondary[i]  +  1;	      double    s    =    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	12	None	replace
23	[BUG]  [BUGGY]  double  s  =  squaredSecondary[i]  +  splitTolerance;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  double  s  =  squaredSecondary[i]  +  splitTolerance;  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	double  s  =  squaredSecondary[i]  +  splitTolerance;	      double    s    =    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	12	None	replace
24	[BUG]  [BUGGY]  squaredSecondary[i]  =  new  double[splitTolerance.length  -  1];  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  squaredSecondary[i]  =  new  double[splitTolerance.length  -  1];  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  new  double[splitTolerance.length  -  1];	      squaredSecondary[i]    =    new    double[splitTolerance.length];    	non-compiled	[CE]  ';'  expected	5	None	replace
25	[BUG]  [BUGGY]  squaredSecondary[i]  =  new  double[splitTolerance.length  *  2];  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  squaredSecondary[i]  =  new  double[splitTolerance.length  *  2];  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  new  double[splitTolerance.length  *  2];	      squaredSecondary[i]    =    new    double[splitTolerance.length];    	non-compiled	[CE]  ';'  expected	5	None	replace
26	[BUG]  [BUGGY]  squaredSecondary[i]  =  new  double[splitTolerance.length  +  2];  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  squaredSecondary[i]  =  new  double[splitTolerance.length  +  2];  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  new  double[splitTolerance.length  +  2];	      squaredSecondary[i]    =    new    double[splitTolerance.length];    	non-compiled	[CE]  ';'  expected	5	None	replace
27	[BUG]  [BUGGY]  squaredSecondary[i]  =  new  double[splitTolerance.length  +  3];  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  squaredSecondary[i]  =  new  double[splitTolerance.length  +  3];  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  new  double[splitTolerance.length  +  3];	      squaredSecondary[i]    =    new    double[splitTolerance.length    +    1];    	non-compiled	[CE]  ';'  expected	7	None	replace
28	[BUG]  [BUGGY]  final  double  s  =  squaredSecondary[i].doubleValue()  +  1;  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  final  double  s  =  squaredSecondary[i].doubleValue()  +  1;  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  squaredSecondary[i].doubleValue()  +  1;	  final    double    s    =    squaredSecondary[i].doubleValue();    	non-compiled	[CE]  ';'  expected	15	None	replace
29	[BUG]  [BUGGY]  final  double  s  =  squaredSecondary[i].doubleValue()  +  splitTolerance;  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  final  double  s  =  squaredSecondary[i].doubleValue()  +  splitTolerance;  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  squaredSecondary[i].doubleValue()  +  splitTolerance;	  final    double    s    =    squaredSecondary[i].doubleValue();    	non-compiled	[CE]  ';'  expected	15	None	replace
30	[BUG]  [BUGGY]  final  double  s  =  squaredSecondary[i].doubleValue()  *  splitTolerance;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  final  double  s  =  squaredSecondary[i].doubleValue()  *  splitTolerance;  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  squaredSecondary[i].doubleValue()  *  splitTolerance;	  final    double    s    =    squaredSecondary[i].doubleValue();    	non-compiled	[CE]  ';'  expected	15	None	replace
31	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary[i],  splitTolerance.doubleValue());  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary[i],  splitTolerance.doubleValue());  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.min(squaredSecondary[i],  splitTolerance.doubleValue());	      squaredSecondary[i]    =    Math.min(splitTolerance,    squaredSecondary[i].doubleValue());    	non-compiled	[CE]  ';'  expected	11	None	replace
32	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(splitTolerance,  squaredSecondary[i].doubleValue()  +  1);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  squaredSecondary[i]  =  Math.min(splitTolerance,  squaredSecondary[i].doubleValue()  +  1);  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.min(splitTolerance,  squaredSecondary[i].doubleValue()  +  1);	      squaredSecondary[i]    =    Math.min(splitTolerance,    squaredSecondary[i].doubleValue());    	non-compiled	[CE]  ';'  expected	11	None	replace
33	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(splitTolerance,  squaredSecondary[i].doubleValue()  -  1);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  squaredSecondary[i]  =  Math.min(splitTolerance,  squaredSecondary[i].doubleValue()  -  1);  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.min(splitTolerance,  squaredSecondary[i].doubleValue()  -  1);	      squaredSecondary[i]    =    Math.min(splitTolerance,    squaredSecondary[i].doubleValue());    	non-compiled	[CE]  ';'  expected	11	None	replace
34	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[i]);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[i]);  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[i]);	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(i);    	non-compiled	[CE]  ';'  expected	9	None	replace
35	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(i,  squaredTolerance);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(i,  squaredTolerance);  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(i,  squaredTolerance);	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(i);    	non-compiled	[CE]  ';'  expected	9	None	replace
36	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(realEigenvalues);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(realEigenvalues);  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(realEigenvalues);	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(i);    	non-compiled	[CE]  ';'  expected	9	None	replace
37	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[squaredSecondary.length  +  1]);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[squaredSecondary.length  +  1]);  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[squaredSecondary.length  +  1]);	      ArrayRealVector[]    secondary    =    squaredSecondary.toArray(new    double[squaredSecondary.length]);    	non-compiled	[CE]  ';'  expected	13	None	replace
38	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[squaredSecondary.length  -  1]);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[squaredSecondary.length  -  1]);  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[squaredSecondary.length  -  1]);	      ArrayRealVector[]    secondary    =    squaredSecondary.toArray(new    double[squaredSecondary.length]);    	non-compiled	[CE]  ';'  expected	13	None	replace
39	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[quadSecondary.length  +  1]);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[quadSecondary.length  +  1]);  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[quadSecondary.length  +  1]);	      ArrayRealVector[]    secondary    =    squaredSecondary.toArray(new    double[squaredSecondary.length]);    	non-compiled	[CE]  ';'  expected	13	None	replace
40	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[quaredSecondary.length  +  1]);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[quaredSecondary.length  +  1]);  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[quaredSecondary.length  +  1]);	      ArrayRealVector[]    secondary    =    squaredSecondary.toArray(new    double[squaredSecondary.length]);    	non-compiled	[CE]  ';'  expected	13	None	replace
41	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.getRangeEigenvectors();  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.getRangeEigenvectors();  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.getRangeEigenvectors();	      ArrayRealVector[]    secondary    =    squaredSecondary.getEigenvectors();    	non-compiled	[CE]  ';'  expected	20	None	replace
42	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray();  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray();  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.toArray();	      ArrayRealVector[]    secondary    =    squaredSecondary.getEigenvectors();    	non-compiled	[CE]  ';'  expected	20	None	replace
43	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.getRaws();  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.getRaws();  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.getRaws();	      ArrayRealVector[]    secondary    =    squaredSecondary.getEigenvectors();    	non-compiled	[CE]  ';'  expected	20	None	replace
44	[BUG]  [BUGGY]  final  double  s  =  squaredSecondary[i]  +  this.splitTolerance;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  final  double  s  =  squaredSecondary[i]  +  this.splitTolerance;  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  squaredSecondary[i]  +  this.splitTolerance;	  final    double    s    =    squaredSecondary[i]    +    splitTolerance;    	non-compiled	[CE]  ';'  expected	3	None	replace
45	[BUG]  [BUGGY]  final  double  s  =  squaredSecondary[i]  /  splitTolerance;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  final  double  s  =  squaredSecondary[i]  /  splitTolerance;  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  squaredSecondary[i]  /  splitTolerance;	  final    double    s    =    squaredSecondary[i]    +    splitTolerance;    	non-compiled	[CE]  ';'  expected	3	None	replace
46	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.getrealEigenvectors();  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.getrealEigenvectors();  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.getrealEigenvectors();	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.getEigenvectors();    	non-compiled	[CE]  ';'  expected	21	None	replace
47	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray();  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray();  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray();	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.getEigenvectors();    	non-compiled	[CE]  ';'  expected	21	None	replace
48	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.getValues();  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.getValues();  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.getValues();	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.getEigenvectors();    	non-compiled	[CE]  ';'  expected	21	None	replace
49	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.getImagEigenvalues();  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.getImagEigenvalues();  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.getImagEigenvalues();	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.getEigenvectors();    	non-compiled	[CE]  ';'  expected	21	None	replace
50	[BUG]  [BUGGY]  squaredSecondary[i]  =  s  *  s;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  squaredSecondary[i]  =  s  *  s;  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  s  *  s;	      	non-compiled	[CE]  ';'  expected	4	None	replace
51	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(s,  squaredSecondary[i]);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  squaredSecondary[i]  =  Math.min(s,  squaredSecondary[i]);  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.min(s,  squaredSecondary[i]);	      	non-compiled	[CE]  ';'  expected	4	None	replace
52	[BUG]  [BUGGY]  s  *=  squaredSecondary[i];  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  s  *=  squaredSecondary[i];  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	s  *=  squaredSecondary[i];	      	non-compiled	[CE]  ';'  expected	4	None	replace
53	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary[i],  splitTolerance);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary[i],  splitTolerance);  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.min(squaredSecondary[i],  splitTolerance);	      squaredSecondary[i]    =    Math.min(splitTolerance,    squaredSecondary[i]);    	non-compiled	[CE]  ';'  expected	10	None	replace
54	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(splitTolerance,  squaredSecondary[i]  -  1);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  squaredSecondary[i]  =  Math.min(splitTolerance,  squaredSecondary[i]  -  1);  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.min(splitTolerance,  squaredSecondary[i]  -  1);	      squaredSecondary[i]    =    Math.min(splitTolerance,    squaredSecondary[i]);    	non-compiled	[CE]  ';'  expected	10	None	replace
55	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(splitTolerance,  squaredSecondary[i]  +  1);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  squaredSecondary[i]  =  Math.min(splitTolerance,  squaredSecondary[i]  +  1);  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.min(splitTolerance,  squaredSecondary[i]  +  1);	      squaredSecondary[i]    =    Math.min(splitTolerance,    squaredSecondary[i]);    	non-compiled	[CE]  ';'  expected	10	None	replace
56	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary[i].clone();  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary[i].clone();  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary[i].clone();	      ArrayRealVector[]    secondary    =    squaredSecondaries[i].clone();    	non-compiled	[CE]  ';'  expected	14	None	replace
57	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondaries[i].copyOf(splitTolerance);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondaries[i].copyOf(splitTolerance);  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondaries[i].copyOf(splitTolerance);	      ArrayRealVector[]    secondary    =    squaredSecondaries[i].clone();    	non-compiled	[CE]  ';'  expected	14	None	replace
58	[BUG]  [BUGGY]  final  double  s  =  this.realEigenvalues[i]  *  squaredSecondary[i];  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  final  double  s  =  this.realEigenvalues[i]  *  squaredSecondary[i];  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  this.realEigenvalues[i]  *  squaredSecondary[i];	  final    double    s    =    this.realEigenvalues[i];    	non-compiled	[CE]  ';'  expected	2	None	replace
59	[BUG]  [BUGGY]  final  double  s  =  this.realEigenvalues[i  +  1];  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  final  double  s  =  this.realEigenvalues[i  +  1];  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  this.realEigenvalues[i  +  1];	  final    double    s    =    this.realEigenvalues[i];    	non-compiled	[CE]  ';'  expected	2	None	replace
60	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(i,  squaredSecondary.length);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(i,  squaredSecondary.length);  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(i,  squaredSecondary.length);	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(i);    	non-compiled	[CE]  ';'  expected	9	None	replace
61	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(i  +  1);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(i  +  1);  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(i  +  1);	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(i);    	non-compiled	[CE]  ';'  expected	9	None	replace
62	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondaries[i].clone(transformer);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondaries[i].clone(transformer);  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondaries[i].clone(transformer);	      ArrayRealVector[]    secondary    =    squaredSecondaries[i].clone();    	non-compiled	[CE]  ';'  expected	14	None	replace
63	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i],  secondary[i]);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i],  secondary[i]);  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i],  secondary[i]);	      squaredSecondary[i]    =    Math.max(0,    squaredSecondary[i]);    	non-compiled	[CE]  ';'  expected	6	None	replace
64	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.max(0.0,  squaredSecondary[i]);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  squaredSecondary[i]  =  Math.max(0.0,  squaredSecondary[i]);  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.max(0.0,  squaredSecondary[i]);	      squaredSecondary[i]    =    Math.max(0,    squaredSecondary[i]);    	non-compiled	[CE]  ';'  expected	6	None	replace
65	[BUG]  [BUGGY]  final  double  s  =  squaredSecondary[i].doubleValue()  *  1;  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  final  double  s  =  squaredSecondary[i].doubleValue()  *  1;  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  squaredSecondary[i].doubleValue()  *  1;	  final    double    s    =    squaredSecondary[i].doubleValue();    	non-compiled	[CE]  ';'  expected	15	None	replace
66	[BUG]  [BUGGY]  final  double  s  =  squaredSecondary[i].doubleValue()  *  2;  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  final  double  s  =  squaredSecondary[i].doubleValue()  *  2;  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  squaredSecondary[i].doubleValue()  *  2;	  final    double    s    =    squaredSecondary[i].doubleValue();    	non-compiled	[CE]  ';'  expected	15	None	replace
67	[BUG]  [BUGGY]  final  double  s  =  this.realEigenvalues[i]  *  squaredSecondary.length;  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  final  double  s  =  this.realEigenvalues[i]  *  squaredSecondary.length;  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  this.realEigenvalues[i]  *  squaredSecondary.length;	  final    double    s    =    this.realEigenvalues[i];    	non-compiled	[CE]  ';'  expected	2	None	replace
68	[BUG]  [BUGGY]  final  double  s  =  sqlSecondary[i]  *  squaredSecondary;  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  final  double  s  =  sqlSecondary[i]  *  squaredSecondary;  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  sqlSecondary[i]  *  squaredSecondary;	  final    double    s    =    sqlSecondary[i];    	non-compiled	[CE]  ';'  expected	16	None	replace
69	[BUG]  [BUGGY]  squaredSecondary[i]  =  new  double[squaredSecondary.length  +  1];  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  squaredSecondary[i]  =  new  double[squaredSecondary.length  +  1];  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  new  double[squaredSecondary.length  +  1];	      squaredSecondary[i]    =    new    double[splitTolerance.length    +    1];    	non-compiled	[CE]  ';'  expected	7	None	replace
70	[BUG]  [BUGGY]  squaredSecondary[i]  =  Double.POSITIVE_INFINITY;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  squaredSecondary[i]  =  Double.POSITIVE_INFINITY;  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Double.POSITIVE_INFINITY;	      squaredSecondary[i]    =    0;    	non-compiled	[CE]  ';'  expected	8	None	replace
71	[BUG]  [BUGGY]  double  s  =  squaredSecondary[i]  +  10.0;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  double  s  =  squaredSecondary[i]  +  10.0;  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	double  s  =  squaredSecondary[i]  +  10.0;	      double    s    =    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	12	None	replace
72	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.clone();  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.clone();  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.clone();	      ArrayRealVector[]    secondary    =    squaredSecondary.getEigenvectors();    	non-compiled	[CE]  ';'  expected	20	None	replace
73	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[squaredSecondary.length  +  i]);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[squaredSecondary.length  +  i]);  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[squaredSecondary.length  +  i]);	      ArrayRealVector[]    secondary    =    squaredSecondary.toArray(new    double[squaredSecondary.length]);    	non-compiled	[CE]  ';'  expected	13	None	replace
74	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[splitTolerance.length]);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[splitTolerance.length]);  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[splitTolerance.length]);	      ArrayRealVector[]    secondary    =    squaredSecondary.toArray(new    double[squaredSecondary.length]);    	non-compiled	[CE]  ';'  expected	13	None	replace
75	[BUG]  [BUGGY]  double[]  secondary  =  squaredSecondary.get(i)+  1;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  double[]  secondary  =  squaredSecondary.get(i)+  1;  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	double[]  secondary  =  squaredSecondary.get(i)+  1;	      double[]    secondary    =    squaredSecondary.get(i);    	non-compiled	[CE]  ';'  expected	19	None	replace
76	[BUG]  [BUGGY]  final  double  s  =  realEigenvalues[i]  *  squaredSecondary.length;  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  final  double  s  =  realEigenvalues[i]  *  squaredSecondary.length;  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  realEigenvalues[i]  *  squaredSecondary.length;	  final    double    s    =    realEigenvalues[i];    	non-compiled	[CE]  ';'  expected	22	None	replace
77	[BUG]  [BUGGY]  final  double  s  =  realEigenvalues[i]  *  squaredSecondary[i];  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  final  double  s  =  realEigenvalues[i]  *  squaredSecondary[i];  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  realEigenvalues[i]  *  squaredSecondary[i];	  final    double    s    =    realEigenvalues[i];    	non-compiled	[CE]  ';'  expected	22	None	replace
78	[BUG]  [BUGGY]  double  s  =  squaredSecondary[i].doubleValue();  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  double  s  =  squaredSecondary[i].doubleValue();  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	double  s  =  squaredSecondary[i].doubleValue();	      	non-compiled	[CE]  ';'  expected	4	None	replace
79	[BUG]  [BUGGY]  ArrayRealVector  s  =  squaredSecondary[i];  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  ArrayRealVector  s  =  squaredSecondary[i];  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector  s  =  squaredSecondary[i];	      	non-compiled	[CE]  ';'  expected	4	None	replace
80	[BUG]  [BUGGY]  final  double  s  =  squaredSecondary[i]  -  splitTolerance;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  final  double  s  =  squaredSecondary[i]  -  splitTolerance;  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  squaredSecondary[i]  -  splitTolerance;	  final    double    s    =    squaredSecondary[i]    +    splitTolerance;    	non-compiled	[CE]  ';'  expected	3	None	replace
81	[BUG]  [BUGGY]  squaredSecondary[i]  =  new  double[squaredSecondary.length];  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  squaredSecondary[i]  =  new  double[squaredSecondary.length];  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  new  double[squaredSecondary.length];	      squaredSecondary[i]    =    new    double[splitTolerance.length];    	non-compiled	[CE]  ';'  expected	5	None	replace
82	[BUG]  [BUGGY]  squaredSecondary[i]  =  new  double[splitTolerance.length  +  i];  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  squaredSecondary[i]  =  new  double[splitTolerance.length  +  i];  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  new  double[splitTolerance.length  +  i];	      squaredSecondary[i]    =    new    double[splitTolerance.length];    	non-compiled	[CE]  ';'  expected	5	None	replace
83	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[i]),  squaredSecondary);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[i]),  squaredSecondary);  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[i]),  squaredSecondary);	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    ArrayRealVector[i]);    	non-compiled	[CE]  ';'  expected	17	None	replace
84	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary,  splitTolerance);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary,  splitTolerance);  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.min(squaredSecondary,  splitTolerance);	      squaredSecondary[i]    =    Math.min(splitTolerance,    squaredSecondary[i]);    	non-compiled	[CE]  ';'  expected	10	None	replace
85	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondaries[i].remove();  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondaries[i].remove();  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondaries[i].remove();	      ArrayRealVector[]    secondary    =    squaredSecondaries[i].clone();    	non-compiled	[CE]  ';'  expected	14	None	replace
86	[BUG]  [BUGGY]  final  double  s  =  squaredSecondary[i].doubleValue().doubleValue();  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  final  double  s  =  squaredSecondary[i].doubleValue().doubleValue();  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  squaredSecondary[i].doubleValue().doubleValue();	  final    double    s    =    squaredSecondary[i].doubleValue();    	non-compiled	[CE]  ';'  expected	15	None	replace
87	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.getRaw();  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.getRaw();  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.getRaw();	      ArrayRealVector[]    secondary    =    squaredSecondary.getEigenvectors();    	non-compiled	[CE]  ';'  expected	20	None	replace
88	[BUG]  [BUGGY]  double  s  =  squaredSecondary[i]  -  1;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  double  s  =  squaredSecondary[i]  -  1;  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	double  s  =  squaredSecondary[i]  -  1;	      double    s    =    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	12	None	replace
89	[BUG]  [BUGGY]  final  double  s  =  this.realEigenvalues[i].doubleValue();  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  final  double  s  =  this.realEigenvalues[i].doubleValue();  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  this.realEigenvalues[i].doubleValue();	  final    double    s    =    this.realEigenvalues[i];    	non-compiled	[CE]  ';'  expected	2	None	replace
90	[BUG]  [BUGGY]  squaredSecondary[i]  =  new  double[splitTolerance.length  *  1];  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  squaredSecondary[i]  =  new  double[splitTolerance.length  *  1];  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  new  double[splitTolerance.length  *  1];	      squaredSecondary[i]    =    new    double[splitTolerance.length    +    1];    	non-compiled	[CE]  ';'  expected	7	None	replace
91	[BUG]  [BUGGY]  final  double  s  =  sqlSecondary[i].doubleValue();  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  final  double  s  =  sqlSecondary[i].doubleValue();  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  sqlSecondary[i].doubleValue();	  final    double    s    =    sqlSecondary[i];    	non-compiled	[CE]  ';'  expected	16	None	replace
92	[BUG]  [BUGGY]  final  double  s  =  sqlSecondary[i]  -  1;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  final  double  s  =  sqlSecondary[i]  -  1;  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  sqlSecondary[i]  -  1;	  final    double    s    =    sqlSecondary[i];    	non-compiled	[CE]  ';'  expected	16	None	replace
93	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[splitTolerance]);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[splitTolerance]);  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[splitTolerance]);	      ArrayRealVector[]    secondary    =    squaredSecondary.toArray(new    double[squaredSecondary.length]);    	non-compiled	[CE]  ';'  expected	13	None	replace
94	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[i]),  squaredSecondary);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[i]),  squaredSecondary);  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[i]),  squaredSecondary);	      ArrayRealVector[]    secondary    =    squaredSecondary.toArray(new    ArrayRealVector[i]);    	non-compiled	[CE]  ';'  expected	18	None	replace
95	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.max(10.0,  squaredSecondary[i]);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  squaredSecondary[i]  =  Math.max(10.0,  squaredSecondary[i]);  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.max(10.0,  squaredSecondary[i]);	      squaredSecondary[i]    =    Math.max(0,    squaredSecondary[i]);    	non-compiled	[CE]  ';'  expected	6	None	replace
96	[BUG]  [BUGGY]  final  double  s  =  squaredSecondary[i]  -  1;  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  final  double  s  =  squaredSecondary[i]  -  1;  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  squaredSecondary[i]  -  1;	  final    double    s    =    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	1	None	replace
97	[BUG]  [BUGGY]  s  *=  squaredSecondary.length;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  s  *=  squaredSecondary.length;  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	s  *=  squaredSecondary.length;	      	non-compiled	[CE]  ';'  expected	4	None	replace
98	[BUG]  [BUGGY]  double  s  =  squaredSecondary.length;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  double  s  =  squaredSecondary.length;  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	double  s  =  squaredSecondary.length;	      	non-compiled	[CE]  ';'  expected	4	None	replace
99	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary,  squaredSecondary[i].doubleValue());  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary,  squaredSecondary[i].doubleValue());  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.min(squaredSecondary,  squaredSecondary[i].doubleValue());	      squaredSecondary[i]    =    Math.min(splitTolerance,    squaredSecondary[i].doubleValue());    	non-compiled	[CE]  ';'  expected	11	None	replace
100	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary,  splitTolerance[i].doubleValue());  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {    [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary,  splitTolerance[i].doubleValue());  [BUGGY]    final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.min(squaredSecondary,  splitTolerance[i].doubleValue());	      squaredSecondary[i]    =    Math.min(splitTolerance,    squaredSecondary[i].doubleValue());    	non-compiled	[CE]  ';'  expected	11	None	replace
