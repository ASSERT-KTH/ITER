bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
37	[BUG] [BUGGY] return; [FE] ArrayIndexOutOfBoundsException [CONTEXT] }  a2 = a2 + b2; for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) { if(b2 == 0.0) { break; } b1 = b2; if (work[i4]>work[i4 - 2]) { [BUGGY] return; [BUGGY] } b2 = b2 * (work[i4] / work[i4 - 2]); a2 = a2 + b2; if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) { break; } } a2 = cnst3 * a2;   [CLASS] EigenDecompositionImpl Solver [METHOD] computeShiftIncrement [RETURN_TYPE] void  final int start final int end final int deflated [VARIABLES] boolean double[] b bp imagEigenvalues invI main range realEigenvalues secondary squaredSecondary vData vK work ArrayRealVector[] eigenvectors RealMatrix b cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 a2 absDCurrent absDPrevious absoluteTolerance alpha b b1 b2 beta c cnst1 cnst2 cnst3 d dCurrent dMin dMin1 dMin2 dN dN1 dN2 delta determinant di diagMax diagMin e12 eCurrent eMax eMin ePrevious ei eiM1 eps g gam gap1 gap2 invIJ lambda largestRoot left lower lowerSpectra margin max middle mij minPivot mji offDiagMax offDiagMin oldB1 oneFourth p previousEMin q q0 q1 q1q2Me22 q2 qMax r radius range ratio relativeTolerance right s sigma sigmaLow splitTolerance sqrtMq sumOffDiag t tNorm tau theta threeFourth tmp upper upperSpectra z0 z1 z2 int begin columns count deflated deflatedEnd end fourI i i0 i4 index j j4 j4p2 k l lowerStart m maxIter n n0 nColB nn np oneFourthCount pingPong rows split start step tType threeFourthCount upperStart TriDiagonalTransformer transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1509	1509	1	replace	
38	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] }  a2 = a2 + b2; for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) { if(b2 == 0.0) { break; } b1 = b2; if (work[i4]>work[i4 - 2]) { [BUGGY] [BUGGY] return; } b2 = b2 * (work[i4] / work[i4 - 2]); a2 = a2 + b2; if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) { break; } } a2 = cnst3 * a2;   [CLASS] EigenDecompositionImpl Solver [METHOD] computeShiftIncrement [RETURN_TYPE] void  final int start final int end final int deflated [VARIABLES] boolean double[] b bp imagEigenvalues invI main range realEigenvalues secondary squaredSecondary vData vK work ArrayRealVector[] eigenvectors RealMatrix b cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 a2 absDCurrent absDPrevious absoluteTolerance alpha b b1 b2 beta c cnst1 cnst2 cnst3 d dCurrent dMin dMin1 dMin2 dN dN1 dN2 delta determinant di diagMax diagMin e12 eCurrent eMax eMin ePrevious ei eiM1 eps g gam gap1 gap2 invIJ lambda largestRoot left lower lowerSpectra margin max middle mij minPivot mji offDiagMax offDiagMin oldB1 oneFourth p previousEMin q q0 q1 q1q2Me22 q2 qMax r radius range ratio relativeTolerance right s sigma sigmaLow splitTolerance sqrtMq sumOffDiag t tNorm tau theta threeFourth tmp upper upperSpectra z0 z1 z2 int begin columns count deflated deflatedEnd end fourI i i0 i4 index j j4 j4p2 k l lowerStart m maxIter n n0 nColB nn np oneFourthCount pingPong rows split start step tType threeFourthCount upperStart TriDiagonalTransformer transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1509	1509	1	add	
