bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    ArrayRealVector[]  work[i4]  =(ArrayRealVector[])work[i4  -  2];  [CE]  ']'  expected  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  [BUGGY]    ArrayRealVector[]  work[i4]  =(ArrayRealVector[])work[i4  -  2];  [BUGGY]  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;    [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1509	1509	1	replace	    ArrayRealVector[]  work[i4]  =(ArrayRealVector[])work[i4  -  2];		non-compiled	[CE]  ']'  expected	38	None	add
2	[BUG]  [BUGGY]    ArrayRealVector[]  work[i4]  =(ArrayRealVector[])work[i4  -  1];  [CE]  ']'  expected  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  [BUGGY]    ArrayRealVector[]  work[i4]  =(ArrayRealVector[])work[i4  -  1];  [BUGGY]  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;    [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1509	1509	1	replace	    ArrayRealVector[]  work[i4]  =(ArrayRealVector[])work[i4  -  1];		non-compiled	[CE]  ']'  expected	38	None	add
3	[BUG]  [BUGGY]    ArrayRealVector  work[i4]  =(ArrayRealVector)work[i4  -  2];  [CE]  ']'  expected  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  [BUGGY]    ArrayRealVector  work[i4]  =(ArrayRealVector)work[i4  -  2];  [BUGGY]  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;    [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1509	1509	1	replace	    ArrayRealVector  work[i4]  =(ArrayRealVector)work[i4  -  2];		non-compiled	[CE]  ']'  expected	38	None	add
4	[BUG]  [BUGGY]    ArrayRealVector  work[i4]  =(ArrayRealVector)work[i4  -  1];  [CE]  ']'  expected  [FE]          ArrayIndexOutOfBoundsException  [CONTEXT]  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  [BUGGY]    ArrayRealVector  work[i4]  =(ArrayRealVector)work[i4  -  1];  [BUGGY]  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;    [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1509	1509	1	replace	    ArrayRealVector  work[i4]  =(ArrayRealVector)work[i4  -  1];		non-compiled	[CE]  ']'  expected	38	None	add
5	[BUG]  [BUGGY]    ArrayRealVector  work[i4]  =  new  ArrayRealVector(work[i4]);  [CE]  ']'  expected  [FE]            ArrayIndexOutOfBoundsException  [CONTEXT]  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  [BUGGY]    ArrayRealVector  work[i4]  =  new  ArrayRealVector(work[i4]);  [BUGGY]  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;    [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1509	1509	1	replace	    ArrayRealVector  work[i4]  =  new  ArrayRealVector(work[i4]);		non-compiled	[CE]  ']'  expected	38	None	add
6	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ");  [CE]  ']'  expected  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  [BUGGY]  throw  new  IllegalArgumentException( " ");  [BUGGY]  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;    [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1509	1509	1	replace	throw  new  IllegalArgumentException( " ");	return;  	non-compiled	[CE]  ']'  expected	37	None	replace
7	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ");  [CE]  ']'  expected  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  [BUGGY]  throw  new  IllegalStateException( " ");  [BUGGY]  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;    [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1509	1509	1	replace	throw  new  IllegalStateException( " ");	return;  	non-compiled	[CE]  ']'  expected	37	None	replace
8	[BUG]  [BUGGY]  throw  new  ArrayIndexOutOfBoundsException( " ");  [CE]  ']'  expected  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  [BUGGY]  throw  new  ArrayIndexOutOfBoundsException( " ");  [BUGGY]  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;    [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1509	1509	1	replace	throw  new  ArrayIndexOutOfBoundsException( " ");	return;  	non-compiled	[CE]  ']'  expected	37	None	replace
9	[BUG]  [BUGGY]  throw  new  IOException( " ");  [CE]  ']'  expected  [FE]          ArrayIndexOutOfBoundsException  [CONTEXT]  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  [BUGGY]  throw  new  IOException( " ");  [BUGGY]  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;    [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1509	1509	1	replace	throw  new  IOException( " ");	return;  	non-compiled	[CE]  ']'  expected	37	None	replace
10	[BUG]  [BUGGY]    b2  =  Math.max(work[i4]  /  work[i4  -  2]);  [CE]  ']'  expected  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  [BUGGY]    b2  =  Math.max(work[i4]  /  work[i4  -  2]);  [BUGGY]  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;    [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1509	1509	1	replace	    b2  =  Math.max(work[i4]  /  work[i4  -  2]);		non-compiled	[CE]  ']'  expected	38	None	add
11	[BUG]  [BUGGY]    b1  =  Math.max(work[i4]  /  work[i4  -  2]);  [CE]  ']'  expected  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  [BUGGY]    b1  =  Math.max(work[i4]  /  work[i4  -  2]);  [BUGGY]  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;    [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1509	1509	1	replace	    b1  =  Math.max(work[i4]  /  work[i4  -  2]);		non-compiled	[CE]  ']'  expected	38	None	add
12	[BUG]  [BUGGY]    ArrayRealVector  work[i4]  =  new  ArrayRealVector(work[i4  -  1]);  [CE]  ']'  expected  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  [BUGGY]    ArrayRealVector  work[i4]  =  new  ArrayRealVector(work[i4  -  1]);  [BUGGY]  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;    [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1509	1509	1	replace	    ArrayRealVector  work[i4]  =  new  ArrayRealVector(work[i4  -  1]);		non-compiled	[CE]  ']'  expected	38	None	add
13	[BUG]  [BUGGY]    b2  =  Math.max(work[i4]  /  work[i4  -  1]);  [CE]  ']'  expected  [FE]          ArrayIndexOutOfBoundsException  [CONTEXT]  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  [BUGGY]    b2  =  Math.max(work[i4]  /  work[i4  -  1]);  [BUGGY]  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;    [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1509	1509	1	replace	    b2  =  Math.max(work[i4]  /  work[i4  -  1]);		non-compiled	[CE]  ']'  expected	38	None	add
14	[BUG]  [BUGGY]    b1  =  Math.max(work[i4]  /  work[i4  -  1]);  [CE]  ']'  expected  [FE]            ArrayIndexOutOfBoundsException  [CONTEXT]  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  [BUGGY]    b1  =  Math.max(work[i4]  /  work[i4  -  1]);  [BUGGY]  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;    [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1509	1509	1	replace	    b1  =  Math.max(work[i4]  /  work[i4  -  1]);		non-compiled	[CE]  ']'  expected	38	None	add
15	[BUG]  [BUGGY]  throw  new  UnsupportedOperationException( " ");  [CE]  ']'  expected  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  [BUGGY]  throw  new  UnsupportedOperationException( " ");  [BUGGY]  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;    [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1509	1509	1	replace	throw  new  UnsupportedOperationException( " ");	return;  	non-compiled	[CE]  ']'  expected	37	None	replace
16	[BUG]  [BUGGY]    cnst1  =  Math.max(work[i4]  /  work[i4  -  2]);  [CE]  ']'  expected  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  [BUGGY]    cnst1  =  Math.max(work[i4]  /  work[i4  -  2]);  [BUGGY]  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;    [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1509	1509	1	replace	    cnst1  =  Math.max(work[i4]  /  work[i4  -  2]);		non-compiled	[CE]  ']'  expected	38	None	add
17	[BUG]  [BUGGY]    b2  =  work[i4]  /  work[i4  -  2];  [CE]  ']'  expected  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  [BUGGY]    b2  =  work[i4]  /  work[i4  -  2];  [BUGGY]  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;    [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1509	1509	1	replace	    b2  =  work[i4]  /  work[i4  -  2];		non-compiled	[CE]  ']'  expected	38	None	add
18	[BUG]  [BUGGY]    b1  =  b2  *  work[i4]  /  work[i4  -  2];  [CE]  ']'  expected  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  [BUGGY]    b1  =  b2  *  work[i4]  /  work[i4  -  2];  [BUGGY]  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;    [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1509	1509	1	replace	    b1  =  b2  *  work[i4]  /  work[i4  -  2];		non-compiled	[CE]  ']'  expected	38	None	add
19	[BUG]  [BUGGY]    cnst1  =  Math.max(work[i4]  /  work[i4  -  1]);  [CE]  ']'  expected  [FE]          ArrayIndexOutOfBoundsException  [CONTEXT]  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  [BUGGY]    cnst1  =  Math.max(work[i4]  /  work[i4  -  1]);  [BUGGY]  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;    [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1509	1509	1	replace	    cnst1  =  Math.max(work[i4]  /  work[i4  -  1]);		non-compiled	[CE]  ']'  expected	38	None	add
20	[BUG]  [BUGGY]    cnst1  +=  work[i4  -  2];  [CE]  ']'  expected  [FE]            ArrayIndexOutOfBoundsException  [CONTEXT]  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  [BUGGY]    cnst1  +=  work[i4  -  2];  [BUGGY]  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;    [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1509	1509	1	replace	    cnst1  +=  work[i4  -  2];		non-compiled	[CE]  ']'  expected	38	None	add
