bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number
1	[BUG]  [BUGGY]    System.arraycopy(squadSecondary,  0,  squaredSecondary,  0,  splitTolerance);  [CE]  cannot  find  symbol  squadSecondary  [CONTEXT]  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  [BUGGY]    System.arraycopy(squadSecondary,  0,  squaredSecondary,  0,  splitTolerance);  [BUGGY]  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	    System.arraycopy(squadSecondary,  0,  squaredSecondary,  0,  splitTolerance);		non-compiled	[CE]  cannot  find  symbol  squadSecondary	20	None
2	[BUG]  [BUGGY]    if(splitTolerance  >  0)  {  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  transformer  =  new  double[splitTolerance];  }  [CE]  illegal  start  of  expression  [CONTEXT]  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  [BUGGY]    if(splitTolerance  >  0)  {  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  transformer  =  new  double[splitTolerance];  }  [BUGGY]  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	    if(splitTolerance  >  0)  {  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  transformer  =  new  double[splitTolerance];  }		non-compiled	[CE]  illegal  start  of  expression	20	None
3	[BUG]  [BUGGY]    if(splitTolerance  >  0)  {  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  transformer  =  new  double[squaredSecondary.length];  }  [CE]  illegal  start  of  expression  [CONTEXT]  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  [BUGGY]    if(splitTolerance  >  0)  {  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  transformer  =  new  double[squaredSecondary.length];  }  [BUGGY]  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	    if(splitTolerance  >  0)  {  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  transformer  =  new  double[squaredSecondary.length];  }		non-compiled	[CE]  illegal  start  of  expression	20	None
4	[BUG]  [BUGGY]    if(splitTolerance  >  0)  {  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  splitTolerance  =  main[i];  }  [CE]  illegal  start  of  expression  [CONTEXT]  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  [BUGGY]    if(splitTolerance  >  0)  {  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  splitTolerance  =  main[i];  }  [BUGGY]  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	    if(splitTolerance  >  0)  {  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  splitTolerance  =  main[i];  }		non-compiled	[CE]  illegal  start  of  expression	20	None
5	[BUG]  [BUGGY]    if(splitTolerance  >  0)  {  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  splitTolerance  =  primary[i];  }  [CE]  illegal  start  of  expression  [CONTEXT]  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  [BUGGY]    if(splitTolerance  >  0)  {  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  splitTolerance  =  primary[i];  }  [BUGGY]  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	    if(splitTolerance  >  0)  {  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  splitTolerance  =  primary[i];  }		non-compiled	[CE]  illegal  start  of  expression	20	None
11	[BUG]  [BUGGY]    if(splitTolerance  >  0)  {  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  decompose();  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;    [BUGGY]    if(splitTolerance  >  0)  {  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  decompose();  }  [BUGGY]  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	    if(splitTolerance  >  0)  {  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  decompose();  }		non-compiled	[CE]  illegal  start  of  expression	10	None
12	[BUG]  [BUGGY]    if(transformer!=  null)  {  for(int  i  =  0;  i  <  main.length;  ++i)  {  decompose();  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;    [BUGGY]    if(transformer!=  null)  {  for(int  i  =  0;  i  <  main.length;  ++i)  {  decompose();  }  [BUGGY]  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	    if(transformer!=  null)  {  for(int  i  =  0;  i  <  main.length;  ++i)  {  decompose();  }		non-compiled	[CE]  illegal  start  of  expression	10	None
13	[BUG]  [BUGGY]    if(splitTolerance  >  0)  {  for(int  i  =  0;  i  <  primary.length;  ++i)  {  decompose();  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;    [BUGGY]    if(splitTolerance  >  0)  {  for(int  i  =  0;  i  <  primary.length;  ++i)  {  decompose();  }  [BUGGY]  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	    if(splitTolerance  >  0)  {  for(int  i  =  0;  i  <  primary.length;  ++i)  {  decompose();  }		non-compiled	[CE]  illegal  start  of  expression	10	None
14	[BUG]  [BUGGY]    if(transformer!=  null)  {  for(int  i  =  0;  i  <  primary.length;  ++i)  {  decompose();  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;    [BUGGY]    if(transformer!=  null)  {  for(int  i  =  0;  i  <  primary.length;  ++i)  {  decompose();  }  [BUGGY]  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	    if(transformer!=  null)  {  for(int  i  =  0;  i  <  primary.length;  ++i)  {  decompose();  }		non-compiled	[CE]  illegal  start  of  expression	10	None
15	[BUG]  [BUGGY]    if(splitTolerance  >  0)  {  for(int  i  =  0;  i  <  main.length;  ++i)  {  decompose();  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;    [BUGGY]    if(splitTolerance  >  0)  {  for(int  i  =  0;  i  <  main.length;  ++i)  {  decompose();  }  [BUGGY]  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	    if(splitTolerance  >  0)  {  for(int  i  =  0;  i  <  main.length;  ++i)  {  decompose();  }		non-compiled	[CE]  illegal  start  of  expression	10	None
21	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  testMath308  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  [BUGGY]    this.secondary  =  secondary.clone();  [BUGGY]  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	194	194	1	add	    this.secondary  =  secondary.clone();		compilable	  [FE]  ArrayIndexOutOfBoundsException  testMath308	6	1
22	[BUG]  [BUGGY]    this.secondary  =  secondary.clone();  [FE]  ArrayIndexOutOfBoundsException  testMath308  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  [BUGGY]    this.secondary  =  secondary.clone();  [BUGGY]  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	194	194	1	replace	    this.secondary  =  secondary.clone();		compilable	  [FE]  ArrayIndexOutOfBoundsException  testMath308	6	1
23	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  testMath308  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  [BUGGY]    this.secondary  =  secondary.clone();  transformer=  null;  [BUGGY]  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	194	194	1	add	    this.secondary  =  secondary.clone();  transformer=  null;		compilable	  [FE]  ArrayIndexOutOfBoundsException  testMath308	6	1
24	[BUG]  [BUGGY]    this.secondary  =  secondary.clone();  transformer=  null;  [FE]  ArrayIndexOutOfBoundsException  testMath308  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  [BUGGY]    this.secondary  =  secondary.clone();  transformer=  null;  [BUGGY]  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	194	194	1	replace	    this.secondary  =  secondary.clone();  transformer=  null;		compilable	  [FE]  ArrayIndexOutOfBoundsException  testMath308	6	1
24	[BUG]  [BUGGY]    this.second  =  secondary.clone();  [CE]  cannot  find  symbol  second  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  [BUGGY]    this.second  =  secondary.clone();  [BUGGY]  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	194	194	1	replace	    this.second  =  secondary.clone();		non-compiled	[CE]  cannot  find  symbol  second	6	None
41	[BUG]  [BUGGY]    if(squaredSecondary.length  >  0)  {  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  this.main  =  squaredSecondary[i];  }  [CE]  illegal  start  of  expression  [CONTEXT]  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [BUGGY]    if(squaredSecondary.length  >  0)  {  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  this.main  =  squaredSecondary[i];  }  [BUGGY]  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	    if(squaredSecondary.length  >  0)  {  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  this.main  =  squaredSecondary[i];  }		non-compiled	[CE]  illegal  start  of  expression	18	None
42	[BUG]  [BUGGY]    if(squaredSecondary.length  >  0)  {  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  decompose();  }  [CE]  illegal  start  of  expression  [CONTEXT]  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [BUGGY]    if(squaredSecondary.length  >  0)  {  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  decompose();  }  [BUGGY]  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	    if(squaredSecondary.length  >  0)  {  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  decompose();  }		non-compiled	[CE]  illegal  start  of  expression	18	None
43	[BUG]  [BUGGY]    if(squaredSecondary.length  >  0)  {  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  this.main  =  squaredSecondary[i].doubleValue();  }  [CE]  illegal  start  of  expression  [CONTEXT]  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [BUGGY]    if(squaredSecondary.length  >  0)  {  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  this.main  =  squaredSecondary[i].doubleValue();  }  [BUGGY]  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	    if(squaredSecondary.length  >  0)  {  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  this.main  =  squaredSecondary[i].doubleValue();  }		non-compiled	[CE]  illegal  start  of  expression	18	None
44	[BUG]  [BUGGY]    if(squaredSecondary.length  >  0)  {  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  this.main[i]  =  main[i];  }  [CE]  illegal  start  of  expression  [CONTEXT]  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [BUGGY]    if(squaredSecondary.length  >  0)  {  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  this.main[i]  =  main[i];  }  [BUGGY]  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	    if(squaredSecondary.length  >  0)  {  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  this.main[i]  =  main[i];  }		non-compiled	[CE]  illegal  start  of  expression	18	None
45	[BUG]  [BUGGY]    if(squaredSecondary.length  >  0)  {  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  this.main  =  squaredSecondary[i];  >>  [CE]  illegal  start  of  expression  [CONTEXT]  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [BUGGY]    if(squaredSecondary.length  >  0)  {  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  this.main  =  squaredSecondary[i];  >>  [BUGGY]  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	    if(squaredSecondary.length  >  0)  {  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  this.main  =  squaredSecondary[i];  >>		non-compiled	[CE]  illegal  start  of  expression	18	None
51	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  testMath308  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  [BUGGY]  transformer=  this.transformer;  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	195	195	1	add	transformer=  this.transformer;	transformer=  null;  	compilable	  [FE]  ArrayIndexOutOfBoundsException  testMath308	7	1
52	[BUG]  [BUGGY]  transformer=  this.transformer;  [FE]  ArrayIndexOutOfBoundsException  testMath308  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  [BUGGY]  transformer=  this.transformer;  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	195	195	1	replace	transformer=  this.transformer;	transformer=  null;  	compilable	  [FE]  ArrayIndexOutOfBoundsException  testMath308	7	1
52	[BUG]  [BUGGY]  transformer=  new  TriDiagonalTransformer();  [CE]  constructor  TriDiagonalTransformer  in  class  TriDiagonalTransformer  cannot  be  applied  to  given  types;  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  [BUGGY]  transformer=  new  TriDiagonalTransformer();  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	195	195	1	replace	transformer=  new  TriDiagonalTransformer();	transformer=  null;  	non-compiled	[CE]  constructor  TriDiagonalTransformer  in  class  TriDiagonalTransformer  cannot  be  applied  to  given  types;	7	None
53	[BUG]  [BUGGY]  transformer=  new  TriDiagonalTransformer(main);  [CE]  constructor  TriDiagonalTransformer  in  class  TriDiagonalTransformer  cannot  be  applied  to  given  types;  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  [BUGGY]  transformer=  new  TriDiagonalTransformer(main);  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	195	195	1	replace	transformer=  new  TriDiagonalTransformer(main);	transformer=  null;  	non-compiled	[CE]  constructor  TriDiagonalTransformer  in  class  TriDiagonalTransformer  cannot  be  applied  to  given  types;	7	None
55	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  testMath308  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  [BUGGY]    [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	195	195	1	add	  	transformer=  null;  	compilable	  [FE]  ArrayIndexOutOfBoundsException  testMath308	7	1
56	[BUG]  [BUGGY]    [FE]  ArrayIndexOutOfBoundsException  testMath308  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  [BUGGY]    [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	195	195	1	replace	  	transformer=  null;  	compilable	  [FE]  ArrayIndexOutOfBoundsException  testMath308	7	1
63	[BUG]  [BUGGY]  this.main  =  primary.clone();  [CE]  cannot  find  symbol  primary  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  [BUGGY]  this.main  =  primary.clone();  [BUGGY]  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this.main  =  primary.clone();	this.main=  main.clone();  	non-compiled	[CE]  cannot  find  symbol  primary	3	None
71	[BUG]  [BUGGY]    if(squadSecondary!=  null)  {  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  decompose();  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  [BUGGY]    if(squadSecondary!=  null)  {  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  decompose();  }  [BUGGY]  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	199	199	1	replace	    if(squadSecondary!=  null)  {  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  decompose();  }		non-compiled	[CE]  illegal  start  of  expression	12	None
72	[BUG]  [BUGGY]    if(squaredSecondary!=  null)  {  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  decompose();  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  [BUGGY]    if(squaredSecondary!=  null)  {  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  decompose();  }  [BUGGY]  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	199	199	1	replace	    if(squaredSecondary!=  null)  {  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  decompose();  }		non-compiled	[CE]  illegal  start  of  expression	12	None
73	[BUG]  [BUGGY]    if(squaredSecondary!=  null)  {  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  [CE]  illegal  start  of  expression  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  [BUGGY]    if(squaredSecondary!=  null)  {  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  [BUGGY]  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	199	199	1	replace	    if(squaredSecondary!=  null)  {  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {		non-compiled	[CE]  illegal  start  of  expression	12	None
74	[BUG]  [BUGGY]    if(squadSecondary!=  null)  {  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  [CE]  illegal  start  of  expression  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  [BUGGY]    if(squadSecondary!=  null)  {  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  [BUGGY]  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	199	199	1	replace	    if(squadSecondary!=  null)  {  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {		non-compiled	[CE]  illegal  start  of  expression	12	None
75	[BUG]  [BUGGY]    if(squadSecondary!=  null)  {  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  decompose();  }  else  {  decompose();  }  [CE]  'else'  without  'if'  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  [BUGGY]    if(squadSecondary!=  null)  {  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  decompose();  }  else  {  decompose();  }  [BUGGY]  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	199	199	1	replace	    if(squadSecondary!=  null)  {  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  decompose();  }  else  {  decompose();  }		non-compiled	[CE]  'else'  without  'if'	12	None
81	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  testMath308  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  [BUGGY]    super();  [BUGGY]  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	add	    super();		compilable	  [FE]  ArrayIndexOutOfBoundsException  testMath308	4	1
82	[BUG]  [BUGGY]    super();  [FE]  ArrayIndexOutOfBoundsException  testMath308  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  [BUGGY]    super();  [BUGGY]  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	    super();		compilable	  [FE]  ArrayIndexOutOfBoundsException  testMath308	4	1
82	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  testMath308  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  [BUGGY]    super();  this.main  =  main.clone();  [BUGGY]  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	add	    super();  this.main  =  main.clone();		compilable	  [FE]  ArrayIndexOutOfBoundsException  testMath308	4	1
83	[BUG]  [BUGGY]    super();  this.main  =  main.clone();  [FE]  ArrayIndexOutOfBoundsException  testMath308  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  [BUGGY]    super();  this.main  =  main.clone();  [BUGGY]  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	    super();  this.main  =  main.clone();		compilable	  [FE]  ArrayIndexOutOfBoundsException  testMath308	4	1
84	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  testMath308  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  [BUGGY]    super();  this.realEigenvalues  =  main.clone();  [BUGGY]  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	add	    super();  this.realEigenvalues  =  main.clone();		compilable	  [FE]  ArrayIndexOutOfBoundsException  testMath308	4	1
85	[BUG]  [BUGGY]    super();  this.realEigenvalues  =  main.clone();  [FE]  ArrayIndexOutOfBoundsException  testMath308  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  [BUGGY]    super();  this.realEigenvalues  =  main.clone();  [BUGGY]  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	    super();  this.realEigenvalues  =  main.clone();		compilable	  [FE]  ArrayIndexOutOfBoundsException  testMath308	4	1
85	[BUG]  [BUGGY]    super();  this.realEigenvalues  =  new  Double[realEigenvalues.length];  [CE]  incompatible  types  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  [BUGGY]    super();  this.realEigenvalues  =  new  Double[realEigenvalues.length];  [BUGGY]  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	    super();  this.realEigenvalues  =  new  Double[realEigenvalues.length];		non-compiled	[CE]  incompatible  types	4	None
91	[BUG]  [BUGGY]  throws  InvalidMatrixException( " ");  [CE]  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  [BUGGY]  throws  InvalidMatrixException( " ");  [BUGGY]    this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	throws  InvalidMatrixException( " ");	throws  InvalidMatrixException  {  	non-compiled	[CE]  	1	None
92	[BUG]  [BUGGY]  throw  new  InvalidMatrixException( " ");  [CE]  ';'  expected  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  [BUGGY]  throw  new  InvalidMatrixException( " ");  [BUGGY]    this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	throw  new  InvalidMatrixException( " ");	throws  InvalidMatrixException  {  	non-compiled	[CE]  ';'  expected	1	None
93	[BUG]  [BUGGY]  throws  InvalidMatrixException( " ");  this.main  =  main.clone();  [CE]  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  [BUGGY]  throws  InvalidMatrixException( " ");  this.main  =  main.clone();  [BUGGY]    this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	throws  InvalidMatrixException( " ");  this.main  =  main.clone();	throws  InvalidMatrixException  {  	non-compiled	[CE]  	1	None
94	[BUG]  [BUGGY]  throws  InvalidMatrixException   " ");  [CE]  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  [BUGGY]  throws  InvalidMatrixException   " ");  [BUGGY]    this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	throws  InvalidMatrixException   " ");	throws  InvalidMatrixException  {  	non-compiled	[CE]  	1	None
95	[BUG]  [BUGGY]    [CE]  ';'  expected  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  [BUGGY]    [BUGGY]    this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	  	throws  InvalidMatrixException  {  	non-compiled	[CE]  ';'  expected	1	None
101	[BUG]  [BUGGY]    this.main  =  squaredSecondary[i];  [CE]  incompatible  types  [CONTEXT]  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  [BUGGY]    this.main  =  squaredSecondary[i];  [BUGGY]  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	    this.main  =  squaredSecondary[i];		non-compiled	[CE]  incompatible  types	14	None
102	[BUG]  [BUGGY]    imagEigenvalues[i]  =  squaredSecondary.get(i);  [CE]  cannot  find  symbol  [CONTEXT]  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  [BUGGY]    imagEigenvalues[i]  =  squaredSecondary.get(i);  [BUGGY]  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	    imagEigenvalues[i]  =  squaredSecondary.get(i);		non-compiled	[CE]  cannot  find  symbol	14	None
104	[BUG]  [BUGGY]    imagEigenvalues[i]  =  squaredSecondary.clone();  [CE]  incompatible  types  [CONTEXT]  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  [BUGGY]    imagEigenvalues[i]  =  squaredSecondary.clone();  [BUGGY]  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	    imagEigenvalues[i]  =  squaredSecondary.clone();		non-compiled	[CE]  incompatible  types	14	None
105	[BUG]  [BUGGY]    imagEigenvalues  =  squaredSecondary.get(i);  [CE]  cannot  find  symbol  [CONTEXT]  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  [BUGGY]    imagEigenvalues  =  squaredSecondary.get(i);  [BUGGY]  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	    imagEigenvalues  =  squaredSecondary.get(i);		non-compiled	[CE]  cannot  find  symbol	14	None
111	[BUG]  [BUGGY]    super(main,  double[]),  splitTolerance);  [CE]  ';'  expected  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  [BUGGY]    super(main,  double[]),  splitTolerance);  [BUGGY]  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	    super(main,  double[]),  splitTolerance);		non-compiled	[CE]  ';'  expected	2	None
112	[BUG]  [BUGGY]    super();  [CE]  ';'  expected  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  [BUGGY]    super();  [BUGGY]  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	    super();		non-compiled	[CE]  ';'  expected	2	None
113	[BUG]  [BUGGY]    super(main,  double[]  secondary,  splitTolerance);  [CE]  ';'  expected  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  [BUGGY]    super(main,  double[]  secondary,  splitTolerance);  [BUGGY]  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	    super(main,  double[]  secondary,  splitTolerance);		non-compiled	[CE]  ';'  expected	2	None
114	[BUG]  [BUGGY]    super(main,  secondary,  splitTolerance);  [CE]  ';'  expected  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  [BUGGY]    super(main,  secondary,  splitTolerance);  [BUGGY]  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	    super(main,  secondary,  splitTolerance);		non-compiled	[CE]  ';'  expected	2	None
115	[BUG]  [BUGGY]    super(main,  double[]);  [CE]  ';'  expected  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  [BUGGY]    super(main,  double[]);  [BUGGY]  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	    super(main,  double[]);		non-compiled	[CE]  ';'  expected	2	None
123	[BUG]  [BUGGY]  static  final  double  s  =  squaredSecondary[i];  [CE]  illegal  start  of  expression  [CONTEXT]  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  [BUGGY]  static  final  double  s  =  squaredSecondary[i];  [BUGGY]  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	static  final  double  s  =  squaredSecondary[i];	final  double  s  =  secondary[i];  	non-compiled	[CE]  illegal  start  of  expression	13	None
131	[BUG]  [BUGGY]    s  =  squaredSecondary[i]  *  s;  [CE]  cannot  assign  a  value  to  final  variable  s  [CONTEXT]  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  [BUGGY]    s  =  squaredSecondary[i]  *  s;  [BUGGY]  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	    s  =  squaredSecondary[i]  *  s;		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  s	16	None
132	[BUG]  [BUGGY]    s  =  squaredSecondary[i].doubleValue();  [CE]  cannot  assign  a  value  to  final  variable  s  [CONTEXT]  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  [BUGGY]    s  =  squaredSecondary[i].doubleValue();  [BUGGY]  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	    s  =  squaredSecondary[i].doubleValue();		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  s	16	None
133	[BUG]  [BUGGY]    s  =  squaredSecondary[i].substring(s,  i);  [CE]  cannot  assign  a  value  to  final  variable  s  [CONTEXT]  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  [BUGGY]    s  =  squaredSecondary[i].substring(s,  i);  [BUGGY]  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	    s  =  squaredSecondary[i].substring(s,  i);		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  s	16	None
134	[BUG]  [BUGGY]    s  =  squaredSecondary[i];  [CE]  cannot  assign  a  value  to  final  variable  s  [CONTEXT]  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  [BUGGY]    s  =  squaredSecondary[i];  [BUGGY]  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	    s  =  squaredSecondary[i];		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  s	16	None
135	[BUG]  [BUGGY]    s  =  squaredSecondary[i]  *  transformer;  [CE]  cannot  assign  a  value  to  final  variable  s  [CONTEXT]  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  [BUGGY]    s  =  squaredSecondary[i]  *  transformer;  [BUGGY]  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	    s  =  squaredSecondary[i]  *  transformer;		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  s	16	None
151	[BUG]  [BUGGY]    if(transformer!=  null)  {  for(int  i  =  0;  i  <  main.length;  ++i)  {  decompose();  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  [BUGGY]    if(transformer!=  null)  {  for(int  i  =  0;  i  <  main.length;  ++i)  {  decompose();  }  [BUGGY]  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	195	195	1	replace	    if(transformer!=  null)  {  for(int  i  =  0;  i  <  main.length;  ++i)  {  decompose();  }		non-compiled	[CE]  illegal  start  of  expression	8	None
152	[BUG]  [BUGGY]    if(transformer!=  null)  {  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  decompose();  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  [BUGGY]    if(transformer!=  null)  {  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  decompose();  }  [BUGGY]  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	195	195	1	replace	    if(transformer!=  null)  {  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  decompose();  }		non-compiled	[CE]  illegal  start  of  expression	8	None
154	[BUG]  [BUGGY]    if(transformer!=  null)  {  for(int  i  =  0;  i  <  primary.length;  ++i)  {  decompose();  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  [BUGGY]    if(transformer!=  null)  {  for(int  i  =  0;  i  <  primary.length;  ++i)  {  decompose();  }  [BUGGY]  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	195	195	1	replace	    if(transformer!=  null)  {  for(int  i  =  0;  i  <  primary.length;  ++i)  {  decompose();  }		non-compiled	[CE]  illegal  start  of  expression	8	None
155	[BUG]  [BUGGY]    if(transformer!=  null)  {  for(int  i  =  0;  i  <  main.length;  i++i)  {  decompose();  }  [CE]  ')'  expected  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  [BUGGY]    if(transformer!=  null)  {  for(int  i  =  0;  i  <  main.length;  i++i)  {  decompose();  }  [BUGGY]  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	195	195	1	replace	    if(transformer!=  null)  {  for(int  i  =  0;  i  <  main.length;  i++i)  {  decompose();  }		non-compiled	[CE]  ')'  expected	8	None
163	[BUG]  [BUGGY]  this.secondary  =  secondary.clone()  &&(imagEigenvalues  ==  null  ||  imagEigenvalues.contains(imagEigenvalues))  &&(imagEigenvalues.contains(imagEigenvalues))  &  [CE]  cannot  find  symbol  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  [BUGGY]  this.secondary  =  secondary.clone()  &&(imagEigenvalues  ==  null  ||  imagEigenvalues.contains(imagEigenvalues))  &&(imagEigenvalues.contains(imagEigenvalues))  &  [BUGGY]  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	194	194	1	replace	this.secondary  =  secondary.clone()  &&(imagEigenvalues  ==  null  ||  imagEigenvalues.contains(imagEigenvalues))  &&(imagEigenvalues.contains(imagEigenvalues))  &	this.secondary  =  secondary.clone();  	non-compiled	[CE]  cannot  find  symbol	5	None
164	[BUG]  [BUGGY]  this.secondary  =  secondary.clone()  &&(imagEigenvalues  ==  null  ||  imagEigenvalues.contains(imagEigenvalues))  &&(imagEigenvalues.contains(imagEigenvalues))  [CE]  ';'  expected  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  [BUGGY]  this.secondary  =  secondary.clone()  &&(imagEigenvalues  ==  null  ||  imagEigenvalues.contains(imagEigenvalues))  &&(imagEigenvalues.contains(imagEigenvalues))  [BUGGY]  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	194	194	1	replace	this.secondary  =  secondary.clone()  &&(imagEigenvalues  ==  null  ||  imagEigenvalues.contains(imagEigenvalues))  &&(imagEigenvalues.contains(imagEigenvalues))	this.secondary  =  secondary.clone();  	non-compiled	[CE]  ';'  expected	5	None
171	[BUG]  [BUGGY]  decompose(squaredSecondary);  [CE]  method  decompose  in  class  EigenDecompositionImpl  cannot  be  applied  to  given  types;  [CONTEXT]  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  [BUGGY]  decompose(squaredSecondary);  [BUGGY]    }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(squaredSecondary);	decompose();  	non-compiled	[CE]  method  decompose  in  class  EigenDecompositionImpl  cannot  be  applied  to  given  types;	19	None
173	[BUG]  [BUGGY]  decompose(squadSecondary);  [CE]  cannot  find  symbol  squadSecondary  [CONTEXT]  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  [BUGGY]  decompose(squadSecondary);  [BUGGY]    }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(squadSecondary);	decompose();  	non-compiled	[CE]  cannot  find  symbol  squadSecondary	19	None
174	[BUG]  [BUGGY]  decompose(s);  [CE]  cannot  find  symbol  s  [CONTEXT]  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  [BUGGY]  decompose(s);  [BUGGY]    }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(s);	decompose();  	non-compiled	[CE]  cannot  find  symbol  s	19	None
182	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testMath308  [CONTEXT]  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  [BUGGY]  squaredSecondary[i]  =  s  /  s;  [BUGGY]  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	add	squaredSecondary[i]  =  s  /  s;	squaredSecondary[i]  =  s  *  s;  	compilable	  [FE]  AssertionFailedError  testMath308	15	1
183	[BUG]  [BUGGY]  squaredSecondary[i]  =  s  /  s;  [FE]  AssertionFailedError  testMath308  [CONTEXT]  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  [BUGGY]  squaredSecondary[i]  =  s  /  s;  [BUGGY]  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  s  /  s;	squaredSecondary[i]  =  s  *  s;  	compilable	  [FE]  AssertionFailedError  testMath308	15	1
183	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testMath308  [CONTEXT]  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  [BUGGY]  squaredSecondary[i]  =  s  *  s  +  1;  [BUGGY]  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	add	squaredSecondary[i]  =  s  *  s  +  1;	squaredSecondary[i]  =  s  *  s;  	compilable	  [FE]  AssertionFailedError  testMath308	15	1
184	[BUG]  [BUGGY]  squaredSecondary[i]  =  s  *  s  +  1;  [FE]  AssertionFailedError  testMath308  [CONTEXT]  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  [BUGGY]  squaredSecondary[i]  =  s  *  s  +  1;  [BUGGY]  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  s  *  s  +  1;	squaredSecondary[i]  =  s  *  s;  	compilable	  [FE]  AssertionFailedError  testMath308	15	1
184	[BUG]  [BUGGY]  squaredSecondary[i]  =  s  *  s.length;  [CE]  double  cannot  be  dereferenced  [CONTEXT]  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  [BUGGY]  squaredSecondary[i]  =  s  *  s.length;  [BUGGY]  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  s  *  s.length;	squaredSecondary[i]  =  s  *  s;  	non-compiled	[CE]  double  cannot  be  dereferenced	15	None
191	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  testMath308  [CONTEXT]  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [BUGGY]  this.splitTolerance  =  splitTolerance  *  2;  [BUGGY]  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	add	this.splitTolerance  =  splitTolerance  *  2;	this.splitTolerance  =  splitTolerance;  	compilable	  [FE]  ArrayIndexOutOfBoundsException  testMath308	17	1
192	[BUG]  [BUGGY]  this.splitTolerance  =  splitTolerance  *  2;  [FE]  ArrayIndexOutOfBoundsException  testMath308  [CONTEXT]  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [BUGGY]  this.splitTolerance  =  splitTolerance  *  2;  [BUGGY]  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	this.splitTolerance  =  splitTolerance  *  2;	this.splitTolerance  =  splitTolerance;  	compilable	  [FE]  ArrayIndexOutOfBoundsException  testMath308	17	1
193	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  testMath308  [CONTEXT]  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [BUGGY]  this.splitTolerance  =  splitTolerance  *  squaredSecondary.length;  [BUGGY]  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	add	this.splitTolerance  =  splitTolerance  *  squaredSecondary.length;	this.splitTolerance  =  splitTolerance;  	compilable	  [FE]  ArrayIndexOutOfBoundsException  testMath308	17	1
194	[BUG]  [BUGGY]  this.splitTolerance  =  splitTolerance  *  squaredSecondary.length;  [FE]  ArrayIndexOutOfBoundsException  testMath308  [CONTEXT]  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [BUGGY]  this.splitTolerance  =  splitTolerance  *  squaredSecondary.length;  [BUGGY]  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	this.splitTolerance  =  splitTolerance  *  squaredSecondary.length;	this.splitTolerance  =  splitTolerance;  	compilable	  [FE]  ArrayIndexOutOfBoundsException  testMath308	17	1
194	[BUG]  [BUGGY]  this.splitTolerance  =  splitTolerance  *  s;  [CE]  cannot  find  symbol  s  [CONTEXT]  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [BUGGY]  this.splitTolerance  =  splitTolerance  *  s;  [BUGGY]  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	this.splitTolerance  =  splitTolerance  *  s;	this.splitTolerance  =  splitTolerance;  	non-compiled	[CE]  cannot  find  symbol  s	17	None
1	[BUG]  [BUGGY]    transform(squadSecondary,  0,  squaredSecondary.length);  [CE]  cannot  find  symbol  squadSecondary  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  [BUGGY]    transform(squadSecondary,  0,  squaredSecondary.length);  [BUGGY]  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	199	199	1	replace	    transform(squadSecondary,  0,  squaredSecondary.length);		non-compiled	[CE]  cannot  find  symbol  squadSecondary	12	None
2	[BUG]  [BUGGY]    Arrays.sort(this.main,  squaredSecondary);  [CE]  no  suitable  method  found  for  sort(double[],double[])  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  [BUGGY]    Arrays.sort(this.main,  squaredSecondary);  [BUGGY]  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	199	199	1	replace	    Arrays.sort(this.main,  squaredSecondary);		non-compiled	[CE]  no  suitable  method  found  for  sort(double[],double[])	12	None
3	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  testMath308  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  [BUGGY]    Arrays.sort(squaredSecondary);  [BUGGY]  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	199	199	1	add	    Arrays.sort(squaredSecondary);		compilable	  [FE]  ArrayIndexOutOfBoundsException  testMath308	12	1
4	[BUG]  [BUGGY]    Arrays.sort(squaredSecondary);  [FE]  ArrayIndexOutOfBoundsException  testMath308  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  [BUGGY]    Arrays.sort(squaredSecondary);  [BUGGY]  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	199	199	1	replace	    Arrays.sort(squaredSecondary);		compilable	  [FE]  ArrayIndexOutOfBoundsException  testMath308	12	1
4	[BUG]  [BUGGY]    transform(squadSecondary);  [CE]  cannot  find  symbol  squadSecondary  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  [BUGGY]    transform(squadSecondary);  [BUGGY]  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	199	199	1	replace	    transform(squadSecondary);		non-compiled	[CE]  cannot  find  symbol  squadSecondary	12	None
5	[BUG]  [BUGGY]    Arrays.sort(this.main,  squaredSecondary);  transformer  =  null;  [CE]  no  suitable  method  found  for  sort(double[],double[])  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  [BUGGY]    Arrays.sort(this.main,  squaredSecondary);  transformer  =  null;  [BUGGY]  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	199	199	1	replace	    Arrays.sort(this.main,  squaredSecondary);  transformer  =  null;		non-compiled	[CE]  no  suitable  method  found  for  sort(double[],double[])	12	None
21	[BUG]  [BUGGY]    ArrayRealEigenvalues[]  squaredSecondary  =  new  ArrayRealEigenvalues[2];  [CE]  cannot  find  symbol  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;    [BUGGY]    ArrayRealEigenvalues[]  squaredSecondary  =  new  ArrayRealEigenvalues[2];  [BUGGY]  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	    ArrayRealEigenvalues[]  squaredSecondary  =  new  ArrayRealEigenvalues[2];		non-compiled	[CE]  cannot  find  symbol	10	None
22	[BUG]  [BUGGY]    ArrayRealEigenvalues[]  squaredSecondary  =  new  ArrayRealEigenvalues[this.majorDecompositionMatrix.length];  [CE]  cannot  find  symbol  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;    [BUGGY]    ArrayRealEigenvalues[]  squaredSecondary  =  new  ArrayRealEigenvalues[this.majorDecompositionMatrix.length];  [BUGGY]  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	    ArrayRealEigenvalues[]  squaredSecondary  =  new  ArrayRealEigenvalues[this.majorDecompositionMatrix.length];		non-compiled	[CE]  cannot  find  symbol	10	None
23	[BUG]  [BUGGY]    ArrayRealEigenvalues[]  squaredSecondary  =  new  ArrayRealEigenvalues[this.majorDecompositionMath.length];  [CE]  cannot  find  symbol  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;    [BUGGY]    ArrayRealEigenvalues[]  squaredSecondary  =  new  ArrayRealEigenvalues[this.majorDecompositionMath.length];  [BUGGY]  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	    ArrayRealEigenvalues[]  squaredSecondary  =  new  ArrayRealEigenvalues[this.majorDecompositionMath.length];		non-compiled	[CE]  cannot  find  symbol	10	None
24	[BUG]  [BUGGY]    ArrayRealEigenvalues[]  squaredSecondary  =  new  ArrayRealEigenvalues[1];  [CE]  cannot  find  symbol  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;    [BUGGY]    ArrayRealEigenvalues[]  squaredSecondary  =  new  ArrayRealEigenvalues[1];  [BUGGY]  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	    ArrayRealEigenvalues[]  squaredSecondary  =  new  ArrayRealEigenvalues[1];		non-compiled	[CE]  cannot  find  symbol	10	None
25	[BUG]  [BUGGY]    ArrayRealEigenvalues[]  squaredSecondary  =  new  ArrayRealEigenvalues[this.primary.length];  [CE]  cannot  find  symbol  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;    [BUGGY]    ArrayRealEigenvalues[]  squaredSecondary  =  new  ArrayRealEigenvalues[this.primary.length];  [BUGGY]  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	    ArrayRealEigenvalues[]  squaredSecondary  =  new  ArrayRealEigenvalues[this.primary.length];		non-compiled	[CE]  cannot  find  symbol	10	None
43	[BUG]  [BUGGY]  this.main  =  main.clone();this.secondary  =  primary.clone();  [CE]  cannot  find  symbol  primary  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  [BUGGY]  this.main  =  main.clone();this.secondary  =  primary.clone();  [BUGGY]  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this.main  =  main.clone();this.secondary  =  primary.clone();	this.main=  main.clone();  	non-compiled	[CE]  cannot  find  symbol  primary	3	None
44	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  testMath308  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  [BUGGY]  this.main  =  main.clone();this.secondary  =  secondary.clone();  [BUGGY]  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	add	this.main  =  main.clone();this.secondary  =  secondary.clone();	this.main=  main.clone();  	compilable	  [FE]  ArrayIndexOutOfBoundsException  testMath308	3	1
45	[BUG]  [BUGGY]  this.main  =  main.clone();this.secondary  =  secondary.clone();  [FE]  ArrayIndexOutOfBoundsException  testMath308  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  [BUGGY]  this.main  =  main.clone();this.secondary  =  secondary.clone();  [BUGGY]  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this.main  =  main.clone();this.secondary  =  secondary.clone();	this.main=  main.clone();  	compilable	  [FE]  ArrayIndexOutOfBoundsException  testMath308	3	1
61	[BUG]  [BUGGY]  squaredSecondary  =  new  squaredSecondary[2].length;  [CE]  cannot  find  symbol  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;    [BUGGY]  squaredSecondary  =  new  squaredSecondary[2].length;  [BUGGY]  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	squaredSecondary  =  new  squaredSecondary[2].length;	squaredSecondary  =  new  double[secondary.length];  	non-compiled	[CE]  cannot  find  symbol	9	None
62	[BUG]  [BUGGY]  squaredSecondary  =  new  squaredSecondary[2];  [CE]  cannot  find  symbol  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;    [BUGGY]  squaredSecondary  =  new  squaredSecondary[2];  [BUGGY]  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	squaredSecondary  =  new  squaredSecondary[2];	squaredSecondary  =  new  double[secondary.length];  	non-compiled	[CE]  cannot  find  symbol	9	None
63	[BUG]  [BUGGY]  squaredSecondary  =  new  squaredSecondary[2].length];  [CE]  ';'  expected  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;    [BUGGY]  squaredSecondary  =  new  squaredSecondary[2].length];  [BUGGY]  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	squaredSecondary  =  new  squaredSecondary[2].length];	squaredSecondary  =  new  double[secondary.length];  	non-compiled	[CE]  ';'  expected	9	None
83	[BUG]  [BUGGY]  transformer=  this.quadSecondary;  [CE]  cannot  find  symbol  quadSecondary  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  [BUGGY]  transformer=  this.quadSecondary;  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	195	195	1	replace	transformer=  this.quadSecondary;	transformer=  null;  	non-compiled	[CE]  cannot  find  symbol  quadSecondary	7	None
101	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testMath308  [CONTEXT]  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  [BUGGY]  squaredSecondary[i]  =  s  *  squaredSecondary.length;  [BUGGY]  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	add	squaredSecondary[i]  =  s  *  squaredSecondary.length;	squaredSecondary[i]  =  s  *  s;  	compilable	  [FE]  AssertionFailedError  testMath308	15	1
102	[BUG]  [BUGGY]  squaredSecondary[i]  =  s  *  squaredSecondary.length;  [FE]  AssertionFailedError  testMath308  [CONTEXT]  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  [BUGGY]  squaredSecondary[i]  =  s  *  squaredSecondary.length;  [BUGGY]  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  s  *  squaredSecondary.length;	squaredSecondary[i]  =  s  *  s;  	compilable	  [FE]  AssertionFailedError  testMath308	15	1
121	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  primary.length;  ++i)  {  [CE]  cannot  find  symbol  primary  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  [BUGGY]  for(int  i  =  0;  i  <  primary.length;  ++i)  {  [BUGGY]  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	199	199	1	replace	for(int  i  =  0;  i  <  primary.length;  ++i)  {	for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  	non-compiled	[CE]  cannot  find  symbol  primary	11	None
122	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testMath308  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  [BUGGY]  for(int  i  =  0;  i  <  squaredSecondary.length  -  1;  ++i)  {  [BUGGY]  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	199	199	1	add	for(int  i  =  0;  i  <  squaredSecondary.length  -  1;  ++i)  {	for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  	compilable	  [FE]  AssertionFailedError  testMath308	11	1
123	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  squaredSecondary.length  -  1;  ++i)  {  [FE]  AssertionFailedError  testMath308  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  [BUGGY]  for(int  i  =  0;  i  <  squaredSecondary.length  -  1;  ++i)  {  [BUGGY]  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	199	199	1	replace	for(int  i  =  0;  i  <  squaredSecondary.length  -  1;  ++i)  {	for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  	compilable	  [FE]  AssertionFailedError  testMath308	11	1
141	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  testMath308  [CONTEXT]  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [BUGGY]  this.splitTolerance  =  splitTolerance  *  TOLERANCE;  [BUGGY]  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	add	this.splitTolerance  =  splitTolerance  *  TOLERANCE;	this.splitTolerance  =  splitTolerance;  	compilable	  [FE]  ArrayIndexOutOfBoundsException  testMath308	17	1
142	[BUG]  [BUGGY]  this.splitTolerance  =  splitTolerance  *  TOLERANCE;  [FE]  ArrayIndexOutOfBoundsException  testMath308  [CONTEXT]  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [BUGGY]  this.splitTolerance  =  splitTolerance  *  TOLERANCE;  [BUGGY]  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	this.splitTolerance  =  splitTolerance  *  TOLERANCE;	this.splitTolerance  =  splitTolerance;  	compilable	  [FE]  ArrayIndexOutOfBoundsException  testMath308	17	1
142	[BUG]  [BUGGY]  this.splitTolerance  =  squaredSecondary;  [CE]  incompatible  types  [CONTEXT]  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [BUGGY]  this.splitTolerance  =  squaredSecondary;  [BUGGY]  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	this.splitTolerance  =  squaredSecondary;	this.splitTolerance  =  splitTolerance;  	non-compiled	[CE]  incompatible  types	17	None
143	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  testMath308  [CONTEXT]  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [BUGGY]  this.splitTolerance  =  splitTolerance  *  TOLERANCE_2;  [BUGGY]  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	add	this.splitTolerance  =  splitTolerance  *  TOLERANCE_2;	this.splitTolerance  =  splitTolerance;  	compilable	  [FE]  ArrayIndexOutOfBoundsException  testMath308	17	1
144	[BUG]  [BUGGY]  this.splitTolerance  =  splitTolerance  *  TOLERANCE_2;  [FE]  ArrayIndexOutOfBoundsException  testMath308  [CONTEXT]  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [BUGGY]  this.splitTolerance  =  splitTolerance  *  TOLERANCE_2;  [BUGGY]  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	this.splitTolerance  =  splitTolerance  *  TOLERANCE_2;	this.splitTolerance  =  splitTolerance;  	compilable	  [FE]  ArrayIndexOutOfBoundsException  testMath308	17	1
144	[BUG]  [BUGGY]  this.splitTolerance  =  splitTolerance  *  ToLERANCE_2;  [CE]  cannot  find  symbol  ToLERANCE_2  [CONTEXT]  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [BUGGY]  this.splitTolerance  =  splitTolerance  *  ToLERANCE_2;  [BUGGY]  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	this.splitTolerance  =  splitTolerance  *  ToLERANCE_2;	this.splitTolerance  =  splitTolerance;  	non-compiled	[CE]  cannot  find  symbol  ToLERANCE_2	17	None
163	[BUG]  [BUGGY]  this.secondary  =  second.clone();  [CE]  cannot  find  symbol  second  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  [BUGGY]  this.secondary  =  second.clone();  [BUGGY]  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	194	194	1	replace	this.secondary  =  second.clone();	this.secondary  =  secondary.clone();  	non-compiled	[CE]  cannot  find  symbol  second	5	None
182	[BUG]  [BUGGY]  throw  new  InvalidMatrixException( " ");  this.main  =  main.clone();  [CE]  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  [BUGGY]  throw  new  InvalidMatrixException( " ");  this.main  =  main.clone();  [BUGGY]    this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	throw  new  InvalidMatrixException( " ");  this.main  =  main.clone();	throws  InvalidMatrixException  {  	non-compiled	[CE]  	1	None
183	[BUG]  [BUGGY]  super(main.clone(),  secondary.clone());  [CE]  ';'  expected  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  [BUGGY]  super(main.clone(),  secondary.clone());  [BUGGY]    this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	super(main.clone(),  secondary.clone());	throws  InvalidMatrixException  {  	non-compiled	[CE]  ';'  expected	1	None
184	[BUG]  [BUGGY]  super(main.clone(),  splitTolerance);  [CE]  ';'  expected  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  [BUGGY]  super(main.clone(),  splitTolerance);  [BUGGY]    this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	super(main.clone(),  splitTolerance);	throws  InvalidMatrixException  {  	non-compiled	[CE]  ';'  expected	1	None
203	[BUG]  [BUGGY]    super();  this.main  =  main.clone();  [CE]  ';'  expected  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  [BUGGY]    super();  this.main  =  main.clone();  [BUGGY]  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	    super();  this.main  =  main.clone();		non-compiled	[CE]  ';'  expected	2	None
222	[BUG]  [BUGGY]    super(main.clone(),  secondary.clone());  this.realEigenvalues  =  realEigenvalues;  [CE]  constructor  Object  in  class  Object  cannot  be  applied  to  given  types;  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  [BUGGY]    super(main.clone(),  secondary.clone());  this.realEigenvalues  =  realEigenvalues;  [BUGGY]  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	    super(main.clone(),  secondary.clone());  this.realEigenvalues  =  realEigenvalues;		non-compiled	[CE]  constructor  Object  in  class  Object  cannot  be  applied  to  given  types;	4	None
223	[BUG]  [BUGGY]    super(main.clone(),  splitTolerance);  [CE]  constructor  Object  in  class  Object  cannot  be  applied  to  given  types;  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  [BUGGY]    super(main.clone(),  splitTolerance);  [BUGGY]  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	    super(main.clone(),  splitTolerance);		non-compiled	[CE]  constructor  Object  in  class  Object  cannot  be  applied  to  given  types;	4	None
224	[BUG]  [BUGGY]    super(main.clone(),  secondary.clone());  [CE]  constructor  Object  in  class  Object  cannot  be  applied  to  given  types;  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  [BUGGY]    super(main.clone(),  secondary.clone());  [BUGGY]  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	    super(main.clone(),  secondary.clone());		non-compiled	[CE]  constructor  Object  in  class  Object  cannot  be  applied  to  given  types;	4	None
225	[BUG]  [BUGGY]    super(main.clone(),  splitTolerance);  this.realEigenvalues  =  realEigenvalues;  [CE]  constructor  Object  in  class  Object  cannot  be  applied  to  given  types;  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  [BUGGY]    super(main.clone(),  splitTolerance);  this.realEigenvalues  =  realEigenvalues;  [BUGGY]  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	    super(main.clone(),  splitTolerance);  this.realEigenvalues  =  realEigenvalues;		non-compiled	[CE]  constructor  Object  in  class  Object  cannot  be  applied  to  given  types;	4	None
242	[BUG]  [BUGGY]    s  =  squaredSecondary.doubleValue();  [CE]  cannot  assign  a  value  to  final  variable  s  [CONTEXT]  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  [BUGGY]    s  =  squaredSecondary.doubleValue();  [BUGGY]  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	    s  =  squaredSecondary.doubleValue();		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  s	16	None
243	[BUG]  [BUGGY]    s  =  squaredSecondary[i]  *  main.doubleValue();  [CE]  cannot  assign  a  value  to  final  variable  s  [CONTEXT]  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  [BUGGY]    s  =  squaredSecondary[i]  *  main.doubleValue();  [BUGGY]  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	    s  =  squaredSecondary[i]  *  main.doubleValue();		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  s	16	None
244	[BUG]  [BUGGY]    s  =  squaredSecondary.doubleValue();  this.main  =  main.clone();  [CE]  cannot  assign  a  value  to  final  variable  s  [CONTEXT]  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  [BUGGY]    s  =  squaredSecondary.doubleValue();  this.main  =  main.clone();  [BUGGY]  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	    s  =  squaredSecondary.doubleValue();  this.main  =  main.clone();		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  s	16	None
245	[BUG]  [BUGGY]    s  =  squaredSecondary[i].doubleValue();  this.main  =  main.clone();  [CE]  cannot  assign  a  value  to  final  variable  s  [CONTEXT]  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  [BUGGY]    s  =  squaredSecondary[i].doubleValue();  this.main  =  main.clone();  [BUGGY]  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	    s  =  squaredSecondary[i].doubleValue();  this.main  =  main.clone();		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  s	16	None
262	[BUG]  [BUGGY]  final  double  s  =(squaredSecondary[i])?  squaredSecondary[i]  :  primary;  [CE]  incompatible  types  [CONTEXT]  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  [BUGGY]  final  double  s  =(squaredSecondary[i])?  squaredSecondary[i]  :  primary;  [BUGGY]  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =(squaredSecondary[i])?  squaredSecondary[i]  :  primary;	final  double  s  =  secondary[i];  	non-compiled	[CE]  incompatible  types	13	None
263	[BUG]  [BUGGY]  final  double  s  =(squaredSecondary[i])?  squaredSecondary[i]  :  secondary;  [CE]  incompatible  types  [CONTEXT]  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  [BUGGY]  final  double  s  =(squaredSecondary[i])?  squaredSecondary[i]  :  secondary;  [BUGGY]  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =(squaredSecondary[i])?  squaredSecondary[i]  :  secondary;	final  double  s  =  secondary[i];  	non-compiled	[CE]  incompatible  types	13	None
264	[BUG]  [BUGGY]  final  double  s  =(squaredSecondary[i])?  main[i]  :  secondary[i];  [CE]  incompatible  types  [CONTEXT]  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  [BUGGY]  final  double  s  =(squaredSecondary[i])?  main[i]  :  secondary[i];  [BUGGY]  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =(squaredSecondary[i])?  main[i]  :  secondary[i];	final  double  s  =  secondary[i];  	non-compiled	[CE]  incompatible  types	13	None
282	[BUG]  [BUGGY]    Arrays.sort(this.main,  squaredSecondary);  [CE]  no  suitable  method  found  for  sort(double[],double[])  [CONTEXT]  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [BUGGY]    Arrays.sort(this.main,  squaredSecondary);  [BUGGY]  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	    Arrays.sort(this.main,  squaredSecondary);		non-compiled	[CE]  no  suitable  method  found  for  sort(double[],double[])	18	None
283	[BUG]  [BUGGY]    this.main  =  squaredSecondary.doubleValue();  [CE]  cannot  find  symbol  [CONTEXT]  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [BUGGY]    this.main  =  squaredSecondary.doubleValue();  [BUGGY]  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	    this.main  =  squaredSecondary.doubleValue();		non-compiled	[CE]  cannot  find  symbol	18	None
284	[BUG]  [BUGGY]    main  =  squaredSecondary.doubleValue();  [CE]  cannot  find  symbol  [CONTEXT]  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [BUGGY]    main  =  squaredSecondary.doubleValue();  [BUGGY]  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	    main  =  squaredSecondary.doubleValue();		non-compiled	[CE]  cannot  find  symbol	18	None
285	[BUG]  [BUGGY]    this.main  =  squaredSecondary[i];  [CE]  cannot  find  symbol  i  [CONTEXT]  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [BUGGY]    this.main  =  squaredSecondary[i];  [BUGGY]  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	    this.main  =  squaredSecondary[i];		non-compiled	[CE]  cannot  find  symbol  i	18	None
302	[BUG]  [BUGGY]    this.subSecond  =  subSecond.clone();  [CE]  cannot  find  symbol  subSecond  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  [BUGGY]    this.subSecond  =  subSecond.clone();  [BUGGY]  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	194	194	1	replace	    this.subSecond  =  subSecond.clone();		non-compiled	[CE]  cannot  find  symbol  subSecond	6	None
303	[BUG]  [BUGGY]    this.subTree  =  splitTolerance.clone();  [CE]  cannot  find  symbol  subTree  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  [BUGGY]    this.subTree  =  splitTolerance.clone();  [BUGGY]  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	194	194	1	replace	    this.subTree  =  splitTolerance.clone();		non-compiled	[CE]  cannot  find  symbol  subTree	6	None
305	[BUG]  [BUGGY]    this.subtypes  =  subtypes.clone();  [CE]  cannot  find  symbol  subtypes  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  [BUGGY]    this.subtypes  =  subtypes.clone();  [BUGGY]  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	194	194	1	replace	    this.subtypes  =  subtypes.clone();		non-compiled	[CE]  cannot  find  symbol  subtypes	6	None
321	[BUG]  [BUGGY]    main  =  squaredSecondary.doubleValue();  [CE]  cannot  find  symbol  [CONTEXT]  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  [BUGGY]    main  =  squaredSecondary.doubleValue();  [BUGGY]  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	    main  =  squaredSecondary.doubleValue();		non-compiled	[CE]  cannot  find  symbol	20	None
322	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testMath308  [CONTEXT]  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  [BUGGY]    Arrays.sort(squaredSecondary);  [BUGGY]  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	add	    Arrays.sort(squaredSecondary);		compilable	  [FE]  AssertionFailedError  testMath308	20	1
323	[BUG]  [BUGGY]    Arrays.sort(squaredSecondary);  [FE]  AssertionFailedError  testMath308  [CONTEXT]  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  [BUGGY]    Arrays.sort(squaredSecondary);  [BUGGY]  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	    Arrays.sort(squaredSecondary);		compilable	  [FE]  AssertionFailedError  testMath308	20	1
323	[BUG]  [BUGGY]    ensureDecomposition(squadSecondary);  [CE]  cannot  find  symbol  squadSecondary  [CONTEXT]  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  [BUGGY]    ensureDecomposition(squadSecondary);  [BUGGY]  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	    ensureDecomposition(squadSecondary);		non-compiled	[CE]  cannot  find  symbol  squadSecondary	20	None
324	[BUG]  [BUGGY]    Arrays.sort(squaredSecondary);  main  =  squaredSecondary;  [CE]  final  parameter  main  may  not  be  assigned  [CONTEXT]  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  [BUGGY]    Arrays.sort(squaredSecondary);  main  =  squaredSecondary;  [BUGGY]  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	    Arrays.sort(squaredSecondary);  main  =  squaredSecondary;		non-compiled	[CE]  final  parameter  main  may  not  be  assigned	20	None
325	[BUG]  [BUGGY]    Arrays.sort(squaredSecondary);  main  =  squaredSecondary[i];  [CE]  cannot  find  symbol  i  [CONTEXT]  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  [BUGGY]    Arrays.sort(squaredSecondary);  main  =  squaredSecondary[i];  [BUGGY]  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	    Arrays.sort(squaredSecondary);  main  =  squaredSecondary[i];		non-compiled	[CE]  cannot  find  symbol  i	20	None
344	[BUG]  [BUGGY]  transform(squadSecondary);  [CE]  cannot  find  symbol  squadSecondary  [CONTEXT]  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  [BUGGY]  transform(squadSecondary);  [BUGGY]    }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	transform(squadSecondary);	decompose();  	non-compiled	[CE]  cannot  find  symbol  squadSecondary	19	None
362	[BUG]  [BUGGY]    Arrays.sort(squaredSecondary[i],  transformer);  [CE]  no  suitable  method  found  for  sort(double,TriDiagonalTransformer)  [CONTEXT]  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  [BUGGY]    Arrays.sort(squaredSecondary[i],  transformer);  [BUGGY]  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	    Arrays.sort(squaredSecondary[i],  transformer);		non-compiled	[CE]  no  suitable  method  found  for  sort(double,TriDiagonalTransformer)	14	None
363	[BUG]  [BUGGY]    Arrays.sort(squaredSecondary[i]);  [CE]  no  suitable  method  found  for  sort(double)  [CONTEXT]  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  [BUGGY]    Arrays.sort(squaredSecondary[i]);  [BUGGY]  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	    Arrays.sort(squaredSecondary[i]);		non-compiled	[CE]  no  suitable  method  found  for  sort(double)	14	None
364	[BUG]  [BUGGY]    main  =  squaredSecondary[i];  [CE]  incompatible  types  [CONTEXT]  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  [BUGGY]    main  =  squaredSecondary[i];  [BUGGY]  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	    main  =  squaredSecondary[i];		non-compiled	[CE]  incompatible  types	14	None
365	[BUG]  [BUGGY]    transform(squadSecondary[i]);  [CE]  cannot  find  symbol  squadSecondary  [CONTEXT]  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  [BUGGY]    transform(squadSecondary[i]);  [BUGGY]  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	    transform(squadSecondary[i]);		non-compiled	[CE]  cannot  find  symbol  squadSecondary	14	None
381	[BUG]  [BUGGY]    System.arraycopy(keywords,  0,  this.main,  0,  splitTolerance);  [CE]  cannot  find  symbol  keywords  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  [BUGGY]    System.arraycopy(keywords,  0,  this.main,  0,  splitTolerance);  [BUGGY]  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	195	195	1	replace	    System.arraycopy(keywords,  0,  this.main,  0,  splitTolerance);		non-compiled	[CE]  cannot  find  symbol  keywords	8	None
382	[BUG]  [BUGGY]    ArrayRealEigenvalues[]  transform  =  new  ArrayRealEigenvalues[1];  [CE]  cannot  find  symbol  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  [BUGGY]    ArrayRealEigenvalues[]  transform  =  new  ArrayRealEigenvalues[1];  [BUGGY]  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	195	195	1	replace	    ArrayRealEigenvalues[]  transform  =  new  ArrayRealEigenvalues[1];		non-compiled	[CE]  cannot  find  symbol	8	None
383	[BUG]  [BUGGY]    ArrayRealEigenvalues[]  transform  =  new  ArrayRealEigenvalues[2];  [CE]  cannot  find  symbol  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  [BUGGY]    ArrayRealEigenvalues[]  transform  =  new  ArrayRealEigenvalues[2];  [BUGGY]  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	195	195	1	replace	    ArrayRealEigenvalues[]  transform  =  new  ArrayRealEigenvalues[2];		non-compiled	[CE]  cannot  find  symbol	8	None
384	[BUG]  [BUGGY]    ArrayRealEigenvalues[]  transform  =  new  ArrayRealEigenvalues[0];  [CE]  cannot  find  symbol  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  [BUGGY]    ArrayRealEigenvalues[]  transform  =  new  ArrayRealEigenvalues[0];  [BUGGY]  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	195	195	1	replace	    ArrayRealEigenvalues[]  transform  =  new  ArrayRealEigenvalues[0];		non-compiled	[CE]  cannot  find  symbol	8	None
385	[BUG]  [BUGGY]    this.transformTokenType  =  splitTolerance  *  main.clone();  [CE]  cannot  find  symbol  transformTokenType  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  [BUGGY]    this.transformTokenType  =  splitTolerance  *  main.clone();  [BUGGY]  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	195	195	1	replace	    this.transformTokenType  =  splitTolerance  *  main.clone();		non-compiled	[CE]  cannot  find  symbol  transformTokenType	8	None
4	[BUG]  [BUGGY]  final  int  s  =  squaredSecondary[i];  [CE]  possible  loss  of  precision  [CONTEXT]  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  [BUGGY]  final  int  s  =  squaredSecondary[i];  [BUGGY]  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  int  s  =  squaredSecondary[i];	final  double  s  =  secondary[i];  	non-compiled	[CE]  possible  loss  of  precision	13	None
33	[BUG]  [BUGGY]  this.main  =  main.clone()  +  splitTolerance;  [CE]  bad  operand  types  for  binary  operator  '+'  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  [BUGGY]  this.main  =  main.clone()  +  splitTolerance;  [BUGGY]  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this.main  =  main.clone()  +  splitTolerance;	this.main=  main.clone();  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	3	None
34	[BUG]  [BUGGY]  this.main  =  main.clone(),  splitTolerance);  [CE]  ';'  expected  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  [BUGGY]  this.main  =  main.clone(),  splitTolerance);  [BUGGY]  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this.main  =  main.clone(),  splitTolerance);	this.main=  main.clone();  	non-compiled	[CE]  ';'  expected	3	None
63	[BUG]  [BUGGY]  throws  InvalidMatrixException  && "Unknown  type: "  +  main.toString();  [CE]  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  [BUGGY]  throws  InvalidMatrixException  && "Unknown  type: "  +  main.toString();  [BUGGY]    this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	throws  InvalidMatrixException  && "Unknown  type: "  +  main.toString();	throws  InvalidMatrixException  {  	non-compiled	[CE]  	1	None
64	[BUG]  [BUGGY]  throws  InvalidMatrixException  && "Unknown  method: "  +  main.toString();  [CE]  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  [BUGGY]  throws  InvalidMatrixException  && "Unknown  method: "  +  main.toString();  [BUGGY]    this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	throws  InvalidMatrixException  && "Unknown  method: "  +  main.toString();	throws  InvalidMatrixException  {  	non-compiled	[CE]  	1	None
91	[BUG]  [BUGGY]    if(s  <  0.0)  {  if(s.length  >  0)  {  throw  new  IllegalArgumentException( "Statistics  constructed  from  external  moments  cannot  be  decomposed. ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  [BUGGY]    if(s  <  0.0)  {  if(s.length  >  0)  {  throw  new  IllegalArgumentException( "Statistics  constructed  from  external  moments  cannot  be  decomposed. ");  }  [BUGGY]  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	    if(s  <  0.0)  {  if(s.length  >  0)  {  throw  new  IllegalArgumentException( "Statistics  constructed  from  external  moments  cannot  be  decomposed. ");  }		non-compiled	[CE]  illegal  start  of  expression	16	None
92	[BUG]  [BUGGY]    if(s  <  0.0)  {  if(s.length  >  0)  {  throw  new  IllegalArgumentException( "Statistics  constructed  from  external  sources  cannot  be  decomposed. ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  [BUGGY]    if(s  <  0.0)  {  if(s.length  >  0)  {  throw  new  IllegalArgumentException( "Statistics  constructed  from  external  sources  cannot  be  decomposed. ");  }  [BUGGY]  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	    if(s  <  0.0)  {  if(s.length  >  0)  {  throw  new  IllegalArgumentException( "Statistics  constructed  from  external  sources  cannot  be  decomposed. ");  }		non-compiled	[CE]  illegal  start  of  expression	16	None
93	[BUG]  [BUGGY]    if(s  <  0.0)  {  if(s.length  >  0)  {  throw  new  IllegalArgumentException( "Statistics  constructed  from  external  properties  cannot  be  decomposed. ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  [BUGGY]    if(s  <  0.0)  {  if(s.length  >  0)  {  throw  new  IllegalArgumentException( "Statistics  constructed  from  external  properties  cannot  be  decomposed. ");  }  [BUGGY]  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	    if(s  <  0.0)  {  if(s.length  >  0)  {  throw  new  IllegalArgumentException( "Statistics  constructed  from  external  properties  cannot  be  decomposed. ");  }		non-compiled	[CE]  illegal  start  of  expression	16	None
94	[BUG]  [BUGGY]    if(s  <  0.0)  {  if(s.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  [BUGGY]    if(s  <  0.0)  {  if(s.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	    if(s  <  0.0)  {  if(s.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	16	None
95	[BUG]  [BUGGY]    if(s!=  0.0)  {  if(s.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  [BUGGY]    if(s!=  0.0)  {  if(s.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	    if(s!=  0.0)  {  if(s.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	16	None
121	[BUG]  [BUGGY]  addTolerance(tolerance);  [CE]  cannot  find  symbol  tolerance  [CONTEXT]  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  [BUGGY]  addTolerance(tolerance);  [BUGGY]    }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	addTolerance(tolerance);	decompose();  	non-compiled	[CE]  cannot  find  symbol  tolerance	19	None
122	[BUG]  [BUGGY]  stripTrailingZeroes();  [CE]  cannot  find  symbol  [CONTEXT]  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  [BUGGY]  stripTrailingZeroes();  [BUGGY]    }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	stripTrailingZeroes();	decompose();  	non-compiled	[CE]  cannot  find  symbol	19	None
123	[BUG]  [BUGGY]  stripTrailingZeroSets();  [CE]  cannot  find  symbol  [CONTEXT]  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  [BUGGY]  stripTrailingZeroSets();  [BUGGY]    }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	stripTrailingZeroSets();	decompose();  	non-compiled	[CE]  cannot  find  symbol	19	None
