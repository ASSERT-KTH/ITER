bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
29	[BUG] [BUGGY] np = nn - 9; [FE] ArrayIndexOutOfBoundsException [CONTEXT] if (dMin == dN) { gam = dN; a2 = 0.0; if (work[nn - 5]>work[nn - 7]) { return; } b2 = work[nn - 5] / work[nn - 7]; [BUGGY] np = nn - 9; [BUGGY] } else { np = nn - 2 * pingPong; b2 = work[np - 2]; gam = dN1; if (work[np - 4]>work[np - 2]) { return; } a2 = work[np - 4] / work[np - 2]; if (work[nn - 9]>work[nn - 11]) { return; [CLASS] EigenDecompositionImpl Solver [METHOD] computeShiftIncrement [RETURN_TYPE] void  final int start final int end final int deflated [VARIABLES] boolean double[] b bp imagEigenvalues invI main range realEigenvalues secondary squaredSecondary vData vK work ArrayRealVector[] eigenvectors RealMatrix b cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 a2 absDCurrent absDPrevious absoluteTolerance alpha b b1 b2 beta c cnst1 cnst2 cnst3 d dCurrent dMin dMin1 dMin2 dN dN1 dN2 delta determinant di diagMax diagMin e12 eCurrent eMax eMin ePrevious ei eiM1 eps g gam gap1 gap2 invIJ lambda largestRoot left lower lowerSpectra margin max middle mij minPivot mji offDiagMax offDiagMin oldB1 oneFourth p previousEMin q q0 q1 q1q2Me22 q2 qMax r radius range ratio relativeTolerance right s sigma sigmaLow splitTolerance sqrtMq sumOffDiag t tNorm tau theta threeFourth tmp upper upperSpectra z0 z1 z2 int begin columns count deflated deflatedEnd end fourI i i0 i4 index j j4 j4p2 k l lowerStart m maxIter n n0 nColB nn np oneFourthCount pingPong rows split start step tType threeFourthCount upperStart TriDiagonalTransformer transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1485	1485	1	replace	
30	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] if (dMin == dN) { gam = dN; a2 = 0.0; if (work[nn - 5]>work[nn - 7]) { return; } b2 = work[nn - 5] / work[nn - 7]; [BUGGY] [BUGGY] np = nn - 9; } else { np = nn - 2 * pingPong; b2 = work[np - 2]; gam = dN1; if (work[np - 4]>work[np - 2]) { return; } a2 = work[np - 4] / work[np - 2]; if (work[nn - 9]>work[nn - 11]) { return; [CLASS] EigenDecompositionImpl Solver [METHOD] computeShiftIncrement [RETURN_TYPE] void  final int start final int end final int deflated [VARIABLES] boolean double[] b bp imagEigenvalues invI main range realEigenvalues secondary squaredSecondary vData vK work ArrayRealVector[] eigenvectors RealMatrix b cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 a2 absDCurrent absDPrevious absoluteTolerance alpha b b1 b2 beta c cnst1 cnst2 cnst3 d dCurrent dMin dMin1 dMin2 dN dN1 dN2 delta determinant di diagMax diagMin e12 eCurrent eMax eMin ePrevious ei eiM1 eps g gam gap1 gap2 invIJ lambda largestRoot left lower lowerSpectra margin max middle mij minPivot mji offDiagMax offDiagMin oldB1 oneFourth p previousEMin q q0 q1 q1q2Me22 q2 qMax r radius range ratio relativeTolerance right s sigma sigmaLow splitTolerance sqrtMq sumOffDiag t tNorm tau theta threeFourth tmp upper upperSpectra z0 z1 z2 int begin columns count deflated deflatedEnd end fourI i i0 i4 index j j4 j4p2 k l lowerStart m maxIter n n0 nColB nn np oneFourthCount pingPong rows split start step tType threeFourthCount upperStart TriDiagonalTransformer transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1485	1485	1	add	
