bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[quadSecondary.length  +  1]);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[quadSecondary.length  +  1]);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[quadSecondary.length  +  1]);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[squaredSecondary.length    +    1]);    	non-compiled	[CE]  ';'  expected	37	None	replace
2	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[squaredSecondary.length  +  2]);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[squaredSecondary.length  +  2]);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[squaredSecondary.length  +  2]);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[squaredSecondary.length    +    1]);    	non-compiled	[CE]  ';'  expected	37	None	replace
3	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[squaredSecondary.length  +  3]);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[squaredSecondary.length  +  3]);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[squaredSecondary.length  +  3]);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[squaredSecondary.length    +    1]);    	non-compiled	[CE]  ';'  expected	37	None	replace
4	[BUG]  [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[0];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[i];  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[0];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[i];  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[0];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[i];	  ArrayRealVector[]    eigenvectors    =    new    ArrayRealVector[2];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary[]    =    primary[i];    	non-compiled	[CE]  ';'  expected	21	None	replace
5	[BUG]  [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[1];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[i];  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[1];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[i];  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[1];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[i];	  ArrayRealVector[]    eigenvectors    =    new    ArrayRealVector[2];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary[]    =    primary[i];    	non-compiled	[CE]  ';'  expected	21	None	replace
6	[BUG]  [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[2];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[i];  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[2];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[i];  }  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[2];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[i];  }	  ArrayRealVector[]    eigenvectors    =    new    ArrayRealVector[2];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary[]    =    primary[i];    	non-compiled	[CE]  ';'  expected	21	None	replace
7	[BUG]  [BUGGY]  if(this.splitTolerance!=  splitTolerance)  {  remove(squaredSecondary);  }  else  {  this.splitTolerance  =  splitTolerance;  }  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(this.splitTolerance!=  splitTolerance)  {  remove(squaredSecondary);  }  else  {  this.splitTolerance  =  splitTolerance;  }  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance!=  splitTolerance)  {  remove(squaredSecondary);  }  else  {  this.splitTolerance  =  splitTolerance;  }	  remove(squaredSecondary);    	non-compiled	[CE]  ';'  expected	84	None	replace
8	[BUG]  [BUGGY]  if(this.splitTolerance!=  splitTolerance)  {  remove(squaredSecondary);  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(this.splitTolerance!=  splitTolerance)  {  remove(squaredSecondary);  }  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance!=  splitTolerance)  {  remove(squaredSecondary);  }	  remove(squaredSecondary);    	non-compiled	[CE]  ';'  expected	84	None	replace
9	[BUG]  [BUGGY]  if(this.splitTolerance!=  splitTolerance)  {  remove(squaredSecondary);  }  else  {  this.splitTolerance  =  splitTolerance;  System.arraycopy(s,  0,  squaredSecondary,  0,  squaredSecondary.length);  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(this.splitTolerance!=  splitTolerance)  {  remove(squaredSecondary);  }  else  {  this.splitTolerance  =  splitTolerance;  System.arraycopy(s,  0,  squaredSecondary,  0,  squaredSecondary.length);  }  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance!=  splitTolerance)  {  remove(squaredSecondary);  }  else  {  this.splitTolerance  =  splitTolerance;  System.arraycopy(s,  0,  squaredSecondary,  0,  squaredSecondary.length);  }	  remove(squaredSecondary);    	non-compiled	[CE]  ';'  expected	84	None	replace
10	[BUG]  [BUGGY]  if(this.splitTolerance!=  splitTolerance)  {  remove(squaredSecondary);  }  else  {  squaredSecondary  =  new  double[secondary.length];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(this.splitTolerance!=  splitTolerance)  {  remove(squaredSecondary);  }  else  {  squaredSecondary  =  new  double[secondary.length];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance!=  splitTolerance)  {  remove(squaredSecondary);  }  else  {  squaredSecondary  =  new  double[secondary.length];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {	  remove(squaredSecondary);    	non-compiled	[CE]  ';'  expected	84	None	replace
11	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[squaredSecondary.length  +  1];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[squaredSecondary.length  +  1];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[squaredSecondary.length  +  1];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i	  ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[squaredSecondary.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary    =    squaredSecondary[i    	non-compiled	[CE]  ';'  expected	18	None	replace
12	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[squaredSecondary.length  *  2];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[squaredSecondary.length  *  2];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[squaredSecondary.length  *  2];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i	  ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[squaredSecondary.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary    =    squaredSecondary[i    	non-compiled	[CE]  ';'  expected	18	None	replace
13	[BUG]  [BUGGY]  final  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[double.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[i];  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  final  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[double.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[i];  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	final  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[double.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[i];	  ArrayRealVector[]    eigenvectors    =    new    ArrayRealVector[double.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary[]    =    primary[i];    	non-compiled	[CE]  ';'  expected	22	None	replace
14	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[quaredSecondary.length()  ]);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[quaredSecondary.length()  ]);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[quaredSecondary.length()  ]);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[quaredSecondary.size()    ]);    	non-compiled	[CE]  ';'  expected	74	None	replace
15	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[quadSecondary.length  +  1]);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[quadSecondary.length  +  1]);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[quadSecondary.length  +  1]);	  ArrayRealVector[]    realEigenvectors    =    squaredSecondary.toArray(new    double[squaredSecondary.length    +    1]);    	non-compiled	[CE]  ';'  expected	43	None	replace
16	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[squaredSecondary.length  +  2]);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[squaredSecondary.length  +  2]);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[squaredSecondary.length  +  2]);	  ArrayRealVector[]    realEigenvectors    =    squaredSecondary.toArray(new    double[squaredSecondary.length    +    1]);    	non-compiled	[CE]  ';'  expected	43	None	replace
17	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[quadSecondary.length  +  2]);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[quadSecondary.length  +  2]);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[quadSecondary.length  +  2]);	  ArrayRealVector[]    realEigenvectors    =    squaredSecondary.toArray(new    double[squaredSecondary.length    +    1]);    	non-compiled	[CE]  ';'  expected	43	None	replace
18	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(this.imagEigenvalues,  this.splitTolerance);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(this.imagEigenvalues,  this.splitTolerance);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(this.imagEigenvalues,  this.splitTolerance);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(this.imagEigenvalues);    	non-compiled	[CE]  ';'  expected	1	None	replace
19	[BUG]  [BUGGY]  decompose(splitTolerance);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  decompose(splitTolerance);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(splitTolerance);	  if(this.splitTolerance!=    squaredSecondary.length)    {    decompose(this.splitTolerance);    }    	non-compiled	[CE]  ';'  expected	12	None	replace
20	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[0];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[i];  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[0];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[i];  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[0];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[i];	  ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[2];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary    =    main[i];    	non-compiled	[CE]  ';'  expected	14	None	replace
21	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[1];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[i];  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[1];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[i];  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[1];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[i];	  ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[2];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary    =    main[i];    	non-compiled	[CE]  ';'  expected	14	None	replace
22	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[2];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[i];  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[2];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[i];  }  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[2];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[i];  }	  ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[2];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary    =    main[i];    	non-compiled	[CE]  ';'  expected	14	None	replace
23	[BUG]  [BUGGY]  if(this.splitTolerance!=  secondary.length)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  this.splitTolerance,  this.splitTolerance);  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(this.splitTolerance!=  secondary.length)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  this.splitTolerance,  this.splitTolerance);  }  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance!=  secondary.length)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  this.splitTolerance,  this.splitTolerance);  }	  if(this.splitTolerance!=    splitTolerance)    {    rehashTable();    }    else    {    System.arraycopy(squaredSecondary,    0,    squaredSecondary,    this.splitTolerance,    this.splitTolerance);    }    	non-compiled	[CE]  ';'  expected	87	None	replace
24	[BUG]  [BUGGY]  System.arraycopy(secondary,  0,  secondary,  this.splitTolerance,  this.splitTolerance);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  System.arraycopy(secondary,  0,  secondary,  this.splitTolerance,  this.splitTolerance);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	System.arraycopy(secondary,  0,  secondary,  this.splitTolerance,  this.splitTolerance);	  if(this.splitTolerance!=    splitTolerance)    {    rehashTable();    }    else    {    System.arraycopy(squaredSecondary,    0,    squaredSecondary,    this.splitTolerance,    this.splitTolerance);    }    	non-compiled	[CE]  ';'  expected	87	None	replace
25	[BUG]  [BUGGY]  if(this.splitTolerance!=  null)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  this.splitTolerance,  this.splitTolerance);  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(this.splitTolerance!=  null)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  this.splitTolerance,  this.splitTolerance);  }  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance!=  null)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  this.splitTolerance,  this.splitTolerance);  }	  if(this.splitTolerance!=    splitTolerance)    {    rehashTable();    }    else    {    System.arraycopy(squaredSecondary,    0,    squaredSecondary,    this.splitTolerance,    this.splitTolerance);    }    	non-compiled	[CE]  ';'  expected	87	None	replace
26	[BUG]  [BUGGY]  decompose(squaredSecondary,  squaredSecondary);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  decompose(squaredSecondary,  squaredSecondary);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(squaredSecondary,  squaredSecondary);	  decompose(quadSecondary,    squaredSecondary);    	non-compiled	[CE]  ';'  expected	62	None	replace
27	[BUG]  [BUGGY]  decompose(quadSecondary,  squaredSecondary,  this.splitTolerance);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  decompose(quadSecondary,  squaredSecondary,  this.splitTolerance);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(quadSecondary,  squaredSecondary,  this.splitTolerance);	  decompose(quadSecondary,    squaredSecondary);    	non-compiled	[CE]  ';'  expected	62	None	replace
28	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.realEigenvalues;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.realEigenvalues;  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.realEigenvalues;	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.imagEigenvalues;    	non-compiled	[CE]  ';'  expected	77	None	replace
29	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.irealEigenvalues;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.irealEigenvalues;  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.irealEigenvalues;	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.imagEigenvalues;    	non-compiled	[CE]  ';'  expected	77	None	replace
30	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[	  ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[secondary.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary[]    =    primary[i];    	non-compiled	[CE]  ';'  expected	76	None	replace
31	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[2];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[i];  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[2];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[i];  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[2];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[i];	  ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[secondary.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary[]    =    primary[i];    	non-compiled	[CE]  ';'  expected	76	None	replace
32	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[double.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[i];  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[double.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[i];  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[double.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[i];	  ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[secondary.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary[]    =    primary[i];    	non-compiled	[CE]  ';'  expected	76	None	replace
33	[BUG]  [BUGGY]  final  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[secondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[i];  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  final  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[secondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[i];  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	final  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[secondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[i];	  ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[secondary.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary[]    =    primary[i];    	non-compiled	[CE]  ';'  expected	76	None	replace
34	[BUG]  [BUGGY]  decompose(s.length  -  1);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  decompose(s.length  -  1);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(s.length  -  1);	  decompose(squaredSecondary.length    -    1);    	non-compiled	[CE]  ';'  expected	81	None	replace
35	[BUG]  [BUGGY]  decompose(s,  squaredSecondary.length  -  1);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  decompose(s,  squaredSecondary.length  -  1);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(s,  squaredSecondary.length  -  1);	  decompose(squaredSecondary.length    -    1);    	non-compiled	[CE]  ';'  expected	81	None	replace
36	[BUG]  [BUGGY]  decompose(squaredSecondary.length  -  1,  this.splitTolerance);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  decompose(squaredSecondary.length  -  1,  this.splitTolerance);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(squaredSecondary.length  -  1,  this.splitTolerance);	  decompose(squaredSecondary.length    -    1);    	non-compiled	[CE]  ';'  expected	81	None	replace
37	[BUG]  [BUGGY]  decompose(s,  secondary.length);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  decompose(s,  secondary.length);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(s,  secondary.length);	  decompose(secondary.length);    	non-compiled	[CE]  ';'  expected	54	None	replace
38	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(this.realEigenvalues,  this.imagEigenvalues);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(this.realEigenvalues,  this.imagEigenvalues);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(this.realEigenvalues,  this.imagEigenvalues);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(this.realEigenvalues);    	non-compiled	[CE]  ';'  expected	3	None	replace
39	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(this.realEigenvalues,  this.splitTolerance);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(this.realEigenvalues,  this.splitTolerance);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(this.realEigenvalues,  this.splitTolerance);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(this.realEigenvalues);    	non-compiled	[CE]  ';'  expected	3	None	replace
40	[BUG]  [BUGGY]  this.splitTolerance  =  squaredSecondary.length  -  2;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  this.splitTolerance  =  squaredSecondary.length  -  2;  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	this.splitTolerance  =  squaredSecondary.length  -  2;	  this.splitTolerance    =    squaredSecondary.length    -    1;    	non-compiled	[CE]  ';'  expected	80	None	replace
41	[BUG]  [BUGGY]  this.splitTolerance  =  splitTolerance  -  1;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  this.splitTolerance  =  splitTolerance  -  1;  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	this.splitTolerance  =  splitTolerance  -  1;	  this.splitTolerance    =    squaredSecondary.length    -    1;    	non-compiled	[CE]  ';'  expected	80	None	replace
42	[BUG]  [BUGGY]  this.splitTolerance  =  squaredSecondary.length  /  1;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  this.splitTolerance  =  squaredSecondary.length  /  1;  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	this.splitTolerance  =  squaredSecondary.length  /  1;	  this.splitTolerance    =    squaredSecondary.length    -    1;    	non-compiled	[CE]  ';'  expected	80	None	replace
43	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length  +  1];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length  +  1];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length  +  1];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i	  ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[realEigenvectors.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary    =    squaredSecondary[i    	non-compiled	[CE]  ';'  expected	16	None	replace
44	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length  *  2];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length  *  2];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length  *  2];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i	  ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[realEigenvectors.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary    =    squaredSecondary[i    	non-compiled	[CE]  ';'  expected	16	None	replace
45	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[realEigenvalues.size()  ]);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[realEigenvalues.size()  ]);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[realEigenvalues.size()  ]);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[imagEigenvalues.size()    ]);    	non-compiled	[CE]  ';'  expected	73	None	replace
46	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[quadSecondary.size()  ]);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[quadSecondary.size()  ]);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[quadSecondary.size()  ]);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[imagEigenvalues.size()    ]);    	non-compiled	[CE]  ';'  expected	73	None	replace
47	[BUG]  [BUGGY]  decompose(this.splitTolerance,  squaredSecondary,  i);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  decompose(this.splitTolerance,  squaredSecondary,  i);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(this.splitTolerance,  squaredSecondary,  i);	  decompose(this.splitTolerance,    squaredSecondary);    	non-compiled	[CE]  ';'  expected	11	None	replace
48	[BUG]  [BUGGY]  decompose(this.splitTolerance,  squaredSecondary,  splitTolerance);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  decompose(this.splitTolerance,  squaredSecondary,  splitTolerance);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(this.splitTolerance,  squaredSecondary,  splitTolerance);	  decompose(this.splitTolerance,    squaredSecondary);    	non-compiled	[CE]  ';'  expected	11	None	replace
49	[BUG]  [BUGGY]  if(this.splitTolerance!=  null  ||  this.splitTolerance  ==  null)  {  rehashCode();  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(this.splitTolerance!=  null  ||  this.splitTolerance  ==  null)  {  rehashCode();  }  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance!=  null  ||  this.splitTolerance  ==  null)  {  rehashCode();  }	  if(this.splitTolerance!=    null)    {    rehashCode();    }    	non-compiled	[CE]  ';'  expected	47	None	replace
50	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[	  ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[realEigenvectors.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary    =    main[i];    	non-compiled	[CE]  ';'  expected	13	None	replace
51	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length  +  1];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[i];  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length  +  1];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[i];  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length  +  1];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[i];	  ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[realEigenvectors.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary    =    main[i];    	non-compiled	[CE]  ';'  expected	13	None	replace
52	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[i]  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[i]  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[i]	  ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[realEigenvectors.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary    =    main[i];    	non-compiled	[CE]  ';'  expected	13	None	replace
53	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[quadSecondary.length  -  1]);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[quadSecondary.length  -  1]);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[quadSecondary.length  -  1]);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[quadSecondary.length]);    	non-compiled	[CE]  ';'  expected	88	None	replace
54	[BUG]  [BUGGY]  decompose(quadSecondary,  this.splitTolerance,  splitTolerance);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  decompose(quadSecondary,  this.splitTolerance,  splitTolerance);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(quadSecondary,  this.splitTolerance,  splitTolerance);	  decompose(quadSecondary,    this.splitTolerance);    	non-compiled	[CE]  ';'  expected	8	None	replace
55	[BUG]  [BUGGY]  validate(s);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  validate(s);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	validate(s);	  validate(quadSecondary);    	non-compiled	[CE]  ';'  expected	9	None	replace
56	[BUG]  [BUGGY]  validate(quadSecondary,  this.splitTolerance);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  validate(quadSecondary,  this.splitTolerance);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	validate(quadSecondary,  this.splitTolerance);	  validate(quadSecondary);    	non-compiled	[CE]  ';'  expected	9	None	replace
57	[BUG]  [BUGGY]  validate(squaredSecondary,  this.splitTolerance);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  validate(squaredSecondary,  this.splitTolerance);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	validate(squaredSecondary,  this.splitTolerance);	  validate(quadSecondary);    	non-compiled	[CE]  ';'  expected	9	None	replace
58	[BUG]  [BUGGY]  validate(s,  squaredSecondary);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  validate(s,  squaredSecondary);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	validate(s,  squaredSecondary);	  validate(quadSecondary);    	non-compiled	[CE]  ';'  expected	9	None	replace
59	[BUG]  [BUGGY]  decompose(s,  squaredSecondary.length  +  1);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  decompose(s,  squaredSecondary.length  +  1);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(s,  squaredSecondary.length  +  1);	  decompose(squaredSecondary.length    +    1);    	non-compiled	[CE]  ';'  expected	82	None	replace
60	[BUG]  [BUGGY]  decompose(s  +  1);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  decompose(s  +  1);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(s  +  1);	  decompose(squaredSecondary.length    +    1);    	non-compiled	[CE]  ';'  expected	82	None	replace
61	[BUG]  [BUGGY]  decompose(s.length  +  1);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  decompose(s.length  +  1);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(s.length  +  1);	  decompose(squaredSecondary.length    +    1);    	non-compiled	[CE]  ';'  expected	82	None	replace
62	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[realEigenvalues.length  +  1]);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[realEigenvalues.length  +  1]);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[realEigenvalues.length  +  1]);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[realEigenvalues.length]);    	non-compiled	[CE]  ';'  expected	26	None	replace
63	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[realEigenvalues.length  -  1]);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[realEigenvalues.length  -  1]);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[realEigenvalues.length  -  1]);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[realEigenvalues.length]);    	non-compiled	[CE]  ';'  expected	26	None	replace
64	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[quardSecondary.length]);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[quardSecondary.length]);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[quardSecondary.length]);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[realEigenvalues.length]);    	non-compiled	[CE]  ';'  expected	26	None	replace
65	[BUG]  [BUGGY]  if(this.splitTolerance  ==  squaredSecondary.length)  {  reset();  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(this.splitTolerance  ==  squaredSecondary.length)  {  reset();  }  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance  ==  squaredSecondary.length)  {  reset();  }	  if(this.splitTolerance!=    splitTolerance)    {    reset();    }    	non-compiled	[CE]  ';'  expected	6	None	replace
66	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.getrealEigenvalues();  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.getrealEigenvalues();  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.getrealEigenvalues();	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.getImagEigenvalues();    	non-compiled	[CE]  ';'  expected	58	None	replace
67	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[quaredSecondary.length  +  1]);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[quaredSecondary.length  +  1]);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[quaredSecondary.length  +  1]);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[quaredSecondary.length]);    	non-compiled	[CE]  ';'  expected	56	None	replace
68	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[quaredSecondary.length  -  1]);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[quaredSecondary.length  -  1]);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[quaredSecondary.length  -  1]);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[quaredSecondary.length]);    	non-compiled	[CE]  ';'  expected	56	None	replace
69	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[quadSecondary.length  +  2]);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[quadSecondary.length  +  2]);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[quadSecondary.length  +  2]);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[quardSecondary.length    +    1]);    	non-compiled	[CE]  ';'  expected	40	None	replace
70	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[quadSecondary.length  +  3]);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[quadSecondary.length  +  3]);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[quadSecondary.length  +  3]);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[quardSecondary.length    +    1]);    	non-compiled	[CE]  ';'  expected	40	None	replace
71	[BUG]  [BUGGY]  decompose(s,  squaredSecondary,  this.splitTolerance);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  decompose(s,  squaredSecondary,  this.splitTolerance);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(s,  squaredSecondary,  this.splitTolerance);	  decompose(s,    squaredSecondary);    	non-compiled	[CE]  ';'  expected	7	None	replace
72	[BUG]  [BUGGY]  decompose(s,  squaredSecondary,  splitTolerance);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  decompose(s,  squaredSecondary,  splitTolerance);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(s,  squaredSecondary,  splitTolerance);	  decompose(s,    squaredSecondary);    	non-compiled	[CE]  ';'  expected	7	None	replace
73	[BUG]  [BUGGY]  decompose(s,  squaredSecondary,  this.work);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  decompose(s,  squaredSecondary,  this.work);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(s,  squaredSecondary,  this.work);	  decompose(s,    squaredSecondary);    	non-compiled	[CE]  ';'  expected	7	None	replace
74	[BUG]  [BUGGY]  decompose(s,  squaredSecondary,  i);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  decompose(s,  squaredSecondary,  i);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(s,  squaredSecondary,  i);	  decompose(s,    squaredSecondary);    	non-compiled	[CE]  ';'  expected	7	None	replace
75	[BUG]  [BUGGY]  decompose(s,  i);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  decompose(s,  i);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(s,  i);	  decompose(quadSecondary,    i);    	non-compiled	[CE]  ';'  expected	63	None	replace
76	[BUG]  [BUGGY]  if(this.splitTolerance!=  secondary.length)  {  reset();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  splitTolerance.length);  }  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(this.splitTolerance!=  secondary.length)  {  reset();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  splitTolerance.length);  }  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance!=  secondary.length)  {  reset();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  splitTolerance.length);  }	  if(this.splitTolerance!=    squaredSecondary.length)    {    reset();    }    else    {    System.arraycopy(squaredSecondary,    0,    squaredSecondary,    0,    squaredSecondary.length);    }    	non-compiled	[CE]  ';'  expected	70	None	replace
77	[BUG]  [BUGGY]  if(this.splitTolerance!=  squaredSecondary.length)  {  reset();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  splitTolerance.length);  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(this.splitTolerance!=  squaredSecondary.length)  {  reset();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  splitTolerance.length);  }  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance!=  squaredSecondary.length)  {  reset();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  splitTolerance.length);  }	  if(this.splitTolerance!=    squaredSecondary.length)    {    reset();    }    else    {    System.arraycopy(squaredSecondary,    0,    squaredSecondary,    0,    squaredSecondary.length);    }    	non-compiled	[CE]  ';'  expected	70	None	replace
78	[BUG]  [BUGGY]  System.arraycopy(secondary,  0,  secondary,  0,  secondary.length);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  System.arraycopy(secondary,  0,  secondary,  0,  secondary.length);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	System.arraycopy(secondary,  0,  secondary,  0,  secondary.length);	  if(this.splitTolerance!=    squaredSecondary.length)    {    reset();    }    else    {    System.arraycopy(squaredSecondary,    0,    squaredSecondary,    0,    squaredSecondary.length);    }    	non-compiled	[CE]  ';'  expected	70	None	replace
79	[BUG]  [BUGGY]  if(this.splitTolerance  ==  squaredSecondary.length)  {  rehashTable();  }  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(this.splitTolerance  ==  squaredSecondary.length)  {  rehashTable();  }  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance  ==  squaredSecondary.length)  {  rehashTable();  }	  if(this.splitTolerance!=    squaredSecondary.length)    {    rehashTable();    }    	non-compiled	[CE]  ';'  expected	34	None	replace
80	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[double.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[i];  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[double.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[i];  }  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[double.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[i];  }	  ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[double.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary    =    main[i];    	non-compiled	[CE]  ';'  expected	15	None	replace
81	[BUG]  [BUGGY]  final  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[double.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[i];  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  final  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[double.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[i];  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	final  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[double.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[i];	  ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[double.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary    =    main[i];    	non-compiled	[CE]  ';'  expected	15	None	replace
82	[BUG]  [BUGGY]  decompose(s.length,  squaredSecondary.length);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  decompose(s.length,  squaredSecondary.length);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(s.length,  squaredSecondary.length);	  decompose(s.length);    	non-compiled	[CE]  ';'  expected	20	None	replace
83	[BUG]  [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[2];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[2];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[2];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[	  ArrayRealVector[]    eigenvectors    =    new    ArrayRealVector[secondary.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary[]    =    primary[    	non-compiled	[CE]  ';'  expected	64	None	replace
84	[BUG]  [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[quadSecondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[quadSecondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[quadSecondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[	  ArrayRealVector[]    eigenvectors    =    new    ArrayRealVector[secondary.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary[]    =    primary[    	non-compiled	[CE]  ';'  expected	64	None	replace
85	[BUG]  [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[double.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[double.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[double.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[	  ArrayRealVector[]    eigenvectors    =    new    ArrayRealVector[secondary.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary[]    =    primary[    	non-compiled	[CE]  ';'  expected	64	None	replace
86	[BUG]  [BUGGY]  if(this.splitTolerance!=  squaredSecondary.length)  {  reset();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  splitTolerance.length);  this.splitTolerance  =  splitTolerance;  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(this.splitTolerance!=  squaredSecondary.length)  {  reset();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  splitTolerance.length);  this.splitTolerance  =  splitTolerance;  }  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance!=  squaredSecondary.length)  {  reset();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  splitTolerance.length);  this.splitTolerance  =  splitTolerance;  }	  if(this.splitTolerance!=    squaredSecondary.length)    {    reset();    }    else    {    System.arraycopy(squaredSecondary,    0,    squaredSecondary,    0,    squaredSecondary.length);    this.splitTolerance    =    splitTolerance;    }    	non-compiled	[CE]  ';'  expected	71	None	replace
87	[BUG]  [BUGGY]  System.arraycopy(secondary,  0,  squaredSecondary,  0,  secondary.length);  this.splitTolerance  =  splitTolerance;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  System.arraycopy(secondary,  0,  squaredSecondary,  0,  secondary.length);  this.splitTolerance  =  splitTolerance;  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	System.arraycopy(secondary,  0,  squaredSecondary,  0,  secondary.length);  this.splitTolerance  =  splitTolerance;	  if(this.splitTolerance!=    squaredSecondary.length)    {    reset();    }    else    {    System.arraycopy(squaredSecondary,    0,    squaredSecondary,    0,    squaredSecondary.length);    this.splitTolerance    =    splitTolerance;    }    	non-compiled	[CE]  ';'  expected	71	None	replace
88	[BUG]  [BUGGY]  decompose(s,  this.splitTolerance,  squaredSecondary);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  decompose(s,  this.splitTolerance,  squaredSecondary);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(s,  this.splitTolerance,  squaredSecondary);	  decompose(s,    this.splitTolerance);    	non-compiled	[CE]  ';'  expected	10	None	replace
89	[BUG]  [BUGGY]  decompose(this.splitTolerance,  s);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  decompose(this.splitTolerance,  s);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(this.splitTolerance,  s);	  decompose(s,    this.splitTolerance);    	non-compiled	[CE]  ';'  expected	10	None	replace
90	[BUG]  [BUGGY]  decompose(s,  squaredSecondary[i],  this.splitTolerance);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  decompose(s,  squaredSecondary[i],  this.splitTolerance);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(s,  squaredSecondary[i],  this.splitTolerance);	  decompose(s,    this.splitTolerance);    	non-compiled	[CE]  ';'  expected	10	None	replace
91	[BUG]  [BUGGY]  if(this.splitTolerance  ==  squaredSecondary.length)  {  rehashCode();  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(this.splitTolerance  ==  squaredSecondary.length)  {  rehashCode();  }  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance  ==  squaredSecondary.length)  {  rehashCode();  }	  if(this.splitTolerance!=    splitTolerance)    {    rehashCode();    }    	non-compiled	[CE]  ';'  expected	49	None	replace
92	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(realEigenvalues,  this.work);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(realEigenvalues,  this.work);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(realEigenvalues,  this.work);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(imagEigenvalues);    	non-compiled	[CE]  ';'  expected	61	None	replace
93	[BUG]  [BUGGY]  if(this.splitTolerance!=  squaredSecondary)  {  rehashCode();  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(this.splitTolerance!=  squaredSecondary)  {  rehashCode();  }  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance!=  squaredSecondary)  {  rehashCode();  }	  if(this.imagEigenvalues!=    squaredSecondary)    {    rehashCode();    }    	non-compiled	[CE]  ';'  expected	67	None	replace
94	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length  +  1];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i]  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length  +  1];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i]  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length  +  1];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i]	  ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[realEigenvectors.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary    =    squaredSecondary[i]    	non-compiled	[CE]  ';'  expected	32	None	replace
95	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length  *  2];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i]  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length  *  2];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i]  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length  *  2];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i]	  ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[realEigenvectors.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary    =    squaredSecondary[i]    	non-compiled	[CE]  ';'  expected	32	None	replace
96	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[squaredSecondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[squaredSecondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[squaredSecondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[	  ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[squaredSecondary.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary    =    main[i];    	non-compiled	[CE]  ';'  expected	55	None	replace
97	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[squaredSecondary.length  +  1];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[i];  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[squaredSecondary.length  +  1];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[i];  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[squaredSecondary.length  +  1];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[i];	  ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[squaredSecondary.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary    =    main[i];    	non-compiled	[CE]  ';'  expected	55	None	replace
98	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.getRawValues();  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.getRawValues();  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.getRawValues();	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.getValues();    	non-compiled	[CE]  ';'  expected	52	None	replace
99	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.getEigenvalues();  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.getEigenvalues();  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.getEigenvalues();	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.getValues();    	non-compiled	[CE]  ';'  expected	52	None	replace
100	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[this.imagEigenvalues.length  +  1]);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[this.imagEigenvalues.length  +  1]);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[this.imagEigenvalues.length  +  1]);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[this.imagEigenvalues.length]);    	non-compiled	[CE]  ';'  expected	28	None	replace
101	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[1];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i];  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[1];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i];  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[1];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i];	  ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[2];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary    =    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	30	None	replace
102	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[3];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i];  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[3];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i];  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[3];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i];	  ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[2];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary    =    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	30	None	replace
103	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[1]);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[1]);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[1]);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    ArrayRealVector[0]);    	non-compiled	[CE]  ';'  expected	75	None	replace
104	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[2]);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[2]);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[2]);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    ArrayRealVector[0]);    	non-compiled	[CE]  ';'  expected	75	None	replace
105	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[size()  ]);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[size()  ]);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[size()  ]);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    ArrayRealVector[0]);    	non-compiled	[CE]  ';'  expected	75	None	replace
106	[BUG]  [BUGGY]  this.splitTolerance  =  squaredSecondary;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  this.splitTolerance  =  squaredSecondary;  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	this.splitTolerance  =  squaredSecondary;	  this.splitTolerance    =    splitTolerance;    	non-compiled	[CE]  ';'  expected	5	None	replace
107	[BUG]  [BUGGY]  this.splitTolerance  =  squaredSecondary[i];  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  this.splitTolerance  =  squaredSecondary[i];  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	this.splitTolerance  =  squaredSecondary[i];	  this.splitTolerance    =    splitTolerance;    	non-compiled	[CE]  ';'  expected	5	None	replace
108	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[scaledSecondary.length  +  1]);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[scaledSecondary.length  +  1]);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[scaledSecondary.length  +  1]);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[scaledSecondary.length]);    	non-compiled	[CE]  ';'  expected	39	None	replace
109	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[squaredSecondary.length  -  2]);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[squaredSecondary.length  -  2]);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[squaredSecondary.length  -  2]);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[squaredSecondary.length    -    1]);    	non-compiled	[CE]  ';'  expected	38	None	replace
110	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[quaredSecondary.length  +  1]);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[quaredSecondary.length  +  1]);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[quaredSecondary.length  +  1]);	  ArrayRealVector[]    realEigenvectors    =    squaredSecondary.toArray(new    double[quaredSecondary.length]);    	non-compiled	[CE]  ';'  expected	57	None	replace
111	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[quaredSecondary.length  -  1]);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[quaredSecondary.length  -  1]);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[quaredSecondary.length  -  1]);	  ArrayRealVector[]    realEigenvectors    =    squaredSecondary.toArray(new    double[quaredSecondary.length]);    	non-compiled	[CE]  ';'  expected	57	None	replace
112	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[secondary.length]);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[secondary.length]);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[secondary.length]);	  ArrayRealVector[]    realEigenvectors    =    squaredSecondary.toArray(new    double[quaredSecondary.length]);    	non-compiled	[CE]  ';'  expected	57	None	replace
113	[BUG]  [BUGGY]  decompose(squaredSecondary,  this.splitTolerance,  splitTolerance);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  decompose(squaredSecondary,  this.splitTolerance,  splitTolerance);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(squaredSecondary,  this.splitTolerance,  splitTolerance);	  decompose(squaredSecondary,    this.splitTolerance);    	non-compiled	[CE]  ';'  expected	29	None	replace
114	[BUG]  [BUGGY]  if(this.splitTolerance  ==  squaredSecondary.length)  {  rehashTable();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(this.splitTolerance  ==  squaredSecondary.length)  {  rehashTable();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance  ==  squaredSecondary.length)  {  rehashTable();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(this.splitTolerance!=    squaredSecondary.length)    {    rehashTable();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	36	None	replace
115	[BUG]  [BUGGY]  if(this.splitTolerance  >=  squaredSecondary.length)  {  rehashTable();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(this.splitTolerance  >=  squaredSecondary.length)  {  rehashTable();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance  >=  squaredSecondary.length)  {  rehashTable();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(this.splitTolerance!=    squaredSecondary.length)    {    rehashTable();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	36	None	replace
116	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length  +  1];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length  +  1];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length  +  1];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[	  ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[realEigenvectors.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary    =    squaredSecondary[    	non-compiled	[CE]  ';'  expected	31	None	replace
117	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length  *  2];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length  *  2];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length  *  2];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[	  ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[realEigenvectors.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary    =    squaredSecondary[    	non-compiled	[CE]  ';'  expected	31	None	replace
118	[BUG]  [BUGGY]  if(this.splitTolerance  >=  squaredSecondary.length)  {  rehashCode();  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(this.splitTolerance  >=  squaredSecondary.length)  {  rehashCode();  }  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance  >=  squaredSecondary.length)  {  rehashCode();  }	  if(this.splitTolerance!=    squaredSecondary.length)    {    rehashCode();    }    	non-compiled	[CE]  ';'  expected	48	None	replace
119	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[squaredSecondary.length  +  1];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i]  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[squaredSecondary.length  +  1];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i]  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[squaredSecondary.length  +  1];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i]	  ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[squaredSecondary.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary    =    squaredSecondary[i]    	non-compiled	[CE]  ';'  expected	42	None	replace
120	[BUG]  [BUGGY]  decompose(s,  squaredSecondary.length,  this.splitTolerance);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  decompose(s,  squaredSecondary.length,  this.splitTolerance);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(s,  squaredSecondary.length,  this.splitTolerance);	  decompose(s,    squaredSecondary.length);    	non-compiled	[CE]  ';'  expected	19	None	replace
121	[BUG]  [BUGGY]  decompose(s,  squaredSecondary.length  -  2);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  decompose(s,  squaredSecondary.length  -  2);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(s,  squaredSecondary.length  -  2);	  decompose(s,    squaredSecondary.length);    	non-compiled	[CE]  ';'  expected	19	None	replace
122	[BUG]  [BUGGY]  if(this.splitTolerance!=  secondary.length)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  this.splitTolerance,  squaredSecondary,  this.splitTolerance);  }  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(this.splitTolerance!=  secondary.length)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  this.splitTolerance,  squaredSecondary,  this.splitTolerance);  }  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance!=  secondary.length)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  this.splitTolerance,  squaredSecondary,  this.splitTolerance);  }	  if(this.splitTolerance!=    splitTolerance)    {    rehashTable();    }    else    {    System.arraycopy(squaredSecondary,    0,    this.splitTolerance,    squaredSecondary,    this.splitTolerance);    }    	non-compiled	[CE]  ';'  expected	85	None	replace
123	[BUG]  [BUGGY]  System.arraycopy(secondary,  0,  this.splitTolerance,  squaredSecondary,  this.splitTolerance);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  System.arraycopy(secondary,  0,  this.splitTolerance,  squaredSecondary,  this.splitTolerance);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	System.arraycopy(secondary,  0,  this.splitTolerance,  squaredSecondary,  this.splitTolerance);	  if(this.splitTolerance!=    splitTolerance)    {    rehashTable();    }    else    {    System.arraycopy(squaredSecondary,    0,    this.splitTolerance,    squaredSecondary,    this.splitTolerance);    }    	non-compiled	[CE]  ';'  expected	85	None	replace
124	[BUG]  [BUGGY]  if(this.splitTolerance  ==  secondary.length)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  this.splitTolerance,  squaredSecondary,  this.splitTolerance);  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(this.splitTolerance  ==  secondary.length)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  this.splitTolerance,  squaredSecondary,  this.splitTolerance);  }  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance  ==  secondary.length)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  this.splitTolerance,  squaredSecondary,  this.splitTolerance);  }	  if(this.splitTolerance!=    splitTolerance)    {    rehashTable();    }    else    {    System.arraycopy(squaredSecondary,    0,    this.splitTolerance,    squaredSecondary,    this.splitTolerance);    }    	non-compiled	[CE]  ';'  expected	85	None	replace
125	[BUG]  [BUGGY]  if(this.splitTolerance  ==  squaredSecondary)  {  rehashTable();  }  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(this.splitTolerance  ==  squaredSecondary)  {  rehashTable();  }  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance  ==  squaredSecondary)  {  rehashTable();  }	  if(this.splitTolerance!=    squaredSecondary)    {    rehashTable();    }    	non-compiled	[CE]  ';'  expected	60	None	replace
126	[BUG]  [BUGGY]  if(this.splitTolerance  >=  squaredSecondary)  {  rehashTable();  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(this.splitTolerance  >=  squaredSecondary)  {  rehashTable();  }  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance  >=  squaredSecondary)  {  rehashTable();  }	  if(this.splitTolerance!=    squaredSecondary)    {    rehashTable();    }    	non-compiled	[CE]  ';'  expected	60	None	replace
127	[BUG]  [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[squaredSecondary.length  +  1];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[squaredSecondary.length  +  1];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[squaredSecondary.length  +  1];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[	  ArrayRealVector[]    eigenvectors    =    new    ArrayRealVector[squaredSecondary.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary[]    =    primary[    	non-compiled	[CE]  ';'  expected	65	None	replace
128	[BUG]  [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[squaredSecondary.length  *  2];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[squaredSecondary.length  *  2];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[squaredSecondary.length  *  2];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[	  ArrayRealVector[]    eigenvectors    =    new    ArrayRealVector[squaredSecondary.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary[]    =    primary[    	non-compiled	[CE]  ';'  expected	65	None	replace
129	[BUG]  [BUGGY]  this.splitTolerance  =  squaredSecondary.length  +  1;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  this.splitTolerance  =  squaredSecondary.length  +  1;  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	this.splitTolerance  =  squaredSecondary.length  +  1;	  this.splitTolerance    =    squaredSecondary.length;    	non-compiled	[CE]  ';'  expected	79	None	replace
130	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[0];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[0];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[0];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i	  ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[2];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary    =    squaredSecondary[i    	non-compiled	[CE]  ';'  expected	17	None	replace
131	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[1];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[1];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[1];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i	  ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[2];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary    =    squaredSecondary[i    	non-compiled	[CE]  ';'  expected	17	None	replace
132	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[3];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[3];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[3];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i	  ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[2];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary    =    squaredSecondary[i    	non-compiled	[CE]  ';'  expected	17	None	replace
133	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[squaredSecondary.length()  +  1]);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[squaredSecondary.length()  +  1]);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[squaredSecondary.length()  +  1]);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[squaredSecondary.length()    ]);    	non-compiled	[CE]  ';'  expected	24	None	replace
134	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(realEigenvalues,  this.imagEigenvalues);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(realEigenvalues,  this.imagEigenvalues);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(realEigenvalues,  this.imagEigenvalues);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(realEigenvalues);    	non-compiled	[CE]  ';'  expected	2	None	replace
135	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[0];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i];  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[0];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i];  }  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[0];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i];  }	  ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[0];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary    =    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	33	None	replace
136	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[realEigenvectors.length  +  1]);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[realEigenvectors.length  +  1]);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[realEigenvectors.length  +  1]);	  ArrayRealVector[]    realEigenvectors    =    squaredSecondary.toArray(new    double[realEigenvectors.length]);    	non-compiled	[CE]  ';'  expected	78	None	replace
137	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[realEigenvectors.length  -  1]);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[realEigenvectors.length  -  1]);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[realEigenvectors.length  -  1]);	  ArrayRealVector[]    realEigenvectors    =    squaredSecondary.toArray(new    double[realEigenvectors.length]);    	non-compiled	[CE]  ';'  expected	78	None	replace
138	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[quardSecondary.length]);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[quardSecondary.length]);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[quardSecondary.length]);	  ArrayRealVector[]    realEigenvectors    =    squaredSecondary.toArray(new    double[realEigenvectors.length]);    	non-compiled	[CE]  ';'  expected	78	None	replace
139	[BUG]  [BUGGY]  if(this.splitTolerance  ==  squaredSecondary)  {  rehashCode();  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(this.splitTolerance  ==  squaredSecondary)  {  rehashCode();  }  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance  ==  squaredSecondary)  {  rehashCode();  }	  if(this.imagEigenvalues    ==    squaredSecondary)    {    rehashCode();    }    	non-compiled	[CE]  ';'  expected	66	None	replace
140	[BUG]  [BUGGY]  if(this.splitTolerance!=  secondary.length)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  this.splitTolerance);  }  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(this.splitTolerance!=  secondary.length)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  this.splitTolerance);  }  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance!=  secondary.length)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  this.splitTolerance);  }	  if(this.splitTolerance!=    splitTolerance)    {    rehashTable();    }    else    {    System.arraycopy(squaredSecondary,    0,    squaredSecondary,    0,    this.splitTolerance);    }    	non-compiled	[CE]  ';'  expected	86	None	replace
141	[BUG]  [BUGGY]  if(this.splitTolerance!=  null)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  this.splitTolerance);  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(this.splitTolerance!=  null)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  this.splitTolerance);  }  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance!=  null)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  this.splitTolerance);  }	  if(this.splitTolerance!=    splitTolerance)    {    rehashTable();    }    else    {    System.arraycopy(squaredSecondary,    0,    squaredSecondary,    0,    this.splitTolerance);    }    	non-compiled	[CE]  ';'  expected	86	None	replace
142	[BUG]  [BUGGY]  if(this.splitTolerance  ==  squaredSecondary.length)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  squaredSecondary.length);  }  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(this.splitTolerance  ==  squaredSecondary.length)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  squaredSecondary.length);  }  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance  ==  squaredSecondary.length)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  squaredSecondary.length);  }	  if(this.splitTolerance!=    squaredSecondary.length)    {    rehashTable();    }    else    {    System.arraycopy(squaredSecondary,    0,    squaredSecondary,    0,    squaredSecondary.length);    }    	non-compiled	[CE]  ';'  expected	35	None	replace
143	[BUG]  [BUGGY]  if(this.splitTolerance!=  secondary.length)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  splitTolerance.length);  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(this.splitTolerance!=  secondary.length)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  splitTolerance.length);  }  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance!=  secondary.length)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  splitTolerance.length);  }	  if(this.splitTolerance!=    squaredSecondary.length)    {    rehashTable();    }    else    {    System.arraycopy(squaredSecondary,    0,    squaredSecondary,    0,    squaredSecondary.length);    }    	non-compiled	[CE]  ';'  expected	35	None	replace
144	[BUG]  [BUGGY]  if(this.splitTolerance!=  secondary.length)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  squaredSecondary.length);  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(this.splitTolerance!=  secondary.length)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  squaredSecondary.length);  }  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance!=  secondary.length)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  squaredSecondary.length);  }	  if(this.splitTolerance!=    squaredSecondary.length)    {    rehashTable();    }    else    {    System.arraycopy(squaredSecondary,    0,    squaredSecondary,    0,    squaredSecondary.length);    }    	non-compiled	[CE]  ';'  expected	35	None	replace
145	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[scaledSecondary.length  +  1]);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[scaledSecondary.length  +  1]);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[scaledSecondary.length  +  1]);	  ArrayRealVector[]    realEigenvectors    =    squaredSecondary.toArray(new    double[scaledSecondary.length]);    	non-compiled	[CE]  ';'  expected	45	None	replace
146	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[scaledSecondary.length  -  1]);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[scaledSecondary.length  -  1]);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[scaledSecondary.length  -  1]);	  ArrayRealVector[]    realEigenvectors    =    squaredSecondary.toArray(new    double[scaledSecondary.length]);    	non-compiled	[CE]  ';'  expected	45	None	replace
147	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[secondary.length  +  1]);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[secondary.length  +  1]);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[secondary.length  +  1]);	  ArrayRealVector[]    realEigenvectors    =    squaredSecondary.toArray(new    double[quardSecondary.length    +    1]);    	non-compiled	[CE]  ';'  expected	46	None	replace
148	[BUG]  [BUGGY]  if(this.imagEigenvalues!=  squaredSecondary)  {  rehashTable();  }  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(this.imagEigenvalues!=  squaredSecondary)  {  rehashTable();  }  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.imagEigenvalues!=  squaredSecondary)  {  rehashTable();  }	  if(this.imagEigenvalues    ==    squaredSecondary)    {    rehashTable();    }    	non-compiled	[CE]  ';'  expected	59	None	replace
149	[BUG]  [BUGGY]  if(this.splitTolerance!=  secondary.length)  {  reset();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  squaredSecondary.length);  System.arraycopy(squaredSecondary,  0,  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(this.splitTolerance!=  secondary.length)  {  reset();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  squaredSecondary.length);  System.arraycopy(squaredSecondary,  0,  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance!=  secondary.length)  {  reset();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  squaredSecondary.length);  System.arraycopy(squaredSecondary,  0,	  if(this.splitTolerance!=    squaredSecondary.length)    {    reset();    }    else    {    System.arraycopy(squaredSecondary,    0,    squaredSecondary,    0,    squaredSecondary.length);    System.arraycopy(squaredSecondary,    0,    squaredSecondary    	non-compiled	[CE]  ';'  expected	72	None	replace
150	[BUG]  [BUGGY]  if(this.splitTolerance!=  secondary.length)  {  reset();  }  else  {  System.arraycopy(secondary,  0,  squaredSecondary,  0,  squaredSecondary.length);  System.arraycopy(secondary,  0,  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(this.splitTolerance!=  secondary.length)  {  reset();  }  else  {  System.arraycopy(secondary,  0,  squaredSecondary,  0,  squaredSecondary.length);  System.arraycopy(secondary,  0,  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance!=  secondary.length)  {  reset();  }  else  {  System.arraycopy(secondary,  0,  squaredSecondary,  0,  squaredSecondary.length);  System.arraycopy(secondary,  0,	  if(this.splitTolerance!=    squaredSecondary.length)    {    reset();    }    else    {    System.arraycopy(squaredSecondary,    0,    squaredSecondary,    0,    squaredSecondary.length);    System.arraycopy(squaredSecondary,    0,    squaredSecondary    	non-compiled	[CE]  ';'  expected	72	None	replace
151	[BUG]  [BUGGY]  if(this.splitTolerance!=  secondary.length)  {  reset();  }  else  {  System.arraycopy(secondary,  0,  squaredSecondary,  0,  splitTolerance);  System.arraycopy(secondary,  0,  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(this.splitTolerance!=  secondary.length)  {  reset();  }  else  {  System.arraycopy(secondary,  0,  squaredSecondary,  0,  splitTolerance);  System.arraycopy(secondary,  0,  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance!=  secondary.length)  {  reset();  }  else  {  System.arraycopy(secondary,  0,  squaredSecondary,  0,  splitTolerance);  System.arraycopy(secondary,  0,	  if(this.splitTolerance!=    squaredSecondary.length)    {    reset();    }    else    {    System.arraycopy(squaredSecondary,    0,    squaredSecondary,    0,    squaredSecondary.length);    System.arraycopy(squaredSecondary,    0,    squaredSecondary    	non-compiled	[CE]  ';'  expected	72	None	replace
152	[BUG]  [BUGGY]  if(this.splitTolerance!=  secondary.length)  {  reset();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  squaredSecondary.length);  System.arraycopy(squaredSecondary  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(this.splitTolerance!=  secondary.length)  {  reset();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  squaredSecondary.length);  System.arraycopy(squaredSecondary  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance!=  secondary.length)  {  reset();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  squaredSecondary.length);  System.arraycopy(squaredSecondary	  if(this.splitTolerance!=    squaredSecondary.length)    {    reset();    }    else    {    System.arraycopy(squaredSecondary,    0,    squaredSecondary,    0,    squaredSecondary.length);    System.arraycopy(squaredSecondary,    0,    squaredSecondary    	non-compiled	[CE]  ';'  expected	72	None	replace
153	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[quadSecondary.length  -  1]);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[quadSecondary.length  -  1]);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[quadSecondary.length  -  1]);	  ArrayRealVector[]    realEigenvectors    =    squaredSecondary.toArray(new    double[squaredSecondary.length    -    1]);    	non-compiled	[CE]  ';'  expected	44	None	replace
154	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[squaredSecondary.length  -  2]);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[squaredSecondary.length  -  2]);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[squaredSecondary.length  -  2]);	  ArrayRealVector[]    realEigenvectors    =    squaredSecondary.toArray(new    double[squaredSecondary.length    -    1]);    	non-compiled	[CE]  ';'  expected	44	None	replace
155	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[0];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i]  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[0];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i]  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[0];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i]	  ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[2];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary    =    squaredSecondary[i]    	non-compiled	[CE]  ';'  expected	41	None	replace
156	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[1];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i]  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[1];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i]  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[1];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i]	  ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[2];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary    =    squaredSecondary[i]    	non-compiled	[CE]  ';'  expected	41	None	replace
157	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[3];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i]  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[3];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i]  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[3];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i]	  ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[2];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary    =    squaredSecondary[i]    	non-compiled	[CE]  ';'  expected	41	None	replace
158	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[squaredSecondary.length  +  1];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[squaredSecondary.length  +  1];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[squaredSecondary.length  +  1];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[	  ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[squaredSecondary.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary    =    squaredSecondary[    	non-compiled	[CE]  ';'  expected	69	None	replace
159	[BUG]  [BUGGY]  ReflectionTraversal.traverse(compiler,  this.splitTolerance,  squaredSecondary.length);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ReflectionTraversal.traverse(compiler,  this.splitTolerance,  squaredSecondary.length);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ReflectionTraversal.traverse(compiler,  this.splitTolerance,  squaredSecondary.length);	  if(this.splitTolerance!=    squaredSecondary.length)    {    rehashTable();    }    	non-compiled	[CE]  ';'  expected	34	None	replace
160	[BUG]  [BUGGY]  System.arraycopy(secondary,  0,  secondary,  squaredSecondary,  this.splitTolerance);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  System.arraycopy(secondary,  0,  secondary,  squaredSecondary,  this.splitTolerance);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	System.arraycopy(secondary,  0,  secondary,  squaredSecondary,  this.splitTolerance);	  if(this.splitTolerance!=    splitTolerance)    {    rehashTable();    }    else    {    System.arraycopy(squaredSecondary,    0,    squaredSecondary,    this.splitTolerance,    this.splitTolerance);    }    	non-compiled	[CE]  ';'  expected	87	None	replace
161	[BUG]  [BUGGY]  if(this.splitTolerance!=  secondary.length)  {  rehashTable();  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(this.splitTolerance!=  secondary.length)  {  rehashTable();  }  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance!=  secondary.length)  {  rehashTable();  }	  if(this.splitTolerance!=    splitTolerance)    {    rehashTable();    }    else    {    System.arraycopy(squaredSecondary,    0,    squaredSecondary,    this.splitTolerance,    this.splitTolerance);    }    	non-compiled	[CE]  ';'  expected	87	None	replace
162	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.getDoubleEigenvectors();  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.getDoubleEigenvectors();  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.getDoubleEigenvectors();	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.getRawEigenvectors();    	non-compiled	[CE]  ';'  expected	53	None	replace
163	[BUG]  [BUGGY]  if(this.splitTolerance!=  squaredSecondary)  {  reset();  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(this.splitTolerance!=  squaredSecondary)  {  reset();  }  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance!=  squaredSecondary)  {  reset();  }	  if(this.splitTolerance!=    splitTolerance)    {    reset();    }    	non-compiled	[CE]  ';'  expected	6	None	replace
164	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[i];  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[i];  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[i];	  ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[secondary.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary[]    =    primary[i];    	non-compiled	[CE]  ';'  expected	76	None	replace
165	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[squaredSecondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[squaredSecondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[squaredSecondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[	  ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[secondary.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary[]    =    primary[i];    	non-compiled	[CE]  ';'  expected	76	None	replace
166	[BUG]  [BUGGY]  Decompose(this.splitTolerance);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  Decompose(this.splitTolerance);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	Decompose(this.splitTolerance);	  if(this.splitTolerance!=    squaredSecondary.length)    {    decompose(this.splitTolerance);    }    	non-compiled	[CE]  ';'  expected	12	None	replace
167	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(this.imagEigenvalues,  squaredSecondary.length);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(this.imagEigenvalues,  squaredSecondary.length);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(this.imagEigenvalues,  squaredSecondary.length);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(this.imagEigenvalues);    	non-compiled	[CE]  ';'  expected	1	None	replace
168	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[realEigenvalues.size()  ]);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[realEigenvalues.size()  ]);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[realEigenvalues.size()  ]);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.getValues();    	non-compiled	[CE]  ';'  expected	52	None	replace
169	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(realEigenvalues,  secondary);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(realEigenvalues,  secondary);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(realEigenvalues,  secondary);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(realEigenvalues);    	non-compiled	[CE]  ';'  expected	2	None	replace
170	[BUG]  [BUGGY]  this.splitTolerance  =  splitTolerance  *  squaredSecondary.length;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  this.splitTolerance  =  splitTolerance  *  squaredSecondary.length;  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	this.splitTolerance  =  splitTolerance  *  squaredSecondary.length;	  this.splitTolerance    =    splitTolerance;    	non-compiled	[CE]  ';'  expected	5	None	replace
171	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[4]);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[4]);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[4]);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    ArrayRealVector[0]);    	non-compiled	[CE]  ';'  expected	75	None	replace
172	[BUG]  [BUGGY]  if(this.splitTolerance!=  squaredSecondary.length)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  splitTolerance.length);  }  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(this.splitTolerance!=  squaredSecondary.length)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  splitTolerance.length);  }  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance!=  squaredSecondary.length)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  splitTolerance.length);  }	  if(this.splitTolerance!=    squaredSecondary.length)    {    rehashTable();    }    else    {    System.arraycopy(squaredSecondary,    0,    squaredSecondary,    0,    squaredSecondary.length);    }    	non-compiled	[CE]  ';'  expected	35	None	replace
173	[BUG]  [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[3];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[i];  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[3];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[i];  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[3];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[i];	  ArrayRealVector[]    eigenvectors    =    new    ArrayRealVector[2];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary[]    =    primary[i];    	non-compiled	[CE]  ';'  expected	21	None	replace
174	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.imagEigenvalues,  squaredSecondary.length;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.imagEigenvalues,  squaredSecondary.length;  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.imagEigenvalues,  squaredSecondary.length;	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.imagEigenvalues;    	non-compiled	[CE]  ';'  expected	77	None	replace
175	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[quardSecondary.size()  ]);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[quardSecondary.size()  ]);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[quardSecondary.size()  ]);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[imagEigenvalues.size()    ]);    	non-compiled	[CE]  ';'  expected	73	None	replace
176	[BUG]  [BUGGY]  decompose(secondary,  this.splitTolerance);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  decompose(secondary,  this.splitTolerance);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(secondary,  this.splitTolerance);	  decompose(squaredSecondary,    this.splitTolerance);    	non-compiled	[CE]  ';'  expected	29	None	replace
177	[BUG]  [BUGGY]  decompose(quadSecondary.length  -  1);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  decompose(quadSecondary.length  -  1);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(quadSecondary.length  -  1);	  decompose(squaredSecondary.length    -    1);    	non-compiled	[CE]  ';'  expected	81	None	replace
178	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.get  RealEigenvalues();  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.get  RealEigenvalues();  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.get  RealEigenvalues();	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.getImagEigenvalues();    	non-compiled	[CE]  ';'  expected	58	None	replace
179	[BUG]  [BUGGY]  if(this.splitTolerance!=  squaredSecondary)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  this.splitTolerance,  squaredSecondary,  this.splitTolerance);  }  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(this.splitTolerance!=  squaredSecondary)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  this.splitTolerance,  squaredSecondary,  this.splitTolerance);  }  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance!=  squaredSecondary)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  this.splitTolerance,  squaredSecondary,  this.splitTolerance);  }	  if(this.splitTolerance!=    splitTolerance)    {    rehashTable();    }    else    {    System.arraycopy(squaredSecondary,    0,    this.splitTolerance,    squaredSecondary,    this.splitTolerance);    }    	non-compiled	[CE]  ';'  expected	85	None	replace
180	[BUG]  [BUGGY]  validate(squaredSecondary,  i);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  validate(squaredSecondary,  i);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	validate(squaredSecondary,  i);	  validate(squaredSecondary);    	non-compiled	[CE]  ';'  expected	68	None	replace
181	[BUG]  [BUGGY]  decompose(quadSecondary,  i  +  1);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  decompose(quadSecondary,  i  +  1);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(quadSecondary,  i  +  1);	  decompose(quadSecondary,    i);    	non-compiled	[CE]  ';'  expected	63	None	replace
182	[BUG]  [BUGGY]  decompose(squaredSecondary,  i);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  decompose(squaredSecondary,  i);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(squaredSecondary,  i);	  decompose(quadSecondary,    i);    	non-compiled	[CE]  ';'  expected	63	None	replace
183	[BUG]  [BUGGY]  this.imagEigenvalues  =  squaredSecondary.length;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  this.imagEigenvalues  =  squaredSecondary.length;  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	this.imagEigenvalues  =  squaredSecondary.length;	  if(this.imagEigenvalues    ==    squaredSecondary)    {    rehashTable();    }    	non-compiled	[CE]  ';'  expected	59	None	replace
184	[BUG]  [BUGGY]  RealVector[]  realEigenvalues  =  eigenvectors.toArray(quadSecondary);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  RealVector[]  realEigenvalues  =  eigenvectors.toArray(quadSecondary);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	RealVector[]  realEigenvalues  =  eigenvectors.toArray(quadSecondary);	  if(this.imagEigenvalues    ==    squaredSecondary)    {    rehashTable();    }    	non-compiled	[CE]  ';'  expected	59	None	replace
185	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.get  RealEigenvectors();  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.get  RealEigenvectors();  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.get  RealEigenvectors();	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.getrealEigenvectors();    	non-compiled	[CE]  ';'  expected	51	None	replace
186	[BUG]  [BUGGY]  decompose(quadSecondary,  squaredSecondary,  splitTolerance);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  decompose(quadSecondary,  squaredSecondary,  splitTolerance);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(quadSecondary,  squaredSecondary,  splitTolerance);	  decompose(quadSecondary,    squaredSecondary);    	non-compiled	[CE]  ';'  expected	62	None	replace
187	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length  +  1];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length  +  1];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length  +  1];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[	  ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[realEigenvectors.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary    =    main[i];    	non-compiled	[CE]  ';'  expected	13	None	replace
188	[BUG]  [BUGGY]  System.arraycopy(secondary,  0,  secondary,  0,  secondary.length);  System.arraycopy(secondary,  0,  secondary.length);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  System.arraycopy(secondary,  0,  secondary,  0,  secondary.length);  System.arraycopy(secondary,  0,  secondary.length);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	System.arraycopy(secondary,  0,  secondary,  0,  secondary.length);  System.arraycopy(secondary,  0,  secondary.length);	  if(this.splitTolerance!=    squaredSecondary.length)    {    reset();    }    else    {    System.arraycopy(squaredSecondary,    0,    squaredSecondary,    0,    squaredSecondary.length);    System.arraycopy(squaredSecondary,    0,    squaredSecondary    	non-compiled	[CE]  ';'  expected	72	None	replace
189	[BUG]  [BUGGY]  if(secondary.length!=  0)  {  if(this.splitTolerance!=  splitTolerance)  {  reset();  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(secondary.length!=  0)  {  if(this.splitTolerance!=  splitTolerance)  {  reset();  }  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(secondary.length!=  0)  {  if(this.splitTolerance!=  splitTolerance)  {  reset();  }	  if(this.splitTolerance!=    squaredSecondary.length)    {    reset();    }    else    {    System.arraycopy(squaredSecondary,    0,    squaredSecondary,    0,    squaredSecondary.length);    System.arraycopy(squaredSecondary,    0,    squaredSecondary    	non-compiled	[CE]  ';'  expected	72	None	replace
190	[BUG]  [BUGGY]  remove(squaredSecondary,  this.splitTolerance);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  remove(squaredSecondary,  this.splitTolerance);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	remove(squaredSecondary,  this.splitTolerance);	  remove(squaredSecondary);    	non-compiled	[CE]  ';'  expected	84	None	replace
191	[BUG]  [BUGGY]  remove(s);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  remove(s);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	remove(s);	  remove(squaredSecondary);    	non-compiled	[CE]  ';'  expected	84	None	replace
192	[BUG]  [BUGGY]  rehash(squaredSecondary);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  rehash(squaredSecondary);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	rehash(squaredSecondary);	  remove(squaredSecondary);    	non-compiled	[CE]  ';'  expected	84	None	replace
193	[BUG]  [BUGGY]  remove(s,  squaredSecondary);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  remove(s,  squaredSecondary);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	remove(s,  squaredSecondary);	  remove(squaredSecondary);    	non-compiled	[CE]  ';'  expected	84	None	replace
194	[BUG]  [BUGGY]  if(this.splitTolerance!=  squaredSecondary)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  this.splitTolerance);  }  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(this.splitTolerance!=  squaredSecondary)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  this.splitTolerance);  }  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance!=  squaredSecondary)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  this.splitTolerance);  }	  if(this.splitTolerance!=    splitTolerance)    {    rehashTable();    }    else    {    System.arraycopy(squaredSecondary,    0,    squaredSecondary,    0,    this.splitTolerance);    }    	non-compiled	[CE]  ';'  expected	86	None	replace
195	[BUG]  [BUGGY]  if(this.splitTolerance!=  secondTolerance)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  this.splitTolerance);  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(this.splitTolerance!=  secondTolerance)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  this.splitTolerance);  }  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance!=  secondTolerance)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  this.splitTolerance);  }	  if(this.splitTolerance!=    splitTolerance)    {    rehashTable();    }    else    {    System.arraycopy(squaredSecondary,    0,    squaredSecondary,    0,    this.splitTolerance);    }    	non-compiled	[CE]  ';'  expected	86	None	replace
196	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(realEigenvalues,  squaredSecondary);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(realEigenvalues,  squaredSecondary);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(realEigenvalues,  squaredSecondary);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(imagEigenvalues);    	non-compiled	[CE]  ';'  expected	61	None	replace
197	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(realEigenvalues,  squaredSecondary.length);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(realEigenvalues,  squaredSecondary.length);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(realEigenvalues,  squaredSecondary.length);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(imagEigenvalues);    	non-compiled	[CE]  ';'  expected	61	None	replace
198	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[this.imagEigenvalues.size()  ]);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[this.imagEigenvalues.size()  ]);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[this.imagEigenvalues.size()  ]);	  if(this.imagEigenvalues    ==    squaredSecondary)    {    rehashCode();    }    	non-compiled	[CE]  ';'  expected	66	None	replace
199	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[qMax.length]);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[qMax.length]);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[qMax.length]);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[secondary.length]);    	non-compiled	[CE]  ';'  expected	25	None	replace
200	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[squaredSecondary.length()  -  1]);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[squaredSecondary.length()  -  1]);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[squaredSecondary.length()  -  1]);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[squaredSecondary.length()    ]);    	non-compiled	[CE]  ';'  expected	24	None	replace
201	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[squaredSecondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[i]  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[squaredSecondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[i]  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[squaredSecondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[i]	  ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[squaredSecondary.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary    =    main[i];    	non-compiled	[CE]  ';'  expected	55	None	replace
202	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[squaredSecondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[squaredSecondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[squaredSecondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =	  ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[squaredSecondary.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary    =    main[i];    	non-compiled	[CE]  ';'  expected	55	None	replace
203	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[2]);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[2]);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[2]);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[this.imagEigenvalues]);    	non-compiled	[CE]  ';'  expected	89	None	replace
204	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(this.realEigenvalues,  squaredSecondary.length);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(this.realEigenvalues,  squaredSecondary.length);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(this.realEigenvalues,  squaredSecondary.length);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(this.realEigenvalues);    	non-compiled	[CE]  ';'  expected	3	None	replace
205	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[secondary.length  +  1]);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[secondary.length  +  1]);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[secondary.length  +  1]);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[quardSecondary.length    +    1]);    	non-compiled	[CE]  ';'  expected	40	None	replace
206	[BUG]  [BUGGY]  validate(quadSecondary,  squaredSecondary);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  validate(quadSecondary,  squaredSecondary);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	validate(quadSecondary,  squaredSecondary);	  validate(quadSecondary);    	non-compiled	[CE]  ';'  expected	9	None	replace
207	[BUG]  [BUGGY]  decompose(squaredSecondary,  s);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  decompose(squaredSecondary,  s);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(squaredSecondary,  s);	  decompose(s,    squaredSecondary);    	non-compiled	[CE]  ';'  expected	7	None	replace
208	[BUG]  [BUGGY]  if(secondary.length!=  0)  {  if(this.splitTolerance!=  squaredSecondary.length)  {  reset();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  squaredSecondary.length);  this.splitTole  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(secondary.length!=  0)  {  if(this.splitTolerance!=  squaredSecondary.length)  {  reset();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  squaredSecondary.length);  this.splitTole  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(secondary.length!=  0)  {  if(this.splitTolerance!=  squaredSecondary.length)  {  reset();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  squaredSecondary.length);  this.splitTole	  if(this.splitTolerance!=    squaredSecondary.length)    {    reset();    }    else    {    System.arraycopy(squaredSecondary,    0,    squaredSecondary,    0,    squaredSecondary.length);    this.splitTolerance    =    splitTolerance;    }    	non-compiled	[CE]  ';'  expected	71	None	replace
209	[BUG]  [BUGGY]  if(secondary.length!=  0)  {  if(this.splitTolerance!=  squaredSecondary.length)  {  reset();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  squaredSecondary.length);  this.splitTolerance  =  splitTolerance;  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(secondary.length!=  0)  {  if(this.splitTolerance!=  squaredSecondary.length)  {  reset();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  squaredSecondary.length);  this.splitTolerance  =  splitTolerance;  }  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(secondary.length!=  0)  {  if(this.splitTolerance!=  squaredSecondary.length)  {  reset();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  squaredSecondary.length);  this.splitTolerance  =  splitTolerance;  }	  if(this.splitTolerance!=    squaredSecondary.length)    {    reset();    }    else    {    System.arraycopy(squaredSecondary,    0,    squaredSecondary,    0,    squaredSecondary.length);    this.splitTolerance    =    splitTolerance;    }    	non-compiled	[CE]  ';'  expected	71	None	replace
210	[BUG]  [BUGGY]  if(secondary.length!=  0)  {  if(this.splitTolerance!=  squaredSecondary.length)  {  reset();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  squaredSecondary.length);  this.splitTo  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(secondary.length!=  0)  {  if(this.splitTolerance!=  squaredSecondary.length)  {  reset();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  squaredSecondary.length);  this.splitTo  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(secondary.length!=  0)  {  if(this.splitTolerance!=  squaredSecondary.length)  {  reset();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  squaredSecondary.length);  this.splitTo	  if(this.splitTolerance!=    squaredSecondary.length)    {    reset();    }    else    {    System.arraycopy(squaredSecondary,    0,    squaredSecondary,    0,    squaredSecondary.length);    this.splitTolerance    =    splitTolerance;    }    	non-compiled	[CE]  ';'  expected	71	None	replace
211	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[3];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[i];  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[3];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[i];  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[3];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[i];	  ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[2];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary    =    main[i];    	non-compiled	[CE]  ';'  expected	14	None	replace
212	[BUG]  [BUGGY]  squaredSecondary.remove(s);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  squaredSecondary.remove(s);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	squaredSecondary.remove(s);	  remove(squaredSecondary);    	non-compiled	[CE]  ';'  expected	84	None	replace
213	[BUG]  [BUGGY]  squaredSecondary.clear();  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  squaredSecondary.clear();  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	squaredSecondary.clear();	  remove(squaredSecondary);    	non-compiled	[CE]  ';'  expected	84	None	replace
214	[BUG]  [BUGGY]  if(s.length!=  secondary.length)  {  if(this.splitTolerance!=  squaredSecondary.length)  {  reset();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  splitTolerance.length);  }  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(s.length!=  secondary.length)  {  if(this.splitTolerance!=  squaredSecondary.length)  {  reset();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  splitTolerance.length);  }  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(s.length!=  secondary.length)  {  if(this.splitTolerance!=  squaredSecondary.length)  {  reset();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  splitTolerance.length);  }	  if(this.splitTolerance!=    squaredSecondary.length)    {    reset();    }    else    {    System.arraycopy(squaredSecondary,    0,    squaredSecondary,    0,    squaredSecondary.length);    }    	non-compiled	[CE]  ';'  expected	70	None	replace
215	[BUG]  [BUGGY]  if(this.splitTolerance!=  squaredSecondary.length)  {  reset();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  sqdSecondary.length);  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(this.splitTolerance!=  squaredSecondary.length)  {  reset();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  sqdSecondary.length);  }  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance!=  squaredSecondary.length)  {  reset();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  sqdSecondary.length);  }	  if(this.splitTolerance!=    squaredSecondary.length)    {    reset();    }    else    {    System.arraycopy(squaredSecondary,    0,    squaredSecondary,    0,    squaredSecondary.length);    }    	non-compiled	[CE]  ';'  expected	70	None	replace
216	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[this.realEigenvalues.size()  ]);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[this.realEigenvalues.size()  ]);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[this.realEigenvalues.size()  ]);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[imagEigenvalues.size()    ]);    	non-compiled	[CE]  ';'  expected	73	None	replace
217	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length  *  squaredSecondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length  *  squaredSecondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length  *  squaredSecondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[	  ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[realEigenvectors.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary    =    squaredSecondary[    	non-compiled	[CE]  ';'  expected	31	None	replace
218	[BUG]  [BUGGY]  if(this.imagEigenvalues  ==  squaredSecondary[i])  {  rehashCode();  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(this.imagEigenvalues  ==  squaredSecondary[i])  {  rehashCode();  }  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.imagEigenvalues  ==  squaredSecondary[i])  {  rehashCode();  }	  if(this.imagEigenvalues    ==    squaredSecondary)    {    rehashCode();    }    	non-compiled	[CE]  ';'  expected	66	None	replace
219	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(realEigenvalues,  this.magEigenvalues);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(realEigenvalues,  this.magEigenvalues);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(realEigenvalues,  this.magEigenvalues);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(realEigenvalues);    	non-compiled	[CE]  ';'  expected	2	None	replace
220	[BUG]  [BUGGY]  this.splitTolerance  =  squaredSecondary.length  -  1  +  1;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  this.splitTolerance  =  squaredSecondary.length  -  1  +  1;  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	this.splitTolerance  =  squaredSecondary.length  -  1  +  1;	  this.splitTolerance    =    squaredSecondary.length    -    1;    	non-compiled	[CE]  ';'  expected	80	None	replace
221	[BUG]  [BUGGY]  this.splitTolerance  =  squaredSecondary  +  splitTolerance;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  this.splitTolerance  =  squaredSecondary  +  splitTolerance;  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	this.splitTolerance  =  squaredSecondary  +  splitTolerance;	  this.splitTolerance    =    splitTolerance;    	non-compiled	[CE]  ';'  expected	5	None	replace
222	[BUG]  [BUGGY]  if(this.splitTolerance  ==  splitTolerance)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  this.splitTolerance,  this.splitTolerance);  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(this.splitTolerance  ==  splitTolerance)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  this.splitTolerance,  this.splitTolerance);  }  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance  ==  splitTolerance)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  this.splitTolerance,  this.splitTolerance);  }	  if(this.splitTolerance!=    splitTolerance)    {    rehashTable();    }    else    {    System.arraycopy(squaredSecondary,    0,    squaredSecondary,    this.splitTolerance,    this.splitTolerance);    }    	non-compiled	[CE]  ';'  expected	87	None	replace
223	[BUG]  [BUGGY]  if(this.splitTolerance  ==  splitTolerance)  {  rehashTable();  }  else  {  System.arraycopy(secondary,  0,  secondary,  this.splitTolerance,  this.splitTolerance);  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(this.splitTolerance  ==  splitTolerance)  {  rehashTable();  }  else  {  System.arraycopy(secondary,  0,  secondary,  this.splitTolerance,  this.splitTolerance);  }  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance  ==  splitTolerance)  {  rehashTable();  }  else  {  System.arraycopy(secondary,  0,  secondary,  this.splitTolerance,  this.splitTolerance);  }	  if(this.splitTolerance!=    splitTolerance)    {    rehashTable();    }    else    {    System.arraycopy(squaredSecondary,    0,    squaredSecondary,    this.splitTolerance,    this.splitTolerance);    }    	non-compiled	[CE]  ';'  expected	87	None	replace
224	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[squaredSecondary.length  *  2];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[squaredSecondary.length  *  2];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[squaredSecondary.length  *  2];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[	  ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[squaredSecondary.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary    =    squaredSecondary[    	non-compiled	[CE]  ';'  expected	69	None	replace
225	[BUG]  [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[squaredSecondary.length  *  squaredSecondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[squaredSecondary.length  *  squaredSecondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[squaredSecondary.length  *  squaredSecondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[	  ArrayRealVector[]    eigenvectors    =    new    ArrayRealVector[squaredSecondary.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary[]    =    primary[    	non-compiled	[CE]  ';'  expected	65	None	replace
226	[BUG]  [BUGGY]  if(this.splitTolerance  ==  splitTolerance)  {  rehashCode();  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(this.splitTolerance  ==  splitTolerance)  {  rehashCode();  }  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance  ==  splitTolerance)  {  rehashCode();  }	  if(this.splitTolerance!=    splitTolerance)    {    rehashCode();    }    	non-compiled	[CE]  ';'  expected	49	None	replace
227	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length  +  1];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[i]  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length  +  1];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[i]  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length  +  1];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[i]	  ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[realEigenvectors.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary    =    main[i];    	non-compiled	[CE]  ';'  expected	13	None	replace
228	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length  *  squaredSecondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length  *  squaredSecondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length  *  squaredSecondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[	  ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[realEigenvectors.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary    =    main[i];    	non-compiled	[CE]  ';'  expected	13	None	replace
229	[BUG]  [BUGGY]  double[]  realEigenvalues  =  squaredSecondary.toArray(new  double[realEigenvalues.size()  ]);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  double[]  realEigenvalues  =  squaredSecondary.toArray(new  double[realEigenvalues.size()  ]);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	double[]  realEigenvalues  =  squaredSecondary.toArray(new  double[realEigenvalues.size()  ]);	  validate(squaredSecondary);    	non-compiled	[CE]  ';'  expected	68	None	replace
230	[BUG]  [BUGGY]  double[]  realEigenvalues  =  squaredSecondary.toArray(new  double[squaredSecondary.length]);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  double[]  realEigenvalues  =  squaredSecondary.toArray(new  double[squaredSecondary.length]);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	double[]  realEigenvalues  =  squaredSecondary.toArray(new  double[squaredSecondary.length]);	  validate(squaredSecondary);    	non-compiled	[CE]  ';'  expected	68	None	replace
231	[BUG]  [BUGGY]  double[]  squaredSecondary  =  squaredSecondary.toArray(new  double[squaredSecondary.length]);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  double[]  squaredSecondary  =  squaredSecondary.toArray(new  double[squaredSecondary.length]);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	double[]  squaredSecondary  =  squaredSecondary.toArray(new  double[squaredSecondary.length]);	  validate(squaredSecondary);    	non-compiled	[CE]  ';'  expected	68	None	replace
232	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(this.imagEigenvalues,  squaredSecondary);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(this.imagEigenvalues,  squaredSecondary);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(this.imagEigenvalues,  squaredSecondary);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(this.imagEigenvalues);    	non-compiled	[CE]  ';'  expected	1	None	replace
233	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[imagEigenvalues.length]);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[imagEigenvalues.length]);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[imagEigenvalues.length]);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[realEigenvalues.length]);    	non-compiled	[CE]  ';'  expected	26	None	replace
234	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length  *  squaredSecondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i]  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length  *  squaredSecondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i]  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length  *  squaredSecondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i]	  ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[realEigenvectors.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary    =    squaredSecondary[i]    	non-compiled	[CE]  ';'  expected	32	None	replace
235	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.imagEigenvalues,  this.realEigenvalues;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.imagEigenvalues,  this.realEigenvalues;  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.imagEigenvalues,  this.realEigenvalues;	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.imagEigenvalues;    	non-compiled	[CE]  ';'  expected	77	None	replace
236	[BUG]  [BUGGY]  decompose(quadSecondary,  s);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  decompose(quadSecondary,  s);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(quadSecondary,  s);	  decompose(quadSecondary,    this.splitTolerance);    	non-compiled	[CE]  ';'  expected	8	None	replace
237	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[quardSecondary.length()  ]);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[quardSecondary.length()  ]);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[quardSecondary.length()  ]);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[squaredSecondary.length()    ]);    	non-compiled	[CE]  ';'  expected	24	None	replace
238	[BUG]  [BUGGY]  if(this.splitTolerance!=  secondary.length)  {  reset();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  squaredSecondary.length);  this.splitTolerance  =  splitTolerance;  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(this.splitTolerance!=  secondary.length)  {  reset();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  squaredSecondary.length);  this.splitTolerance  =  splitTolerance;  }  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance!=  secondary.length)  {  reset();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  squaredSecondary.length);  this.splitTolerance  =  splitTolerance;  }	  if(this.splitTolerance!=    squaredSecondary.length)    {    reset();    }    else    {    System.arraycopy(squaredSecondary,    0,    squaredSecondary,    0,    squaredSecondary.length);    this.splitTolerance    =    splitTolerance;    }    	non-compiled	[CE]  ';'  expected	71	None	replace
239	[BUG]  [BUGGY]  if(this.splitTolerance!=  secondary.length)  {  reset();  }  else  {  System.arraycopy(secondary,  0,  squaredSecondary,  0,  secondary.length);  this.splitTolerance  =  splitTolerance;  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(this.splitTolerance!=  secondary.length)  {  reset();  }  else  {  System.arraycopy(secondary,  0,  squaredSecondary,  0,  secondary.length);  this.splitTolerance  =  splitTolerance;  }  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance!=  secondary.length)  {  reset();  }  else  {  System.arraycopy(secondary,  0,  squaredSecondary,  0,  secondary.length);  this.splitTolerance  =  splitTolerance;  }	  if(this.splitTolerance!=    squaredSecondary.length)    {    reset();    }    else    {    System.arraycopy(squaredSecondary,    0,    squaredSecondary,    0,    squaredSecondary.length);    this.splitTolerance    =    splitTolerance;    }    	non-compiled	[CE]  ';'  expected	71	None	replace
240	[BUG]  [BUGGY]  if(this.splitTolerance!=  squaredSecondary.length)  {  rehashTable();  }  else  {  System.arraycopy(secondary,  0,  secondary,  0,  secondary.length);  }  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(this.splitTolerance!=  squaredSecondary.length)  {  rehashTable();  }  else  {  System.arraycopy(secondary,  0,  secondary,  0,  secondary.length);  }  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance!=  squaredSecondary.length)  {  rehashTable();  }  else  {  System.arraycopy(secondary,  0,  secondary,  0,  secondary.length);  }	  if(this.splitTolerance!=    squaredSecondary.length)    {    rehashTable();    }    else    {    System.arraycopy(squaredSecondary,    0,    squaredSecondary,    0,    squaredSecondary.length);    }    	non-compiled	[CE]  ';'  expected	35	None	replace
241	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[double.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  primary[i];  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[double.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  primary[i];  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[double.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  primary[i];	  ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[double.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary    =    main[i];    	non-compiled	[CE]  ';'  expected	15	None	replace
242	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[quardSecondary.length  -  1]);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[quardSecondary.length  -  1]);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[quardSecondary.length  -  1]);	  ArrayRealVector[]    realEigenvectors    =    squaredSecondary.toArray(new    double[squaredSecondary.length    -    1]);    	non-compiled	[CE]  ';'  expected	44	None	replace
243	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[this.imagEigenvalues.length  -  1]);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[this.imagEigenvalues.length  -  1]);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[this.imagEigenvalues.length  -  1]);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[this.imagEigenvalues.length]);    	non-compiled	[CE]  ';'  expected	28	None	replace
244	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[qdSecondary.length  +  1]);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[qdSecondary.length  +  1]);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[qdSecondary.length  +  1]);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[quardSecondary.length    +    1]);    	non-compiled	[CE]  ';'  expected	40	None	replace
245	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[secondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[secondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[secondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[	  ArrayRealVector[]    eigenvectors    =    new    ArrayRealVector[secondary.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary[]    =    primary[    	non-compiled	[CE]  ';'  expected	64	None	replace
246	[BUG]  [BUGGY]  decompose(quaddSecondary.length  +  1);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  decompose(quaddSecondary.length  +  1);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(quaddSecondary.length  +  1);	  decompose(squaredSecondary.length    +    1);    	non-compiled	[CE]  ';'  expected	82	None	replace
247	[BUG]  [BUGGY]  if(this.splitTolerance  ==  splitTolerance)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  this.splitTolerance,  squaredSecondary,  this.splitTolerance);  }  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(this.splitTolerance  ==  splitTolerance)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  this.splitTolerance,  squaredSecondary,  this.splitTolerance);  }  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance  ==  splitTolerance)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  this.splitTolerance,  squaredSecondary,  this.splitTolerance);  }	  if(this.splitTolerance!=    splitTolerance)    {    rehashTable();    }    else    {    System.arraycopy(squaredSecondary,    0,    this.splitTolerance,    squaredSecondary,    this.splitTolerance);    }    	non-compiled	[CE]  ';'  expected	85	None	replace
248	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length  *  squaredSecondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length  *  squaredSecondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length  *  squaredSecondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i	  ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[realEigenvectors.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary    =    squaredSecondary[i    	non-compiled	[CE]  ';'  expected	16	None	replace
249	[BUG]  [BUGGY]  if(splitTolerance!=  secondary.length)  {  reset();  }  else  {  System.arraycopy(secondary,  0,  secondary,  0,  secondary.length);  System.arraycopy(secondary,  0,  secondary.length);  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(splitTolerance!=  secondary.length)  {  reset();  }  else  {  System.arraycopy(secondary,  0,  secondary,  0,  secondary.length);  System.arraycopy(secondary,  0,  secondary.length);  }  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(splitTolerance!=  secondary.length)  {  reset();  }  else  {  System.arraycopy(secondary,  0,  secondary,  0,  secondary.length);  System.arraycopy(secondary,  0,  secondary.length);  }	  if(this.splitTolerance!=    squaredSecondary.length)    {    reset();    }    else    {    System.arraycopy(squaredSecondary,    0,    squaredSecondary,    0,    squaredSecondary.length);    System.arraycopy(squaredSecondary,    0,    squaredSecondary    	non-compiled	[CE]  ';'  expected	72	None	replace
250	[BUG]  [BUGGY]  if(splitTolerance!=  secondary.length)  {  reset();  }  else  {  System.arraycopy(secondary,  0,  secondary,  0,  secondary.length);  System.arraycopy(secondary,  0,  secondary.length);  System.arraycopy(secondary,  0,  secondary  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(splitTolerance!=  secondary.length)  {  reset();  }  else  {  System.arraycopy(secondary,  0,  secondary,  0,  secondary.length);  System.arraycopy(secondary,  0,  secondary.length);  System.arraycopy(secondary,  0,  secondary  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(splitTolerance!=  secondary.length)  {  reset();  }  else  {  System.arraycopy(secondary,  0,  secondary,  0,  secondary.length);  System.arraycopy(secondary,  0,  secondary.length);  System.arraycopy(secondary,  0,  secondary	  if(this.splitTolerance!=    squaredSecondary.length)    {    reset();    }    else    {    System.arraycopy(squaredSecondary,    0,    squaredSecondary,    0,    squaredSecondary.length);    System.arraycopy(squaredSecondary,    0,    squaredSecondary    	non-compiled	[CE]  ';'  expected	72	None	replace
251	[BUG]  [BUGGY]  if(splitTolerance!=  secondary.length)  {  reset();  }  else  {  System.arraycopy(secondarySecondary,  0,  secondarySecondary,  0,  secondarySecondary.length);  System.arraycopy(secondarySecondary,  0,  secondary  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(splitTolerance!=  secondary.length)  {  reset();  }  else  {  System.arraycopy(secondarySecondary,  0,  secondarySecondary,  0,  secondarySecondary.length);  System.arraycopy(secondarySecondary,  0,  secondary  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(splitTolerance!=  secondary.length)  {  reset();  }  else  {  System.arraycopy(secondarySecondary,  0,  secondarySecondary,  0,  secondarySecondary.length);  System.arraycopy(secondarySecondary,  0,  secondary	  if(this.splitTolerance!=    squaredSecondary.length)    {    reset();    }    else    {    System.arraycopy(squaredSecondary,    0,    squaredSecondary,    0,    squaredSecondary.length);    System.arraycopy(squaredSecondary,    0,    squaredSecondary    	non-compiled	[CE]  ';'  expected	72	None	replace
252	[BUG]  [BUGGY]  if(this.splitTolerance  ==  splitTolerance)  {  reset();  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(this.splitTolerance  ==  splitTolerance)  {  reset();  }  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance  ==  splitTolerance)  {  reset();  }	  if(this.splitTolerance!=    splitTolerance)    {    reset();    }    	non-compiled	[CE]  ';'  expected	6	None	replace
253	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(this.realEigenvalues,  this.magEigenvalues);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(this.realEigenvalues,  this.magEigenvalues);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(this.realEigenvalues,  this.magEigenvalues);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(this.realEigenvalues);    	non-compiled	[CE]  ';'  expected	3	None	replace
254	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(this.realEigenvalues,  squaredSecondary);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(this.realEigenvalues,  squaredSecondary);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(this.realEigenvalues,  squaredSecondary);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(this.realEigenvalues);    	non-compiled	[CE]  ';'  expected	3	None	replace
255	[BUG]  [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[double.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[i];  }  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[double.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[i];  }  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[double.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[i];  }	  ArrayRealVector[]    eigenvectors    =    new    ArrayRealVector[double.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary[]    =    primary[i];    	non-compiled	[CE]  ';'  expected	22	None	replace
256	[BUG]  [BUGGY]  validate(quadSecondary,  s);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  validate(quadSecondary,  s);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	validate(quadSecondary,  s);	  validate(quadSecondary);    	non-compiled	[CE]  ';'  expected	9	None	replace
257	[BUG]  [BUGGY]  decompose(s.length,  squaredSecondary);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  decompose(s.length,  squaredSecondary);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(s.length,  squaredSecondary);	  decompose(s.length);    	non-compiled	[CE]  ';'  expected	20	None	replace
258	[BUG]  [BUGGY]  decompose(quadSecondary,  squaredSecondary.length);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  decompose(quadSecondary,  squaredSecondary.length);  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(quadSecondary,  squaredSecondary.length);	  decompose(quadSecondary,    i);    	non-compiled	[CE]  ';'  expected	63	None	replace
259	[BUG]  [BUGGY]  if(this.splitTolerance!=  null  &&  this.splitTolerance.length  >  0)  {  rehashCode();  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(this.splitTolerance!=  null  &&  this.splitTolerance.length  >  0)  {  rehashCode();  }  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance!=  null  &&  this.splitTolerance.length  >  0)  {  rehashCode();  }	  if(this.splitTolerance!=    null)    {    rehashCode();    }    	non-compiled	[CE]  ';'  expected	47	None	replace
260	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[squaredSecondary.length  *  2];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i]  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[squaredSecondary.length  *  2];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i]  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[squaredSecondary.length  *  2];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i]	  ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[squaredSecondary.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary    =    squaredSecondary[i]    	non-compiled	[CE]  ';'  expected	42	None	replace
261	[BUG]  [BUGGY]  if(this.splitTolerance  ==  splitTolerance)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  this.splitTolerance);  }  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  if(this.splitTolerance  ==  splitTolerance)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  this.splitTolerance);  }  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance  ==  splitTolerance)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  this.splitTolerance);  }	  if(this.splitTolerance!=    splitTolerance)    {    rehashTable();    }    else    {    System.arraycopy(squaredSecondary,    0,    squaredSecondary,    0,    this.splitTolerance);    }    	non-compiled	[CE]  ';'  expected	86	None	replace
262	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[qdSecondary.length  -  1]);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[qdSecondary.length  -  1]);  [BUGGY]      decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[qdSecondary.length  -  1]);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[qdSecondary.length]);    	non-compiled	[CE]  ';'  expected	83	None	replace
263	[BUG]  [BUGGY]  this.realEigenvalues  =  squaredSecondary.length;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  this.realEigenvalues  =  squaredSecondary.length;  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	this.realEigenvalues  =  squaredSecondary.length;	  if(this.imagEigenvalues    ==    squaredSecondary)    {    rehashTable();    }    	non-compiled	[CE]  ';'  expected	59	None	replace
264	[BUG]  [BUGGY]  this.realEigenvalues  =  squaredSecondary.clone();  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;      [BUGGY]  this.realEigenvalues  =  squaredSecondary.clone();  [BUGGY]        }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	this.realEigenvalues  =  squaredSecondary.clone();	  if(this.imagEigenvalues    ==    squaredSecondary)    {    rehashTable();    }    	non-compiled	[CE]  ';'  expected	59	None	replace
