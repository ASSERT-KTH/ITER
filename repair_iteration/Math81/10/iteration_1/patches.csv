bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(this.imagEigenvalues);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(this.imagEigenvalues);  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(this.imagEigenvalues);	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray();    	non-compiled	[CE]  ';'  expected	19	None	replace
2	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(realEigenvalues);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(realEigenvalues);  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(realEigenvalues);	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray();    	non-compiled	[CE]  ';'  expected	19	None	replace
3	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(this.realEigenvalues);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(this.realEigenvalues);  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(this.realEigenvalues);	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray();    	non-compiled	[CE]  ';'  expected	19	None	replace
4	[BUG]  [BUGGY]  if(this.splitTolerance!=  squaredSecondary.length)  {  reset();  }  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  if(this.splitTolerance!=  squaredSecondary.length)  {  reset();  }  [BUGGY]      }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance!=  squaredSecondary.length)  {  reset();  }	  reset();    	non-compiled	[CE]  ';'  expected	15	None	replace
5	[BUG]  [BUGGY]  this.splitTolerance  =  splitTolerance;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  this.splitTolerance  =  splitTolerance;  [BUGGY]      }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	this.splitTolerance  =  splitTolerance;	  reset();    	non-compiled	[CE]  ';'  expected	15	None	replace
6	[BUG]  [BUGGY]  if(this.splitTolerance!=  splitTolerance)  {  reset();  }  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  if(this.splitTolerance!=  splitTolerance)  {  reset();  }  [BUGGY]      }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance!=  splitTolerance)  {  reset();  }	  reset();    	non-compiled	[CE]  ';'  expected	15	None	replace
7	[BUG]  [BUGGY]  decompose(s,  squaredSecondary);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  decompose(s,  squaredSecondary);  [BUGGY]      }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(s,  squaredSecondary);	  decompose(quadSecondary);    	non-compiled	[CE]  ';'  expected	9	None	replace
8	[BUG]  [BUGGY]  decompose(quadSecondary,  this.splitTolerance);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  decompose(quadSecondary,  this.splitTolerance);  [BUGGY]      }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(quadSecondary,  this.splitTolerance);	  decompose(quadSecondary);    	non-compiled	[CE]  ';'  expected	9	None	replace
9	[BUG]  [BUGGY]  validate(quadSecondary);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  validate(quadSecondary);  [BUGGY]      }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	validate(quadSecondary);	  decompose(quadSecondary);    	non-compiled	[CE]  ';'  expected	9	None	replace
10	[BUG]  [BUGGY]  decompose(s,  this.splitTolerance);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  decompose(s,  this.splitTolerance);  [BUGGY]      }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(s,  this.splitTolerance);	  decompose(this.splitTolerance);    	non-compiled	[CE]  ';'  expected	6	None	replace
11	[BUG]  [BUGGY]  decompose(this.splitTolerance,  squaredSecondary);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  decompose(this.splitTolerance,  squaredSecondary);  [BUGGY]      }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(this.splitTolerance,  squaredSecondary);	  decompose(this.splitTolerance);    	non-compiled	[CE]  ';'  expected	6	None	replace
12	[BUG]  [BUGGY]  if(this.splitTolerance!=  squaredSecondary.length)  {  decompose(this.splitTolerance);  }  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  if(this.splitTolerance!=  squaredSecondary.length)  {  decompose(this.splitTolerance);  }  [BUGGY]      }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance!=  squaredSecondary.length)  {  decompose(this.splitTolerance);  }	  decompose(this.splitTolerance);    	non-compiled	[CE]  ';'  expected	6	None	replace
13	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[i];  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[i];  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[i];	      ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[secondary.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary    =    main[i];    	non-compiled	[CE]  ';'  expected	3	None	replace
14	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[2];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[i];  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[2];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[i];  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[2];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[i];	      ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[secondary.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary    =    main[i];    	non-compiled	[CE]  ';'  expected	3	None	replace
15	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[double.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[i];  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[double.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[i];  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[double.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[i];	      ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[secondary.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary    =    main[i];    	non-compiled	[CE]  ';'  expected	3	None	replace
16	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i	      ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[secondary.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary    =    squaredSecondary[i    	non-compiled	[CE]  ';'  expected	4	None	replace
17	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[2];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[2];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[2];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i	      ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[secondary.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary    =    squaredSecondary[i    	non-compiled	[CE]  ';'  expected	4	None	replace
18	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[squaredSecondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[squaredSecondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[squaredSecondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i	      ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[secondary.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary    =    squaredSecondary[i    	non-compiled	[CE]  ';'  expected	4	None	replace
19	[BUG]  [BUGGY]  decompose(s,  squaredSecondary.length);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  decompose(s,  squaredSecondary.length);  [BUGGY]      }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(s,  squaredSecondary.length);	  decompose(squaredSecondary.length);    	non-compiled	[CE]  ';'  expected	11	None	replace
20	[BUG]  [BUGGY]  decompose(s.length);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  decompose(s.length);  [BUGGY]      }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(s.length);	  decompose(squaredSecondary.length);    	non-compiled	[CE]  ';'  expected	11	None	replace
21	[BUG]  [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[2];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[i];  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[2];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[i];  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[2];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[i];	      ArrayRealVector[]    eigenvectors    =    new    ArrayRealVector[secondary.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary[]    =    primary[i];    	non-compiled	[CE]  ';'  expected	12	None	replace
22	[BUG]  [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[double.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[i];  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[double.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[i];  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[double.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[i];	      ArrayRealVector[]    eigenvectors    =    new    ArrayRealVector[secondary.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary[]    =    primary[i];    	non-compiled	[CE]  ';'  expected	12	None	replace
23	[BUG]  [BUGGY]  final  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[secondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[i];  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  final  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[secondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[i];  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	final  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[secondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[i];	      ArrayRealVector[]    eigenvectors    =    new    ArrayRealVector[secondary.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary[]    =    primary[i];    	non-compiled	[CE]  ';'  expected	12	None	replace
24	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[squaredSecondary.length()  ]);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[squaredSecondary.length()  ]);  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[squaredSecondary.length()  ]);	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[squaredSecondary.size()    ]);    	non-compiled	[CE]  ';'  expected	18	None	replace
25	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[secondary.length]);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[secondary.length]);  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[secondary.length]);	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[qMax]);    	non-compiled	[CE]  ';'  expected	20	None	replace
26	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[realEigenvalues.length]);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[realEigenvalues.length]);  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[realEigenvalues.length]);	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[qMax]);    	non-compiled	[CE]  ';'  expected	20	None	replace
27	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[qMax  +  1]);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[qMax  +  1]);  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[qMax  +  1]);	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[qMax]);    	non-compiled	[CE]  ';'  expected	20	None	replace
28	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[this.imagEigenvalues.length]);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[this.imagEigenvalues.length]);  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[this.imagEigenvalues.length]);	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[qMax]);    	non-compiled	[CE]  ';'  expected	20	None	replace
29	[BUG]  [BUGGY]  decompose(squaredSecondary,  this.splitTolerance);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  decompose(squaredSecondary,  this.splitTolerance);  [BUGGY]      }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(squaredSecondary,  this.splitTolerance);	  decompose(squaredSecondary);    	non-compiled	[CE]  ';'  expected	7	None	replace
30	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[2];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i];  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[2];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i];  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[2];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i];	      ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[secondary.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary    =    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	1	None	replace
31	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[	      ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[secondary.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary    =    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	1	None	replace
32	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i]  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i]  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i]	      ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[secondary.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary    =    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	1	None	replace
33	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[0];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i];  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[0];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i];  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[0];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i];	      ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[secondary.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary    =    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	1	None	replace
34	[BUG]  [BUGGY]  if(this.splitTolerance!=  squaredSecondary.length)  {  rehashTable();  }  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  if(this.splitTolerance!=  squaredSecondary.length)  {  rehashTable();  }  [BUGGY]      }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance!=  squaredSecondary.length)  {  rehashTable();  }	  rehashTable();    	non-compiled	[CE]  ';'  expected	14	None	replace
35	[BUG]  [BUGGY]  if(this.splitTolerance!=  squaredSecondary.length)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  squaredSecondary.length);  }  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  if(this.splitTolerance!=  squaredSecondary.length)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  squaredSecondary.length);  }  [BUGGY]      }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance!=  squaredSecondary.length)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  squaredSecondary.length);  }	  rehashTable();    	non-compiled	[CE]  ';'  expected	14	None	replace
36	[BUG]  [BUGGY]  if(this.splitTolerance!=  squaredSecondary.length)  {  rehashTable();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  if(this.splitTolerance!=  squaredSecondary.length)  {  rehashTable();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance!=  squaredSecondary.length)  {  rehashTable();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  rehashTable();    	non-compiled	[CE]  	14	None	replace
37	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[squaredSecondary.length  +  1]);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[squaredSecondary.length  +  1]);  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[squaredSecondary.length  +  1]);	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[squaredSecondary.length]);    	non-compiled	[CE]  ';'  expected	13	None	replace
38	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[squaredSecondary.length  -  1]);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[squaredSecondary.length  -  1]);  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[squaredSecondary.length  -  1]);	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[squaredSecondary.length]);    	non-compiled	[CE]  ';'  expected	13	None	replace
39	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[scaledSecondary.length]);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[scaledSecondary.length]);  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[scaledSecondary.length]);	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[squaredSecondary.length]);    	non-compiled	[CE]  ';'  expected	13	None	replace
40	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[quardSecondary.length  +  1]);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[quardSecondary.length  +  1]);  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[quardSecondary.length  +  1]);	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[squaredSecondary.length]);    	non-compiled	[CE]  ';'  expected	13	None	replace
41	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[2];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i]  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[2];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i]  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[2];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i]	      ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[secondary.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary    =    squaredSecondary[i]    	non-compiled	[CE]  ';'  expected	2	None	replace
42	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[squaredSecondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i]  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[squaredSecondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i]  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[squaredSecondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i]	      ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[secondary.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary    =    squaredSecondary[i]    	non-compiled	[CE]  ';'  expected	2	None	replace
43	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[squaredSecondary.length  +  1]);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[squaredSecondary.length  +  1]);  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[squaredSecondary.length  +  1]);	      ArrayRealVector[]    realEigenvectors    =    squaredSecondary.toArray(new    double[squaredSecondary.length]);    	non-compiled	[CE]  ';'  expected	5	None	replace
44	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[squaredSecondary.length  -  1]);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[squaredSecondary.length  -  1]);  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[squaredSecondary.length  -  1]);	      ArrayRealVector[]    realEigenvectors    =    squaredSecondary.toArray(new    double[squaredSecondary.length]);    	non-compiled	[CE]  ';'  expected	5	None	replace
45	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[scaledSecondary.length]);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[scaledSecondary.length]);  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[scaledSecondary.length]);	      ArrayRealVector[]    realEigenvectors    =    squaredSecondary.toArray(new    double[squaredSecondary.length]);    	non-compiled	[CE]  ';'  expected	5	None	replace
46	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[quardSecondary.length  +  1]);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[quardSecondary.length  +  1]);  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[quardSecondary.length  +  1]);	      ArrayRealVector[]    realEigenvectors    =    squaredSecondary.toArray(new    double[squaredSecondary.length]);    	non-compiled	[CE]  ';'  expected	5	None	replace
47	[BUG]  [BUGGY]  if(this.splitTolerance!=  null)  {  rehashCode();  }  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  if(this.splitTolerance!=  null)  {  rehashCode();  }  [BUGGY]      }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance!=  null)  {  rehashCode();  }	  rehashCode();    	non-compiled	[CE]  ';'  expected	16	None	replace
48	[BUG]  [BUGGY]  if(this.splitTolerance!=  squaredSecondary.length)  {  rehashCode();  }  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  if(this.splitTolerance!=  squaredSecondary.length)  {  rehashCode();  }  [BUGGY]      }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance!=  squaredSecondary.length)  {  rehashCode();  }	  rehashCode();    	non-compiled	[CE]  ';'  expected	16	None	replace
49	[BUG]  [BUGGY]  if(this.splitTolerance!=  splitTolerance)  {  rehashCode();  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  if(this.splitTolerance!=  splitTolerance)  {  rehashCode();  }  [BUGGY]      }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance!=  splitTolerance)  {  rehashCode();  }	  rehashCode();    	non-compiled	[CE]  ';'  expected	16	None	replace
50	[BUG]  [BUGGY]  if(this.splitTolerance  ==  null)  {  rehashCode();  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  if(this.splitTolerance  ==  null)  {  rehashCode();  }  [BUGGY]      }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance  ==  null)  {  rehashCode();  }	  rehashCode();    	non-compiled	[CE]  ';'  expected	16	None	replace
51	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.getrealEigenvectors();  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.getrealEigenvectors();  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.getrealEigenvectors();	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.getEigenvectors();    	non-compiled	[CE]  ';'  expected	17	None	replace
52	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.getValues();  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.getValues();  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.getValues();	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.getEigenvectors();    	non-compiled	[CE]  ';'  expected	17	None	replace
53	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.getRawEigenvectors();  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.getRawEigenvectors();  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.getRawEigenvectors();	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.getEigenvectors();    	non-compiled	[CE]  ';'  expected	17	None	replace
54	[BUG]  [BUGGY]  decompose(secondary.length);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  decompose(secondary.length);  [BUGGY]      }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(secondary.length);	  decompose(squaredSecondary.length);    	non-compiled	[CE]  ';'  expected	11	None	replace
55	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[squaredSecondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[i];  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[squaredSecondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[i];  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[squaredSecondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[i];	      ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[secondary.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary    =    main[i];    	non-compiled	[CE]  ';'  expected	3	None	replace
56	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[quaredSecondary.length]);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[quaredSecondary.length]);  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[quaredSecondary.length]);	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[squaredSecondary.length]);    	non-compiled	[CE]  ';'  expected	13	None	replace
57	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[quaredSecondary.length]);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[quaredSecondary.length]);  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[quaredSecondary.length]);	      ArrayRealVector[]    realEigenvectors    =    squaredSecondary.toArray(new    double[squaredSecondary.length]);    	non-compiled	[CE]  ';'  expected	5	None	replace
58	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.getImagEigenvalues();  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.getImagEigenvalues();  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.getImagEigenvalues();	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.getEigenvectors();    	non-compiled	[CE]  ';'  expected	17	None	replace
59	[BUG]  [BUGGY]  if(this.imagEigenvalues  ==  squaredSecondary)  {  rehashTable();  }  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  if(this.imagEigenvalues  ==  squaredSecondary)  {  rehashTable();  }  [BUGGY]      }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.imagEigenvalues  ==  squaredSecondary)  {  rehashTable();  }	  rehashTable();    	non-compiled	[CE]  ';'  expected	14	None	replace
60	[BUG]  [BUGGY]  if(this.splitTolerance!=  squaredSecondary)  {  rehashTable();  }  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  if(this.splitTolerance!=  squaredSecondary)  {  rehashTable();  }  [BUGGY]      }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance!=  squaredSecondary)  {  rehashTable();  }	  rehashTable();    	non-compiled	[CE]  ';'  expected	14	None	replace
61	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(imagEigenvalues);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(imagEigenvalues);  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(imagEigenvalues);	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray();    	non-compiled	[CE]  ';'  expected	19	None	replace
62	[BUG]  [BUGGY]  decompose(quadSecondary,  squaredSecondary);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  decompose(quadSecondary,  squaredSecondary);  [BUGGY]      }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(quadSecondary,  squaredSecondary);	  decompose(quardSecondary);    	non-compiled	[CE]  ';'  expected	10	None	replace
63	[BUG]  [BUGGY]  decompose(quadSecondary,  i);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  decompose(quadSecondary,  i);  [BUGGY]      }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(quadSecondary,  i);	  decompose(quadSecondary);    	non-compiled	[CE]  ';'  expected	9	None	replace
64	[BUG]  [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[secondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[secondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[secondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[	      ArrayRealVector[]    eigenvectors    =    new    ArrayRealVector[secondary.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary[]    =    primary[i];    	non-compiled	[CE]  ';'  expected	12	None	replace
65	[BUG]  [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[squaredSecondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[squaredSecondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[squaredSecondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[	      ArrayRealVector[]    eigenvectors    =    new    ArrayRealVector[secondary.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary[]    =    primary[i];    	non-compiled	[CE]  ';'  expected	12	None	replace
66	[BUG]  [BUGGY]  if(this.imagEigenvalues  ==  squaredSecondary)  {  rehashCode();  }  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  if(this.imagEigenvalues  ==  squaredSecondary)  {  rehashCode();  }  [BUGGY]      }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.imagEigenvalues  ==  squaredSecondary)  {  rehashCode();  }	  rehashCode();    	non-compiled	[CE]  ';'  expected	16	None	replace
67	[BUG]  [BUGGY]  if(this.imagEigenvalues!=  squaredSecondary)  {  rehashCode();  }  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  if(this.imagEigenvalues!=  squaredSecondary)  {  rehashCode();  }  [BUGGY]      }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.imagEigenvalues!=  squaredSecondary)  {  rehashCode();  }	  rehashCode();    	non-compiled	[CE]  ';'  expected	16	None	replace
68	[BUG]  [BUGGY]  validate(squaredSecondary);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  validate(squaredSecondary);  [BUGGY]      }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	validate(squaredSecondary);	  decompose(squaredSecondary);    	non-compiled	[CE]  ';'  expected	7	None	replace
69	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[squaredSecondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[squaredSecondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[squaredSecondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[	      ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[secondary.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary    =    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	1	None	replace
70	[BUG]  [BUGGY]  if(this.splitTolerance!=  squaredSecondary.length)  {  reset();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  squaredSecondary.length);  }  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  if(this.splitTolerance!=  squaredSecondary.length)  {  reset();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  squaredSecondary.length);  }  [BUGGY]      }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance!=  squaredSecondary.length)  {  reset();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  squaredSecondary.length);  }	  reset();    	non-compiled	[CE]  ';'  expected	15	None	replace
71	[BUG]  [BUGGY]  if(this.splitTolerance!=  squaredSecondary.length)  {  reset();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  squaredSecondary.length);  this.splitTolerance  =  splitTolerance;  }  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  if(this.splitTolerance!=  squaredSecondary.length)  {  reset();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  squaredSecondary.length);  this.splitTolerance  =  splitTolerance;  }  [BUGGY]      }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance!=  squaredSecondary.length)  {  reset();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  squaredSecondary.length);  this.splitTolerance  =  splitTolerance;  }	  reset();    	non-compiled	[CE]  ';'  expected	15	None	replace
72	[BUG]  [BUGGY]  if(this.splitTolerance!=  squaredSecondary.length)  {  reset();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  squaredSecondary.length);  System.arraycopy(squaredSecondary,  0,  squaredSecondary  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  if(this.splitTolerance!=  squaredSecondary.length)  {  reset();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  squaredSecondary.length);  System.arraycopy(squaredSecondary,  0,  squaredSecondary  [BUGGY]      }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance!=  squaredSecondary.length)  {  reset();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  squaredSecondary.length);  System.arraycopy(squaredSecondary,  0,  squaredSecondary	  reset();    	non-compiled	[CE]  ';'  expected	15	None	replace
73	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[imagEigenvalues.size()  ]);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[imagEigenvalues.size()  ]);  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[imagEigenvalues.size()  ]);	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[squaredSecondary.size()    ]);    	non-compiled	[CE]  ';'  expected	18	None	replace
74	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[quaredSecondary.size()  ]);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[quaredSecondary.size()  ]);  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[quaredSecondary.size()  ]);	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[squaredSecondary.size()    ]);    	non-compiled	[CE]  ';'  expected	18	None	replace
75	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[0]);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[0]);  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[0]);	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray();    	non-compiled	[CE]  ';'  expected	19	None	replace
76	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[secondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[i];  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[secondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[i];  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[secondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[i];	      ArrayRealVector[]    eigenvectors    =    new    ArrayRealVector[secondary.length];    for(int    i    =    0;    i    <    squaredSecondary.length;    ++i)    {    final    double[]    secondary[]    =    primary[i];    	non-compiled	[CE]  ';'  expected	12	None	replace
77	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.imagEigenvalues;  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.imagEigenvalues;  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.imagEigenvalues;	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.getEigenvectors();    	non-compiled	[CE]  ';'  expected	17	None	replace
78	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[realEigenvectors.length]);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[realEigenvectors.length]);  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[realEigenvectors.length]);	      ArrayRealVector[]    realEigenvectors    =    squaredSecondary.toArray(new    double[squaredSecondary.length]);    	non-compiled	[CE]  ';'  expected	5	None	replace
79	[BUG]  [BUGGY]  this.splitTolerance  =  squaredSecondary.length;  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  this.splitTolerance  =  squaredSecondary.length;  [BUGGY]      }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	this.splitTolerance  =  squaredSecondary.length;	  reset();    	non-compiled	[CE]  ';'  expected	15	None	replace
80	[BUG]  [BUGGY]  this.splitTolerance  =  squaredSecondary.length  -  1;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  this.splitTolerance  =  squaredSecondary.length  -  1;  [BUGGY]      }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	this.splitTolerance  =  squaredSecondary.length  -  1;	  reset();    	non-compiled	[CE]  ';'  expected	15	None	replace
81	[BUG]  [BUGGY]  decompose(squaredSecondary.length  -  1);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  decompose(squaredSecondary.length  -  1);  [BUGGY]      }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(squaredSecondary.length  -  1);	  decompose(squaredSecondary.length);    	non-compiled	[CE]  ';'  expected	11	None	replace
82	[BUG]  [BUGGY]  decompose(squaredSecondary.length  +  1);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  decompose(squaredSecondary.length  +  1);  [BUGGY]      }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(squaredSecondary.length  +  1);	  decompose(squaredSecondary.length);    	non-compiled	[CE]  ';'  expected	11	None	replace
83	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[qdSecondary.length]);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[qdSecondary.length]);  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[qdSecondary.length]);	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[squaredSecondary.length]);    	non-compiled	[CE]  ';'  expected	13	None	replace
84	[BUG]  [BUGGY]  remove(squaredSecondary);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  remove(squaredSecondary);  [BUGGY]      }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	remove(squaredSecondary);	  decompose(squaredSecondary);    	non-compiled	[CE]  ';'  expected	7	None	replace
85	[BUG]  [BUGGY]  if(this.splitTolerance!=  splitTolerance)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  this.splitTolerance,  squaredSecondary,  this.splitTolerance);  }  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  if(this.splitTolerance!=  splitTolerance)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  this.splitTolerance,  squaredSecondary,  this.splitTolerance);  }  [BUGGY]      }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance!=  splitTolerance)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  this.splitTolerance,  squaredSecondary,  this.splitTolerance);  }	  rehashTable();    	non-compiled	[CE]  ';'  expected	14	None	replace
86	[BUG]  [BUGGY]  if(this.splitTolerance!=  splitTolerance)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  this.splitTolerance);  }  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  if(this.splitTolerance!=  splitTolerance)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  this.splitTolerance);  }  [BUGGY]      }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance!=  splitTolerance)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  0,  this.splitTolerance);  }	  rehashTable();    	non-compiled	[CE]  ';'  expected	14	None	replace
87	[BUG]  [BUGGY]  if(this.splitTolerance!=  splitTolerance)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  this.splitTolerance,  this.splitTolerance);  }  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  if(this.splitTolerance!=  splitTolerance)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  this.splitTolerance,  this.splitTolerance);  }  [BUGGY]      }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	if(this.splitTolerance!=  splitTolerance)  {  rehashTable();  }  else  {  System.arraycopy(squaredSecondary,  0,  squaredSecondary,  this.splitTolerance,  this.splitTolerance);  }	  rehashTable();    	non-compiled	[CE]  ';'  expected	14	None	replace
88	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[quadSecondary.length]);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[quadSecondary.length]);  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[quadSecondary.length]);	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[qMax]);    	non-compiled	[CE]  ';'  expected	20	None	replace
89	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[this.imagEigenvalues]);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[this.imagEigenvalues]);  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[this.imagEigenvalues]);	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[qMax]);    	non-compiled	[CE]  ';'  expected	20	None	replace
