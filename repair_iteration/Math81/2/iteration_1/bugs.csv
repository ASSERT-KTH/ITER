bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  this.main=  primary.clone();  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  [BUGGY]  this.main=  primary.clone();  [BUGGY]  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this.main=  primary.clone();	this.main=  main.clone();  	non-compiled	[CE]  ';'  expected	3	None	replace
2	[BUG]  [BUGGY]    [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  [BUGGY]    [BUGGY]  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	  	this.main=  main.clone();  	non-compiled	[CE]  ';'  expected	3	None	replace
3	[BUG]  [BUGGY]    this(new  double[]  {  main,  secondary,  splitTolerance  }  );  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  [BUGGY]    this(new  double[]  {  main,  secondary,  splitTolerance  }  );  [BUGGY]  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	    this(new  double[]  {  main,  secondary,  splitTolerance  }  );		non-compiled	[CE]  ';'  expected	4	None	add
4	[BUG]  [BUGGY]    super(new  double[]  {  main,  secondary,  splitTolerance  }  );  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  [BUGGY]    super(new  double[]  {  main,  secondary,  splitTolerance  }  );  [BUGGY]  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	    super(new  double[]  {  main,  secondary,  splitTolerance  }  );		non-compiled	[CE]  ';'  expected	4	None	add
5	[BUG]  [BUGGY]    super(new  Double[]  {  main,  secondary,  splitTolerance  }  );  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  [BUGGY]    super(new  Double[]  {  main,  secondary,  splitTolerance  }  );  [BUGGY]  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	    super(new  Double[]  {  main,  secondary,  splitTolerance  }  );		non-compiled	[CE]  ';'  expected	4	None	add
6	[BUG]  [BUGGY]    super(splitTolerance);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  [BUGGY]    super(splitTolerance);  [BUGGY]  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	    super(splitTolerance);		non-compiled	[CE]  ';'  expected	4	None	add
7	[BUG]  [BUGGY]    super();  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  [BUGGY]    super();  [BUGGY]  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	    super();		non-compiled	[CE]  ';'  expected	4	None	add
8	[BUG]  [BUGGY]  this.main=  secondary.clone();  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  [BUGGY]  this.main=  secondary.clone();  [BUGGY]  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this.main=  secondary.clone();	this.main=  main.clone();  	non-compiled	[CE]  ';'  expected	3	None	replace
9	[BUG]  [BUGGY]    super(new  double[]  {  main  },  secondary,  splitTolerance  }  );  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  [BUGGY]    super(new  double[]  {  main  },  secondary,  splitTolerance  }  );  [BUGGY]  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	    super(new  double[]  {  main  },  secondary,  splitTolerance  }  );		non-compiled	[CE]  ';'  expected	4	None	add
10	[BUG]  [BUGGY]    super(new  double[]  {  main  }  );  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  [BUGGY]    super(new  double[]  {  main  }  );  [BUGGY]  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	    super(new  double[]  {  main  }  );		non-compiled	[CE]  ';'  expected	4	None	add
11	[BUG]  [BUGGY]    this.imagEigenvalues  =  realEigenvalues.clone();  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  [BUGGY]    this.imagEigenvalues  =  realEigenvalues.clone();  [BUGGY]  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	    this.imagEigenvalues  =  realEigenvalues.clone();		non-compiled	[CE]  ';'  expected	4	None	add
12	[BUG]  [BUGGY]    super(new  ArrayRealVector[]  {  }  );  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  [BUGGY]    super(new  ArrayRealVector[]  {  }  );  [BUGGY]  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	    super(new  ArrayRealVector[]  {  }  );		non-compiled	[CE]  ';'  expected	4	None	add
13	[BUG]  [BUGGY]    this.imagEigenvalues  =  realEigenvalues.get(main);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  [BUGGY]    this.imagEigenvalues  =  realEigenvalues.get(main);  [BUGGY]  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	    this.imagEigenvalues  =  realEigenvalues.get(main);		non-compiled	[CE]  ';'  expected	4	None	add
14	[BUG]  [BUGGY]    super(new  ArrayRealVector[0],  new  double[]  {  1  }  );  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException  [CONTEXT]  public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  [BUGGY]    super(new  ArrayRealVector[0],  new  double[]  {  1  }  );  [BUGGY]  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	    super(new  ArrayRealVector[0],  new  double[]  {  1  }  );		non-compiled	[CE]  ';'  expected	4	None	add
