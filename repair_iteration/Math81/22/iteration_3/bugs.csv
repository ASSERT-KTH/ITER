bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(a1  ==  cnst1)  {  break;  }  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if(a1  ==  cnst1)  {  break;  }  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if(a1  ==  cnst1)  {  break;  }	  if(a1    <    cnst1)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
2	[BUG]  [BUGGY]  if(a1  >=  cnst1)  {  break;  }  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if(a1  >=  cnst1)  {  break;  }  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if(a1  >=  cnst1)  {  break;  }	  if(a1    <    cnst1)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
3	[BUG]  [BUGGY]  if  (a1  <  cnst3  ||  cnst3  >  a2)  {  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a1  <  cnst3  ||  cnst3  >  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a1  <  cnst3  ||  cnst3  >  a2)  {	  if    (a1    <    cnst3    ||    cnst3    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
4	[BUG]  [BUGGY]  if  (a1  <  cnst3  &&  cnst3  <  a2)  {  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a1  <  cnst3  &&  cnst3  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a1  <  cnst3  &&  cnst3  <  a2)  {	  if    (a1    <    cnst3    ||    cnst3    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
5	[BUG]  [BUGGY]  if  (a1  <  cnst3)  {  [CE]  <identifier>  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a1  <  cnst3)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a1  <  cnst3)  {	  if    (a1    <    cnst3    ||    cnst3    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
6	[BUG]  [BUGGY]  if  (a2  <  cnst3  ||  b1  <  a2  ||  cnst3  <  a2)  {  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  cnst3  ||  b1  <  a2  ||  cnst3  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  cnst3  ||  b1  <  a2  ||  cnst3  <  a2)  {	  if    (b1    <    a2    ||    cnst3    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
7	[BUG]  [BUGGY]  if  (b1  <  a2  ||  cnst3  >  a2)  {  [CE]  <identifier>  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (b1  <  a2  ||  cnst3  >  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (b1  <  a2  ||  cnst3  >  a2)  {	  if    (b1    <    a2    ||    cnst3    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
8	[BUG]  [BUGGY]  if  (a2  <  a1  ||  cnst3  >  a2)  {  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  a1  ||  cnst3  >  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  a1  ||  cnst3  >  a2)  {	  if    (a2    <    a1    ||    cnst3    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
9	[BUG]  [BUGGY]  if  (a2  <  a1  ||  cnst3  >=  a2)  {  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  a1  ||  cnst3  >=  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  a1  ||  cnst3  >=  a2)  {	  if    (a2    <    a1    ||    cnst3    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
10	[BUG]  [BUGGY]  if  (a2  <  cnst3  ||  100  *  Math.max(a2,  b1)  <  a2  ||  cnst3  >  a2)  {  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  cnst3  ||  100  *  Math.max(a2,  b1)  <  a2  ||  cnst3  >  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  cnst3  ||  100  *  Math.max(a2,  b1)  <  a2  ||  cnst3  >  a2)  {	  if    (a2    <    cnst3    ||    100    *    Math.max(a2,    b1)    <    a2    ||    cnst3    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
11	[BUG]  [BUGGY]  if  (a2  <  cnst3  ||  100  *  Math.max(a2,  b1)  <  a2  ||  cnst3  >=  a2)  {  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  cnst3  ||  100  *  Math.max(a2,  b1)  <  a2  ||  cnst3  >=  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  cnst3  ||  100  *  Math.max(a2,  b1)  <  a2  ||  cnst3  >=  a2)  {	  if    (a2    <    cnst3    ||    100    *    Math.max(a2,    b1)    <    a2    ||    cnst3    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
12	[BUG]  [BUGGY]  if  (a2  <  cnst3  ||  100  *  Math.max(a2,  b1)>  a2  ||  cnst3  <  a2)  {  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  cnst3  ||  100  *  Math.max(a2,  b1)>  a2  ||  cnst3  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  cnst3  ||  100  *  Math.max(a2,  b1)>  a2  ||  cnst3  <  a2)  {	  if    (a2    <    cnst3    ||    100    *    Math.max(a2,    b1)    <    a2    ||    cnst3    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
13	[BUG]  [BUGGY]  if  (a2  <  cnst1  ||  100  *  Math.min(a2,  b1)  <  a2  ||  cnst1  <  a2)  {  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  cnst1  ||  100  *  Math.min(a2,  b1)  <  a2  ||  cnst1  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  cnst1  ||  100  *  Math.min(a2,  b1)  <  a2  ||  cnst1  <  a2)  {	  if    (a2    <    cnst1    ||    100    *    Math.max(a2,    b1)    <    a2    ||    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
14	[BUG]  [BUGGY]  if  (a2  <  cnst1  ||  100  *  Math.max(a2,  b1)  <  a2  ||  cnst3  <  a2)  {  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  cnst1  ||  100  *  Math.max(a2,  b1)  <  a2  ||  cnst3  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  cnst1  ||  100  *  Math.max(a2,  b1)  <  a2  ||  cnst3  <  a2)  {	  if    (a2    <    cnst1    ||    100    *    Math.max(a2,    b1)    <    a2    ||    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
15	[BUG]  [BUGGY]  if  (a2  <  cnst1  ||  100  *  Math.max(a2,  b2)  <  a2  ||  cnst1  <  a2)  {  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  cnst1  ||  100  *  Math.max(a2,  b2)  <  a2  ||  cnst1  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  cnst1  ||  100  *  Math.max(a2,  b2)  <  a2  ||  cnst1  <  a2)  {	  if    (a2    <    cnst1    ||    100    *    Math.max(a2,    b1)    <    a2    ||    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
16	[BUG]  [BUGGY]  if  (100  *  Math.max(a2,  cnst1)  <  a2  ||  cnst3  >  a2)  {  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (100  *  Math.max(a2,  cnst1)  <  a2  ||  cnst3  >  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (100  *  Math.max(a2,  cnst1)  <  a2  ||  cnst3  >  a2)  {	  if    (100    *    Math.max(a2,    cnst1)    <    a2    ||    cnst3    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
17	[BUG]  [BUGGY]  if  (100  *  Math.max(a2,  cnst3)  <  a2  ||  cnst3  >  a2)  {  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (100  *  Math.max(a2,  cnst3)  <  a2  ||  cnst3  >  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (100  *  Math.max(a2,  cnst3)  <  a2  ||  cnst3  >  a2)  {	  if    (100    *    Math.max(a2,    cnst1)    <    a2    ||    cnst3    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
18	[BUG]  [BUGGY]  if  (a2  <  cnst1)  {  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  cnst1)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  cnst1)  {	  if    (100    *    Math.max(a2,    cnst1)    <    a2    ||    cnst3    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
19	[BUG]  [BUGGY]  cnst1  =  Math.max(b1,  cnst1);  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  cnst1  =  Math.max(b1,  cnst1);  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	cnst1  =  Math.max(b1,  cnst1);	  cnst1    =    Math.max(cnst1,    b1);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
20	[BUG]  [BUGGY]  cnst1  =  Math.max(b2,  cnst1);  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  cnst1  =  Math.max(b2,  cnst1);  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	cnst1  =  Math.max(b2,  cnst1);	  cnst1    =    Math.max(cnst1,    b1);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
21	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.min(b1,  a2)||  cnst1  <  a2)  {  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.min(b1,  a2)||  cnst1  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.min(b1,  a2)||  cnst1  <  a2)  {	  if    (a2    <    100    *    Math.max(b1,    a2)||    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
22	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(a2,  a2)||  cnst1  <  a2)  {  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(a2,  a2)||  cnst1  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(a2,  a2)||  cnst1  <  a2)  {	  if    (a2    <    100    *    Math.max(b1,    a2)||    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
23	[BUG]  [BUGGY]  cnst1  =  Math.max(b1,  cnst2);  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  cnst1  =  Math.max(b1,  cnst2);  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	cnst1  =  Math.max(b1,  cnst2);	  cnst1    =    Math.max(cnst1,    b2);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
24	[BUG]  [BUGGY]  cnst1  =  b2  *  a2;  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  cnst1  =  b2  *  a2;  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	cnst1  =  b2  *  a2;	  cnst1    =    a2    *    b2;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
25	[BUG]  [BUGGY]  cnst1  =  a2  *  cnst3;  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  cnst1  =  a2  *  cnst3;  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	cnst1  =  a2  *  cnst3;	  cnst1    =    a2    *    b2;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
26	[BUG]  [BUGGY]  cnst1  =  a2  *  b2  +  1;  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  cnst1  =  a2  *  b2  +  1;  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	cnst1  =  a2  *  b2  +  1;	  cnst1    =    a2    *    b2;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
27	[BUG]  [BUGGY]  if(a2  ==  cnst1)  {  break;  }  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if(a2  ==  cnst1)  {  break;  }  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if(a2  ==  cnst1)  {  break;  }	  if(a2    <    cnst1)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
28	[BUG]  [BUGGY]  if(a2  >=  cnst1)  {  break;  }  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if(a2  >=  cnst1)  {  break;  }  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if(a2  >=  cnst1)  {  break;  }	  if(a2    <    cnst1)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
29	[BUG]  [BUGGY]  cnst1  =  b2  +  a2  *  deflated;  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  cnst1  =  b2  +  a2  *  deflated;  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	cnst1  =  b2  +  a2  *  deflated;	  cnst1    =    a2    +    b2    *    deflated;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
30	[BUG]  [BUGGY]  cnst1  =  a2  +  b2  *  2;  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  cnst1  =  a2  +  b2  *  2;  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	cnst1  =  a2  +  b2  *  2;	  cnst1    =    a2    +    b2    *    deflated;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
31	[BUG]  [BUGGY]  cnst1  =  a2  *  b2  *  deflated;  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  cnst1  =  a2  *  b2  *  deflated;  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	cnst1  =  a2  *  b2  *  deflated;	  cnst1    =    a2    +    b2    *    deflated;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
32	[BUG]  [BUGGY]  if  (a1  <  a2  ||  cnst3  >=  a2)  {  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a1  <  a2  ||  cnst3  >=  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a1  <  a2  ||  cnst3  >=  a2)  {	  if    (a1    <    a2    ||    cnst3    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
33	[BUG]  [BUGGY]  if  (a2  <  10  *  Math.max(a2,  cnst1)  <  a2  ||  cnst3  >  a2)  {  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  10  *  Math.max(a2,  cnst1)  <  a2  ||  cnst3  >  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  10  *  Math.max(a2,  cnst1)  <  a2  ||  cnst3  >  a2)  {	  if    (a2    <    10    *    Math.max(a2,    b1)    <    a2    ||    cnst3    >    a2)    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
34	[BUG]  [BUGGY]  if  (a2  <  10  *  Math.max(a2,  cnst3)  <  a2  ||  cnst3  >  a2)  {  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  10  *  Math.max(a2,  cnst3)  <  a2  ||  cnst3  >  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  10  *  Math.max(a2,  cnst3)  <  a2  ||  cnst3  >  a2)  {	  if    (a2    <    10    *    Math.max(a2,    b1)    <    a2    ||    cnst3    >    a2)    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
35	[BUG]  [BUGGY]  if  (a2  <  10  *  Math.max(a2,  b1)&&  cnst3  >  a2)  {  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  10  *  Math.max(a2,  b1)&&  cnst3  >  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  10  *  Math.max(a2,  b1)&&  cnst3  >  a2)  {	  if    (a2    <    10    *    Math.max(a2,    b1)    <    a2    ||    cnst3    >    a2)    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
36	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(a2,  cnst1)  <  a2  ||  cnst3  >  a2)  {  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(a2,  cnst1)  <  a2  ||  cnst3  >  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(a2,  cnst1)  <  a2  ||  cnst3  >  a2)  {	  if    (a2    <    100    *    Math.max(a2,    b1)    <    a2    ||    cnst3    >    a2)    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
37	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(a2,  cnst3)  <  a2  ||  cnst3  >  a2)  {  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(a2,  cnst3)  <  a2  ||  cnst3  >  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(a2,  cnst3)  <  a2  ||  cnst3  >  a2)  {	  if    (a2    <    100    *    Math.max(a2,    b1)    <    a2    ||    cnst3    >    a2)    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
38	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(a2,  b1)&&  cnst3  >  a2)  {  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(a2,  b1)&&  cnst3  >  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(a2,  b1)&&  cnst3  >  a2)  {	  if    (a2    <    100    *    Math.max(a2,    b1)    <    a2    ||    cnst3    >    a2)    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
39	[BUG]  [BUGGY]  char  cnst1  =  Math.min(a2.length,  b2);  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  char  cnst1  =  Math.min(a2.length,  b2);  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	char  cnst1  =  Math.min(a2.length,  b2);	  int    cnst1    =    Math.min(a2.length,    b2);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
40	[BUG]  [BUGGY]  int  cnst1  =  Math.min(b2,  a2.length);  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  int  cnst1  =  Math.min(b2,  a2.length);  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	int  cnst1  =  Math.min(b2,  a2.length);	  int    cnst1    =    Math.min(a2.length,    b2);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
41	[BUG]  [BUGGY]  int  cnst1  =  Math.max(b1,  a2);  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  int  cnst1  =  Math.max(b1,  a2);  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	int  cnst1  =  Math.max(b1,  a2);	  int    cnst1    =    Math.min(a2.length,    b2);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
42	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(a2,  cnst3)  <  a2  ||  cnst1  <  a2)  {  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(a2,  cnst3)  <  a2  ||  cnst1  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(a2,  cnst3)  <  a2  ||  cnst1  <  a2)  {	  if    (a2    <    100    *    Math.max(a2,    b1)    <    a2    ||    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
43	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(a2,  cnst1)  <  a2  ||  cnst1  <  a2)  {  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(a2,  cnst1)  <  a2  ||  cnst1  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(a2,  cnst1)  <  a2  ||  cnst1  <  a2)  {	  if    (a2    <    100    *    Math.max(a2,    b1)    <    a2    ||    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
44	[BUG]  [BUGGY]  if  (a2  <  cnst1  ||  100  *  Math.max(a2,  b1)  <  a2  ||  cnst1  >  a2)  {  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  cnst1  ||  100  *  Math.max(a2,  b1)  <  a2  ||  cnst1  >  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  cnst1  ||  100  *  Math.max(a2,  b1)  <  a2  ||  cnst1  >  a2)  {	  if    (100    *    Math.max(a2,    b1)    <    a2    ||    cnst1    >    a2)    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
45	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(a2,  b1)||  cnst1  >  a2)  {  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(a2,  b1)||  cnst1  >  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(a2,  b1)||  cnst1  >  a2)  {	  if    (100    *    Math.max(a2,    b1)    <    a2    ||    cnst1    >    a2)    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
46	[BUG]  [BUGGY]  if  (100  *  Math.max(a2,  cnst1)  <  a2  ||  cnst1  >  a2)  {  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (100  *  Math.max(a2,  cnst1)  <  a2  ||  cnst1  >  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (100  *  Math.max(a2,  cnst1)  <  a2  ||  cnst1  >  a2)  {	  if    (100    *    Math.max(a2,    b1)    <    a2    ||    cnst1    >    a2)    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
47	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(cnst1,  a2)  <  cnst3  ||  cnst1  <  a2)  {  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(cnst1,  a2)  <  cnst3  ||  cnst1  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(cnst1,  a2)  <  cnst3  ||  cnst1  <  a2)  {	  if    (a2    <    100    *    Math.max(b1,    a2)    <    cnst3    ||    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	54	None	replace
48	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(b1,  a2)  <  cnst3  &&  cnst1  <  a2)  {  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(b1,  a2)  <  cnst3  &&  cnst1  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(b1,  a2)  <  cnst3  &&  cnst1  <  a2)  {	  if    (a2    <    100    *    Math.max(b1,    a2)    <    cnst3    ||    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	54	None	replace
49	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(a2,  cnst3)  <  cnst3  ||  cnst1  <  a2)  {  [CE]  <identifier>  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(a2,  cnst3)  <  cnst3  ||  cnst1  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(a2,  cnst3)  <  cnst3  ||  cnst1  <  a2)  {	  if    (a2    <    100    *    Math.max(b1,    a2)    <    cnst3    ||    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	54	None	replace
50	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.min(b1,  a2)  <  cnst3  ||  cnst1  <  a2)  {  [CE]  <identifier>  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.min(b1,  a2)  <  cnst3  ||  cnst1  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.min(b1,  a2)  <  cnst3  ||  cnst1  <  a2)  {	  if    (a2    <    100    *    Math.max(b1,    a2)    <    cnst3    ||    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	54	None	replace
51	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.min(b1,  b2)||  cnst3  <  a2)  {  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.min(b1,  b2)||  cnst3  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.min(b1,  b2)||  cnst3  <  a2)  {	  if    (a2    <    100    *    Math.min(b1,    b2)||    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
52	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.min(b1,  b2)&&  cnst1  <  a2)  {  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.min(b1,  b2)&&  cnst1  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.min(b1,  b2)&&  cnst1  <  a2)  {	  if    (a2    <    100    *    Math.min(b1,    b2)||    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
53	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.min(a2,  b1)&&  cnst3  <  a2)  {  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.min(a2,  b1)&&  cnst3  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.min(a2,  b1)&&  cnst3  <  a2)  {	  if    (a2    <    100    *    Math.min(a2,    b1)&&    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
54	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.min(a2,  cnst3)&&  cnst1  <  a2)  {  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.min(a2,  cnst3)&&  cnst1  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.min(a2,  cnst3)&&  cnst1  <  a2)  {	  if    (a2    <    100    *    Math.min(a2,    b1)&&    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
55	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.min(a2,  b2)&&  cnst1  <  a2)  {  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.min(a2,  b2)&&  cnst1  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.min(a2,  b2)&&  cnst1  <  a2)  {	  if    (a2    <    100    *    Math.min(a2,    b1)&&    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
56	[BUG]  [BUGGY]  cnst1  =  Math.min(a2,  b1);  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  cnst1  =  Math.min(a2,  b1);  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	cnst1  =  Math.min(a2,  b1);	  cnst1    =    Math.min(b1,    a2);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
57	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(b1,  a2)  <  cnst3  ||  cnst3  <  a2)  {  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(b1,  a2)  <  cnst3  ||  cnst3  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(b1,  a2)  <  cnst3  ||  cnst3  <  a2)  {	  if    (100    *    Math.max(b1,    a2)    <    a2    ||    cnst3    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
58	[BUG]  [BUGGY]  if  (100  *  Math.max(a2,  a1)  <  a2  ||  cnst3  <  a2)  {  [CE]  <identifier>  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (100  *  Math.max(a2,  a1)  <  a2  ||  cnst3  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (100  *  Math.max(a2,  a1)  <  a2  ||  cnst3  <  a2)  {	  if    (100    *    Math.max(b1,    a2)    <    a2    ||    cnst3    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
59	[BUG]  [BUGGY]  int  cnst1  =  Math.min(b2,  a2);  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  int  cnst1  =  Math.min(b2,  a2);  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	int  cnst1  =  Math.min(b2,  a2);	  int    cnst1    =    Math.min(b1,    a2);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
60	[BUG]  [BUGGY]  char  cnst1  =  Math.min(b1,  a2);  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  char  cnst1  =  Math.min(b1,  a2);  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	char  cnst1  =  Math.min(b1,  a2);	  int    cnst1    =    Math.min(b1,    a2);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
61	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(a2,  cnst1)||  cnst3  <  a2)  {  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(a2,  cnst1)||  cnst3  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(a2,  cnst1)||  cnst3  <  a2)  {	  if    (a2    <    100    *    Math.max(a2,    b1)||    cnst3    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
62	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(a2,  b1)||  cnst3  >  a2)  {  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(a2,  b1)||  cnst3  >  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(a2,  b1)||  cnst3  >  a2)  {	  if    (a2    <    100    *    Math.max(a2,    b1)||    cnst3    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
63	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(a2,  cnst1)  <  cnst1  ||  cnst1  <  a2)  {  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(a2,  cnst1)  <  cnst1  ||  cnst1  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(a2,  cnst1)  <  cnst1  ||  cnst1  <  a2)  {	  if    (a2    <    100    *    Math.max(b1,    a2)    <    cnst1    ||    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
64	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(cnst1,  a2)  <  cnst1  ||  cnst1  <  a2)  {  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(cnst1,  a2)  <  cnst1  ||  cnst1  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(cnst1,  a2)  <  cnst1  ||  cnst1  <  a2)  {	  if    (a2    <    100    *    Math.max(b1,    a2)    <    cnst1    ||    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
65	[BUG]  [BUGGY]  if  (a2  <  cnst3  &&  b1  <  a2)  {  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  cnst3  &&  b1  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  cnst3  &&  b1  <  a2)  {	  if    (a2    <    cnst3    ||    b1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
66	[BUG]  [BUGGY]  if  (a2  <  cnst3  ||  b1  >  a2)  {  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  cnst3  ||  b1  >  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  cnst3  ||  b1  >  a2)  {	  if    (a2    <    cnst3    ||    b1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
67	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(b1,  a2)  <  a2  ||  cnst1  >  a2)  {  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(b1,  a2)  <  a2  ||  cnst1  >  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(b1,  a2)  <  a2  ||  cnst1  >  a2)  {	  if    (a2    <    100    *    Math.max(b1,    a2)    <    a2    ||    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
68	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.min(b1,  a2)  <  a2  ||  cnst1  <  a2)  {  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.min(b1,  a2)  <  a2  ||  cnst1  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.min(b1,  a2)  <  a2  ||  cnst1  <  a2)  {	  if    (a2    <    100    *    Math.max(b1,    a2)    <    a2    ||    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
69	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.min(a2,  b1)||  cnst3  <  a2)  {  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.min(a2,  b1)||  cnst3  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.min(a2,  b1)||  cnst3  <  a2)  {	  if    (a2    <    100    *    Math.min(a2,    b1)||    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
70	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.min(a2,  cnst3)||  cnst1  <  a2)  {  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.min(a2,  cnst3)||  cnst1  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.min(a2,  cnst3)||  cnst1  <  a2)  {	  if    (a2    <    100    *    Math.min(a2,    b1)||    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
71	[BUG]  [BUGGY]  if(b1  <  a2  ||  cnst1  <  a2)  {  break;  }  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if(b1  <  a2  ||  cnst1  <  a2)  {  break;  }  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if(b1  <  a2  ||  cnst1  <  a2)  {  break;  }	  if(b1    <    a2)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
72	[BUG]  [BUGGY]  if(b2  <  a2)  {  break;  }  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if(b2  <  a2)  {  break;  }  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if(b2  <  a2)  {  break;  }	  if(b1    <    a2)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
73	[BUG]  [BUGGY]  if(b1  ==  a2)  {  break;  }  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if(b1  ==  a2)  {  break;  }  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if(b1  ==  a2)  {  break;  }	  if(b1    <    a2)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
74	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(a2,  cnst3)||  cnst1  <  a2)  {  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(a2,  cnst3)||  cnst1  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(a2,  cnst3)||  cnst1  <  a2)  {	  if    (a2    <    100    *    Math.max(a2,    cnst1)||    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	67	None	replace
75	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.min(a2,  cnst1)||  cnst1  <  a2)  {  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.min(a2,  cnst1)||  cnst1  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.min(a2,  cnst1)||  cnst1  <  a2)  {	  if    (a2    <    100    *    Math.max(a2,    cnst1)||    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	67	None	replace
76	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(a2,  cnst3)&&  cnst1  <  a2)  {  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(a2,  cnst3)&&  cnst1  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(a2,  cnst3)&&  cnst1  <  a2)  {	  if    (a2    <    100    *    Math.max(a2,    b1)&&    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
77	[BUG]  [BUGGY]  char  cnst1  =  Math.max(b1.length,  a2);  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  char  cnst1  =  Math.max(b1.length,  a2);  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	char  cnst1  =  Math.max(b1.length,  a2);	  int    cnst1    =    Math.max(b1.length,    a2);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
78	[BUG]  [BUGGY]  if  (a1  <  a2  ||  cnst1  >  a2)  {  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a1  <  a2  ||  cnst1  >  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a1  <  a2  ||  cnst1  >  a2)  {	  if    (a1    <    a2    ||    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
79	[BUG]  [BUGGY]  String  cnst1  =  Math.min(b2.length,  a2);  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  String  cnst1  =  Math.min(b2.length,  a2);  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	String  cnst1  =  Math.min(b2.length,  a2);	  char    cnst1    =    Math.min(b2.length,    a2);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
80	[BUG]  [BUGGY]  char  cnst1  =  Math.min(b1.length,  a2);  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  char  cnst1  =  Math.min(b1.length,  a2);  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	char  cnst1  =  Math.min(b1.length,  a2);	  char    cnst1    =    Math.min(b2.length,    a2);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
81	[BUG]  [BUGGY]  Char  cnst1  =  Math.min(b2.length,  a2);  [CE]  <identifier>  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  Char  cnst1  =  Math.min(b2.length,  a2);  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	Char  cnst1  =  Math.min(b2.length,  a2);	  char    cnst1    =    Math.min(b2.length,    a2);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
82	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(a2,  b1)>  a2  ||  cnst1  <  a2)  {  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(a2,  b1)>  a2  ||  cnst1  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(a2,  b1)>  a2  ||  cnst1  <  a2)  {	  if    (100    *    Math.max(a2,    b1)>    a2    ||    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	55	None	replace
83	[BUG]  [BUGGY]  if  (a2  <  cnst1  ||  100  *  Math.max(a2,  b1)>  a2  ||  cnst1  <  a2)  {  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  cnst1  ||  100  *  Math.max(a2,  b1)>  a2  ||  cnst1  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  cnst1  ||  100  *  Math.max(a2,  b1)>  a2  ||  cnst1  <  a2)  {	  if    (100    *    Math.max(a2,    b1)>    a2    ||    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	55	None	replace
84	[BUG]  [BUGGY]  if  (100  *  Math.max(a2,  cnst3)>  a2  ||  cnst1  <  a2)  {  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (100  *  Math.max(a2,  cnst3)>  a2  ||  cnst1  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (100  *  Math.max(a2,  cnst3)>  a2  ||  cnst1  <  a2)  {	  if    (100    *    Math.max(a2,    b1)>    a2    ||    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	55	None	replace
85	[BUG]  [BUGGY]  if  (100  *  Math.max(a2,  b1)>  a2  ||  cnst3  <  a2)  {  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (100  *  Math.max(a2,  b1)>  a2  ||  cnst3  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (100  *  Math.max(a2,  b1)>  a2  ||  cnst3  <  a2)  {	  if    (100    *    Math.max(a2,    b1)>    a2    ||    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	55	None	replace
86	[BUG]  [BUGGY]  cnst1  =  a2  +  cnst4;  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  cnst1  =  a2  +  cnst4;  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	cnst1  =  a2  +  cnst4;	  cnst1    =    a2    +    cnst3;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
87	[BUG]  [BUGGY]  cnst1  =  Math.min(b1,  cnst2);  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  cnst1  =  Math.min(b1,  cnst2);  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	cnst1  =  Math.min(b1,  cnst2);	  cnst1    =    Math.min(cnst1,    b2);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
88	[BUG]  [BUGGY]  cnst1  =  Math.min(b2,  cnst1);  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  cnst1  =  Math.min(b2,  cnst1);  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	cnst1  =  Math.min(b2,  cnst1);	  cnst1    =    Math.min(cnst1,    b2);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
89	[BUG]  [BUGGY]  cnst1  =  Math.min(b1,  cnst1);  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  cnst1  =  Math.min(b1,  cnst1);  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	cnst1  =  Math.min(b1,  cnst1);	  cnst1    =    Math.min(cnst1,    b2);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
90	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(a2,  cnst1)&&  cnst3  <  a2)  {  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(a2,  cnst1)&&  cnst3  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(a2,  cnst1)&&  cnst3  <  a2)  {	  if    (a2    <    100    *    Math.max(a2,    cnst1)    <    a2    ||    cnst3    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	70	None	replace
91	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.min(a2,  cnst1)  <  a2  ||  cnst3  <  a2)  {  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.min(a2,  cnst1)  <  a2  ||  cnst3  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.min(a2,  cnst1)  <  a2  ||  cnst3  <  a2)  {	  if    (a2    <    100    *    Math.max(a2,    cnst1)    <    a2    ||    cnst3    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	70	None	replace
92	[BUG]  [BUGGY]  cnst1  =  Math.max(a2,  cnst1);  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  cnst1  =  Math.max(a2,  cnst1);  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	cnst1  =  Math.max(a2,  cnst1);	  cnst1    =    Math.max(cnst1,    a2);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
93	[BUG]  [BUGGY]  int  cnst1  =  Math.min(b2.length,  a1);  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  int  cnst1  =  Math.min(b2.length,  a1);  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	int  cnst1  =  Math.min(b2.length,  a1);	  int    cnst1    =    Math.min(b1.length,    a2);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
94	[BUG]  [BUGGY]  if(a2  ==  cnst3)  {  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if(a2  ==  cnst3)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if(a2  ==  cnst3)  {	  if    (a2    <    cnst3)    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
95	[BUG]  [BUGGY]  if  (100  *  Math.min(a2,  cnst3)  <  a2  ||  cnst1  <  a2)  {  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (100  *  Math.min(a2,  cnst3)  <  a2  ||  cnst1  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (100  *  Math.min(a2,  cnst3)  <  a2  ||  cnst1  <  a2)  {	  if    (100    *    Math.max(a2,    cnst3)    <    a2    ||    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	68	None	replace
96	[BUG]  [BUGGY]  if  (100  *  Math.max(a2,  cnst3)  <  a2  ||  b2  <  a2)  {  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (100  *  Math.max(a2,  cnst3)  <  a2  ||  b2  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (100  *  Math.max(a2,  cnst3)  <  a2  ||  b2  <  a2)  {	  if    (100    *    Math.max(a2,    cnst3)    <    a2    ||    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	68	None	replace
97	[BUG]  [BUGGY]  if(a2  ==  cnst3)  {  break;  }  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if(a2  ==  cnst3)  {  break;  }  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if(a2  ==  cnst3)  {  break;  }	  if(a2    >=    cnst3)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
98	[BUG]  [BUGGY]  if(a2!=  cnst3)  {  break;  }  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if(a2!=  cnst3)  {  break;  }  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if(a2!=  cnst3)  {  break;  }	  if(a2    >=    cnst3)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
99	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(b1,  a2)||  cnst3  >  a2)  {  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(b1,  a2)||  cnst3  >  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(b1,  a2)||  cnst3  >  a2)  {	  if    (a2    <    100    *    Math.max(b1,    a2)||    cnst3    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
100	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.min(b1,  a2)||  cnst3  <  a2)  {  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.min(b1,  a2)||  cnst3  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.min(b1,  a2)||  cnst3  <  a2)  {	  if    (a2    <    100    *    Math.max(b1,    a2)||    cnst3    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
101	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(a2,  a2)||  cnst3  <  a2)  {  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(a2,  a2)||  cnst3  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(a2,  a2)||  cnst3  <  a2)  {	  if    (a2    <    100    *    Math.max(b1,    a2)||    cnst3    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
102	[BUG]  [BUGGY]  cnst1  =  Math.min(a2,  cnst1);  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  cnst1  =  Math.min(a2,  cnst1);  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	cnst1  =  Math.min(a2,  cnst1);	  cnst1    =    Math.min(cnst1,    a2);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
103	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.min(b1,  b2)  <  a2  ||  cnst1  <  a2)  {  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.min(b1,  b2)  <  a2  ||  cnst1  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.min(b1,  b2)  <  a2  ||  cnst1  <  a2)  {	  if    (a2    <    100    *    Math.max(b1,    b2)    <    a2    ||    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
104	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(a1,  b2)  <  a2  ||  cnst1  <  a2)  {  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(a1,  b2)  <  a2  ||  cnst1  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(a1,  b2)  <  a2  ||  cnst1  <  a2)  {	  if    (a2    <    100    *    Math.max(b1,    b2)    <    a2    ||    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
105	[BUG]  [BUGGY]  if  (a2  <  cnst3  ||  cnst3  >  a2)  {  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  cnst3  ||  cnst3  >  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  cnst3  ||  cnst3  >  a2)  {	  if    (a1    <    a2    ||    cnst3    >    a2)    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
106	[BUG]  [BUGGY]  if  (a2  <  cnst3  ||  cnst3  >  a1)  {  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  cnst3  ||  cnst3  >  a1)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  cnst3  ||  cnst3  >  a1)  {	  if    (a1    <    a2    ||    cnst3    >    a2)    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
107	[BUG]  [BUGGY]  if  (a2  <  cnst1  &&  b1  <  a2)  {  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  cnst1  &&  b1  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  cnst1  &&  b1  <  a2)  {	  if    (a2    <    cnst1    ||    b1    <    a2)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
108	[BUG]  [BUGGY]  if  (a2  <  cnst1  ||  b1  >  a2)  {  [CE]  illegal  start  of  expression  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  cnst1  ||  b1  >  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  cnst1  ||  b1  >  a2)  {	  if    (a2    <    cnst1    ||    b1    <    a2)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
109	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(a2,  cnst1)  <  a2  ||  cnst1  >  a2)  {  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(a2,  cnst1)  <  a2  ||  cnst1  >  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(a2,  cnst1)  <  a2  ||  cnst1  >  a2)  {	  if    (a2    <    100    *    Math.max(a2,    b1)    <    a2    ||    cnst1    >    a2)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
110	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(a2,  b1)&&  cnst1  >  a2)  {  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(a2,  b1)&&  cnst1  >  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(a2,  b1)&&  cnst1  >  a2)  {	  if    (a2    <    100    *    Math.max(a2,    b1)    <    a2    ||    cnst1    >    a2)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
111	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(a2,  cnst3)  <  a2  ||  cnst1  >  a2)  {  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(a2,  cnst3)  <  a2  ||  cnst1  >  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(a2,  cnst3)  <  a2  ||  cnst1  >  a2)  {	  if    (a2    <    100    *    Math.max(a2,    b1)    <    a2    ||    cnst1    >    a2)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
112	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(b1,  a2)  <  a2  ||  cnst3  >  a2)  {  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(b1,  a2)  <  a2  ||  cnst3  >  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(b1,  a2)  <  a2  ||  cnst3  >  a2)  {	  if    (a2    <    100    *    Math.max(b1,    a2)    <    a2    ||    cnst3    <    a2)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
113	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(b1,  a2)  <  a2  ||  cnst3  >=  a2)  {  [CE]  illegal  start  of  expression  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(b1,  a2)  <  a2  ||  cnst3  >=  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(b1,  a2)  <  a2  ||  cnst3  >=  a2)  {	  if    (a2    <    100    *    Math.max(b1,    a2)    <    a2    ||    cnst3    <    a2)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
114	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.min(b1,  a2)  <  a2  ||  cnst3  <  a2)  {  [CE]  illegal  start  of  expression  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.min(b1,  a2)  <  a2  ||  cnst3  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.min(b1,  a2)  <  a2  ||  cnst3  <  a2)  {	  if    (a2    <    100    *    Math.max(b1,    a2)    <    a2    ||    cnst3    <    a2)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
115	[BUG]  [BUGGY]  if(a2  <  0)  {  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if(a2  <  0)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if(a2  <  0)  {	  if    (a2    <    100)    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
116	[BUG]  [BUGGY]  if(a2  <  =  100)  {  [CE]  illegal  start  of  expression  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if(a2  <  =  100)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if(a2  <  =  100)  {	  if    (a2    <    100)    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
117	[BUG]  [BUGGY]  cnst1  =  Math.min(b2,  a2.length);  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  cnst1  =  Math.min(b2,  a2.length);  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	cnst1  =  Math.min(b2,  a2.length);	  cnst1    =    Math.min(a2.length,    b2);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
118	[BUG]  [BUGGY]  cnst1  =  a2  *  deflated;  [CE]  illegal  start  of  expression  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  cnst1  =  a2  *  deflated;  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	cnst1  =  a2  *  deflated;	  cnst1    =    a2    +    deflated;    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
119	[BUG]  [BUGGY]  cnst1  =  a2  +  cnst3,  deflated;  [CE]  illegal  start  of  expression  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  cnst1  =  a2  +  cnst3,  deflated;  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	cnst1  =  a2  +  cnst3,  deflated;	  cnst1    =    a2    +    deflated;    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
120	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(a2,  cnst3)&&  cnst3  <  a2)  {  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(a2,  cnst3)&&  cnst3  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(a2,  cnst3)&&  cnst3  <  a2)  {	  if    (a2    <    100    *    Math.max(a2,    b1)&&    cnst3    <    a2)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
121	[BUG]  [BUGGY]  if  (a2  <  cnst3  ||  10  *  Math.max(a2,  b1)  <  a2  ||  cnst3  >  a2)  {  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  cnst3  ||  10  *  Math.max(a2,  b1)  <  a2  ||  cnst3  >  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  cnst3  ||  10  *  Math.max(a2,  b1)  <  a2  ||  cnst3  >  a2)  {	  if    (a2    <    cnst3    ||    10    *    Math.max(a2,    b1)    <    a2    ||    cnst3    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
122	[BUG]  [BUGGY]  if  (a2  <  cnst3  ||  10  *  Math.max(a2,  b1)>  a2  ||  cnst3  <  a2)  {  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  cnst3  ||  10  *  Math.max(a2,  b1)>  a2  ||  cnst3  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  cnst3  ||  10  *  Math.max(a2,  b1)>  a2  ||  cnst3  <  a2)  {	  if    (a2    <    cnst3    ||    10    *    Math.max(a2,    b1)    <    a2    ||    cnst3    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
123	[BUG]  [BUGGY]  if  (a2  <  cnst3  ||  10  *  Math.max(a2,  b1)  <  a2  ||  cnst3  >=  a2)  {  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  cnst3  ||  10  *  Math.max(a2,  b1)  <  a2  ||  cnst3  >=  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  cnst3  ||  10  *  Math.max(a2,  b1)  <  a2  ||  cnst3  >=  a2)  {	  if    (a2    <    cnst3    ||    10    *    Math.max(a2,    b1)    <    a2    ||    cnst3    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
124	[BUG]  [BUGGY]  if  (a2  <  b1  ||  cnst3  <  a2)  {  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  b1  ||  cnst3  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  b1  ||  cnst3  <  a2)  {	  if    (b1    <    a2    ||    cnst3    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
125	[BUG]  [BUGGY]  if  (100  *  Math.max(a2,  a2)  <  b1  ||  cnst3  <  a2)  {  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (100  *  Math.max(a2,  a2)  <  b1  ||  cnst3  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (100  *  Math.max(a2,  a2)  <  b1  ||  cnst3  <  a2)  {	  if    (100    *    Math.max(b1,    a2)    <    a2    ||    cnst3    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
126	[BUG]  [BUGGY]  if  (a2  <  cnst3  &&  100  *  Math.max(a2,  b1)  <  a2  &&  cnst3  <  a2)  {  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  cnst3  &&  100  *  Math.max(a2,  b1)  <  a2  &&  cnst3  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  cnst3  &&  100  *  Math.max(a2,  b1)  <  a2  &&  cnst3  <  a2)  {	  if    (a2    <    cnst3    ||    100    *    Math.max(a2,    b1)    <    a2    ||    cnst3    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
127	[BUG]  [BUGGY]  cnst1  =  b2  +  deflated;  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  cnst1  =  b2  +  deflated;  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	cnst1  =  b2  +  deflated;	  cnst1    =    b2;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
128	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(a2,  b2)&&  cnst3  <  a2)  {  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(a2,  b2)&&  cnst3  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(a2,  b2)&&  cnst3  <  a2)  {	  if    (a2    <    100    *    Math.max(a2,    b1)&&    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
129	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(a2,  cnst3)  <  a2)  {  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(a2,  cnst3)  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(a2,  cnst3)  <  a2)  {	  if    (a2    <    100    *    Math.max(a2,    b1)    <    a2    ||    cnst3    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
130	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(a2,  cnst3)  <  a2  {  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(a2,  cnst3)  <  a2  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(a2,  cnst3)  <  a2  {	  if    (a2    <    100    *    Math.max(a2,    b1)    <    a2    ||    cnst3    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
131	[BUG]  [BUGGY]  cnst1  =  Math.min(b2,  a1);  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  cnst1  =  Math.min(b2,  a1);  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	cnst1  =  Math.min(b2,  a1);	  cnst1    =    Math.min(b1,    a2);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
132	[BUG]  [BUGGY]  if  (a2  <  10  *  Math.min(a2,  b1)&&  cnst3  >  a2)  {  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  10  *  Math.min(a2,  b1)&&  cnst3  >  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  10  *  Math.min(a2,  b1)&&  cnst3  >  a2)  {	  if    (a2    <    10    *    Math.max(a2,    b1)    <    a2    ||    cnst3    >    a2)    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
133	[BUG]  [BUGGY]  if  (a2  <  10  *  Math.max(a2,  cnst3)  <  a2  {  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  10  *  Math.max(a2,  cnst3)  <  a2  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  10  *  Math.max(a2,  cnst3)  <  a2  {	  if    (a2    <    10    *    Math.max(a2,    b1)    <    a2    ||    cnst3    >    a2)    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
134	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(a2,  b1)&&  cnst3  >=  a2)  {  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(a2,  b1)&&  cnst3  >=  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(a2,  b1)&&  cnst3  >=  a2)  {	  if    (a2    <    100    *    Math.max(a2,    b1)&&    cnst3    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
135	[BUG]  [BUGGY]  cnst1  =  a2  +  b3;  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  cnst1  =  a2  +  b3;  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	cnst1  =  a2  +  b3;	  cnst1    =    a2    +    2;    	non-compiled	[CE]  <identifier>  expected	38	None	replace
136	[BUG]  [BUGGY]  if(a2  <  a2)  {  break;  }  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if(a2  <  a2)  {  break;  }  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if(a2  <  a2)  {  break;  }	  if(a2    <    cnst1)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
137	[BUG]  [BUGGY]  if  (a2  <  a1  ||  cnst3)  {  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  a1  ||  cnst3)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  a1  ||  cnst3)  {	  if    (a2    <    a1    ||    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
138	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(a2,  b1)  <  cnst1  ||  cnst1  <  a2)  {  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(a2,  b1)  <  cnst1  ||  cnst1  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(a2,  b1)  <  cnst1  ||  cnst1  <  a2)  {	  if    (a2    <    100    *    Math.max(b1,    a2)    <    cnst1    ||    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
139	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(b1,  a2)  <  cnst1  &&  cnst1  <  a2)  {  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(b1,  a2)  <  cnst1  &&  cnst1  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(b1,  a2)  <  cnst1  &&  cnst1  <  a2)  {	  if    (a2    <    100    *    Math.max(b1,    a2)    <    cnst1    ||    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
140	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.min(cnst1,  a2)  <  cnst1  ||  cnst2  <  a2)  {  [CE]  <identifier>  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.min(cnst1,  a2)  <  cnst1  ||  cnst2  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.min(cnst1,  a2)  <  cnst1  ||  cnst2  <  a2)  {	  if    (a2    <    100    *    Math.max(b1,    a2)    <    cnst1    ||    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
141	[BUG]  [BUGGY]  if  (a2  <  cnst3  ||  100  *  Math.max(a2,  b1)  <  a2  ||  cnst1  <  a2)  {  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  cnst3  ||  100  *  Math.max(a2,  b1)  <  a2  ||  cnst1  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  cnst3  ||  100  *  Math.max(a2,  b1)  <  a2  ||  cnst1  <  a2)  {	  if    (a2    <    cnst1    ||    100    *    Math.max(a2,    b1)    <    a2    ||    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
142	[BUG]  [BUGGY]  if  (a2  <  cnst1  ||  100  *  Math.max(a2,  b2)  <  a2  ||  cnst3  <  a2)  {  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  cnst1  ||  100  *  Math.max(a2,  b2)  <  a2  ||  cnst3  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  cnst1  ||  100  *  Math.max(a2,  b2)  <  a2  ||  cnst3  <  a2)  {	  if    (a2    <    cnst1    ||    100    *    Math.max(a2,    b1)    <    a2    ||    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
143	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.min(a2,  b2)||  cnst3  <  a2)  {  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.min(a2,  b2)||  cnst3  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.min(a2,  b2)||  cnst3  <  a2)  {	  if    (a2    <    100    *    Math.min(a2,    b1)||    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
144	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(a2,  a2)  <  cnst3  ||  cnst1  <  a2)  {  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(a2,  a2)  <  cnst3  ||  cnst1  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(a2,  a2)  <  cnst3  ||  cnst1  <  a2)  {	  if    (a2    <    100    *    Math.max(b1,    a2)    <    cnst3    ||    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	54	None	replace
145	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(cnst1,  a2)  <  cnst3  ||  b2  <  a2)  {  [CE]  ']'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(cnst1,  a2)  <  cnst3  ||  b2  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(cnst1,  a2)  <  cnst3  ||  b2  <  a2)  {	  if    (a2    <    100    *    Math.max(b1,    a2)    <    cnst3    ||    cnst1    <    a2)    {    	non-compiled	[CE]  ']'  expected	54	None	replace
146	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.min(b1,  a2)  <  cnst3  &&  cnst1  <  a2)  {  [CE]  ']'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.min(b1,  a2)  <  cnst3  &&  cnst1  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.min(b1,  a2)  <  cnst3  &&  cnst1  <  a2)  {	  if    (a2    <    100    *    Math.max(b1,    a2)    <    cnst3    ||    cnst1    <    a2)    {    	non-compiled	[CE]  ']'  expected	54	None	replace
147	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(b1,  b2)  <  a2  ||  cnst3  <  a2)  {  [CE]  ']'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(b1,  b2)  <  a2  ||  cnst3  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(b1,  b2)  <  a2  ||  cnst3  <  a2)  {	  if    (a2    <    100    *    Math.max(b1,    b2)    <    a2    ||    cnst1    <    a2)    {    	non-compiled	[CE]  ']'  expected	12	None	replace
148	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(a2,  b2)  <  a2  ||  cnst1  <  a2)  {  [CE]  ']'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(a2,  b2)  <  a2  ||  cnst1  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(a2,  b2)  <  a2  ||  cnst1  <  a2)  {	  if    (a2    <    100    *    Math.max(b1,    b2)    <    a2    ||    cnst1    <    a2)    {    	non-compiled	[CE]  ']'  expected	12	None	replace
149	[BUG]  [BUGGY]  float  cnst1  =  Math.min(b1,  a2);  [CE]  ']'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  float  cnst1  =  Math.min(b1,  a2);  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	float  cnst1  =  Math.min(b1,  a2);	  int    cnst1    =    Math.min(b1,    a2);    	non-compiled	[CE]  ']'  expected	56	None	replace
150	[BUG]  [BUGGY]  if(a2  >=  0)  {  [CE]  ']'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if(a2  >=  0)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if(a2  >=  0)  {	  if    (a2    <    100)    {    	non-compiled	[CE]  ']'  expected	65	None	replace
151	[BUG]  [BUGGY]  if(b1  >=  a2)  {  break;  }  [CE]  ']'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if(b1  >=  a2)  {  break;  }  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if(b1  >=  a2)  {  break;  }	  if(b1    <    a2)    {    break;    }    	non-compiled	[CE]  ']'  expected	35	None	replace
152	[BUG]  [BUGGY]  if(a1  <  a2)  {  break;  }  [CE]  ']'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if(a1  <  a2)  {  break;  }  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if(a1  <  a2)  {  break;  }	  if(b1    <    a2)    {    break;    }    	non-compiled	[CE]  ']'  expected	35	None	replace
153	[BUG]  [BUGGY]  if  (a2  <  cnst3  &&  10  *  Math.max(a2,  b1)  <  a2  ||  cnst3  <  a2)  {  [CE]  ']'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  cnst3  &&  10  *  Math.max(a2,  b1)  <  a2  ||  cnst3  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  cnst3  &&  10  *  Math.max(a2,  b1)  <  a2  ||  cnst3  <  a2)  {	  if    (a2    <    cnst3    ||    10    *    Math.max(a2,    b1)    <    a2    ||    cnst3    <    a2)    {    	non-compiled	[CE]  ']'  expected	61	None	replace
154	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(a2,  b1)>  a2  ||  cnst3  <  a2)  {  [CE]  ']'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(a2,  b1)>  a2  ||  cnst3  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(a2,  b1)>  a2  ||  cnst3  <  a2)  {	  if    (100    *    Math.max(a2,    b1)>    a2    ||    cnst1    <    a2)    {    	non-compiled	[CE]  ']'  expected	55	None	replace
155	[BUG]  [BUGGY]  if  (a1  >  a2  ||  cnst3  <  a2)  {  [CE]  ']'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a1  >  a2  ||  cnst3  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a1  >  a2  ||  cnst3  <  a2)  {	  if    (100    *    Math.max(a2,    b1)>    a2    ||    cnst1    <    a2)    {    	non-compiled	[CE]  ']'  expected	55	None	replace
156	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.min(a2,  b2)&&  cnst3  <  a2)  {  [CE]  ']'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.min(a2,  b2)&&  cnst3  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.min(a2,  b2)&&  cnst3  <  a2)  {	  if    (a2    <    100    *    Math.min(a2,    b1)&&    cnst1    <    a2)    {    	non-compiled	[CE]  ']'  expected	62	None	replace
157	[BUG]  [BUGGY]  if  (a2  <  10  *  Math.min(a2,  b1)&&  cnst3  <  a2)  {  [CE]  ']'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  10  *  Math.min(a2,  b1)&&  cnst3  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  10  *  Math.min(a2,  b1)&&  cnst3  <  a2)  {	  if    (a2    <    100    *    Math.min(a2,    b1)&&    cnst1    <    a2)    {    	non-compiled	[CE]  ']'  expected	62	None	replace
158	[BUG]  [BUGGY]  if  (a2  >=  cnst3)  {  [CE]  ']'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  >=  cnst3)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  >=  cnst3)  {	  if    (a2    <    cnst3)    {    	non-compiled	[CE]  ']'  expected	42	None	replace
159	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(a2,  b2)  <  a2  ||  cnst3  <  a2)  {  [CE]  ']'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(a2,  b2)  <  a2  ||  cnst3  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(a2,  b2)  <  a2  ||  cnst3  <  a2)  {	  if    (a2    <    100    *    Math.max(a2,    cnst1)    <    a2    ||    cnst3    <    a2)    {    	non-compiled	[CE]  ']'  expected	70	None	replace
160	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(a2,  cnst1)  <  a2  ||  a2  >  a2)  {  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(a2,  cnst1)  <  a2  ||  a2  >  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(a2,  cnst1)  <  a2  ||  a2  >  a2)  {	  if    (a2    <    100    *    Math.max(a2,    b1)    <    a2    ||    cnst1    >    a2)    {    	non-compiled	[CE]  <identifier>  expected	52	None	replace
161	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(a2,  cnst3)||  cnst3  <  a2)  {  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(a2,  cnst3)||  cnst3  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(a2,  cnst3)||  cnst3  <  a2)  {	  if    (a2    <    100    *    Math.max(a2,    b1)||    cnst3    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
162	[BUG]  [BUGGY]  cnst1  =  a2  *  b3;  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  cnst1  =  a2  *  b3;  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	cnst1  =  a2  *  b3;	  cnst1    =    a2    *    b2;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
163	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.min(a2,  b1)&&  cnst3  >  a2)  {  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.min(a2,  b1)&&  cnst3  >  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.min(a2,  b1)&&  cnst3  >  a2)  {	  if    (a2    <    100    *    Math.max(a2,    b1)    <    a2    ||    cnst3    >    a2)    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
164	[BUG]  [BUGGY]  if  (a1  <  a2)  {  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a1  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a1  <  a2)  {	  if    (a1    <    a2    ||    cnst3    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
165	[BUG]  [BUGGY]  if  (a1  <  a2  ||  cnst3)  {  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a1  <  a2  ||  cnst3)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a1  <  a2  ||  cnst3)  {	  if    (a1    <    a2    ||    cnst3    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
166	[BUG]  [BUGGY]  cnst1  =  Math.min(a2,  b2);  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  cnst1  =  Math.min(a2,  b2);  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	cnst1  =  Math.min(a2,  b2);	  cnst1    =    Math.min(b2,    a2);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
167	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(a2,  b2)||  cnst1  <  a2)  {  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(a2,  b2)||  cnst1  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(a2,  b2)||  cnst1  <  a2)  {	  if    (a2    <    100    *    Math.max(b1,    b2)||    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
168	[BUG]  [BUGGY]  if(a1!=  cnst1)  {  break;  }  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if(a1!=  cnst1)  {  break;  }  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if(a1!=  cnst1)  {  break;  }	  if(a1    <    cnst1)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
169	[BUG]  [BUGGY]  if  (a1  <  cnst3  ||  a2  <  cnst3)  {  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a1  <  cnst3  ||  a2  <  cnst3)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a1  <  cnst3  ||  a2  <  cnst3)  {	  if    (a1    <    cnst3    ||    cnst3    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
170	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(a2,  a2)  <  cnst1  ||  b2  <  a2)  {  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(a2,  a2)  <  cnst1  ||  b2  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(a2,  a2)  <  cnst1  ||  b2  <  a2)  {	  if    (a2    <    100    *    Math.max(b1,    a2)    <    a2    ||    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
171	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.min(a2,  b2)||  cnst1  <  a2)  {  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.min(a2,  b2)||  cnst1  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.min(a2,  b2)||  cnst1  <  a2)  {	  if    (a2    <    100    *    Math.min(b1,    b2)||    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
172	[BUG]  [BUGGY]  cnst1  =  a2  +  b2  *  4;  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  cnst1  =  a2  +  b2  *  4;  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	cnst1  =  a2  +  b2  *  4;	  cnst1    =    a2    +    b2    *    deflated;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
173	[BUG]  [BUGGY]  cnst1  =  a2  +  cnst2;  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  cnst1  =  a2  +  cnst2;  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	cnst1  =  a2  +  cnst2;	  cnst1    =    a2    +    cnst3;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
174	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.min(b1,  a2)||  cnst3  >  a2)  {  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.min(b1,  a2)||  cnst3  >  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.min(b1,  a2)||  cnst3  >  a2)  {	  if    (a2    <    100    *    Math.max(b1,    a2)||    cnst3    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
175	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.min(b1,  a2)  <  a2  ||  cnst3  >  a2)  {  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.min(b1,  a2)  <  a2  ||  cnst3  >  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.min(b1,  a2)  <  a2  ||  cnst3  >  a2)  {	  if    (a2    <    100    *    Math.max(b1,    a2)    <    a2    ||    cnst3    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	53	None	replace
176	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(a2,  a2)  <  cnst3  ||  b1  <  a2)  {  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(a2,  a2)  <  cnst3  ||  b1  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(a2,  a2)  <  cnst3  ||  b1  <  a2)  {	  if    (a2    <    100    *    Math.max(b1,    a2)    <    a2    ||    cnst3    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	53	None	replace
177	[BUG]  [BUGGY]  if  (a1  >=  a2  ||  cnst3  >  a2)  {  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a1  >=  a2  ||  cnst3  >  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a1  >=  a2  ||  cnst3  >  a2)  {	  if    (a1    <    a2    ||    cnst3    >    a2)    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
178	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(a2,  cnst3)  <  a2  ||  cnst3  <  a2)  {  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(a2,  cnst3)  <  a2  ||  cnst3  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(a2,  cnst3)  <  a2  ||  cnst3  <  a2)  {	  if    (100    *    Math.max(a2,    cnst3)    <    a2    ||    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	68	None	replace
179	[BUG]  [BUGGY]  cnst1  =  a2  +  b2  *  DEFINED;  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  cnst1  =  a2  +  b2  *  DEFINED;  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	cnst1  =  a2  +  b2  *  DEFINED;	  cnst1    =    a2    +    b2    *    deflated;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
180	[BUG]  [BUGGY]  if  (a2  <  a1  ||  cnst1  >  a2)  {  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  a1  ||  cnst1  >  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  a1  ||  cnst1  >  a2)  {	  if    (a2    <    a1    ||    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
181	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(cnst1,  a2)  <  a2  ||  cnst3  <  a2)  {  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(cnst1,  a2)  <  a2  ||  cnst3  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(cnst1,  a2)  <  a2  ||  cnst3  <  a2)  {	  if    (a2    <    100    *    Math.max(b1,    a2)    <    a2    ||    cnst3    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	53	None	replace
182	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(cnst1,  a2)  <  a2  ||  b2  <  a2)  {  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(cnst1,  a2)  <  a2  ||  b2  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(cnst1,  a2)  <  a2  ||  b2  <  a2)  {	  if    (a2    <    100    *    Math.max(b1,    a2)    <    a2    ||    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
183	[BUG]  [BUGGY]  int  cnst1  =  Math.max(b1.length,  a2.length);  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  int  cnst1  =  Math.max(b1.length,  a2.length);  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	int  cnst1  =  Math.max(b1.length,  a2.length);	  int    cnst1    =    Math.max(b1.length,    a2);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
184	[BUG]  [BUGGY]  if  (a2  <  cnst1  ||  b2  <  a2)  {  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  cnst1  ||  b2  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  cnst1  ||  b2  <  a2)  {	  if    (a2    <    cnst1    ||    b1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
185	[BUG]  [BUGGY]  if  (a2  <  cnst1  ||  b2  >  a2)  {  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  cnst1  ||  b2  >  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  cnst1  ||  b2  >  a2)  {	  if    (a2    <    cnst1    ||    b1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
186	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.min(cnst1,  a2)||  cnst1  <  a2)  {  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.min(cnst1,  a2)||  cnst1  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.min(cnst1,  a2)||  cnst1  <  a2)  {	  if    (a2    <    100    *    Math.min(b1,    b2)||    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
187	[BUG]  [BUGGY]  Char  cnst1  =  Math.min(b1.length,  a2);  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  Char  cnst1  =  Math.min(b1.length,  a2);  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	Char  cnst1  =  Math.min(b1.length,  a2);	  char    cnst1    =    Math.min(b2.length,    a2);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
188	[BUG]  [BUGGY]  if  (a2  <  cnst1  ||  100  *  Math.max(a2,  cnst1)  <  a2  ||  cnst1  <  a2)  {  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  cnst1  ||  100  *  Math.max(a2,  cnst1)  <  a2  ||  cnst1  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  cnst1  ||  100  *  Math.max(a2,  cnst1)  <  a2  ||  cnst1  <  a2)  {	  if    (a2    <    cnst1    ||    100    *    Math.max(a2,    b1)    <    a2    ||    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
189	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(cnst1,  a2)||  cnst3  <  a2)  {  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(cnst1,  a2)||  cnst3  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(cnst1,  a2)||  cnst3  <  a2)  {	  if    (a2    <    100    *    Math.max(b1,    a2)||    cnst3    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
190	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.min(a2,  cnst3)||  cnst3  <  a2)  {  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.min(a2,  cnst3)||  cnst3  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.min(a2,  cnst3)||  cnst3  <  a2)  {	  if    (a2    <    100    *    Math.max(b1,    a2)||    cnst3    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
191	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(a2,  cnst1)&&  a2  <  a2)  {  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(a2,  cnst1)&&  a2  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(a2,  cnst1)&&  a2  <  a2)  {	  if    (a2    <    100    *    Math.max(a2,    b1)&&    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
192	[BUG]  [BUGGY]  cnst1  =  Math.min(b1.length,  b2);  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  cnst1  =  Math.min(b1.length,  b2);  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	cnst1  =  Math.min(b1.length,  b2);	  cnst1    =    Math.min(a2.length,    b2);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
193	[BUG]  [BUGGY]  if  (cnst1  <  a2  ||  100  *  Math.max(a2,  b1)  <  a2  ||  cnst1  >  a2)  {  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (cnst1  <  a2  ||  100  *  Math.max(a2,  b1)  <  a2  ||  cnst1  >  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (cnst1  <  a2  ||  100  *  Math.max(a2,  b1)  <  a2  ||  cnst1  >  a2)  {	  if    (100    *    Math.max(a2,    b1)    <    a2    ||    cnst1    >    a2)    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
194	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(a2,  cnst1)||  cnst1  >  a2)  {  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(a2,  cnst1)||  cnst1  >  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(a2,  cnst1)||  cnst1  >  a2)  {	  if    (100    *    Math.max(a2,    b1)    <    a2    ||    cnst1    >    a2)    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
195	[BUG]  [BUGGY]  int  cnst1  =  Math.min(b1.length,  a2.length);  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  int  cnst1  =  Math.min(b1.length,  a2.length);  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	int  cnst1  =  Math.min(b1.length,  a2.length);	  int    cnst1    =    Math.min(b1.length,    a2);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
196	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(cnst1,  a2)  <  cnst1  ||  cnst2  <  a2)  {  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(cnst1,  a2)  <  cnst1  ||  cnst2  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(cnst1,  a2)  <  cnst1  ||  cnst2  <  a2)  {	  if    (a2    <    100    *    Math.max(b1,    a2)    <    cnst1    ||    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
197	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(cnst1,  a2)  <  cnst1  ||  b2  <  a2)  {  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(cnst1,  a2)  <  cnst1  ||  b2  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(cnst1,  a2)  <  cnst1  ||  b2  <  a2)  {	  if    (a2    <    100    *    Math.max(b1,    a2)    <    cnst1    ||    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
198	[BUG]  [BUGGY]  if  (a2  <  10  *  Math.max(a2,  cnst1)||  cnst1  <  a2)  {  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  10  *  Math.max(a2,  cnst1)||  cnst1  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  10  *  Math.max(a2,  cnst1)||  cnst1  <  a2)  {	  if    (a2    <    100    *    Math.max(a2,    cnst1)||    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	67	None	replace
199	[BUG]  [BUGGY]  int  cnst1  =  Math.min(b1.length,  b2);  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  int  cnst1  =  Math.min(b1.length,  b2);  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	int  cnst1  =  Math.min(b1.length,  b2);	  int    cnst1    =    Math.min(a2.length,    b2);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
200	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(a2,  cnst1)>  a2  ||  cnst1  <  a2)  {  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(a2,  cnst1)>  a2  ||  cnst1  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(a2,  cnst1)>  a2  ||  cnst1  <  a2)  {	  if    (100    *    Math.max(a2,    b1)>    a2    ||    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	55	None	replace
201	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.min(cnst1,  a2)  <  cnst3  ||  cnst1  <  a2)  {  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.min(cnst1,  a2)  <  cnst3  ||  cnst1  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.min(cnst1,  a2)  <  cnst3  ||  cnst1  <  a2)  {	  if    (a2    <    100    *    Math.max(b1,    a2)    <    cnst3    ||    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	54	None	replace
202	[BUG]  [BUGGY]  if  (cnst3  <  a2  ||  100  *  Math.max(a2,  cnst1)  <  a2  {  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (cnst3  <  a2  ||  100  *  Math.max(a2,  cnst1)  <  a2  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (cnst3  <  a2  ||  100  *  Math.max(a2,  cnst1)  <  a2  {	  if    (100    *    Math.max(a2,    cnst1)    <    a2    ||    cnst3    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
203	[BUG]  [BUGGY]  cnst1  =  Math.min(a2.length,  b1);  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  cnst1  =  Math.min(a2.length,  b1);  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	cnst1  =  Math.min(a2.length,  b1);	  cnst1    =    Math.min(b1.length,    a2);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
204	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.max(a2,  cnst1)  <  a2  ||  b2  <  a2)  {  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.max(a2,  cnst1)  <  a2  ||  b2  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.max(a2,  cnst1)  <  a2  ||  b2  <  a2)  {	  if    (a2    <    100    *    Math.max(a2,    b1)    <    a2    ||    cnst1    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
205	[BUG]  [BUGGY]  if(a2  <  10)  {  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if(a2  <  10)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if(a2  <  10)  {	  if    (a2    <    100)    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
206	[BUG]  [BUGGY]  char  cnst1  =  Math.min(a2,  b1);  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  char  cnst1  =  Math.min(a2,  b1);  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	char  cnst1  =  Math.min(a2,  b1);	  int    cnst1    =    Math.min(b1,    a2);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
207	[BUG]  [BUGGY]  if(a2  >  cnst3)  {  break;  }  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if(a2  >  cnst3)  {  break;  }  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if(a2  >  cnst3)  {  break;  }	  if(a2    >=    cnst3)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
208	[BUG]  [BUGGY]  cnst1  =  b2  +  1;  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  cnst1  =  b2  +  1;  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	cnst1  =  b2  +  1;	  cnst1    =    b2;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
209	[BUG]  [BUGGY]  cnst1  =  a2  +  cnst3  *  deflated;  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  cnst1  =  a2  +  cnst3  *  deflated;  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	cnst1  =  a2  +  cnst3  *  deflated;	  cnst1    =    a2    +    cnst3;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
210	[BUG]  [BUGGY]  cnst1  =  a2  *  2;  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  cnst1  =  a2  *  2;  [BUGGY]      if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	cnst1  =  a2  *  2;	  cnst1    =    a2    +    2;    	non-compiled	[CE]  <identifier>  expected	38	None	replace
211	[BUG]  [BUGGY]  if  (a2  <  cnst3  ||  100  *  Math.max(a2,  cnst1)  <  a2  ||  cnst3  <  a2)  {  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  cnst3  ||  100  *  Math.max(a2,  cnst1)  <  a2  ||  cnst3  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  cnst3  ||  100  *  Math.max(a2,  cnst1)  <  a2  ||  cnst3  <  a2)  {	  if    (a2    <    cnst3    ||    100    *    Math.max(a2,    b1)    <    a2    ||    cnst3    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
212	[BUG]  [BUGGY]  if  (a2  <  cnst3  ||  100  *  Math.max(a2,  cnst3)  <  a2  ||  cnst3  <  a2)  {  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  cnst3  ||  100  *  Math.max(a2,  cnst3)  <  a2  ||  cnst3  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  cnst3  ||  100  *  Math.max(a2,  cnst3)  <  a2  ||  cnst3  <  a2)  {	  if    (a2    <    cnst3    ||    100    *    Math.max(a2,    b1)    <    a2    ||    cnst3    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
213	[BUG]  [BUGGY]  if  (a2  <  100  *  Math.min(a2,  cnst1)&&  cnst3  <  a2)  {  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  100  *  Math.min(a2,  cnst1)&&  cnst3  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  100  *  Math.min(a2,  cnst1)&&  cnst3  <  a2)  {	  if    (a2    <    100    *    Math.max(a2,    cnst1)    <    a2    ||    cnst3    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	70	None	replace
214	[BUG]  [BUGGY]  if  (cnst3  <  a2  ||  100  *  Math.max(a2,  b1)  <  a2  ||  cnst3  >  a2)  {  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (cnst3  <  a2  ||  100  *  Math.max(a2,  b1)  <  a2  ||  cnst3  >  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (cnst3  <  a2  ||  100  *  Math.max(a2,  b1)  <  a2  ||  cnst3  >  a2)  {	  if    (100    *    Math.max(a2,    b1)    <    a2    ||    cnst3    >    a2)    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
215	[BUG]  [BUGGY]  if  (a2  <  cnst3  ||  10  *  Math.max(a2,  cnst1)  <  a2  ||  cnst3  <  a2)  {  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  cnst3  ||  10  *  Math.max(a2,  cnst1)  <  a2  ||  cnst3  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  cnst3  ||  10  *  Math.max(a2,  cnst1)  <  a2  ||  cnst3  <  a2)  {	  if    (a2    <    cnst3    ||    10    *    Math.max(a2,    b1)    <    a2    ||    cnst3    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
216	[BUG]  [BUGGY]  if  (a2  <  cnst3  ||  10  *  Math.max(a2,  cnst3)  <  a2  ||  cnst3  <  a2)  {  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  cnst3  ||  10  *  Math.max(a2,  cnst3)  <  a2  ||  cnst3  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  cnst3  ||  10  *  Math.max(a2,  cnst3)  <  a2  ||  cnst3  <  a2)  {	  if    (a2    <    cnst3    ||    10    *    Math.max(a2,    b1)    <    a2    ||    cnst3    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
217	[BUG]  [BUGGY]  if  (a2  <  cnst3  ||  10  *  Math.max(a2,  b2)  <  a2  ||  cnst3  <  a2)  {  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;      [BUGGY]  if  (a2  <  cnst3  ||  10  *  Math.max(a2,  b2)  <  a2  ||  cnst3  <  a2)  {  [BUGGY]      break;  }  }  a2  =  cnst3  *  a2;  if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	if  (a2  <  cnst3  ||  10  *  Math.max(a2,  b2)  <  a2  ||  cnst3  <  a2)  {	  if    (a2    <    cnst3    ||    10    *    Math.max(a2,    b1)    <    a2    ||    cnst3    <    a2)    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
