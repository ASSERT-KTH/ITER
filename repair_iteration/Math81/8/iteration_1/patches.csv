bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  squaredSecondary[i]  =  splitTolerance  /  s;  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  splitTolerance  /  s;  [BUGGY]    }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  splitTolerance  /  s;	  squaredSecondary[i]    =    s    /    s;    	non-compiled	[CE]  ';'  expected	10	None	replace
2	[BUG]  [BUGGY]  squaredSecondary[i]  =  s  /  2;  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  s  /  2;  [BUGGY]    }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  s  /  2;	  squaredSecondary[i]    =    s    /    s;    	non-compiled	[CE]  ';'  expected	10	None	replace
3	[BUG]  [BUGGY]  squaredSecondary[i]  =  value  /  s;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  value  /  s;  [BUGGY]    }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  value  /  s;	  squaredSecondary[i]    =    s    /    s;    	non-compiled	[CE]  ';'  expected	10	None	replace
4	[BUG]  [BUGGY]  squaredSecondary[i]  =  squaredSecondary  *  Math.max(s,  squaredSecondary.length  -  1);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  squaredSecondary  *  Math.max(s,  squaredSecondary.length  -  1);  [BUGGY]    }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  squaredSecondary  *  Math.max(s,  squaredSecondary.length  -  1);	  squaredSecondary[i]    =    s    *    Math.max(s,    squaredSecondary.length);    	non-compiled	[CE]  ';'  expected	12	None	replace
5	[BUG]  [BUGGY]  squaredSecondary[i]  =  s  *  Math.min(s,  squaredSecondary.length);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  s  *  Math.min(s,  squaredSecondary.length);  [BUGGY]    }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  s  *  Math.min(s,  squaredSecondary.length);	  squaredSecondary[i]    =    s    *    Math.max(s,    squaredSecondary.length);    	non-compiled	[CE]  ';'  expected	12	None	replace
6	[BUG]  [BUGGY]  squaredSecondary[i]  =  squaredSecondary  *  Math.max(s,  squaredSecondary.length  +  1);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  squaredSecondary  *  Math.max(s,  squaredSecondary.length  +  1);  [BUGGY]    }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  squaredSecondary  *  Math.max(s,  squaredSecondary.length  +  1);	  squaredSecondary[i]    =    s    *    Math.max(s,    squaredSecondary.length);    	non-compiled	[CE]  ';'  expected	12	None	replace
7	[BUG]  [BUGGY]  squaredSecondary[i]  =  s  *  Math.max(s,  squaredSecondary.length  -  1);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  s  *  Math.max(s,  squaredSecondary.length  -  1);  [BUGGY]    }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  s  *  Math.max(s,  squaredSecondary.length  -  1);	  squaredSecondary[i]    =    s    *    Math.max(s,    squaredSecondary.length);    	non-compiled	[CE]  ';'  expected	12	None	replace
8	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(s,  splitTolerance.length  -  1);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  Math.min(s,  splitTolerance.length  -  1);  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  Math.min(s,  splitTolerance.length  -  1);	      squaredSecondary[i]    =    Math.min(s,    splitTolerance.length);    	non-compiled	[CE]  ';'  expected	5	None	replace
9	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(s,  i);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  Math.min(s,  i);  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  Math.min(s,  i);	      squaredSecondary[i]    =    Math.min(s,    splitTolerance.length);    	non-compiled	[CE]  ';'  expected	5	None	replace
10	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(s,  this.splitTolerance.length);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  Math.min(s,  this.splitTolerance.length);  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  Math.min(s,  this.splitTolerance.length);	      squaredSecondary[i]    =    Math.min(s,    splitTolerance.length);    	non-compiled	[CE]  ';'  expected	5	None	replace
11	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(s,  splitTolerance.length  +  1);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  Math.min(s,  splitTolerance.length  +  1);  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  Math.min(s,  splitTolerance.length  +  1);	      squaredSecondary[i]    =    Math.min(s,    splitTolerance.length);    	non-compiled	[CE]  ';'  expected	5	None	replace
12	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[s.length()  ]);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[s.length()  ]);  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[s.length()  ]);	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[s.size()    ]);    	non-compiled	[CE]  ';'  expected	19	None	replace
13	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[squaredSecondary.size()  ]);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[squaredSecondary.size()  ]);  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[squaredSecondary.size()  ]);	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[s.size()    ]);    	non-compiled	[CE]  ';'  expected	19	None	replace
14	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[s.size()  -  1]);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[s.size()  -  1]);  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[s.size()  -  1]);	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[s.size()    ]);    	non-compiled	[CE]  ';'  expected	19	None	replace
15	[BUG]  [BUGGY]  squaredSecondary[i]  =  s  *  2  +  1;  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  s  *  2  +  1;  [BUGGY]    }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  s  *  2  +  1;	  squaredSecondary[i]    =    s    *    2;    	non-compiled	[CE]  ';'  expected	6	None	replace
16	[BUG]  [BUGGY]  squaredSecondary[i]  =  s  *  3;  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  s  *  3;  [BUGGY]    }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  s  *  3;	  squaredSecondary[i]    =    s    *    2;    	non-compiled	[CE]  ';'  expected	6	None	replace
17	[BUG]  [BUGGY]  squaredSecondary[i]  =  s.length  *  2;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  s.length  *  2;  [BUGGY]    }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  s.length  *  2;	  squaredSecondary[i]    =    s    *    2;    	non-compiled	[CE]  ';'  expected	6	None	replace
18	[BUG]  [BUGGY]  squaredSecondary[i]  =  double  /  s;  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  double  /  s;  [BUGGY]    }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  double  /  s;	  squaredSecondary[i]    =    double    *    s;    	non-compiled	[CE]  ';'  expected	11	None	replace
19	[BUG]  [BUGGY]  squaredSecondary[i]  =  s  *  double;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  s  *  double;  [BUGGY]    }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  s  *  double;	  squaredSecondary[i]    =    double    *    s;    	non-compiled	[CE]  ';'  expected	11	None	replace
20	[BUG]  [BUGGY]  squaredSecondary[i]  =  double  *  s  +  1;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  double  *  s  +  1;  [BUGGY]    }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  double  *  s  +  1;	  squaredSecondary[i]    =    double    *    s;    	non-compiled	[CE]  ';'  expected	11	None	replace
21	[BUG]  [BUGGY]  squaredSecondary[i]  =  double  *  s.length;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  double  *  s.length;  [BUGGY]    }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  double  *  s.length;	  squaredSecondary[i]    =    double    *    s;    	non-compiled	[CE]  ';'  expected	11	None	replace
22	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(s,  this.splitTolerance);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  Math.min(s,  this.splitTolerance);  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  Math.min(s,  this.splitTolerance);	      squaredSecondary[i]    =    Math.min(s,    splitTolerance);    	non-compiled	[CE]  ';'  expected	4	None	replace
23	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(s  *  s,  splitTolerance);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  Math.min(s  *  s,  splitTolerance);  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  Math.min(s  *  s,  splitTolerance);	      squaredSecondary[i]    =    Math.min(s,    splitTolerance);    	non-compiled	[CE]  ';'  expected	4	None	replace
24	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(s,  splitTolerance  *  s);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  Math.min(s,  splitTolerance  *  s);  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  Math.min(s,  splitTolerance  *  s);	      squaredSecondary[i]    =    Math.min(s,    splitTolerance);    	non-compiled	[CE]  ';'  expected	4	None	replace
25	[BUG]  [BUGGY]  squaredSecondary[i]  =  s  *  sql;  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  s  *  sql;  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  s  *  sql;	      squaredSecondary[i]    =    s    *    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	14	None	replace
26	[BUG]  [BUGGY]  squaredSecondary[i]  =  s  *  s.length;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  s  *  s.length;  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  s  *  s.length;	      squaredSecondary[i]    =    s    *    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	14	None	replace
27	[BUG]  [BUGGY]  squaredSecondary[i]  =  s  *  s.doubleValue()  +  1;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  s  *  s.doubleValue()  +  1;  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  s  *  s.doubleValue()  +  1;	      squaredSecondary[i]    =    s    *    s.doubleValue();    	non-compiled	[CE]  ';'  expected	3	None	replace
28	[BUG]  [BUGGY]  squaredSecondary[i]  =  s  *  s.longValue();  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  s  *  s.longValue();  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  s  *  s.longValue();	      squaredSecondary[i]    =    s    *    s.doubleValue();    	non-compiled	[CE]  ';'  expected	3	None	replace
29	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(s  *  s,  squaredSecondary[i]);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  Math.min(s  *  s,  squaredSecondary[i]);  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  Math.min(s  *  s,  squaredSecondary[i]);	      squaredSecondary[i]    =    Math.min(s,    squaredSecondary[i]);    	non-compiled	[CE]  ';'  expected	13	None	replace
30	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary[i],  s);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary[i],  s);  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  Math.min(squaredSecondary[i],  s);	      squaredSecondary[i]    =    Math.min(s,    squaredSecondary[i]);    	non-compiled	[CE]  ';'  expected	13	None	replace
31	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(s,  s);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  Math.min(s,  s);  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  Math.min(s,  s);	      squaredSecondary[i]    =    Math.min(s,    squaredSecondary[i]);    	non-compiled	[CE]  ';'  expected	13	None	replace
32	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(s,  squaredSecondary[i]  -  1);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  Math.min(s,  squaredSecondary[i]  -  1);  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  Math.min(s,  squaredSecondary[i]  -  1);	      squaredSecondary[i]    =    Math.min(s,    squaredSecondary[i]);    	non-compiled	[CE]  ';'  expected	13	None	replace
33	[BUG]  [BUGGY]  final  double  s  =  squaredSecondary[i];  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  final  double  s  =  squaredSecondary[i];  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	final  double  s  =  squaredSecondary[i];	      double    s    =    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	2	None	replace
34	[BUG]  [BUGGY]  double  s  =  squaredSecondary[i]  +  1;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  double  s  =  squaredSecondary[i]  +  1;  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	double  s  =  squaredSecondary[i]  +  1;	      double    s    =    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	2	None	replace
35	[BUG]  [BUGGY]  double  s  =  squaredSecondary[i]  *  2;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  double  s  =  squaredSecondary[i]  *  2;  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	double  s  =  squaredSecondary[i]  *  2;	      double    s    =    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	2	None	replace
36	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(s,  squaredSecondary[i].doubleValue()  +  1);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  Math.min(s,  squaredSecondary[i].doubleValue()  +  1);  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  Math.min(s,  squaredSecondary[i].doubleValue()  +  1);	      squaredSecondary[i]    =    Math.min(s,    squaredSecondary[i].doubleValue());    	non-compiled	[CE]  ';'  expected	15	None	replace
37	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(s,  squaredSecondary[i].doubleValue()  -  1);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  Math.min(s,  squaredSecondary[i].doubleValue()  -  1);  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  Math.min(s,  squaredSecondary[i].doubleValue()  -  1);	      squaredSecondary[i]    =    Math.min(s,    squaredSecondary[i].doubleValue());    	non-compiled	[CE]  ';'  expected	15	None	replace
38	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(s  *  s,  squaredSecondary[i].doubleValue());  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  Math.min(s  *  s,  squaredSecondary[i].doubleValue());  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  Math.min(s  *  s,  squaredSecondary[i].doubleValue());	      squaredSecondary[i]    =    Math.min(s,    squaredSecondary[i].doubleValue());    	non-compiled	[CE]  ';'  expected	15	None	replace
39	[BUG]  [BUGGY]  squaredSecondary[i]  =  s  *  s.length  +  1;  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  s  *  s.length  +  1;  [BUGGY]    }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  s  *  s.length  +  1;	  squaredSecondary[i]    =    s    *    s    +    1;    	non-compiled	[CE]  ';'  expected	17	None	replace
40	[BUG]  [BUGGY]  squaredSecondary[i]  =  s  *  s  +  2;  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  s  *  s  +  2;  [BUGGY]    }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  s  *  s  +  2;	  squaredSecondary[i]    =    s    *    s    +    1;    	non-compiled	[CE]  ';'  expected	17	None	replace
41	[BUG]  [BUGGY]  ArrayRealVector[]  eigenvectors  =  squaredSecondary.toArray(new  double[s.length()  ]);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  ArrayRealVector[]  eigenvectors  =  squaredSecondary.toArray(new  double[s.length()  ]);  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	ArrayRealVector[]  eigenvectors  =  squaredSecondary.toArray(new  double[s.length()  ]);	      ArrayRealVector[]    eigenvectors    =    squaredSecondary.toArray(new    double[s.size()    ]);    	non-compiled	[CE]  ';'  expected	21	None	replace
42	[BUG]  [BUGGY]  ArrayRealVector[]  eigenvectors  =  squaredSecondary.toArray(new  double[s.size()  +  1]);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  ArrayRealVector[]  eigenvectors  =  squaredSecondary.toArray(new  double[s.size()  +  1]);  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	ArrayRealVector[]  eigenvectors  =  squaredSecondary.toArray(new  double[s.size()  +  1]);	      ArrayRealVector[]    eigenvectors    =    squaredSecondary.toArray(new    double[s.size()    ]);    	non-compiled	[CE]  ';'  expected	21	None	replace
43	[BUG]  [BUGGY]  ArrayRealVector[]  eigenvectors  =  squaredSecondary.toArray(new  double[s.size()  -  1]);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  ArrayRealVector[]  eigenvectors  =  squaredSecondary.toArray(new  double[s.size()  -  1]);  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	ArrayRealVector[]  eigenvectors  =  squaredSecondary.toArray(new  double[s.size()  -  1]);	      ArrayRealVector[]    eigenvectors    =    squaredSecondary.toArray(new    double[s.size()    ]);    	non-compiled	[CE]  ';'  expected	21	None	replace
44	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[s.length  +  1]);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[s.length  +  1]);  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[s.length  +  1]);	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[s.length]);    	non-compiled	[CE]  ';'  expected	20	None	replace
45	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[s.length  -  1]);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[s.length  -  1]);  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[s.length  -  1]);	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[s.length]);    	non-compiled	[CE]  ';'  expected	20	None	replace
46	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[realEigenvalues.length]);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[realEigenvalues.length]);  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[realEigenvalues.length]);	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[s.length]);    	non-compiled	[CE]  ';'  expected	20	None	replace
47	[BUG]  [BUGGY]  squaredSecondary[i]  =  s  *  MAX_SIZE  +  1;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  s  *  MAX_SIZE  +  1;  [BUGGY]    }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  s  *  MAX_SIZE  +  1;	  squaredSecondary[i]    =    s    *    MAX_SIZE;    	non-compiled	[CE]  ';'  expected	8	None	replace
48	[BUG]  [BUGGY]  squaredSecondary[i]  =  s  *  MAX_SIZE  +  2;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  s  *  MAX_SIZE  +  2;  [BUGGY]    }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  s  *  MAX_SIZE  +  2;	  squaredSecondary[i]    =    s    *    MAX_SIZE;    	non-compiled	[CE]  ';'  expected	8	None	replace
49	[BUG]  [BUGGY]  squaredSecondary[i]  =  s  *  MAXIMUM_SIZE  +  1;  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  s  *  MAXIMUM_SIZE  +  1;  [BUGGY]    }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  s  *  MAXIMUM_SIZE  +  1;	  squaredSecondary[i]    =    s    *    MAXIMUM_SIZE;    	non-compiled	[CE]  ';'  expected	7	None	replace
50	[BUG]  [BUGGY]  squaredSecondary[i]  =  s  *  MAXIMUM_SIZE  +  2;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  s  *  MAXIMUM_SIZE  +  2;  [BUGGY]    }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  s  *  MAXIMUM_SIZE  +  2;	  squaredSecondary[i]    =    s    *    MAXIMUM_SIZE;    	non-compiled	[CE]  ';'  expected	7	None	replace
51	[BUG]  [BUGGY]  s  =  squaredSecondary[i]  +  1;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  s  =  squaredSecondary[i]  +  1;  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	s  =  squaredSecondary[i]  +  1;	      s    =    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	16	None	replace
52	[BUG]  [BUGGY]  s  =  squaredSecondary[i]  *  s;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  s  =  squaredSecondary[i]  *  s;  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	s  =  squaredSecondary[i]  *  s;	      s    =    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	16	None	replace
53	[BUG]  [BUGGY]  s  =  squaredSecondary[i].doubleValue();  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  s  =  squaredSecondary[i].doubleValue();  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	s  =  squaredSecondary[i].doubleValue();	      s    =    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	16	None	replace
54	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(s  *  s,  squaredSecondary.length);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  Math.min(s  *  s,  squaredSecondary.length);  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  Math.min(s  *  s,  squaredSecondary.length);	      squaredSecondary[i]    =    Math.min(s,    squaredSecondary.length);    	non-compiled	[CE]  ';'  expected	18	None	replace
55	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(s,  s.length);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  Math.min(s,  s.length);  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  Math.min(s,  s.length);	      squaredSecondary[i]    =    Math.min(s,    squaredSecondary.length);    	non-compiled	[CE]  ';'  expected	18	None	replace
56	[BUG]  [BUGGY]  squaredSecondary[i]  =  s  *  MAXIMUM  +  1;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  s  *  MAXIMUM  +  1;  [BUGGY]    }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  s  *  MAXIMUM  +  1;	  squaredSecondary[i]    =    s    *    MAXIMUM;    	non-compiled	[CE]  ';'  expected	9	None	replace
57	[BUG]  [BUGGY]  squaredSecondary[i]  =  s  /  MAXIMUM;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  s  /  MAXIMUM;  [BUGGY]    }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  s  /  MAXIMUM;	  squaredSecondary[i]    =    s    *    MAXIMUM;    	non-compiled	[CE]  ';'  expected	9	None	replace
58	[BUG]  [BUGGY]  ArrayRealVector[]  eigenvectors  =  squaredSecondary.toArray(new  double[squaredSecondary.size()  ]);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  ArrayRealVector[]  eigenvectors  =  squaredSecondary.toArray(new  double[squaredSecondary.size()  ]);  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	ArrayRealVector[]  eigenvectors  =  squaredSecondary.toArray(new  double[squaredSecondary.size()  ]);	      ArrayRealVector[]    eigenvectors    =    squaredSecondary.toArray(new    double[s.size()    ]);    	non-compiled	[CE]  ';'  expected	21	None	replace
59	[BUG]  [BUGGY]  ArrayRealVector[]  eigenvectors  =  squaredSecondary.toArray(new  double[quardSecondary.size()  ]);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  ArrayRealVector[]  eigenvectors  =  squaredSecondary.toArray(new  double[quardSecondary.size()  ]);  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	ArrayRealVector[]  eigenvectors  =  squaredSecondary.toArray(new  double[quardSecondary.size()  ]);	      ArrayRealVector[]    eigenvectors    =    squaredSecondary.toArray(new    double[s.size()    ]);    	non-compiled	[CE]  ';'  expected	21	None	replace
60	[BUG]  [BUGGY]  squaredSecondary[i]  =  doubleValue  *  s.doubleValue();  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  doubleValue  *  s.doubleValue();  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  doubleValue  *  s.doubleValue();	      squaredSecondary[i]    =    s    *    s.doubleValue();    	non-compiled	[CE]  ';'  expected	3	None	replace
61	[BUG]  [BUGGY]  squaredSecondary[i]  =  s  *  double.doubleValue();  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  s  *  double.doubleValue();  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  s  *  double.doubleValue();	      squaredSecondary[i]    =    s    *    s.doubleValue();    	non-compiled	[CE]  ';'  expected	3	None	replace
62	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary[i],  s.doubleValue());  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary[i],  s.doubleValue());  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  Math.min(squaredSecondary[i],  s.doubleValue());	      squaredSecondary[i]    =    Math.min(s,    squaredSecondary[i].doubleValue());    	non-compiled	[CE]  ';'  expected	15	None	replace
63	[BUG]  [BUGGY]  squaredSecondary[i]  =  s  /  MAXIMUM_SIZE;  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  s  /  MAXIMUM_SIZE;  [BUGGY]    }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  s  /  MAXIMUM_SIZE;	  squaredSecondary[i]    =    s    *    MAXIMUM_SIZE;    	non-compiled	[CE]  ';'  expected	7	None	replace
64	[BUG]  [BUGGY]  squaredSecondary[i]  =  s  *  squaredSecondary[i].doubleValue();  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  s  *  squaredSecondary[i].doubleValue();  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  s  *  squaredSecondary[i].doubleValue();	      squaredSecondary[i]    =    s    *    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	14	None	replace
65	[BUG]  [BUGGY]  squaredSecondary[i]  =  s  *  squaredSecondary[i]  +  1;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  s  *  squaredSecondary[i]  +  1;  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  s  *  squaredSecondary[i]  +  1;	      squaredSecondary[i]    =    s    *    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	14	None	replace
66	[BUG]  [BUGGY]  squaredSecondary[i]  =  s  /  MAX_SIZE;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  s  /  MAX_SIZE;  [BUGGY]    }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  s  /  MAX_SIZE;	  squaredSecondary[i]    =    s    *    MAX_SIZE;    	non-compiled	[CE]  ';'  expected	8	None	replace
67	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(s,  squaredSecondary.length  -  1);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  Math.min(s,  squaredSecondary.length  -  1);  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  Math.min(s,  squaredSecondary.length  -  1);	      squaredSecondary[i]    =    Math.min(s,    squaredSecondary.length);    	non-compiled	[CE]  ';'  expected	18	None	replace
68	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary,  s.length);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary,  s.length);  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  Math.min(squaredSecondary,  s.length);	      squaredSecondary[i]    =    Math.min(s,    squaredSecondary.length);    	non-compiled	[CE]  ';'  expected	18	None	replace
69	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(s,  squaredSecondary.length  +  1);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  Math.min(s,  squaredSecondary.length  +  1);  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  Math.min(s,  squaredSecondary.length  +  1);	      squaredSecondary[i]    =    Math.min(s,    squaredSecondary.length);    	non-compiled	[CE]  ';'  expected	18	None	replace
70	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[qMax.size()  ]);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[qMax.size()  ]);  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[qMax.size()  ]);	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[s.size()    ]);    	non-compiled	[CE]  ';'  expected	19	None	replace
71	[BUG]  [BUGGY]  squaredSecondary[i]  =  squaredSecondary  *  Math.max(s,  squaredSecondary.length);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  squaredSecondary  *  Math.max(s,  squaredSecondary.length);  [BUGGY]    }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  squaredSecondary  *  Math.max(s,  squaredSecondary.length);	  squaredSecondary[i]    =    s    *    Math.max(s,    squaredSecondary.length);    	non-compiled	[CE]  ';'  expected	12	None	replace
72	[BUG]  [BUGGY]  squaredSecondary[i]  =  double  *  Math.max(s,  squaredSecondary.length);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  double  *  Math.max(s,  squaredSecondary.length);  [BUGGY]    }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  double  *  Math.max(s,  squaredSecondary.length);	  squaredSecondary[i]    =    s    *    Math.max(s,    squaredSecondary.length);    	non-compiled	[CE]  ';'  expected	12	None	replace
73	[BUG]  [BUGGY]  squaredSecondary[i]  =  s  /  s.doubleValue();  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  s  /  s.doubleValue();  [BUGGY]    }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  s  /  s.doubleValue();	  squaredSecondary[i]    =    s    /    s;    	non-compiled	[CE]  ';'  expected	10	None	replace
74	[BUG]  [BUGGY]  double  s  =  squaredSecondary[i].doubleValue();  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  double  s  =  squaredSecondary[i].doubleValue();  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	double  s  =  squaredSecondary[i].doubleValue();	      double    s    =    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	2	None	replace
75	[BUG]  [BUGGY]  double  s  =  squaredSecondary[i  +  1];  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  double  s  =  squaredSecondary[i  +  1];  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	double  s  =  squaredSecondary[i  +  1];	      double    s    =    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	2	None	replace
76	[BUG]  [BUGGY]  double  s  =  squaredSecondary[i]  *  1;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  double  s  =  squaredSecondary[i]  *  1;  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	double  s  =  squaredSecondary[i]  *  1;	      double    s    =    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	2	None	replace
77	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary,  s);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary,  s);  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  Math.min(squaredSecondary,  s);	      squaredSecondary[i]    =    Math.min(s,    squaredSecondary[i]);    	non-compiled	[CE]  ';'  expected	13	None	replace
78	[BUG]  [BUGGY]  s  =  squaredSecondary[i  +  1];  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  s  =  squaredSecondary[i  +  1];  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	s  =  squaredSecondary[i  +  1];	      s    =    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	16	None	replace
79	[BUG]  [BUGGY]  s  =  squaredSecondary[i]  +  splitTolerance;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  s  =  squaredSecondary[i]  +  splitTolerance;  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	s  =  squaredSecondary[i]  +  splitTolerance;	      s    =    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	16	None	replace
80	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[s.length  *  s.length]);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[s.length  *  s.length]);  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[s.length  *  s.length]);	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[s.length]);    	non-compiled	[CE]  ';'  expected	20	None	replace
81	[BUG]  [BUGGY]  s  =  squaredSecondary[i]  -  1;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  s  =  squaredSecondary[i]  -  1;  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	s  =  squaredSecondary[i]  -  1;	      s    =    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	16	None	replace
82	[BUG]  [BUGGY]  squaredSecondary[i]  =  s;  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  s;  [BUGGY]    }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  s;	  squaredSecondary[i]    =    s    *    2;    	non-compiled	[CE]  ';'  expected	6	None	replace
83	[BUG]  [BUGGY]  squaredSecondary[i]  =  s  /  s  +  1;  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  s  /  s  +  1;  [BUGGY]    }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  s  /  s  +  1;	  squaredSecondary[i]    =    s    /    s;    	non-compiled	[CE]  ';'  expected	10	None	replace
84	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[s.size()  +  1]);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[s.size()  +  1]);  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[s.size()  +  1]);	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[s.size()    ]);    	non-compiled	[CE]  ';'  expected	19	None	replace
85	[BUG]  [BUGGY]  squaredSecondary[i]  =  squaredSecondary  *  Math.min(s,  squaredSecondary.length);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  squaredSecondary  *  Math.min(s,  squaredSecondary.length);  [BUGGY]    }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  squaredSecondary  *  Math.min(s,  squaredSecondary.length);	  squaredSecondary[i]    =    s    *    Math.max(s,    squaredSecondary.length);    	non-compiled	[CE]  ';'  expected	12	None	replace
86	[BUG]  [BUGGY]  squaredSecondary[i]  =  s  /  squaredSecondary[i];  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  s  /  squaredSecondary[i];  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  s  /  squaredSecondary[i];	      squaredSecondary[i]    =    s    *    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	14	None	replace
87	[BUG]  [BUGGY]  squaredSecondary[i]  =  double  s  *  s;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  double  s  *  s;  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  double  s  *  s;	      squaredSecondary[i]    =    s    *    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	14	None	replace
88	[BUG]  [BUGGY]  squaredSecondary[i]  =  s  *  s.toString();  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  s  *  s.toString();  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  s  *  s.toString();	      squaredSecondary[i]    =    s    *    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	14	None	replace
89	[BUG]  [BUGGY]  squaredSecondary[i]  =  double  *  s.doubleValue();  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  double  *  s.doubleValue();  [BUGGY]    }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  double  *  s.doubleValue();	  squaredSecondary[i]    =    double    *    s;    	non-compiled	[CE]  ';'  expected	11	None	replace
90	[BUG]  [BUGGY]  double  s  =  squaredSecondary[i]  -  1;  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  double  s  =  squaredSecondary[i]  -  1;  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	double  s  =  squaredSecondary[i]  -  1;	      double    s    =    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	2	None	replace
91	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(s,  squaredSecondary[i],  s);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];    [BUGGY]  squaredSecondary[i]  =  Math.min(s,  squaredSecondary[i],  s);  [BUGGY]    squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	squaredSecondary[i]  =  Math.min(s,  squaredSecondary[i],  s);	      squaredSecondary[i]    =    Math.min(s,    squaredSecondary[i]);    	non-compiled	[CE]  ';'  expected	13	None	replace
