bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[splitTolerance.length  +  1];  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[splitTolerance.length  +  1];  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[splitTolerance.length  +  1];	      ArrayRealVector[]    eigenvectors    =    new    ArrayRealVector[splitTolerance.length];    	non-compiled	[CE]  ';'  expected	11	None	replace
2	[BUG]  [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[splitTolerance.length  *  2];  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[splitTolerance.length  *  2];  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[splitTolerance.length  *  2];	      ArrayRealVector[]    eigenvectors    =    new    ArrayRealVector[splitTolerance.length];    	non-compiled	[CE]  ';'  expected	11	None	replace
3	[BUG]  [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[splitTolerance.length  -  1];  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[splitTolerance.length  -  1];  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[splitTolerance.length  -  1];	      ArrayRealVector[]    eigenvectors    =    new    ArrayRealVector[splitTolerance.length];    	non-compiled	[CE]  ';'  expected	11	None	replace
4	[BUG]  [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[splitTolerance.length  +  2];  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[splitTolerance.length  +  2];  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[splitTolerance.length  +  2];	      ArrayRealVector[]    eigenvectors    =    new    ArrayRealVector[splitTolerance.length];    	non-compiled	[CE]  ';'  expected	11	None	replace
5	[BUG]  [BUGGY]  ArrayRealVector[]  squaredSecondary  =  new  ArrayRealVector[splitTolerance.length  +  1];  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  squaredSecondary  =  new  ArrayRealVector[splitTolerance.length  +  1];  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  squaredSecondary  =  new  ArrayRealVector[splitTolerance.length  +  1];	      ArrayRealVector[]    squaredSecondary    =    new    ArrayRealVector[splitTolerance.length];    	non-compiled	[CE]  ';'  expected	16	None	replace
6	[BUG]  [BUGGY]  ArrayRealVector[]  squaredSecondary  =  new  ArrayRealVector[splitTolerance.length  *  2];  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  squaredSecondary  =  new  ArrayRealVector[splitTolerance.length  *  2];  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  squaredSecondary  =  new  ArrayRealVector[splitTolerance.length  *  2];	      ArrayRealVector[]    squaredSecondary    =    new    ArrayRealVector[splitTolerance.length];    	non-compiled	[CE]  ';'  expected	16	None	replace
7	[BUG]  [BUGGY]  this.splitTolerance  =  splitTolerance  +  1;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  this.splitTolerance  =  splitTolerance  +  1;  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	this.splitTolerance  =  splitTolerance  +  1;	      this.splitTolerance    =    splitTolerance;    	non-compiled	[CE]  ';'  expected	19	None	replace
8	[BUG]  [BUGGY]  this.splitTolerance  =  splitTolerance  *  2;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  this.splitTolerance  =  splitTolerance  *  2;  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	this.splitTolerance  =  splitTolerance  *  2;	      this.splitTolerance    =    splitTolerance;    	non-compiled	[CE]  ';'  expected	19	None	replace
9	[BUG]  [BUGGY]  this.splitTolerance  =  splitTolerance  -  1;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  this.splitTolerance  =  splitTolerance  -  1;  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	this.splitTolerance  =  splitTolerance  -  1;	      this.splitTolerance    =    splitTolerance;    	non-compiled	[CE]  ';'  expected	19	None	replace
10	[BUG]  [BUGGY]  squaredSecondary  =  new  double[splitTolerance.length  +  1];  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  squaredSecondary  =  new  double[splitTolerance.length  +  1];  [BUGGY]    for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	squaredSecondary  =  new  double[splitTolerance.length  +  1];	  squaredSecondary    =    new    double[splitTolerance.length];    	non-compiled	[CE]  ';'  expected	1	None	replace
11	[BUG]  [BUGGY]  squaredSecondary  =  new  double[splitTolerance.length  -  1];  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  squaredSecondary  =  new  double[splitTolerance.length  -  1];  [BUGGY]    for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	squaredSecondary  =  new  double[splitTolerance.length  -  1];	  squaredSecondary    =    new    double[splitTolerance.length];    	non-compiled	[CE]  ';'  expected	1	None	replace
12	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[this.imagEigenvalues.size()  ];  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[this.imagEigenvalues.size()  ];  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[this.imagEigenvalues.size()  ];	      ArrayRealVector[]    eigenvectors    =    new    ArrayRealVector[this.imagEigenvalues.size()    ];    	non-compiled	[CE]  ';'  expected	14	None	replace
13	[BUG]  [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[this.imagEigenvalues.size()  +  1];  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[this.imagEigenvalues.size()  +  1];  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[this.imagEigenvalues.size()  +  1];	      ArrayRealVector[]    eigenvectors    =    new    ArrayRealVector[this.imagEigenvalues.size()    ];    	non-compiled	[CE]  ';'  expected	14	None	replace
14	[BUG]  [BUGGY]  squaredSecondary  =  new  double[1];  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  squaredSecondary  =  new  double[1];  [BUGGY]    for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	squaredSecondary  =  new  double[1];	  squaredSecondary    =    new    double[2];    	non-compiled	[CE]  ';'  expected	4	None	replace
15	[BUG]  [BUGGY]  squaredSecondary  =  new  double[3];  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  squaredSecondary  =  new  double[3];  [BUGGY]    for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	squaredSecondary  =  new  double[3];	  squaredSecondary    =    new    double[2];    	non-compiled	[CE]  ';'  expected	4	None	replace
16	[BUG]  [BUGGY]  squaredSecondary  =  new  double[4];  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  squaredSecondary  =  new  double[4];  [BUGGY]    for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	squaredSecondary  =  new  double[4];	  squaredSecondary    =    new    double[2];    	non-compiled	[CE]  ';'  expected	4	None	replace
17	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[size()  +  1];  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[size()  +  1];  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[size()  +  1];	      ArrayRealVector[]    realEigenvalues    =    new    ArrayRealVector[size()    ];    	non-compiled	[CE]  ';'  expected	17	None	replace
18	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[size()  *  2];  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[size()  *  2];  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[size()  *  2];	      ArrayRealVector[]    realEigenvalues    =    new    ArrayRealVector[size()    ];    	non-compiled	[CE]  ';'  expected	17	None	replace
19	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[size()  -  1];  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[size()  -  1];  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[size()  -  1];	      ArrayRealVector[]    realEigenvalues    =    new    ArrayRealVector[size()    ];    	non-compiled	[CE]  ';'  expected	17	None	replace
20	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[splitTolerance.length  +  1];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  squaredSecondary[i]  =  new  double[  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[splitTolerance.length  +  1];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  squaredSecondary[i]  =  new  double[  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[splitTolerance.length  +  1];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  squaredSecondary[i]  =  new  double[	      ArrayRealVector[]    realEigenvalues    =    new    ArrayRealVector[splitTolerance.length];    for(int    i    =    0;    i    <    secondary.length;    ++i)    {    squaredSecondary[i]    =    new    double[s    	non-compiled	[CE]  ';'  expected	10	None	replace
21	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[realEigenvalues.length];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  squaredSecondary[i]  =  new  double[s  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[realEigenvalues.length];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  squaredSecondary[i]  =  new  double[s  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[realEigenvalues.length];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  squaredSecondary[i]  =  new  double[s	      ArrayRealVector[]    realEigenvalues    =    new    ArrayRealVector[splitTolerance.length];    for(int    i    =    0;    i    <    secondary.length;    ++i)    {    squaredSecondary[i]    =    new    double[s    	non-compiled	[CE]  ';'  expected	10	None	replace
22	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[splitTolerance.length  *  2];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  squaredSecondary[i]  =  new  double[  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[splitTolerance.length  *  2];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  squaredSecondary[i]  =  new  double[  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[splitTolerance.length  *  2];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  squaredSecondary[i]  =  new  double[	      ArrayRealVector[]    realEigenvalues    =    new    ArrayRealVector[splitTolerance.length];    for(int    i    =    0;    i    <    secondary.length;    ++i)    {    squaredSecondary[i]    =    new    double[s    	non-compiled	[CE]  ';'  expected	10	None	replace
23	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[realEigenvalues.length];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  squaredSecondary[i]  =  new  double[  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[realEigenvalues.length];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  squaredSecondary[i]  =  new  double[  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[realEigenvalues.length];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  squaredSecondary[i]  =  new  double[	      ArrayRealVector[]    realEigenvalues    =    new    ArrayRealVector[splitTolerance.length];    for(int    i    =    0;    i    <    secondary.length;    ++i)    {    squaredSecondary[i]    =    new    double[s    	non-compiled	[CE]  ';'  expected	10	None	replace
24	[BUG]  [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[size()  +  1];  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[size()  +  1];  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[size()  +  1];	      ArrayRealVector[]    eigenvectors    =    new    ArrayRealVector[size()    ];    	non-compiled	[CE]  ';'  expected	13	None	replace
25	[BUG]  [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[size()  *  2];  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[size()  *  2];  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[size()  *  2];	      ArrayRealVector[]    eigenvectors    =    new    ArrayRealVector[size()    ];    	non-compiled	[CE]  ';'  expected	13	None	replace
26	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[splitTolerance.length  +  1];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  squaredSecondary[i]  =  main[i];  }  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[splitTolerance.length  +  1];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  squaredSecondary[i]  =  main[i];  }  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[splitTolerance.length  +  1];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  squaredSecondary[i]  =  main[i];  }	      ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[splitTolerance.length];    for(int    i    =    0;    i    <    secondary.length;    ++i)    {    squaredSecondary[i]    =    main[i];    }    	non-compiled	[CE]  ';'  expected	8	None	replace
27	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  squaredSecondary[i]  =  main[i];  }  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  squaredSecondary[i]  =  main[i];  }  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  squaredSecondary[i]  =  main[i];  }	      ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[splitTolerance.length];    for(int    i    =    0;    i    <    secondary.length;    ++i)    {    squaredSecondary[i]    =    main[i];    }    	non-compiled	[CE]  ';'  expected	8	None	replace
28	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[secondary.length];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  squaredSecondary[i]  =  main[i];  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[secondary.length];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  squaredSecondary[i]  =  main[i];  }  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[secondary.length];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  squaredSecondary[i]  =  main[i];  }	      ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[splitTolerance.length];    for(int    i    =    0;    i    <    secondary.length;    ++i)    {    squaredSecondary[i]    =    main[i];    }    	non-compiled	[CE]  ';'  expected	8	None	replace
29	[BUG]  [BUGGY]  this.splitTolerance  =  secondary.clone();  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  this.splitTolerance  =  secondary.clone();  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	this.splitTolerance  =  secondary.clone();	      this.splitTolerance    =    splitTolerance.clone();    	non-compiled	[CE]  ';'  expected	18	None	replace
30	[BUG]  [BUGGY]  this.splitTolerance  =  primary.clone();  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  this.splitTolerance  =  primary.clone();  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	this.splitTolerance  =  primary.clone();	      this.splitTolerance    =    splitTolerance.clone();    	non-compiled	[CE]  ';'  expected	18	None	replace
31	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[this.imagEigenvalues.size()  +  1];  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[this.imagEigenvalues.size()  +  1];  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[this.imagEigenvalues.size()  +  1];	      ArrayRealVector[]    realEigenvalues    =    new    ArrayRealVector[this.imagEigenvalues.size()    ];    	non-compiled	[CE]  ';'  expected	15	None	replace
32	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[this.realEigenvalues.size()  ];  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[this.realEigenvalues.size()  ];  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[this.realEigenvalues.size()  ];	      ArrayRealVector[]    realEigenvalues    =    new    ArrayRealVector[this.imagEigenvalues.size()    ];    	non-compiled	[CE]  ';'  expected	15	None	replace
33	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[this.imagEigenvalues.size()  +  2];  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[this.imagEigenvalues.size()  +  2];  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[this.imagEigenvalues.size()  +  2];	      ArrayRealVector[]    realEigenvalues    =    new    ArrayRealVector[this.imagEigenvalues.size()    ];    	non-compiled	[CE]  ';'  expected	15	None	replace
34	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[splitTolerance.length  +  1];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  final  double[]  squaredSecondary  =  new  double[  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[splitTolerance.length  +  1];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  final  double[]  squaredSecondary  =  new  double[  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[splitTolerance.length  +  1];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  final  double[]  squaredSecondary  =  new  double[	      ArrayRealVector[]    realEigenvalues    =    new    ArrayRealVector[splitTolerance.length];    for(int    i    =    0;    i    <    secondary.length;    ++i)    {    final    double[]    squaredSecondary    =    new    double[s    	non-compiled	[CE]  ';'  expected	9	None	replace
35	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[realEigenvalues.length];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  final  double[]  squaredSecondary  =  new  double[  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[realEigenvalues.length];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  final  double[]  squaredSecondary  =  new  double[  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[realEigenvalues.length];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  final  double[]  squaredSecondary  =  new  double[	      ArrayRealVector[]    realEigenvalues    =    new    ArrayRealVector[splitTolerance.length];    for(int    i    =    0;    i    <    secondary.length;    ++i)    {    final    double[]    squaredSecondary    =    new    double[s    	non-compiled	[CE]  ';'  expected	9	None	replace
36	[BUG]  [BUGGY]  final  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[splitTolerance.length];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  final  double[]  squaredSecondary  =  new  double[  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  final  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[splitTolerance.length];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  final  double[]  squaredSecondary  =  new  double[  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	final  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[splitTolerance.length];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  final  double[]  squaredSecondary  =  new  double[	      ArrayRealVector[]    realEigenvalues    =    new    ArrayRealVector[splitTolerance.length];    for(int    i    =    0;    i    <    secondary.length;    ++i)    {    final    double[]    squaredSecondary    =    new    double[s    	non-compiled	[CE]  ';'  expected	9	None	replace
37	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[splitTolerance.length  *  2];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  final  double[]  squaredSecondary  =  new  double[  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[splitTolerance.length  *  2];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  final  double[]  squaredSecondary  =  new  double[  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[splitTolerance.length  *  2];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  final  double[]  squaredSecondary  =  new  double[	      ArrayRealVector[]    realEigenvalues    =    new    ArrayRealVector[splitTolerance.length];    for(int    i    =    0;    i    <    secondary.length;    ++i)    {    final    double[]    squaredSecondary    =    new    double[s    	non-compiled	[CE]  ';'  expected	9	None	replace
38	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[splitTolerance.length  +  1];  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[splitTolerance.length  +  1];  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[splitTolerance.length  +  1];	      ArrayRealVector[]    realEigenvalues    =    new    ArrayRealVector[splitTolerance.length];    	non-compiled	[CE]  ';'  expected	12	None	replace
39	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[splitTolerance.length  *  2];  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[splitTolerance.length  *  2];  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[splitTolerance.length  *  2];	      ArrayRealVector[]    realEigenvalues    =    new    ArrayRealVector[splitTolerance.length];    	non-compiled	[CE]  ';'  expected	12	None	replace
40	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[splitTolerance.length  -  1];  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[splitTolerance.length  -  1];  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[splitTolerance.length  -  1];	      ArrayRealVector[]    realEigenvalues    =    new    ArrayRealVector[splitTolerance.length];    	non-compiled	[CE]  ';'  expected	12	None	replace
41	[BUG]  [BUGGY]  ArrayRealVector[]  squaredSecondaries  =  new  ArrayRealVector[splitTolerance.length];  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  squaredSecondaries  =  new  ArrayRealVector[splitTolerance.length];  [BUGGY]    for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  squaredSecondaries  =  new  ArrayRealVector[splitTolerance.length];	      	non-compiled	[CE]  ';'  expected	5	None	replace
42	[BUG]  [BUGGY]  ArrayRealVector[]  squaredSecondarys  =  new  ArrayRealVector[splitTolerance.length];  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  squaredSecondarys  =  new  ArrayRealVector[splitTolerance.length];  [BUGGY]    for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  squaredSecondarys  =  new  ArrayRealVector[splitTolerance.length];	      	non-compiled	[CE]  ';'  expected	5	None	replace
43	[BUG]  [BUGGY]  ArrayRealVector[]  squaredSecondarys  =  new  ArrayRealVector[size()  ];  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  squaredSecondarys  =  new  ArrayRealVector[size()  ];  [BUGGY]    for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  squaredSecondarys  =  new  ArrayRealVector[size()  ];	      	non-compiled	[CE]  ';'  expected	5	None	replace
44	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[splitTolerance.length  +  1];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  double[]  squaredSecondary  =  new  double[  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[splitTolerance.length  +  1];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  double[]  squaredSecondary  =  new  double[  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[splitTolerance.length  +  1];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  double[]  squaredSecondary  =  new  double[	      ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[splitTolerance.length];    for(int    i    =    0;    i    <    secondary.length;    ++i)    {    double[]    squaredSecondary    =    new    double[s    	non-compiled	[CE]  ';'  expected	7	None	replace
45	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  double[]  squaredSecondary  =  new  double[  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  double[]  squaredSecondary  =  new  double[  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[realEigenvectors.length];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  double[]  squaredSecondary  =  new  double[	      ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[splitTolerance.length];    for(int    i    =    0;    i    <    secondary.length;    ++i)    {    double[]    squaredSecondary    =    new    double[s    	non-compiled	[CE]  ';'  expected	7	None	replace
46	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[splitTolerance.length  *  2];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  double[]  squaredSecondary  =  new  double[  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[splitTolerance.length  *  2];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  double[]  squaredSecondary  =  new  double[  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[splitTolerance.length  *  2];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  double[]  squaredSecondary  =  new  double[	      ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[splitTolerance.length];    for(int    i    =    0;    i    <    secondary.length;    ++i)    {    double[]    squaredSecondary    =    new    double[s    	non-compiled	[CE]  ';'  expected	7	None	replace
47	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[splitTolerance.length  ];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  double[]  squaredSecondary  =  new  double[  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[splitTolerance.length  ];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  double[]  squaredSecondary  =  new  double[  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[splitTolerance.length  ];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  double[]  squaredSecondary  =  new  double[	      ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[splitTolerance.length];    for(int    i    =    0;    i    <    secondary.length;    ++i)    {    double[]    squaredSecondary    =    new    double[s    	non-compiled	[CE]  ';'  expected	7	None	replace
48	[BUG]  [BUGGY]  squaredSecondary  =  new  double[secondary.length  +  2];  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  squaredSecondary  =  new  double[secondary.length  +  2];  [BUGGY]    for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	squaredSecondary  =  new  double[secondary.length  +  2];	  squaredSecondary    =    new    double[secondary.length    +    1];    	non-compiled	[CE]  ';'  expected	2	None	replace
49	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[splitTolerance.length  +  1];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  double[]  squaredSecondary  =  new  double[  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[splitTolerance.length  +  1];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  double[]  squaredSecondary  =  new  double[  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[splitTolerance.length  +  1];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  double[]  squaredSecondary  =  new  double[	      ArrayRealVector[]    realEigenvalues    =    new    ArrayRealVector[splitTolerance.length];    for(int    i    =    0;    i    <    secondary.length;    ++i)    {    double[]    squaredSecondary    =    new    double[s    	non-compiled	[CE]  ';'  expected	6	None	replace
50	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[realEigenvalues.length];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  double[]  squaredSecondary  =  new  double[  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[realEigenvalues.length];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  double[]  squaredSecondary  =  new  double[  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[realEigenvalues.length];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  double[]  squaredSecondary  =  new  double[	      ArrayRealVector[]    realEigenvalues    =    new    ArrayRealVector[splitTolerance.length];    for(int    i    =    0;    i    <    secondary.length;    ++i)    {    double[]    squaredSecondary    =    new    double[s    	non-compiled	[CE]  ';'  expected	6	None	replace
51	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[splitTolerance.length  *  2];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  double[]  squaredSecondary  =  new  double[  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[splitTolerance.length  *  2];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  double[]  squaredSecondary  =  new  double[  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[splitTolerance.length  *  2];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  double[]  squaredSecondary  =  new  double[	      ArrayRealVector[]    realEigenvalues    =    new    ArrayRealVector[splitTolerance.length];    for(int    i    =    0;    i    <    secondary.length;    ++i)    {    double[]    squaredSecondary    =    new    double[s    	non-compiled	[CE]  ';'  expected	6	None	replace
52	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[splitTolerance.length  ];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  double[]  squaredSecondary  =  new  double[  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[splitTolerance.length  ];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  double[]  squaredSecondary  =  new  double[  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[splitTolerance.length  ];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  double[]  squaredSecondary  =  new  double[	      ArrayRealVector[]    realEigenvalues    =    new    ArrayRealVector[splitTolerance.length];    for(int    i    =    0;    i    <    secondary.length;    ++i)    {    double[]    squaredSecondary    =    new    double[s    	non-compiled	[CE]  ';'  expected	6	None	replace
53	[BUG]  [BUGGY]  squaredSecondary  =  new  double[secondary.length  -  2];  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  squaredSecondary  =  new  double[secondary.length  -  2];  [BUGGY]    for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	squaredSecondary  =  new  double[secondary.length  -  2];	  squaredSecondary    =    new    double[secondary.length    -    1];    	non-compiled	[CE]  ';'  expected	3	None	replace
54	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[secondary.length];  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[secondary.length];  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[secondary.length];	      ArrayRealVector[]    realEigenvalues    =    new    ArrayRealVector[splitTolerance.length];    	non-compiled	[CE]  ';'  expected	12	None	replace
55	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[this.imagEigenvalues.length  ];  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[this.imagEigenvalues.length  ];  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[this.imagEigenvalues.length  ];	      ArrayRealVector[]    realEigenvalues    =    new    ArrayRealVector[size()    ];    	non-compiled	[CE]  ';'  expected	17	None	replace
56	[BUG]  [BUGGY]  ArrayRealVector[]  squaredSecondary  =  new  ArrayRealVector[size()  ];  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  squaredSecondary  =  new  ArrayRealVector[size()  ];  [BUGGY]    for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  squaredSecondary  =  new  ArrayRealVector[size()  ];	      	non-compiled	[CE]  ';'  expected	5	None	replace
57	[BUG]  [BUGGY]  ArrayRealVector[]  squaredSecondary  =  new  ArrayRealVector[1];  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  squaredSecondary  =  new  ArrayRealVector[1];  [BUGGY]    for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  squaredSecondary  =  new  ArrayRealVector[1];	      	non-compiled	[CE]  ';'  expected	5	None	replace
58	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[qMax.length];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  squaredSecondary[i]  =  new  double[s  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[qMax.length];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  squaredSecondary[i]  =  new  double[s  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[qMax.length];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  squaredSecondary[i]  =  new  double[s	      ArrayRealVector[]    realEigenvalues    =    new    ArrayRealVector[splitTolerance.length];    for(int    i    =    0;    i    <    secondary.length;    ++i)    {    squaredSecondary[i]    =    new    double[s    	non-compiled	[CE]  ';'  expected	10	None	replace
59	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[splitTolerance.length  -  1];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  double[]  squaredSecondary  =  new  double[  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[splitTolerance.length  -  1];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  double[]  squaredSecondary  =  new  double[  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[splitTolerance.length  -  1];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  double[]  squaredSecondary  =  new  double[	      ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[splitTolerance.length];    for(int    i    =    0;    i    <    secondary.length;    ++i)    {    double[]    squaredSecondary    =    new    double[s    	non-compiled	[CE]  ';'  expected	7	None	replace
60	[BUG]  [BUGGY]  squaredSecondary  =  new  double[secondary.length  +  3];  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  squaredSecondary  =  new  double[secondary.length  +  3];  [BUGGY]    for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	squaredSecondary  =  new  double[secondary.length  +  3];	  squaredSecondary    =    new    double[secondary.length    +    1];    	non-compiled	[CE]  ';'  expected	2	None	replace
61	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[realEigenvalues.length];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  final  double[]  squaredSecondary  =  new  double[s  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[realEigenvalues.length];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  final  double[]  squaredSecondary  =  new  double[s  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[realEigenvalues.length];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  final  double[]  squaredSecondary  =  new  double[s	      ArrayRealVector[]    realEigenvalues    =    new    ArrayRealVector[splitTolerance.length];    for(int    i    =    0;    i    <    secondary.length;    ++i)    {    final    double[]    squaredSecondary    =    new    double[s    	non-compiled	[CE]  ';'  expected	9	None	replace
62	[BUG]  [BUGGY]  squaredSecondary  =  new  double[secondary.length  -  1]  +  splitTolerance;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  squaredSecondary  =  new  double[secondary.length  -  1]  +  splitTolerance;  [BUGGY]    for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	squaredSecondary  =  new  double[secondary.length  -  1]  +  splitTolerance;	  squaredSecondary    =    new    double[secondary.length    -    1];    	non-compiled	[CE]  ';'  expected	3	None	replace
63	[BUG]  [BUGGY]  ArrayRealVector[]  squaredSecondary  =  new  ArrayRealVector[secondary.length];  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  squaredSecondary  =  new  ArrayRealVector[secondary.length];  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  squaredSecondary  =  new  ArrayRealVector[secondary.length];	      ArrayRealVector[]    squaredSecondary    =    new    ArrayRealVector[splitTolerance.length];    	non-compiled	[CE]  ';'  expected	16	None	replace
64	[BUG]  [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[size()  -  1];  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[size()  -  1];  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[size()  -  1];	      ArrayRealVector[]    eigenvectors    =    new    ArrayRealVector[size()    ];    	non-compiled	[CE]  ';'  expected	13	None	replace
65	[BUG]  [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[this.realEigenvalues.size()  ];  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[this.realEigenvalues.size()  ];  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[this.realEigenvalues.size()  ];	      ArrayRealVector[]    eigenvectors    =    new    ArrayRealVector[this.imagEigenvalues.size()    ];    	non-compiled	[CE]  ';'  expected	14	None	replace
66	[BUG]  [BUGGY]  this.splitTolerance  =  splitTolerance  *  secondary.length;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  this.splitTolerance  =  splitTolerance  *  secondary.length;  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	this.splitTolerance  =  splitTolerance  *  secondary.length;	      this.splitTolerance    =    splitTolerance;    	non-compiled	[CE]  ';'  expected	19	None	replace
67	[BUG]  [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[secondary.length];  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[secondary.length];  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[secondary.length];	      ArrayRealVector[]    eigenvectors    =    new    ArrayRealVector[splitTolerance.length];    	non-compiled	[CE]  ';'  expected	11	None	replace
68	[BUG]  [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[subtractTolerance.length];  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[subtractTolerance.length];  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[subtractTolerance.length];	      ArrayRealVector[]    eigenvectors    =    new    ArrayRealVector[splitTolerance.length];    	non-compiled	[CE]  ';'  expected	11	None	replace
69	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[realEigenvalues.length];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  double[]  squaredSecondary  =  new  double[s  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[realEigenvalues.length];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  double[]  squaredSecondary  =  new  double[s  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[realEigenvalues.length];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  double[]  squaredSecondary  =  new  double[s	      ArrayRealVector[]    realEigenvalues    =    new    ArrayRealVector[splitTolerance.length];    for(int    i    =    0;    i    <    secondary.length;    ++i)    {    double[]    squaredSecondary    =    new    double[s    	non-compiled	[CE]  ';'  expected	6	None	replace
70	[BUG]  [BUGGY]  this.splitTolerance  =  splitTolerance.clone()  +  1;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  this.splitTolerance  =  splitTolerance.clone()  +  1;  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	this.splitTolerance  =  splitTolerance.clone()  +  1;	      this.splitTolerance    =    splitTolerance.clone();    	non-compiled	[CE]  ';'  expected	18	None	replace
71	[BUG]  [BUGGY]  ArrayRealVector[]  squaredSecondary  =  new  ArrayRealVector[splitTolerance.size()  ];  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  squaredSecondary  =  new  ArrayRealVector[splitTolerance.size()  ];  [BUGGY]    for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  squaredSecondary  =  new  ArrayRealVector[splitTolerance.size()  ];	      	non-compiled	[CE]  ';'  expected	5	None	replace
72	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[splitTolerance.length  +  1];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  double[]  squaredSecondary  =  new  double[s  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[splitTolerance.length  +  1];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  double[]  squaredSecondary  =  new  double[s  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[splitTolerance.length  +  1];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  double[]  squaredSecondary  =  new  double[s	      ArrayRealVector[]    realEigenvalues    =    new    ArrayRealVector[splitTolerance.length];    for(int    i    =    0;    i    <    secondary.length;    ++i)    {    double[]    squaredSecondary    =    new    double[s    	non-compiled	[CE]  ';'  expected	6	None	replace
73	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[splitTolerance.length  +  1];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  squaredSecondary[i]  =  new  double[s  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[splitTolerance.length  +  1];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  squaredSecondary[i]  =  new  double[s  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[splitTolerance.length  +  1];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  squaredSecondary[i]  =  new  double[s	      ArrayRealVector[]    realEigenvalues    =    new    ArrayRealVector[splitTolerance.length];    for(int    i    =    0;    i    <    secondary.length;    ++i)    {    squaredSecondary[i]    =    new    double[s    	non-compiled	[CE]  ';'  expected	10	None	replace
74	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[splitTolerance.length  *  2];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  squaredSecondary[i]  =  new  double[s  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[splitTolerance.length  *  2];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  squaredSecondary[i]  =  new  double[s  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[splitTolerance.length  *  2];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  squaredSecondary[i]  =  new  double[s	      ArrayRealVector[]    realEigenvalues    =    new    ArrayRealVector[splitTolerance.length];    for(int    i    =    0;    i    <    secondary.length;    ++i)    {    squaredSecondary[i]    =    new    double[s    	non-compiled	[CE]  ';'  expected	10	None	replace
75	[BUG]  [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[size()  /  2];  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[size()  /  2];  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[size()  /  2];	      ArrayRealVector[]    eigenvectors    =    new    ArrayRealVector[size()    ];    	non-compiled	[CE]  ';'  expected	13	None	replace
76	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[splitTolerance.length  *  2];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  squaredSecondary[i]  =  main[i];  }  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[splitTolerance.length  *  2];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  squaredSecondary[i]  =  main[i];  }  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[splitTolerance.length  *  2];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  squaredSecondary[i]  =  main[i];  }	      ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[splitTolerance.length];    for(int    i    =    0;    i    <    secondary.length;    ++i)    {    squaredSecondary[i]    =    main[i];    }    	non-compiled	[CE]  ';'  expected	8	None	replace
77	[BUG]  [BUGGY]  squaredSecondary  =  new  double[secondary.length  -  1  +  1];  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  squaredSecondary  =  new  double[secondary.length  -  1  +  1];  [BUGGY]    for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	squaredSecondary  =  new  double[secondary.length  -  1  +  1];	  squaredSecondary    =    new    double[secondary.length    -    1];    	non-compiled	[CE]  ';'  expected	3	None	replace
78	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[splitTolerance.length  +  1];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  double[]  squaredSecondary  =  new  double[s  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;      [BUGGY]  ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[splitTolerance.length  +  1];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  double[]  squaredSecondary  =  new  double[s  [BUGGY]    squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[splitTolerance.length  +  1];  for(int  i  =  0;  i  <  secondary.length;  ++i)  {  double[]  squaredSecondary  =  new  double[s	      ArrayRealVector[]    realEigenvectors    =    new    ArrayRealVector[splitTolerance.length];    for(int    i    =    0;    i    <    secondary.length;    ++i)    {    double[]    squaredSecondary    =    new    double[s    	non-compiled	[CE]  ';'  expected	7	None	replace
