bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] throws InvalidMatrixException { [FE] ArrayIndexOutOfBoundsException [CONTEXT] public EigenDecompositionImpl(final double[] main, double[] secondary, final double splitTolerance) [BUGGY] throws InvalidMatrixException { [BUGGY]  this.main= main.clone(); this.secondary = secondary.clone(); transformer= null;  squaredSecondary = new double[secondary.length]; for (int i = 0; i < squaredSecondary.length; ++i) { final double s = secondary[i]; squaredSecondary[i] = s * s; [CLASS] EigenDecompositionImpl Solver [METHOD] <init> [RETURN_TYPE] EigenDecompositionImpl(double[],double[],double)  final double[] main double[] secondary final double splitTolerance [VARIABLES] boolean double[] imagEigenvalues main realEigenvalues secondary squaredSecondary work ArrayRealVector[] eigenvectors RealMatrix cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 dMin dMin1 dMin2 dN dN1 dN2 eMin g lowerSpectra minPivot qMax s sigma sigmaLow splitTolerance tau upperSpectra int i pingPong tType TriDiagonalTransformer transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	
2	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public EigenDecompositionImpl(final double[] main, double[] secondary, final double splitTolerance) [BUGGY] [BUGGY] throws InvalidMatrixException { this.main= main.clone(); this.secondary = secondary.clone(); transformer= null;  squaredSecondary = new double[secondary.length]; for (int i = 0; i < squaredSecondary.length; ++i) { final double s = secondary[i]; squaredSecondary[i] = s * s; [CLASS] EigenDecompositionImpl Solver [METHOD] <init> [RETURN_TYPE] EigenDecompositionImpl(double[],double[],double)  final double[] main double[] secondary final double splitTolerance [VARIABLES] boolean double[] imagEigenvalues main realEigenvalues secondary squaredSecondary work ArrayRealVector[] eigenvectors RealMatrix cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 dMin dMin1 dMin2 dN dN1 dN2 eMin g lowerSpectra minPivot qMax s sigma sigmaLow splitTolerance tau upperSpectra int i pingPong tType TriDiagonalTransformer transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	add	
3	[BUG] [BUGGY] this.main= main.clone(); [FE] ArrayIndexOutOfBoundsException [CONTEXT] public EigenDecompositionImpl(final double[] main, double[] secondary, final double splitTolerance) throws InvalidMatrixException { [BUGGY] this.main= main.clone(); [BUGGY] this.secondary = secondary.clone(); transformer= null;  squaredSecondary = new double[secondary.length]; for (int i = 0; i < squaredSecondary.length; ++i) { final double s = secondary[i]; squaredSecondary[i] = s * s; }  [CLASS] EigenDecompositionImpl Solver [METHOD] <init> [RETURN_TYPE] EigenDecompositionImpl(double[],double[],double)  final double[] main double[] secondary final double splitTolerance [VARIABLES] boolean double[] imagEigenvalues main realEigenvalues secondary squaredSecondary work ArrayRealVector[] eigenvectors RealMatrix cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 dMin dMin1 dMin2 dN dN1 dN2 eMin g lowerSpectra minPivot qMax s sigma sigmaLow splitTolerance tau upperSpectra int i pingPong tType TriDiagonalTransformer transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	
4	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public EigenDecompositionImpl(final double[] main, double[] secondary, final double splitTolerance) throws InvalidMatrixException { [BUGGY] [BUGGY] this.main= main.clone(); this.secondary = secondary.clone(); transformer= null;  squaredSecondary = new double[secondary.length]; for (int i = 0; i < squaredSecondary.length; ++i) { final double s = secondary[i]; squaredSecondary[i] = s * s; }  [CLASS] EigenDecompositionImpl Solver [METHOD] <init> [RETURN_TYPE] EigenDecompositionImpl(double[],double[],double)  final double[] main double[] secondary final double splitTolerance [VARIABLES] boolean double[] imagEigenvalues main realEigenvalues secondary squaredSecondary work ArrayRealVector[] eigenvectors RealMatrix cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 dMin dMin1 dMin2 dN dN1 dN2 eMin g lowerSpectra minPivot qMax s sigma sigmaLow splitTolerance tau upperSpectra int i pingPong tType TriDiagonalTransformer transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	add	
5	[BUG] [BUGGY] this.secondary = secondary.clone(); [FE] ArrayIndexOutOfBoundsException [CONTEXT] public EigenDecompositionImpl(final double[] main, double[] secondary, final double splitTolerance) throws InvalidMatrixException { this.main= main.clone(); [BUGGY] this.secondary = secondary.clone(); [BUGGY] transformer= null;  squaredSecondary = new double[secondary.length]; for (int i = 0; i < squaredSecondary.length; ++i) { final double s = secondary[i]; squaredSecondary[i] = s * s; } this.splitTolerance = splitTolerance; [CLASS] EigenDecompositionImpl Solver [METHOD] <init> [RETURN_TYPE] EigenDecompositionImpl(double[],double[],double)  final double[] main double[] secondary final double splitTolerance [VARIABLES] boolean double[] imagEigenvalues main realEigenvalues secondary squaredSecondary work ArrayRealVector[] eigenvectors RealMatrix cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 dMin dMin1 dMin2 dN dN1 dN2 eMin g lowerSpectra minPivot qMax s sigma sigmaLow splitTolerance tau upperSpectra int i pingPong tType TriDiagonalTransformer transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	194	194	1	replace	
6	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public EigenDecompositionImpl(final double[] main, double[] secondary, final double splitTolerance) throws InvalidMatrixException { this.main= main.clone(); [BUGGY] [BUGGY] this.secondary = secondary.clone(); transformer= null;  squaredSecondary = new double[secondary.length]; for (int i = 0; i < squaredSecondary.length; ++i) { final double s = secondary[i]; squaredSecondary[i] = s * s; } this.splitTolerance = splitTolerance; [CLASS] EigenDecompositionImpl Solver [METHOD] <init> [RETURN_TYPE] EigenDecompositionImpl(double[],double[],double)  final double[] main double[] secondary final double splitTolerance [VARIABLES] boolean double[] imagEigenvalues main realEigenvalues secondary squaredSecondary work ArrayRealVector[] eigenvectors RealMatrix cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 dMin dMin1 dMin2 dN dN1 dN2 eMin g lowerSpectra minPivot qMax s sigma sigmaLow splitTolerance tau upperSpectra int i pingPong tType TriDiagonalTransformer transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	194	194	1	add	
7	[BUG] [BUGGY] transformer= null; [FE] ArrayIndexOutOfBoundsException [CONTEXT] public EigenDecompositionImpl(final double[] main, double[] secondary, final double splitTolerance) throws InvalidMatrixException { this.main= main.clone(); this.secondary = secondary.clone(); [BUGGY] transformer= null; [BUGGY]   squaredSecondary = new double[secondary.length]; for (int i = 0; i < squaredSecondary.length; ++i) { final double s = secondary[i]; squaredSecondary[i] = s * s; } this.splitTolerance = splitTolerance; decompose(); [CLASS] EigenDecompositionImpl Solver [METHOD] <init> [RETURN_TYPE] EigenDecompositionImpl(double[],double[],double)  final double[] main double[] secondary final double splitTolerance [VARIABLES] boolean double[] imagEigenvalues main realEigenvalues secondary squaredSecondary work ArrayRealVector[] eigenvectors RealMatrix cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 dMin dMin1 dMin2 dN dN1 dN2 eMin g lowerSpectra minPivot qMax s sigma sigmaLow splitTolerance tau upperSpectra int i pingPong tType TriDiagonalTransformer transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	195	195	1	replace	
8	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public EigenDecompositionImpl(final double[] main, double[] secondary, final double splitTolerance) throws InvalidMatrixException { this.main= main.clone(); this.secondary = secondary.clone(); [BUGGY] [BUGGY] transformer= null;  squaredSecondary = new double[secondary.length]; for (int i = 0; i < squaredSecondary.length; ++i) { final double s = secondary[i]; squaredSecondary[i] = s * s; } this.splitTolerance = splitTolerance; decompose(); [CLASS] EigenDecompositionImpl Solver [METHOD] <init> [RETURN_TYPE] EigenDecompositionImpl(double[],double[],double)  final double[] main double[] secondary final double splitTolerance [VARIABLES] boolean double[] imagEigenvalues main realEigenvalues secondary squaredSecondary work ArrayRealVector[] eigenvectors RealMatrix cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 dMin dMin1 dMin2 dN dN1 dN2 eMin g lowerSpectra minPivot qMax s sigma sigmaLow splitTolerance tau upperSpectra int i pingPong tType TriDiagonalTransformer transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	195	195	1	add	
9	[BUG] [BUGGY] squaredSecondary = new double[secondary.length]; [FE] ArrayIndexOutOfBoundsException [CONTEXT] public EigenDecompositionImpl(final double[] main, double[] secondary, final double splitTolerance) throws InvalidMatrixException { this.main= main.clone(); this.secondary = secondary.clone(); transformer= null;  [BUGGY] squaredSecondary = new double[secondary.length]; [BUGGY] for (int i = 0; i < squaredSecondary.length; ++i) { final double s = secondary[i]; squaredSecondary[i] = s * s; } this.splitTolerance = splitTolerance; decompose(); } [CLASS] EigenDecompositionImpl Solver [METHOD] <init> [RETURN_TYPE] EigenDecompositionImpl(double[],double[],double)  final double[] main double[] secondary final double splitTolerance [VARIABLES] boolean double[] imagEigenvalues main realEigenvalues secondary squaredSecondary work ArrayRealVector[] eigenvectors RealMatrix cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 dMin dMin1 dMin2 dN dN1 dN2 eMin g lowerSpectra minPivot qMax s sigma sigmaLow splitTolerance tau upperSpectra int i pingPong tType TriDiagonalTransformer transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	replace	
10	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public EigenDecompositionImpl(final double[] main, double[] secondary, final double splitTolerance) throws InvalidMatrixException { this.main= main.clone(); this.secondary = secondary.clone(); transformer= null;  [BUGGY] [BUGGY] squaredSecondary = new double[secondary.length]; for (int i = 0; i < squaredSecondary.length; ++i) { final double s = secondary[i]; squaredSecondary[i] = s * s; } this.splitTolerance = splitTolerance; decompose(); } [CLASS] EigenDecompositionImpl Solver [METHOD] <init> [RETURN_TYPE] EigenDecompositionImpl(double[],double[],double)  final double[] main double[] secondary final double splitTolerance [VARIABLES] boolean double[] imagEigenvalues main realEigenvalues secondary squaredSecondary work ArrayRealVector[] eigenvectors RealMatrix cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 dMin dMin1 dMin2 dN dN1 dN2 eMin g lowerSpectra minPivot qMax s sigma sigmaLow splitTolerance tau upperSpectra int i pingPong tType TriDiagonalTransformer transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	198	198	1	add	
11	[BUG] [BUGGY] for (int i = 0; i < squaredSecondary.length; ++i) { [FE] ArrayIndexOutOfBoundsException [CONTEXT] public EigenDecompositionImpl(final double[] main, double[] secondary, final double splitTolerance) throws InvalidMatrixException { this.main= main.clone(); this.secondary = secondary.clone(); transformer= null;  squaredSecondary = new double[secondary.length]; [BUGGY] for (int i = 0; i < squaredSecondary.length; ++i) { [BUGGY] final double s = secondary[i]; squaredSecondary[i] = s * s; } this.splitTolerance = splitTolerance; decompose(); } [CLASS] EigenDecompositionImpl Solver [METHOD] <init> [RETURN_TYPE] EigenDecompositionImpl(double[],double[],double)  final double[] main double[] secondary final double splitTolerance [VARIABLES] boolean double[] imagEigenvalues main realEigenvalues secondary squaredSecondary work ArrayRealVector[] eigenvectors RealMatrix cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 dMin dMin1 dMin2 dN dN1 dN2 eMin g lowerSpectra minPivot qMax s sigma sigmaLow splitTolerance tau upperSpectra int i pingPong tType TriDiagonalTransformer transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	199	199	1	replace	
12	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public EigenDecompositionImpl(final double[] main, double[] secondary, final double splitTolerance) throws InvalidMatrixException { this.main= main.clone(); this.secondary = secondary.clone(); transformer= null;  squaredSecondary = new double[secondary.length]; [BUGGY] [BUGGY] for (int i = 0; i < squaredSecondary.length; ++i) { final double s = secondary[i]; squaredSecondary[i] = s * s; } this.splitTolerance = splitTolerance; decompose(); } [CLASS] EigenDecompositionImpl Solver [METHOD] <init> [RETURN_TYPE] EigenDecompositionImpl(double[],double[],double)  final double[] main double[] secondary final double splitTolerance [VARIABLES] boolean double[] imagEigenvalues main realEigenvalues secondary squaredSecondary work ArrayRealVector[] eigenvectors RealMatrix cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 dMin dMin1 dMin2 dN dN1 dN2 eMin g lowerSpectra minPivot qMax s sigma sigmaLow splitTolerance tau upperSpectra int i pingPong tType TriDiagonalTransformer transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	199	199	1	add	
13	[BUG] [BUGGY] final double s = secondary[i]; [FE] ArrayIndexOutOfBoundsException [CONTEXT] final double splitTolerance) throws InvalidMatrixException { this.main= main.clone(); this.secondary = secondary.clone(); transformer= null;  squaredSecondary = new double[secondary.length]; for (int i = 0; i < squaredSecondary.length; ++i) { [BUGGY] final double s = secondary[i]; [BUGGY] squaredSecondary[i] = s * s; } this.splitTolerance = splitTolerance; decompose(); } [CLASS] EigenDecompositionImpl Solver [METHOD] <init> [RETURN_TYPE] EigenDecompositionImpl(double[],double[],double)  final double[] main double[] secondary final double splitTolerance [VARIABLES] boolean double[] imagEigenvalues main realEigenvalues secondary squaredSecondary work ArrayRealVector[] eigenvectors RealMatrix cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 dMin dMin1 dMin2 dN dN1 dN2 eMin g lowerSpectra minPivot qMax s sigma sigmaLow splitTolerance tau upperSpectra int i pingPong tType TriDiagonalTransformer transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	
14	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] final double splitTolerance) throws InvalidMatrixException { this.main= main.clone(); this.secondary = secondary.clone(); transformer= null;  squaredSecondary = new double[secondary.length]; for (int i = 0; i < squaredSecondary.length; ++i) { [BUGGY] [BUGGY] final double s = secondary[i]; squaredSecondary[i] = s * s; } this.splitTolerance = splitTolerance; decompose(); } [CLASS] EigenDecompositionImpl Solver [METHOD] <init> [RETURN_TYPE] EigenDecompositionImpl(double[],double[],double)  final double[] main double[] secondary final double splitTolerance [VARIABLES] boolean double[] imagEigenvalues main realEigenvalues secondary squaredSecondary work ArrayRealVector[] eigenvectors RealMatrix cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 dMin dMin1 dMin2 dN dN1 dN2 eMin g lowerSpectra minPivot qMax s sigma sigmaLow splitTolerance tau upperSpectra int i pingPong tType TriDiagonalTransformer transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	add	
15	[BUG] [BUGGY] squaredSecondary[i] = s * s; [FE] ArrayIndexOutOfBoundsException [CONTEXT] throws InvalidMatrixException { this.main= main.clone(); this.secondary = secondary.clone(); transformer= null;  squaredSecondary = new double[secondary.length]; for (int i = 0; i < squaredSecondary.length; ++i) { final double s = secondary[i]; [BUGGY] squaredSecondary[i] = s * s; [BUGGY] } this.splitTolerance = splitTolerance; decompose(); } [CLASS] EigenDecompositionImpl Solver [METHOD] <init> [RETURN_TYPE] EigenDecompositionImpl(double[],double[],double)  final double[] main double[] secondary final double splitTolerance [VARIABLES] boolean double[] imagEigenvalues main realEigenvalues secondary squaredSecondary work ArrayRealVector[] eigenvectors RealMatrix cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 dMin dMin1 dMin2 dN dN1 dN2 eMin g lowerSpectra minPivot qMax s sigma sigmaLow splitTolerance tau upperSpectra int i pingPong tType TriDiagonalTransformer transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	replace	
16	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] throws InvalidMatrixException { this.main= main.clone(); this.secondary = secondary.clone(); transformer= null;  squaredSecondary = new double[secondary.length]; for (int i = 0; i < squaredSecondary.length; ++i) { final double s = secondary[i]; [BUGGY] [BUGGY] squaredSecondary[i] = s * s; } this.splitTolerance = splitTolerance; decompose(); } [CLASS] EigenDecompositionImpl Solver [METHOD] <init> [RETURN_TYPE] EigenDecompositionImpl(double[],double[],double)  final double[] main double[] secondary final double splitTolerance [VARIABLES] boolean double[] imagEigenvalues main realEigenvalues secondary squaredSecondary work ArrayRealVector[] eigenvectors RealMatrix cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 dMin dMin1 dMin2 dN dN1 dN2 eMin g lowerSpectra minPivot qMax s sigma sigmaLow splitTolerance tau upperSpectra int i pingPong tType TriDiagonalTransformer transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	201	201	1	add	
17	[BUG] [BUGGY] this.splitTolerance = splitTolerance; [FE] ArrayIndexOutOfBoundsException [CONTEXT] this.secondary = secondary.clone(); transformer= null;  squaredSecondary = new double[secondary.length]; for (int i = 0; i < squaredSecondary.length; ++i) { final double s = secondary[i]; squaredSecondary[i] = s * s; } [BUGGY] this.splitTolerance = splitTolerance; [BUGGY] decompose(); } [CLASS] EigenDecompositionImpl Solver [METHOD] <init> [RETURN_TYPE] EigenDecompositionImpl(double[],double[],double)  final double[] main double[] secondary final double splitTolerance [VARIABLES] boolean double[] imagEigenvalues main realEigenvalues secondary squaredSecondary work ArrayRealVector[] eigenvectors RealMatrix cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 dMin dMin1 dMin2 dN dN1 dN2 eMin g lowerSpectra minPivot qMax s sigma sigmaLow splitTolerance tau upperSpectra int i pingPong tType TriDiagonalTransformer transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	
18	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] this.secondary = secondary.clone(); transformer= null;  squaredSecondary = new double[secondary.length]; for (int i = 0; i < squaredSecondary.length; ++i) { final double s = secondary[i]; squaredSecondary[i] = s * s; } [BUGGY] [BUGGY] this.splitTolerance = splitTolerance; decompose(); } [CLASS] EigenDecompositionImpl Solver [METHOD] <init> [RETURN_TYPE] EigenDecompositionImpl(double[],double[],double)  final double[] main double[] secondary final double splitTolerance [VARIABLES] boolean double[] imagEigenvalues main realEigenvalues secondary squaredSecondary work ArrayRealVector[] eigenvectors RealMatrix cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 dMin dMin1 dMin2 dN dN1 dN2 eMin g lowerSpectra minPivot qMax s sigma sigmaLow splitTolerance tau upperSpectra int i pingPong tType TriDiagonalTransformer transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	add	
19	[BUG] [BUGGY] decompose(); [FE] ArrayIndexOutOfBoundsException [CONTEXT] transformer= null;  squaredSecondary = new double[secondary.length]; for (int i = 0; i < squaredSecondary.length; ++i) { final double s = secondary[i]; squaredSecondary[i] = s * s; } this.splitTolerance = splitTolerance; [BUGGY] decompose(); [BUGGY]  } [CLASS] EigenDecompositionImpl Solver [METHOD] <init> [RETURN_TYPE] EigenDecompositionImpl(double[],double[],double)  final double[] main double[] secondary final double splitTolerance [VARIABLES] boolean double[] imagEigenvalues main realEigenvalues secondary squaredSecondary work ArrayRealVector[] eigenvectors RealMatrix cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 dMin dMin1 dMin2 dN dN1 dN2 eMin g lowerSpectra minPivot qMax s sigma sigmaLow splitTolerance tau upperSpectra int i pingPong tType TriDiagonalTransformer transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	
20	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] transformer= null;  squaredSecondary = new double[secondary.length]; for (int i = 0; i < squaredSecondary.length; ++i) { final double s = secondary[i]; squaredSecondary[i] = s * s; } this.splitTolerance = splitTolerance; [BUGGY] [BUGGY] decompose(); } [CLASS] EigenDecompositionImpl Solver [METHOD] <init> [RETURN_TYPE] EigenDecompositionImpl(double[],double[],double)  final double[] main double[] secondary final double splitTolerance [VARIABLES] boolean double[] imagEigenvalues main realEigenvalues secondary squaredSecondary work ArrayRealVector[] eigenvectors RealMatrix cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 dMin dMin1 dMin2 dN dN1 dN2 eMin g lowerSpectra minPivot qMax s sigma sigmaLow splitTolerance tau upperSpectra int i pingPong tType TriDiagonalTransformer transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	add	
21	[BUG] [BUGGY] gam = dN; [FE] ArrayIndexOutOfBoundsException [CONTEXT] tau = Math.max(s, 0.333 * dMin); tType = -3; } } else {  tType = -4; double s = 0.25 * dMin; double gam; int np; if (dMin == dN) { [BUGGY] gam = dN; [BUGGY] a2 = 0.0; if (work[nn - 5]>work[nn - 7]) { return; } b2 = work[nn - 5] / work[nn - 7]; np = nn - 9; } else { np = nn - 2 * pingPong; b2 = work[np - 2]; gam = dN1; [CLASS] EigenDecompositionImpl Solver [METHOD] computeShiftIncrement [RETURN_TYPE] void  final int start final int end final int deflated [VARIABLES] boolean double[] b bp imagEigenvalues invI main range realEigenvalues secondary squaredSecondary vData vK work ArrayRealVector[] eigenvectors RealMatrix b cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 a2 absDCurrent absDPrevious absoluteTolerance alpha b b1 b2 beta c cnst1 cnst2 cnst3 d dCurrent dMin dMin1 dMin2 dN dN1 dN2 delta determinant di diagMax diagMin e12 eCurrent eMax eMin ePrevious ei eiM1 eps g gam gap1 gap2 invIJ lambda largestRoot left lower lowerSpectra margin max middle mij minPivot mji offDiagMax offDiagMin oldB1 oneFourth p previousEMin q q0 q1 q1q2Me22 q2 qMax r radius range ratio relativeTolerance right s sigma sigmaLow splitTolerance sqrtMq sumOffDiag t tNorm tau theta threeFourth tmp upper upperSpectra z0 z1 z2 int begin columns count deflated deflatedEnd end fourI i i0 i4 index j j4 j4p2 k l lowerStart m maxIter n n0 nColB nn np oneFourthCount pingPong rows split start step tType threeFourthCount upperStart TriDiagonalTransformer transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1479	1479	1	replace	
22	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] tau = Math.max(s, 0.333 * dMin); tType = -3; } } else {  tType = -4; double s = 0.25 * dMin; double gam; int np; if (dMin == dN) { [BUGGY] [BUGGY] gam = dN; a2 = 0.0; if (work[nn - 5]>work[nn - 7]) { return; } b2 = work[nn - 5] / work[nn - 7]; np = nn - 9; } else { np = nn - 2 * pingPong; b2 = work[np - 2]; gam = dN1; [CLASS] EigenDecompositionImpl Solver [METHOD] computeShiftIncrement [RETURN_TYPE] void  final int start final int end final int deflated [VARIABLES] boolean double[] b bp imagEigenvalues invI main range realEigenvalues secondary squaredSecondary vData vK work ArrayRealVector[] eigenvectors RealMatrix b cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 a2 absDCurrent absDPrevious absoluteTolerance alpha b b1 b2 beta c cnst1 cnst2 cnst3 d dCurrent dMin dMin1 dMin2 dN dN1 dN2 delta determinant di diagMax diagMin e12 eCurrent eMax eMin ePrevious ei eiM1 eps g gam gap1 gap2 invIJ lambda largestRoot left lower lowerSpectra margin max middle mij minPivot mji offDiagMax offDiagMin oldB1 oneFourth p previousEMin q q0 q1 q1q2Me22 q2 qMax r radius range ratio relativeTolerance right s sigma sigmaLow splitTolerance sqrtMq sumOffDiag t tNorm tau theta threeFourth tmp upper upperSpectra z0 z1 z2 int begin columns count deflated deflatedEnd end fourI i i0 i4 index j j4 j4p2 k l lowerStart m maxIter n n0 nColB nn np oneFourthCount pingPong rows split start step tType threeFourthCount upperStart TriDiagonalTransformer transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1479	1479	1	add	
23	[BUG] [BUGGY] a2 = 0.0; [FE] ArrayIndexOutOfBoundsException [CONTEXT] tType = -3; } } else {  tType = -4; double s = 0.25 * dMin; double gam; int np; if (dMin == dN) { gam = dN; [BUGGY] a2 = 0.0; [BUGGY] if (work[nn - 5]>work[nn - 7]) { return; } b2 = work[nn - 5] / work[nn - 7]; np = nn - 9; } else { np = nn - 2 * pingPong; b2 = work[np - 2]; gam = dN1; if (work[np - 4]>work[np - 2]) { [CLASS] EigenDecompositionImpl Solver [METHOD] computeShiftIncrement [RETURN_TYPE] void  final int start final int end final int deflated [VARIABLES] boolean double[] b bp imagEigenvalues invI main range realEigenvalues secondary squaredSecondary vData vK work ArrayRealVector[] eigenvectors RealMatrix b cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 a2 absDCurrent absDPrevious absoluteTolerance alpha b b1 b2 beta c cnst1 cnst2 cnst3 d dCurrent dMin dMin1 dMin2 dN dN1 dN2 delta determinant di diagMax diagMin e12 eCurrent eMax eMin ePrevious ei eiM1 eps g gam gap1 gap2 invIJ lambda largestRoot left lower lowerSpectra margin max middle mij minPivot mji offDiagMax offDiagMin oldB1 oneFourth p previousEMin q q0 q1 q1q2Me22 q2 qMax r radius range ratio relativeTolerance right s sigma sigmaLow splitTolerance sqrtMq sumOffDiag t tNorm tau theta threeFourth tmp upper upperSpectra z0 z1 z2 int begin columns count deflated deflatedEnd end fourI i i0 i4 index j j4 j4p2 k l lowerStart m maxIter n n0 nColB nn np oneFourthCount pingPong rows split start step tType threeFourthCount upperStart TriDiagonalTransformer transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	replace	
24	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] tType = -3; } } else {  tType = -4; double s = 0.25 * dMin; double gam; int np; if (dMin == dN) { gam = dN; [BUGGY] [BUGGY] a2 = 0.0; if (work[nn - 5]>work[nn - 7]) { return; } b2 = work[nn - 5] / work[nn - 7]; np = nn - 9; } else { np = nn - 2 * pingPong; b2 = work[np - 2]; gam = dN1; if (work[np - 4]>work[np - 2]) { [CLASS] EigenDecompositionImpl Solver [METHOD] computeShiftIncrement [RETURN_TYPE] void  final int start final int end final int deflated [VARIABLES] boolean double[] b bp imagEigenvalues invI main range realEigenvalues secondary squaredSecondary vData vK work ArrayRealVector[] eigenvectors RealMatrix b cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 a2 absDCurrent absDPrevious absoluteTolerance alpha b b1 b2 beta c cnst1 cnst2 cnst3 d dCurrent dMin dMin1 dMin2 dN dN1 dN2 delta determinant di diagMax diagMin e12 eCurrent eMax eMin ePrevious ei eiM1 eps g gam gap1 gap2 invIJ lambda largestRoot left lower lowerSpectra margin max middle mij minPivot mji offDiagMax offDiagMin oldB1 oneFourth p previousEMin q q0 q1 q1q2Me22 q2 qMax r radius range ratio relativeTolerance right s sigma sigmaLow splitTolerance sqrtMq sumOffDiag t tNorm tau theta threeFourth tmp upper upperSpectra z0 z1 z2 int begin columns count deflated deflatedEnd end fourI i i0 i4 index j j4 j4p2 k l lowerStart m maxIter n n0 nColB nn np oneFourthCount pingPong rows split start step tType threeFourthCount upperStart TriDiagonalTransformer transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	add	
25	[BUG] [BUGGY] if (work[nn - 5]>work[nn - 7]) { [FE] ArrayIndexOutOfBoundsException [CONTEXT] } } else {  tType = -4; double s = 0.25 * dMin; double gam; int np; if (dMin == dN) { gam = dN; a2 = 0.0; [BUGGY] if (work[nn - 5]>work[nn - 7]) { [BUGGY] return; } b2 = work[nn - 5] / work[nn - 7]; np = nn - 9; } else { np = nn - 2 * pingPong; b2 = work[np - 2]; gam = dN1; if (work[np - 4]>work[np - 2]) { return; [CLASS] EigenDecompositionImpl Solver [METHOD] computeShiftIncrement [RETURN_TYPE] void  final int start final int end final int deflated [VARIABLES] boolean double[] b bp imagEigenvalues invI main range realEigenvalues secondary squaredSecondary vData vK work ArrayRealVector[] eigenvectors RealMatrix b cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 a2 absDCurrent absDPrevious absoluteTolerance alpha b b1 b2 beta c cnst1 cnst2 cnst3 d dCurrent dMin dMin1 dMin2 dN dN1 dN2 delta determinant di diagMax diagMin e12 eCurrent eMax eMin ePrevious ei eiM1 eps g gam gap1 gap2 invIJ lambda largestRoot left lower lowerSpectra margin max middle mij minPivot mji offDiagMax offDiagMin oldB1 oneFourth p previousEMin q q0 q1 q1q2Me22 q2 qMax r radius range ratio relativeTolerance right s sigma sigmaLow splitTolerance sqrtMq sumOffDiag t tNorm tau theta threeFourth tmp upper upperSpectra z0 z1 z2 int begin columns count deflated deflatedEnd end fourI i i0 i4 index j j4 j4p2 k l lowerStart m maxIter n n0 nColB nn np oneFourthCount pingPong rows split start step tType threeFourthCount upperStart TriDiagonalTransformer transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	
26	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] } } else {  tType = -4; double s = 0.25 * dMin; double gam; int np; if (dMin == dN) { gam = dN; a2 = 0.0; [BUGGY] [BUGGY] if (work[nn - 5]>work[nn - 7]) { return; } b2 = work[nn - 5] / work[nn - 7]; np = nn - 9; } else { np = nn - 2 * pingPong; b2 = work[np - 2]; gam = dN1; if (work[np - 4]>work[np - 2]) { return; [CLASS] EigenDecompositionImpl Solver [METHOD] computeShiftIncrement [RETURN_TYPE] void  final int start final int end final int deflated [VARIABLES] boolean double[] b bp imagEigenvalues invI main range realEigenvalues secondary squaredSecondary vData vK work ArrayRealVector[] eigenvectors RealMatrix b cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 a2 absDCurrent absDPrevious absoluteTolerance alpha b b1 b2 beta c cnst1 cnst2 cnst3 d dCurrent dMin dMin1 dMin2 dN dN1 dN2 delta determinant di diagMax diagMin e12 eCurrent eMax eMin ePrevious ei eiM1 eps g gam gap1 gap2 invIJ lambda largestRoot left lower lowerSpectra margin max middle mij minPivot mji offDiagMax offDiagMin oldB1 oneFourth p previousEMin q q0 q1 q1q2Me22 q2 qMax r radius range ratio relativeTolerance right s sigma sigmaLow splitTolerance sqrtMq sumOffDiag t tNorm tau theta threeFourth tmp upper upperSpectra z0 z1 z2 int begin columns count deflated deflatedEnd end fourI i i0 i4 index j j4 j4p2 k l lowerStart m maxIter n n0 nColB nn np oneFourthCount pingPong rows split start step tType threeFourthCount upperStart TriDiagonalTransformer transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	add	
27	[BUG] [BUGGY] b2 = work[nn - 5] / work[nn - 7]; [FE] ArrayIndexOutOfBoundsException [CONTEXT] tType = -4; double s = 0.25 * dMin; double gam; int np; if (dMin == dN) { gam = dN; a2 = 0.0; if (work[nn - 5]>work[nn - 7]) { return; } [BUGGY] b2 = work[nn - 5] / work[nn - 7]; [BUGGY] np = nn - 9; } else { np = nn - 2 * pingPong; b2 = work[np - 2]; gam = dN1; if (work[np - 4]>work[np - 2]) { return; } a2 = work[np - 4] / work[np - 2]; if (work[nn - 9]>work[nn - 11]) { [CLASS] EigenDecompositionImpl Solver [METHOD] computeShiftIncrement [RETURN_TYPE] void  final int start final int end final int deflated [VARIABLES] boolean double[] b bp imagEigenvalues invI main range realEigenvalues secondary squaredSecondary vData vK work ArrayRealVector[] eigenvectors RealMatrix b cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 a2 absDCurrent absDPrevious absoluteTolerance alpha b b1 b2 beta c cnst1 cnst2 cnst3 d dCurrent dMin dMin1 dMin2 dN dN1 dN2 delta determinant di diagMax diagMin e12 eCurrent eMax eMin ePrevious ei eiM1 eps g gam gap1 gap2 invIJ lambda largestRoot left lower lowerSpectra margin max middle mij minPivot mji offDiagMax offDiagMin oldB1 oneFourth p previousEMin q q0 q1 q1q2Me22 q2 qMax r radius range ratio relativeTolerance right s sigma sigmaLow splitTolerance sqrtMq sumOffDiag t tNorm tau theta threeFourth tmp upper upperSpectra z0 z1 z2 int begin columns count deflated deflatedEnd end fourI i i0 i4 index j j4 j4p2 k l lowerStart m maxIter n n0 nColB nn np oneFourthCount pingPong rows split start step tType threeFourthCount upperStart TriDiagonalTransformer transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1484	1484	1	replace	
28	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] tType = -4; double s = 0.25 * dMin; double gam; int np; if (dMin == dN) { gam = dN; a2 = 0.0; if (work[nn - 5]>work[nn - 7]) { return; } [BUGGY] [BUGGY] b2 = work[nn - 5] / work[nn - 7]; np = nn - 9; } else { np = nn - 2 * pingPong; b2 = work[np - 2]; gam = dN1; if (work[np - 4]>work[np - 2]) { return; } a2 = work[np - 4] / work[np - 2]; if (work[nn - 9]>work[nn - 11]) { [CLASS] EigenDecompositionImpl Solver [METHOD] computeShiftIncrement [RETURN_TYPE] void  final int start final int end final int deflated [VARIABLES] boolean double[] b bp imagEigenvalues invI main range realEigenvalues secondary squaredSecondary vData vK work ArrayRealVector[] eigenvectors RealMatrix b cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 a2 absDCurrent absDPrevious absoluteTolerance alpha b b1 b2 beta c cnst1 cnst2 cnst3 d dCurrent dMin dMin1 dMin2 dN dN1 dN2 delta determinant di diagMax diagMin e12 eCurrent eMax eMin ePrevious ei eiM1 eps g gam gap1 gap2 invIJ lambda largestRoot left lower lowerSpectra margin max middle mij minPivot mji offDiagMax offDiagMin oldB1 oneFourth p previousEMin q q0 q1 q1q2Me22 q2 qMax r radius range ratio relativeTolerance right s sigma sigmaLow splitTolerance sqrtMq sumOffDiag t tNorm tau theta threeFourth tmp upper upperSpectra z0 z1 z2 int begin columns count deflated deflatedEnd end fourI i i0 i4 index j j4 j4p2 k l lowerStart m maxIter n n0 nColB nn np oneFourthCount pingPong rows split start step tType threeFourthCount upperStart TriDiagonalTransformer transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1484	1484	1	add	
29	[BUG] [BUGGY] np = nn - 9; [FE] ArrayIndexOutOfBoundsException [CONTEXT] if (dMin == dN) { gam = dN; a2 = 0.0; if (work[nn - 5]>work[nn - 7]) { return; } b2 = work[nn - 5] / work[nn - 7]; [BUGGY] np = nn - 9; [BUGGY] } else { np = nn - 2 * pingPong; b2 = work[np - 2]; gam = dN1; if (work[np - 4]>work[np - 2]) { return; } a2 = work[np - 4] / work[np - 2]; if (work[nn - 9]>work[nn - 11]) { return; [CLASS] EigenDecompositionImpl Solver [METHOD] computeShiftIncrement [RETURN_TYPE] void  final int start final int end final int deflated [VARIABLES] boolean double[] b bp imagEigenvalues invI main range realEigenvalues secondary squaredSecondary vData vK work ArrayRealVector[] eigenvectors RealMatrix b cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 a2 absDCurrent absDPrevious absoluteTolerance alpha b b1 b2 beta c cnst1 cnst2 cnst3 d dCurrent dMin dMin1 dMin2 dN dN1 dN2 delta determinant di diagMax diagMin e12 eCurrent eMax eMin ePrevious ei eiM1 eps g gam gap1 gap2 invIJ lambda largestRoot left lower lowerSpectra margin max middle mij minPivot mji offDiagMax offDiagMin oldB1 oneFourth p previousEMin q q0 q1 q1q2Me22 q2 qMax r radius range ratio relativeTolerance right s sigma sigmaLow splitTolerance sqrtMq sumOffDiag t tNorm tau theta threeFourth tmp upper upperSpectra z0 z1 z2 int begin columns count deflated deflatedEnd end fourI i i0 i4 index j j4 j4p2 k l lowerStart m maxIter n n0 nColB nn np oneFourthCount pingPong rows split start step tType threeFourthCount upperStart TriDiagonalTransformer transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1485	1485	1	replace	
30	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] if (dMin == dN) { gam = dN; a2 = 0.0; if (work[nn - 5]>work[nn - 7]) { return; } b2 = work[nn - 5] / work[nn - 7]; [BUGGY] [BUGGY] np = nn - 9; } else { np = nn - 2 * pingPong; b2 = work[np - 2]; gam = dN1; if (work[np - 4]>work[np - 2]) { return; } a2 = work[np - 4] / work[np - 2]; if (work[nn - 9]>work[nn - 11]) { return; [CLASS] EigenDecompositionImpl Solver [METHOD] computeShiftIncrement [RETURN_TYPE] void  final int start final int end final int deflated [VARIABLES] boolean double[] b bp imagEigenvalues invI main range realEigenvalues secondary squaredSecondary vData vK work ArrayRealVector[] eigenvectors RealMatrix b cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 a2 absDCurrent absDPrevious absoluteTolerance alpha b b1 b2 beta c cnst1 cnst2 cnst3 d dCurrent dMin dMin1 dMin2 dN dN1 dN2 delta determinant di diagMax diagMin e12 eCurrent eMax eMin ePrevious ei eiM1 eps g gam gap1 gap2 invIJ lambda largestRoot left lower lowerSpectra margin max middle mij minPivot mji offDiagMax offDiagMin oldB1 oneFourth p previousEMin q q0 q1 q1q2Me22 q2 qMax r radius range ratio relativeTolerance right s sigma sigmaLow splitTolerance sqrtMq sumOffDiag t tNorm tau theta threeFourth tmp upper upperSpectra z0 z1 z2 int begin columns count deflated deflatedEnd end fourI i i0 i4 index j j4 j4p2 k l lowerStart m maxIter n n0 nColB nn np oneFourthCount pingPong rows split start step tType threeFourthCount upperStart TriDiagonalTransformer transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1485	1485	1	add	
31	[BUG] [BUGGY] if(b2 == 0.0) { [FE] ArrayIndexOutOfBoundsException [CONTEXT] if (work[nn - 9]>work[nn - 11]) { return; } b2 = work[nn - 9] / work[nn - 11]; np = nn - 13; }  a2 = a2 + b2; for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) { [BUGGY] if(b2 == 0.0) { [BUGGY] break; } b1 = b2; if (work[i4]>work[i4 - 2]) { return; } b2 = b2 * (work[i4] / work[i4 - 2]); a2 = a2 + b2; if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) { break; [CLASS] EigenDecompositionImpl Solver [METHOD] computeShiftIncrement [RETURN_TYPE] void  final int start final int end final int deflated [VARIABLES] boolean double[] b bp imagEigenvalues invI main range realEigenvalues secondary squaredSecondary vData vK work ArrayRealVector[] eigenvectors RealMatrix b cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 a2 absDCurrent absDPrevious absoluteTolerance alpha b b1 b2 beta c cnst1 cnst2 cnst3 d dCurrent dMin dMin1 dMin2 dN dN1 dN2 delta determinant di diagMax diagMin e12 eCurrent eMax eMin ePrevious ei eiM1 eps g gam gap1 gap2 invIJ lambda largestRoot left lower lowerSpectra margin max middle mij minPivot mji offDiagMax offDiagMin oldB1 oneFourth p previousEMin q q0 q1 q1q2Me22 q2 qMax r radius range ratio relativeTolerance right s sigma sigmaLow splitTolerance sqrtMq sumOffDiag t tNorm tau theta threeFourth tmp upper upperSpectra z0 z1 z2 int begin columns count deflated deflatedEnd end fourI i i0 i4 index j j4 j4p2 k l lowerStart m maxIter n n0 nColB nn np oneFourthCount pingPong rows split start step tType threeFourthCount upperStart TriDiagonalTransformer transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1504	1504	1	replace	
32	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] if (work[nn - 9]>work[nn - 11]) { return; } b2 = work[nn - 9] / work[nn - 11]; np = nn - 13; }  a2 = a2 + b2; for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) { [BUGGY] [BUGGY] if(b2 == 0.0) { break; } b1 = b2; if (work[i4]>work[i4 - 2]) { return; } b2 = b2 * (work[i4] / work[i4 - 2]); a2 = a2 + b2; if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) { break; [CLASS] EigenDecompositionImpl Solver [METHOD] computeShiftIncrement [RETURN_TYPE] void  final int start final int end final int deflated [VARIABLES] boolean double[] b bp imagEigenvalues invI main range realEigenvalues secondary squaredSecondary vData vK work ArrayRealVector[] eigenvectors RealMatrix b cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 a2 absDCurrent absDPrevious absoluteTolerance alpha b b1 b2 beta c cnst1 cnst2 cnst3 d dCurrent dMin dMin1 dMin2 dN dN1 dN2 delta determinant di diagMax diagMin e12 eCurrent eMax eMin ePrevious ei eiM1 eps g gam gap1 gap2 invIJ lambda largestRoot left lower lowerSpectra margin max middle mij minPivot mji offDiagMax offDiagMin oldB1 oneFourth p previousEMin q q0 q1 q1q2Me22 q2 qMax r radius range ratio relativeTolerance right s sigma sigmaLow splitTolerance sqrtMq sumOffDiag t tNorm tau theta threeFourth tmp upper upperSpectra z0 z1 z2 int begin columns count deflated deflatedEnd end fourI i i0 i4 index j j4 j4p2 k l lowerStart m maxIter n n0 nColB nn np oneFourthCount pingPong rows split start step tType threeFourthCount upperStart TriDiagonalTransformer transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1504	1504	1	add	
33	[BUG] [BUGGY] b1 = b2; [FE] ArrayIndexOutOfBoundsException [CONTEXT] b2 = work[nn - 9] / work[nn - 11]; np = nn - 13; }  a2 = a2 + b2; for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) { if(b2 == 0.0) { break; } [BUGGY] b1 = b2; [BUGGY] if (work[i4]>work[i4 - 2]) { return; } b2 = b2 * (work[i4] / work[i4 - 2]); a2 = a2 + b2; if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) { break; } } a2 = cnst3 * a2; [CLASS] EigenDecompositionImpl Solver [METHOD] computeShiftIncrement [RETURN_TYPE] void  final int start final int end final int deflated [VARIABLES] boolean double[] b bp imagEigenvalues invI main range realEigenvalues secondary squaredSecondary vData vK work ArrayRealVector[] eigenvectors RealMatrix b cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 a2 absDCurrent absDPrevious absoluteTolerance alpha b b1 b2 beta c cnst1 cnst2 cnst3 d dCurrent dMin dMin1 dMin2 dN dN1 dN2 delta determinant di diagMax diagMin e12 eCurrent eMax eMin ePrevious ei eiM1 eps g gam gap1 gap2 invIJ lambda largestRoot left lower lowerSpectra margin max middle mij minPivot mji offDiagMax offDiagMin oldB1 oneFourth p previousEMin q q0 q1 q1q2Me22 q2 qMax r radius range ratio relativeTolerance right s sigma sigmaLow splitTolerance sqrtMq sumOffDiag t tNorm tau theta threeFourth tmp upper upperSpectra z0 z1 z2 int begin columns count deflated deflatedEnd end fourI i i0 i4 index j j4 j4p2 k l lowerStart m maxIter n n0 nColB nn np oneFourthCount pingPong rows split start step tType threeFourthCount upperStart TriDiagonalTransformer transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	
34	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] b2 = work[nn - 9] / work[nn - 11]; np = nn - 13; }  a2 = a2 + b2; for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) { if(b2 == 0.0) { break; } [BUGGY] [BUGGY] b1 = b2; if (work[i4]>work[i4 - 2]) { return; } b2 = b2 * (work[i4] / work[i4 - 2]); a2 = a2 + b2; if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) { break; } } a2 = cnst3 * a2; [CLASS] EigenDecompositionImpl Solver [METHOD] computeShiftIncrement [RETURN_TYPE] void  final int start final int end final int deflated [VARIABLES] boolean double[] b bp imagEigenvalues invI main range realEigenvalues secondary squaredSecondary vData vK work ArrayRealVector[] eigenvectors RealMatrix b cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 a2 absDCurrent absDPrevious absoluteTolerance alpha b b1 b2 beta c cnst1 cnst2 cnst3 d dCurrent dMin dMin1 dMin2 dN dN1 dN2 delta determinant di diagMax diagMin e12 eCurrent eMax eMin ePrevious ei eiM1 eps g gam gap1 gap2 invIJ lambda largestRoot left lower lowerSpectra margin max middle mij minPivot mji offDiagMax offDiagMin oldB1 oneFourth p previousEMin q q0 q1 q1q2Me22 q2 qMax r radius range ratio relativeTolerance right s sigma sigmaLow splitTolerance sqrtMq sumOffDiag t tNorm tau theta threeFourth tmp upper upperSpectra z0 z1 z2 int begin columns count deflated deflatedEnd end fourI i i0 i4 index j j4 j4p2 k l lowerStart m maxIter n n0 nColB nn np oneFourthCount pingPong rows split start step tType threeFourthCount upperStart TriDiagonalTransformer transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	add	
35	[BUG] [BUGGY] if (work[i4]>work[i4 - 2]) { [FE] ArrayIndexOutOfBoundsException [CONTEXT] np = nn - 13; }  a2 = a2 + b2; for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) { if(b2 == 0.0) { break; } b1 = b2; [BUGGY] if (work[i4]>work[i4 - 2]) { [BUGGY] return; } b2 = b2 * (work[i4] / work[i4 - 2]); a2 = a2 + b2; if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) { break; } } a2 = cnst3 * a2;  [CLASS] EigenDecompositionImpl Solver [METHOD] computeShiftIncrement [RETURN_TYPE] void  final int start final int end final int deflated [VARIABLES] boolean double[] b bp imagEigenvalues invI main range realEigenvalues secondary squaredSecondary vData vK work ArrayRealVector[] eigenvectors RealMatrix b cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 a2 absDCurrent absDPrevious absoluteTolerance alpha b b1 b2 beta c cnst1 cnst2 cnst3 d dCurrent dMin dMin1 dMin2 dN dN1 dN2 delta determinant di diagMax diagMin e12 eCurrent eMax eMin ePrevious ei eiM1 eps g gam gap1 gap2 invIJ lambda largestRoot left lower lowerSpectra margin max middle mij minPivot mji offDiagMax offDiagMin oldB1 oneFourth p previousEMin q q0 q1 q1q2Me22 q2 qMax r radius range ratio relativeTolerance right s sigma sigmaLow splitTolerance sqrtMq sumOffDiag t tNorm tau theta threeFourth tmp upper upperSpectra z0 z1 z2 int begin columns count deflated deflatedEnd end fourI i i0 i4 index j j4 j4p2 k l lowerStart m maxIter n n0 nColB nn np oneFourthCount pingPong rows split start step tType threeFourthCount upperStart TriDiagonalTransformer transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	
36	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] np = nn - 13; }  a2 = a2 + b2; for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) { if(b2 == 0.0) { break; } b1 = b2; [BUGGY] [BUGGY] if (work[i4]>work[i4 - 2]) { return; } b2 = b2 * (work[i4] / work[i4 - 2]); a2 = a2 + b2; if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) { break; } } a2 = cnst3 * a2;  [CLASS] EigenDecompositionImpl Solver [METHOD] computeShiftIncrement [RETURN_TYPE] void  final int start final int end final int deflated [VARIABLES] boolean double[] b bp imagEigenvalues invI main range realEigenvalues secondary squaredSecondary vData vK work ArrayRealVector[] eigenvectors RealMatrix b cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 a2 absDCurrent absDPrevious absoluteTolerance alpha b b1 b2 beta c cnst1 cnst2 cnst3 d dCurrent dMin dMin1 dMin2 dN dN1 dN2 delta determinant di diagMax diagMin e12 eCurrent eMax eMin ePrevious ei eiM1 eps g gam gap1 gap2 invIJ lambda largestRoot left lower lowerSpectra margin max middle mij minPivot mji offDiagMax offDiagMin oldB1 oneFourth p previousEMin q q0 q1 q1q2Me22 q2 qMax r radius range ratio relativeTolerance right s sigma sigmaLow splitTolerance sqrtMq sumOffDiag t tNorm tau theta threeFourth tmp upper upperSpectra z0 z1 z2 int begin columns count deflated deflatedEnd end fourI i i0 i4 index j j4 j4p2 k l lowerStart m maxIter n n0 nColB nn np oneFourthCount pingPong rows split start step tType threeFourthCount upperStart TriDiagonalTransformer transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	add	
37	[BUG] [BUGGY] return; [FE] ArrayIndexOutOfBoundsException [CONTEXT] }  a2 = a2 + b2; for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) { if(b2 == 0.0) { break; } b1 = b2; if (work[i4]>work[i4 - 2]) { [BUGGY] return; [BUGGY] } b2 = b2 * (work[i4] / work[i4 - 2]); a2 = a2 + b2; if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) { break; } } a2 = cnst3 * a2;   [CLASS] EigenDecompositionImpl Solver [METHOD] computeShiftIncrement [RETURN_TYPE] void  final int start final int end final int deflated [VARIABLES] boolean double[] b bp imagEigenvalues invI main range realEigenvalues secondary squaredSecondary vData vK work ArrayRealVector[] eigenvectors RealMatrix b cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 a2 absDCurrent absDPrevious absoluteTolerance alpha b b1 b2 beta c cnst1 cnst2 cnst3 d dCurrent dMin dMin1 dMin2 dN dN1 dN2 delta determinant di diagMax diagMin e12 eCurrent eMax eMin ePrevious ei eiM1 eps g gam gap1 gap2 invIJ lambda largestRoot left lower lowerSpectra margin max middle mij minPivot mji offDiagMax offDiagMin oldB1 oneFourth p previousEMin q q0 q1 q1q2Me22 q2 qMax r radius range ratio relativeTolerance right s sigma sigmaLow splitTolerance sqrtMq sumOffDiag t tNorm tau theta threeFourth tmp upper upperSpectra z0 z1 z2 int begin columns count deflated deflatedEnd end fourI i i0 i4 index j j4 j4p2 k l lowerStart m maxIter n n0 nColB nn np oneFourthCount pingPong rows split start step tType threeFourthCount upperStart TriDiagonalTransformer transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1509	1509	1	replace	
38	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] }  a2 = a2 + b2; for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) { if(b2 == 0.0) { break; } b1 = b2; if (work[i4]>work[i4 - 2]) { [BUGGY] [BUGGY] return; } b2 = b2 * (work[i4] / work[i4 - 2]); a2 = a2 + b2; if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) { break; } } a2 = cnst3 * a2;   [CLASS] EigenDecompositionImpl Solver [METHOD] computeShiftIncrement [RETURN_TYPE] void  final int start final int end final int deflated [VARIABLES] boolean double[] b bp imagEigenvalues invI main range realEigenvalues secondary squaredSecondary vData vK work ArrayRealVector[] eigenvectors RealMatrix b cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 a2 absDCurrent absDPrevious absoluteTolerance alpha b b1 b2 beta c cnst1 cnst2 cnst3 d dCurrent dMin dMin1 dMin2 dN dN1 dN2 delta determinant di diagMax diagMin e12 eCurrent eMax eMin ePrevious ei eiM1 eps g gam gap1 gap2 invIJ lambda largestRoot left lower lowerSpectra margin max middle mij minPivot mji offDiagMax offDiagMin oldB1 oneFourth p previousEMin q q0 q1 q1q2Me22 q2 qMax r radius range ratio relativeTolerance right s sigma sigmaLow splitTolerance sqrtMq sumOffDiag t tNorm tau theta threeFourth tmp upper upperSpectra z0 z1 z2 int begin columns count deflated deflatedEnd end fourI i i0 i4 index j j4 j4p2 k l lowerStart m maxIter n n0 nColB nn np oneFourthCount pingPong rows split start step tType threeFourthCount upperStart TriDiagonalTransformer transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1509	1509	1	add	
39	[BUG] [BUGGY] b2 = b2 * (work[i4] / work[i4 - 2]); [FE] ArrayIndexOutOfBoundsException [CONTEXT]  a2 = a2 + b2; for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) { if(b2 == 0.0) { break; } b1 = b2; if (work[i4]>work[i4 - 2]) { return; } [BUGGY] b2 = b2 * (work[i4] / work[i4 - 2]); [BUGGY] a2 = a2 + b2; if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) { break; } } a2 = cnst3 * a2;  if (a2 < cnst1) { s = gam * (1 - Math.sqrt(a2)) / (1 + a2); [CLASS] EigenDecompositionImpl Solver [METHOD] computeShiftIncrement [RETURN_TYPE] void  final int start final int end final int deflated [VARIABLES] boolean double[] b bp imagEigenvalues invI main range realEigenvalues secondary squaredSecondary vData vK work ArrayRealVector[] eigenvectors RealMatrix b cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 a2 absDCurrent absDPrevious absoluteTolerance alpha b b1 b2 beta c cnst1 cnst2 cnst3 d dCurrent dMin dMin1 dMin2 dN dN1 dN2 delta determinant di diagMax diagMin e12 eCurrent eMax eMin ePrevious ei eiM1 eps g gam gap1 gap2 invIJ lambda largestRoot left lower lowerSpectra margin max middle mij minPivot mji offDiagMax offDiagMin oldB1 oneFourth p previousEMin q q0 q1 q1q2Me22 q2 qMax r radius range ratio relativeTolerance right s sigma sigmaLow splitTolerance sqrtMq sumOffDiag t tNorm tau theta threeFourth tmp upper upperSpectra z0 z1 z2 int begin columns count deflated deflatedEnd end fourI i i0 i4 index j j4 j4p2 k l lowerStart m maxIter n n0 nColB nn np oneFourthCount pingPong rows split start step tType threeFourthCount upperStart TriDiagonalTransformer transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1511	1511	1	replace	
40	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT]  a2 = a2 + b2; for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) { if(b2 == 0.0) { break; } b1 = b2; if (work[i4]>work[i4 - 2]) { return; } [BUGGY] [BUGGY] b2 = b2 * (work[i4] / work[i4 - 2]); a2 = a2 + b2; if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) { break; } } a2 = cnst3 * a2;  if (a2 < cnst1) { s = gam * (1 - Math.sqrt(a2)) / (1 + a2); [CLASS] EigenDecompositionImpl Solver [METHOD] computeShiftIncrement [RETURN_TYPE] void  final int start final int end final int deflated [VARIABLES] boolean double[] b bp imagEigenvalues invI main range realEigenvalues secondary squaredSecondary vData vK work ArrayRealVector[] eigenvectors RealMatrix b cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 a2 absDCurrent absDPrevious absoluteTolerance alpha b b1 b2 beta c cnst1 cnst2 cnst3 d dCurrent dMin dMin1 dMin2 dN dN1 dN2 delta determinant di diagMax diagMin e12 eCurrent eMax eMin ePrevious ei eiM1 eps g gam gap1 gap2 invIJ lambda largestRoot left lower lowerSpectra margin max middle mij minPivot mji offDiagMax offDiagMin oldB1 oneFourth p previousEMin q q0 q1 q1q2Me22 q2 qMax r radius range ratio relativeTolerance right s sigma sigmaLow splitTolerance sqrtMq sumOffDiag t tNorm tau theta threeFourth tmp upper upperSpectra z0 z1 z2 int begin columns count deflated deflatedEnd end fourI i i0 i4 index j j4 j4p2 k l lowerStart m maxIter n n0 nColB nn np oneFourthCount pingPong rows split start step tType threeFourthCount upperStart TriDiagonalTransformer transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1511	1511	1	add	
41	[BUG] [BUGGY] a2 = a2 + b2; [FE] ArrayIndexOutOfBoundsException [CONTEXT] a2 = a2 + b2; for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) { if(b2 == 0.0) { break; } b1 = b2; if (work[i4]>work[i4 - 2]) { return; } b2 = b2 * (work[i4] / work[i4 - 2]); [BUGGY] a2 = a2 + b2; [BUGGY] if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) { break; } } a2 = cnst3 * a2;  if (a2 < cnst1) { s = gam * (1 - Math.sqrt(a2)) / (1 + a2); } [CLASS] EigenDecompositionImpl Solver [METHOD] computeShiftIncrement [RETURN_TYPE] void  final int start final int end final int deflated [VARIABLES] boolean double[] b bp imagEigenvalues invI main range realEigenvalues secondary squaredSecondary vData vK work ArrayRealVector[] eigenvectors RealMatrix b cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 a2 absDCurrent absDPrevious absoluteTolerance alpha b b1 b2 beta c cnst1 cnst2 cnst3 d dCurrent dMin dMin1 dMin2 dN dN1 dN2 delta determinant di diagMax diagMin e12 eCurrent eMax eMin ePrevious ei eiM1 eps g gam gap1 gap2 invIJ lambda largestRoot left lower lowerSpectra margin max middle mij minPivot mji offDiagMax offDiagMin oldB1 oneFourth p previousEMin q q0 q1 q1q2Me22 q2 qMax r radius range ratio relativeTolerance right s sigma sigmaLow splitTolerance sqrtMq sumOffDiag t tNorm tau theta threeFourth tmp upper upperSpectra z0 z1 z2 int begin columns count deflated deflatedEnd end fourI i i0 i4 index j j4 j4p2 k l lowerStart m maxIter n n0 nColB nn np oneFourthCount pingPong rows split start step tType threeFourthCount upperStart TriDiagonalTransformer transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1512	1512	1	replace	
42	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] a2 = a2 + b2; for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) { if(b2 == 0.0) { break; } b1 = b2; if (work[i4]>work[i4 - 2]) { return; } b2 = b2 * (work[i4] / work[i4 - 2]); [BUGGY] [BUGGY] a2 = a2 + b2; if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) { break; } } a2 = cnst3 * a2;  if (a2 < cnst1) { s = gam * (1 - Math.sqrt(a2)) / (1 + a2); } [CLASS] EigenDecompositionImpl Solver [METHOD] computeShiftIncrement [RETURN_TYPE] void  final int start final int end final int deflated [VARIABLES] boolean double[] b bp imagEigenvalues invI main range realEigenvalues secondary squaredSecondary vData vK work ArrayRealVector[] eigenvectors RealMatrix b cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 a2 absDCurrent absDPrevious absoluteTolerance alpha b b1 b2 beta c cnst1 cnst2 cnst3 d dCurrent dMin dMin1 dMin2 dN dN1 dN2 delta determinant di diagMax diagMin e12 eCurrent eMax eMin ePrevious ei eiM1 eps g gam gap1 gap2 invIJ lambda largestRoot left lower lowerSpectra margin max middle mij minPivot mji offDiagMax offDiagMin oldB1 oneFourth p previousEMin q q0 q1 q1q2Me22 q2 qMax r radius range ratio relativeTolerance right s sigma sigmaLow splitTolerance sqrtMq sumOffDiag t tNorm tau theta threeFourth tmp upper upperSpectra z0 z1 z2 int begin columns count deflated deflatedEnd end fourI i i0 i4 index j j4 j4p2 k l lowerStart m maxIter n n0 nColB nn np oneFourthCount pingPong rows split start step tType threeFourthCount upperStart TriDiagonalTransformer transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1512	1512	1	add	
43	[BUG] [BUGGY] if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) { [FE] ArrayIndexOutOfBoundsException [CONTEXT] for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) { if(b2 == 0.0) { break; } b1 = b2; if (work[i4]>work[i4 - 2]) { return; } b2 = b2 * (work[i4] / work[i4 - 2]); a2 = a2 + b2; [BUGGY] if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) { [BUGGY] break; } } a2 = cnst3 * a2;  if (a2 < cnst1) { s = gam * (1 - Math.sqrt(a2)) / (1 + a2); } tau = s; [CLASS] EigenDecompositionImpl Solver [METHOD] computeShiftIncrement [RETURN_TYPE] void  final int start final int end final int deflated [VARIABLES] boolean double[] b bp imagEigenvalues invI main range realEigenvalues secondary squaredSecondary vData vK work ArrayRealVector[] eigenvectors RealMatrix b cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 a2 absDCurrent absDPrevious absoluteTolerance alpha b b1 b2 beta c cnst1 cnst2 cnst3 d dCurrent dMin dMin1 dMin2 dN dN1 dN2 delta determinant di diagMax diagMin e12 eCurrent eMax eMin ePrevious ei eiM1 eps g gam gap1 gap2 invIJ lambda largestRoot left lower lowerSpectra margin max middle mij minPivot mji offDiagMax offDiagMin oldB1 oneFourth p previousEMin q q0 q1 q1q2Me22 q2 qMax r radius range ratio relativeTolerance right s sigma sigmaLow splitTolerance sqrtMq sumOffDiag t tNorm tau theta threeFourth tmp upper upperSpectra z0 z1 z2 int begin columns count deflated deflatedEnd end fourI i i0 i4 index j j4 j4p2 k l lowerStart m maxIter n n0 nColB nn np oneFourthCount pingPong rows split start step tType threeFourthCount upperStart TriDiagonalTransformer transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	replace	
44	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) { if(b2 == 0.0) { break; } b1 = b2; if (work[i4]>work[i4 - 2]) { return; } b2 = b2 * (work[i4] / work[i4 - 2]); a2 = a2 + b2; [BUGGY] [BUGGY] if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) { break; } } a2 = cnst3 * a2;  if (a2 < cnst1) { s = gam * (1 - Math.sqrt(a2)) / (1 + a2); } tau = s; [CLASS] EigenDecompositionImpl Solver [METHOD] computeShiftIncrement [RETURN_TYPE] void  final int start final int end final int deflated [VARIABLES] boolean double[] b bp imagEigenvalues invI main range realEigenvalues secondary squaredSecondary vData vK work ArrayRealVector[] eigenvectors RealMatrix b cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 a2 absDCurrent absDPrevious absoluteTolerance alpha b b1 b2 beta c cnst1 cnst2 cnst3 d dCurrent dMin dMin1 dMin2 dN dN1 dN2 delta determinant di diagMax diagMin e12 eCurrent eMax eMin ePrevious ei eiM1 eps g gam gap1 gap2 invIJ lambda largestRoot left lower lowerSpectra margin max middle mij minPivot mji offDiagMax offDiagMin oldB1 oneFourth p previousEMin q q0 q1 q1q2Me22 q2 qMax r radius range ratio relativeTolerance right s sigma sigmaLow splitTolerance sqrtMq sumOffDiag t tNorm tau theta threeFourth tmp upper upperSpectra z0 z1 z2 int begin columns count deflated deflatedEnd end fourI i i0 i4 index j j4 j4p2 k l lowerStart m maxIter n n0 nColB nn np oneFourthCount pingPong rows split start step tType threeFourthCount upperStart TriDiagonalTransformer transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1513	1513	1	add	
45	[BUG] [BUGGY] tType = -5; [FE] ArrayIndexOutOfBoundsException [CONTEXT]  if (a2 < cnst1) { s = gam * (1 - Math.sqrt(a2)) / (1 + a2); } tau = s; } } else if (dMin == dN2) {  [BUGGY] tType = -5; [BUGGY] double s = 0.25 * dMin;  final int np = nn - 2 * pingPong; double b1 = work[np - 2]; double b2 = work[np - 6]; final double gam = dN2; if (work[np - 8] > b2 || work[np - 4] > b1) { return; } [CLASS] EigenDecompositionImpl Solver [METHOD] computeShiftIncrement [RETURN_TYPE] void  final int start final int end final int deflated [VARIABLES] boolean double[] b bp imagEigenvalues invI main range realEigenvalues secondary squaredSecondary vData vK work ArrayRealVector[] eigenvectors RealMatrix b cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 a2 absDCurrent absDPrevious absoluteTolerance alpha b b1 b2 beta c cnst1 cnst2 cnst3 d dCurrent dMin dMin1 dMin2 dN dN1 dN2 delta determinant di diagMax diagMin e12 eCurrent eMax eMin ePrevious ei eiM1 eps g gam gap1 gap2 invIJ lambda largestRoot left lower lowerSpectra margin max middle mij minPivot mji offDiagMax offDiagMin oldB1 oneFourth p previousEMin q q0 q1 q1q2Me22 q2 qMax r radius range ratio relativeTolerance right s sigma sigmaLow splitTolerance sqrtMq sumOffDiag t tNorm tau theta threeFourth tmp upper upperSpectra z0 z1 z2 int begin columns count deflated deflatedEnd end fourI i i0 i4 index j j4 j4p2 k l lowerStart m maxIter n n0 nColB nn np oneFourthCount pingPong rows split start step tType threeFourthCount upperStart TriDiagonalTransformer transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1529	1529	1	replace	
46	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT]  if (a2 < cnst1) { s = gam * (1 - Math.sqrt(a2)) / (1 + a2); } tau = s; } } else if (dMin == dN2) {  [BUGGY] [BUGGY] tType = -5; double s = 0.25 * dMin;  final int np = nn - 2 * pingPong; double b1 = work[np - 2]; double b2 = work[np - 6]; final double gam = dN2; if (work[np - 8] > b2 || work[np - 4] > b1) { return; } [CLASS] EigenDecompositionImpl Solver [METHOD] computeShiftIncrement [RETURN_TYPE] void  final int start final int end final int deflated [VARIABLES] boolean double[] b bp imagEigenvalues invI main range realEigenvalues secondary squaredSecondary vData vK work ArrayRealVector[] eigenvectors RealMatrix b cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 a2 absDCurrent absDPrevious absoluteTolerance alpha b b1 b2 beta c cnst1 cnst2 cnst3 d dCurrent dMin dMin1 dMin2 dN dN1 dN2 delta determinant di diagMax diagMin e12 eCurrent eMax eMin ePrevious ei eiM1 eps g gam gap1 gap2 invIJ lambda largestRoot left lower lowerSpectra margin max middle mij minPivot mji offDiagMax offDiagMin oldB1 oneFourth p previousEMin q q0 q1 q1q2Me22 q2 qMax r radius range ratio relativeTolerance right s sigma sigmaLow splitTolerance sqrtMq sumOffDiag t tNorm tau theta threeFourth tmp upper upperSpectra z0 z1 z2 int begin columns count deflated deflatedEnd end fourI i i0 i4 index j j4 j4p2 k l lowerStart m maxIter n n0 nColB nn np oneFourthCount pingPong rows split start step tType threeFourthCount upperStart TriDiagonalTransformer transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1529	1529	1	add	
47	[BUG] [BUGGY] double s = 0.25 * dMin; [FE] ArrayIndexOutOfBoundsException [CONTEXT] if (a2 < cnst1) { s = gam * (1 - Math.sqrt(a2)) / (1 + a2); } tau = s; } } else if (dMin == dN2) {  tType = -5; [BUGGY] double s = 0.25 * dMin; [BUGGY]   final int np = nn - 2 * pingPong; double b1 = work[np - 2]; double b2 = work[np - 6]; final double gam = dN2; if (work[np - 8] > b2 || work[np - 4] > b1) { return; } double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1); [CLASS] EigenDecompositionImpl Solver [METHOD] computeShiftIncrement [RETURN_TYPE] void  final int start final int end final int deflated [VARIABLES] boolean double[] b bp imagEigenvalues invI main range realEigenvalues secondary squaredSecondary vData vK work ArrayRealVector[] eigenvectors RealMatrix b cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 a2 absDCurrent absDPrevious absoluteTolerance alpha b b1 b2 beta c cnst1 cnst2 cnst3 d dCurrent dMin dMin1 dMin2 dN dN1 dN2 delta determinant di diagMax diagMin e12 eCurrent eMax eMin ePrevious ei eiM1 eps g gam gap1 gap2 invIJ lambda largestRoot left lower lowerSpectra margin max middle mij minPivot mji offDiagMax offDiagMin oldB1 oneFourth p previousEMin q q0 q1 q1q2Me22 q2 qMax r radius range ratio relativeTolerance right s sigma sigmaLow splitTolerance sqrtMq sumOffDiag t tNorm tau theta threeFourth tmp upper upperSpectra z0 z1 z2 int begin columns count deflated deflatedEnd end fourI i i0 i4 index j j4 j4p2 k l lowerStart m maxIter n n0 nColB nn np oneFourthCount pingPong rows split start step tType threeFourthCount upperStart TriDiagonalTransformer transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	
48	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] if (a2 < cnst1) { s = gam * (1 - Math.sqrt(a2)) / (1 + a2); } tau = s; } } else if (dMin == dN2) {  tType = -5; [BUGGY] [BUGGY] double s = 0.25 * dMin;  final int np = nn - 2 * pingPong; double b1 = work[np - 2]; double b2 = work[np - 6]; final double gam = dN2; if (work[np - 8] > b2 || work[np - 4] > b1) { return; } double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1); [CLASS] EigenDecompositionImpl Solver [METHOD] computeShiftIncrement [RETURN_TYPE] void  final int start final int end final int deflated [VARIABLES] boolean double[] b bp imagEigenvalues invI main range realEigenvalues secondary squaredSecondary vData vK work ArrayRealVector[] eigenvectors RealMatrix b cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 a2 absDCurrent absDPrevious absoluteTolerance alpha b b1 b2 beta c cnst1 cnst2 cnst3 d dCurrent dMin dMin1 dMin2 dN dN1 dN2 delta determinant di diagMax diagMin e12 eCurrent eMax eMin ePrevious ei eiM1 eps g gam gap1 gap2 invIJ lambda largestRoot left lower lowerSpectra margin max middle mij minPivot mji offDiagMax offDiagMin oldB1 oneFourth p previousEMin q q0 q1 q1q2Me22 q2 qMax r radius range ratio relativeTolerance right s sigma sigmaLow splitTolerance sqrtMq sumOffDiag t tNorm tau theta threeFourth tmp upper upperSpectra z0 z1 z2 int begin columns count deflated deflatedEnd end fourI i i0 i4 index j j4 j4p2 k l lowerStart m maxIter n n0 nColB nn np oneFourthCount pingPong rows split start step tType threeFourthCount upperStart TriDiagonalTransformer transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	add	
49	[BUG] [BUGGY] final int np = nn - 2 * pingPong; [FE] ArrayIndexOutOfBoundsException [CONTEXT] tau = s; } } else if (dMin == dN2) {  tType = -5; double s = 0.25 * dMin;  [BUGGY] final int np = nn - 2 * pingPong; [BUGGY] double b1 = work[np - 2]; double b2 = work[np - 6]; final double gam = dN2; if (work[np - 8] > b2 || work[np - 4] > b1) { return; } double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);  if (end - start > 2) { [CLASS] EigenDecompositionImpl Solver [METHOD] computeShiftIncrement [RETURN_TYPE] void  final int start final int end final int deflated [VARIABLES] boolean double[] b bp imagEigenvalues invI main range realEigenvalues secondary squaredSecondary vData vK work ArrayRealVector[] eigenvectors RealMatrix b cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 a2 absDCurrent absDPrevious absoluteTolerance alpha b b1 b2 beta c cnst1 cnst2 cnst3 d dCurrent dMin dMin1 dMin2 dN dN1 dN2 delta determinant di diagMax diagMin e12 eCurrent eMax eMin ePrevious ei eiM1 eps g gam gap1 gap2 invIJ lambda largestRoot left lower lowerSpectra margin max middle mij minPivot mji offDiagMax offDiagMin oldB1 oneFourth p previousEMin q q0 q1 q1q2Me22 q2 qMax r radius range ratio relativeTolerance right s sigma sigmaLow splitTolerance sqrtMq sumOffDiag t tNorm tau theta threeFourth tmp upper upperSpectra z0 z1 z2 int begin columns count deflated deflatedEnd end fourI i i0 i4 index j j4 j4p2 k l lowerStart m maxIter n n0 nColB nn np oneFourthCount pingPong rows split start step tType threeFourthCount upperStart TriDiagonalTransformer transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	
50	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] tau = s; } } else if (dMin == dN2) {  tType = -5; double s = 0.25 * dMin;  [BUGGY] [BUGGY] final int np = nn - 2 * pingPong; double b1 = work[np - 2]; double b2 = work[np - 6]; final double gam = dN2; if (work[np - 8] > b2 || work[np - 4] > b1) { return; } double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);  if (end - start > 2) { [CLASS] EigenDecompositionImpl Solver [METHOD] computeShiftIncrement [RETURN_TYPE] void  final int start final int end final int deflated [VARIABLES] boolean double[] b bp imagEigenvalues invI main range realEigenvalues secondary squaredSecondary vData vK work ArrayRealVector[] eigenvectors RealMatrix b cachedD cachedV cachedVt matrix double TOLERANCE TOLERANCE_2 a2 absDCurrent absDPrevious absoluteTolerance alpha b b1 b2 beta c cnst1 cnst2 cnst3 d dCurrent dMin dMin1 dMin2 dN dN1 dN2 delta determinant di diagMax diagMin e12 eCurrent eMax eMin ePrevious ei eiM1 eps g gam gap1 gap2 invIJ lambda largestRoot left lower lowerSpectra margin max middle mij minPivot mji offDiagMax offDiagMin oldB1 oneFourth p previousEMin q q0 q1 q1q2Me22 q2 qMax r radius range ratio relativeTolerance right s sigma sigmaLow splitTolerance sqrtMq sumOffDiag t tNorm tau theta threeFourth tmp upper upperSpectra z0 z1 z2 int begin columns count deflated deflatedEnd end fourI i i0 i4 index j j4 j4p2 k l lowerStart m maxIter n n0 nColB nn np oneFourthCount pingPong rows split start step tType threeFourthCount upperStart TriDiagonalTransformer transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	add	
