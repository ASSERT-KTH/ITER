bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  this(main,  secondary,  splitTolerance,  squaredSecondary);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  this(main,  secondary,  splitTolerance,  squaredSecondary);  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	this(main,  secondary,  splitTolerance,  squaredSecondary);	      this(main,    secondary,    splitTolerance);    	non-compiled	[CE]  ';'  expected	6	None	replace
2	[BUG]  [BUGGY]  this(main,  secondary,  0,  splitTolerance);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  this(main,  secondary,  0,  splitTolerance);  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	this(main,  secondary,  0,  splitTolerance);	      this(main,    secondary,    splitTolerance);    	non-compiled	[CE]  ';'  expected	6	None	replace
3	[BUG]  [BUGGY]  this(main,  secondary,  splitTolerance,  0);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  this(main,  secondary,  splitTolerance,  0);  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	this(main,  secondary,  splitTolerance,  0);	      this(main,    secondary,    splitTolerance);    	non-compiled	[CE]  ';'  expected	6	None	replace
4	[BUG]  [BUGGY]  this(main,  secondary,  splitTolerance,  imagEigenvalues);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  this(main,  secondary,  splitTolerance,  imagEigenvalues);  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	this(main,  secondary,  splitTolerance,  imagEigenvalues);	      this(main,    secondary,    splitTolerance);    	non-compiled	[CE]  ';'  expected	6	None	replace
5	[BUG]  [BUGGY]  super(new  double[]  {  main,  secondary,  splitTolerance,  imagEigenvalues  }  );  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  super(new  double[]  {  main,  secondary,  splitTolerance,  imagEigenvalues  }  );  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	super(new  double[]  {  main,  secondary,  splitTolerance,  imagEigenvalues  }  );	      super(new    double[]    {    main,    secondary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	4	None	replace
6	[BUG]  [BUGGY]  super(new  double[]  {  main,  secondary,  splitTolerance,  squaredSecondary  }  );  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  super(new  double[]  {  main,  secondary,  splitTolerance,  squaredSecondary  }  );  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	super(new  double[]  {  main,  secondary,  splitTolerance,  squaredSecondary  }  );	      super(new    double[]    {    main,    secondary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	4	None	replace
7	[BUG]  [BUGGY]  super(new  double[]  {  main,  secondary,  0,  splitTolerance  }  );  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  super(new  double[]  {  main,  secondary,  0,  splitTolerance  }  );  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	super(new  double[]  {  main,  secondary,  0,  splitTolerance  }  );	      super(new    double[]    {    main,    secondary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	4	None	replace
8	[BUG]  [BUGGY]  super(splitTolerance);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  super(splitTolerance);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	super(splitTolerance);	      	non-compiled	[CE]  ';'  expected	3	None	replace
9	[BUG]  [BUGGY]  super(new  ArrayRealVector[]  {  main,  secondary,  splitTolerance,  squaredSecondary  }  );  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  super(new  ArrayRealVector[]  {  main,  secondary,  splitTolerance,  squaredSecondary  }  );  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	super(new  ArrayRealVector[]  {  main,  secondary,  splitTolerance,  squaredSecondary  }  );	      super(new    ArrayRealVector[]    {    main,    secondary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	13	None	replace
10	[BUG]  [BUGGY]  super(new  ArrayRealVector[]  {  main,  secondary,  splitTolerance,  realEigenvectors  }  );  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  super(new  ArrayRealVector[]  {  main,  secondary,  splitTolerance,  realEigenvectors  }  );  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	super(new  ArrayRealVector[]  {  main,  secondary,  splitTolerance,  realEigenvectors  }  );	      super(new    ArrayRealVector[]    {    main,    secondary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	13	None	replace
11	[BUG]  [BUGGY]  super(new  ArrayRealVector[]  {  main,  secondary,  splitTolerance,  imagEigenvalues  }  );  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  super(new  ArrayRealVector[]  {  main,  secondary,  splitTolerance,  imagEigenvalues  }  );  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	super(new  ArrayRealVector[]  {  main,  secondary,  splitTolerance,  imagEigenvalues  }  );	      super(new    ArrayRealVector[]    {    main,    secondary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	13	None	replace
12	[BUG]  [BUGGY]  super(new  double[]  {  main,  secondary  }  );  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  super(new  double[]  {  main,  secondary  }  );  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	super(new  double[]  {  main,  secondary  }  );	      super(new    double[]    {    main    }    );    	non-compiled	[CE]  ';'  expected	10	None	replace
13	[BUG]  [BUGGY]  super(new  double[]  {  main  },  secondary);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  super(new  double[]  {  main  },  secondary);  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	super(new  double[]  {  main  },  secondary);	      super(new    double[]    {    main    }    );    	non-compiled	[CE]  ';'  expected	10	None	replace
14	[BUG]  [BUGGY]  super(new  double[]  {  main.length  }  );  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  super(new  double[]  {  main.length  }  );  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	super(new  double[]  {  main.length  }  );	      super(new    double[]    {    main    }    );    	non-compiled	[CE]  ';'  expected	10	None	replace
15	[BUG]  [BUGGY]  this.imagEigenvalues  =  realEigenvalues;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  this.imagEigenvalues  =  realEigenvalues;  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	this.imagEigenvalues  =  realEigenvalues;	      super(new    double[]    {    main,    secondary,    splitTolerance    }    );    this.imagEigenvalues    =    realEigenvalues;    	non-compiled	[CE]  ';'  expected	15	None	replace
16	[BUG]  [BUGGY]  this.imagEigenvalues  =  imagEigenvalues;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  this.imagEigenvalues  =  imagEigenvalues;  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	this.imagEigenvalues  =  imagEigenvalues;	      super(new    double[]    {    main,    secondary,    splitTolerance    }    );    this.imagEigenvalues    =    realEigenvalues;    	non-compiled	[CE]  ';'  expected	15	None	replace
17	[BUG]  [BUGGY]  super(new  double[]  {  main,  secondary,  splitTolerance  }  );  this.imagEigenvalues  =  squaredSecondary;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  super(new  double[]  {  main,  secondary,  splitTolerance  }  );  this.imagEigenvalues  =  squaredSecondary;  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	super(new  double[]  {  main,  secondary,  splitTolerance  }  );  this.imagEigenvalues  =  squaredSecondary;	      super(new    double[]    {    main,    secondary,    splitTolerance    }    );    this.imagEigenvalues    =    realEigenvalues;    	non-compiled	[CE]  ';'  expected	15	None	replace
18	[BUG]  [BUGGY]  this.main  =  main.clone();  this.secondary  =  second.clone();  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  this.main  =  main.clone();  this.secondary  =  second.clone();  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	this.main  =  main.clone();  this.secondary  =  second.clone();	  this.main    =    main.clone();    this.secondary    =    secondary.clone();    	non-compiled	[CE]  ';'  expected	1	None	replace
19	[BUG]  [BUGGY]  this.main  =  primary.clone();  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  this.main  =  primary.clone();  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	this.main  =  primary.clone();	  this.main    =    main.clone();    	non-compiled	[CE]  ';'  expected	2	None	replace
20	[BUG]  [BUGGY]  this.main  =  main[0].clone();  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  this.main  =  main[0].clone();  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	this.main  =  main[0].clone();	  this.main    =    main.clone();    	non-compiled	[CE]  ';'  expected	2	None	replace
21	[BUG]  [BUGGY]  super(new  Double[]  {  main,  secondary,  splitTolerance,  imagEigenvalues  }  );  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  super(new  Double[]  {  main,  secondary,  splitTolerance,  imagEigenvalues  }  );  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	super(new  Double[]  {  main,  secondary,  splitTolerance,  imagEigenvalues  }  );	      super(new    Double[]    {    main,    secondary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	14	None	replace
22	[BUG]  [BUGGY]  super(new  Double[]  {  main,  secondary,  splitTolerance,  squaredSecondary  }  );  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  super(new  Double[]  {  main,  secondary,  splitTolerance,  squaredSecondary  }  );  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	super(new  Double[]  {  main,  secondary,  splitTolerance,  squaredSecondary  }  );	      super(new    Double[]    {    main,    secondary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	14	None	replace
23	[BUG]  [BUGGY]  super(new  Double[]  {  main,  secondary,  0,  splitTolerance  }  );  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  super(new  Double[]  {  main,  secondary,  0,  splitTolerance  }  );  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	super(new  Double[]  {  main,  secondary,  0,  splitTolerance  }  );	      super(new    Double[]    {    main,    secondary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	14	None	replace
24	[BUG]  [BUGGY]  this(new  double[]  {  main,  secondary  },  splitTolerance);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  this(new  double[]  {  main,  secondary  },  splitTolerance);  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	this(new  double[]  {  main,  secondary  },  splitTolerance);	      this(new    double[]    {    main    },    secondary,    splitTolerance);    	non-compiled	[CE]  ';'  expected	11	None	replace
25	[BUG]  [BUGGY]  this(new  double[]  {  main  },  secondary,  splitTolerance,  squaredSecondary);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  this(new  double[]  {  main  },  secondary,  splitTolerance,  squaredSecondary);  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	this(new  double[]  {  main  },  secondary,  splitTolerance,  squaredSecondary);	      this(new    double[]    {    main    },    secondary,    splitTolerance);    	non-compiled	[CE]  ';'  expected	11	None	replace
26	[BUG]  [BUGGY]  this(new  double[]  {  main,  secondary,  splitTolerance,  imagEigenvalues  }  );  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  this(new  double[]  {  main,  secondary,  splitTolerance,  imagEigenvalues  }  );  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	this(new  double[]  {  main,  secondary,  splitTolerance,  imagEigenvalues  }  );	      this(new    double[]    {    main,    secondary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	9	None	replace
27	[BUG]  [BUGGY]  this(new  double[]  {  main,  secondary,  splitTolerance,  squaredSecondary  }  );  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  this(new  double[]  {  main,  secondary,  splitTolerance,  squaredSecondary  }  );  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	this(new  double[]  {  main,  secondary,  splitTolerance,  squaredSecondary  }  );	      this(new    double[]    {    main,    secondary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	9	None	replace
28	[BUG]  [BUGGY]  this(new  double[]  {  main,  secondary,  splitTolerance,  0  }  );  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  this(new  double[]  {  main,  secondary,  splitTolerance,  0  }  );  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	this(new  double[]  {  main,  secondary,  splitTolerance,  0  }  );	      this(new    double[]    {    main,    secondary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	9	None	replace
29	[BUG]  [BUGGY]  super(new  double[]  {  main,  secondary  },  splitTolerance  }  );  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  super(new  double[]  {  main,  secondary  },  splitTolerance  }  );  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	super(new  double[]  {  main,  secondary  },  splitTolerance  }  );	      super(new    double[]    {    main    },    secondary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	8	None	replace
30	[BUG]  [BUGGY]  super(new  double[]  {  main  },  primary,  splitTolerance  }  );  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  super(new  double[]  {  main  },  primary,  splitTolerance  }  );  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	super(new  double[]  {  main  },  primary,  splitTolerance  }  );	      super(new    double[]    {    main    },    secondary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	8	None	replace
31	[BUG]  [BUGGY]  this(main,  secondary,  splitTolerance,  eigenvectors,  null);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  this(main,  secondary,  splitTolerance,  eigenvectors,  null);  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	this(main,  secondary,  splitTolerance,  eigenvectors,  null);	      this(main,    secondary,    splitTolerance,    null);    	non-compiled	[CE]  ';'  expected	7	None	replace
32	[BUG]  [BUGGY]  this(main,  secondary,  splitTolerance,  squaredSecondary,  null);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  this(main,  secondary,  splitTolerance,  squaredSecondary,  null);  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	this(main,  secondary,  splitTolerance,  squaredSecondary,  null);	      this(main,    secondary,    splitTolerance,    null);    	non-compiled	[CE]  ';'  expected	7	None	replace
33	[BUG]  [BUGGY]  this(main,  secondary,  null,  splitTolerance,  squaredSecondary);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  this(main,  secondary,  null,  splitTolerance,  squaredSecondary);  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	this(main,  secondary,  null,  splitTolerance,  squaredSecondary);	      this(main,    secondary,    null,    splitTolerance);    	non-compiled	[CE]  ';'  expected	5	None	replace
34	[BUG]  [BUGGY]  this(main,  secondary,  null,  splitTolerance,  pingPong);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  this(main,  secondary,  null,  splitTolerance,  pingPong);  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	this(main,  secondary,  null,  splitTolerance,  pingPong);	      this(main,    secondary,    null,    splitTolerance);    	non-compiled	[CE]  ';'  expected	5	None	replace
35	[BUG]  [BUGGY]  this(main,  secondary,  null,  squaredSecondary);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  this(main,  secondary,  null,  squaredSecondary);  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	this(main,  secondary,  null,  squaredSecondary);	      this(main,    secondary,    null,    splitTolerance);    	non-compiled	[CE]  ';'  expected	5	None	replace
36	[BUG]  [BUGGY]  this(main,  secondary,  null,  splitTolerance,  true);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  this(main,  secondary,  null,  splitTolerance,  true);  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	this(main,  secondary,  null,  splitTolerance,  true);	      this(main,    secondary,    null,    splitTolerance);    	non-compiled	[CE]  ';'  expected	5	None	replace
37	[BUG]  [BUGGY]  this.main  =  primary.clone();  this.secondary  =  secondary.clone();  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  this.main  =  primary.clone();  this.secondary  =  secondary.clone();  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	this.main  =  primary.clone();  this.secondary  =  secondary.clone();	  this.main    =    main.clone();    this.secondary    =    primary.clone();    	non-compiled	[CE]  ';'  expected	12	None	replace
38	[BUG]  [BUGGY]  super(new  double[]  {  main  },  second,  splitTolerance  }  );  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  super(new  double[]  {  main  },  second,  splitTolerance  }  );  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	super(new  double[]  {  main  },  second,  splitTolerance  }  );	      super(new    double[]    {    main    },    secondary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	8	None	replace
39	[BUG]  [BUGGY]  this(new  double[]  {  main,  secondary,  sigmaLow  }  );  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  this(new  double[]  {  main,  secondary,  sigmaLow  }  );  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	this(new  double[]  {  main,  secondary,  sigmaLow  }  );	      this(new    double[]    {    main,    secondary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	9	None	replace
40	[BUG]  [BUGGY]  this(new  double[]  {  main,  secondary,  0,  splitTolerance  }  );  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  this(new  double[]  {  main,  secondary,  0,  splitTolerance  }  );  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	this(new  double[]  {  main,  secondary,  0,  splitTolerance  }  );	      this(new    double[]    {    main,    secondary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	9	None	replace
41	[BUG]  [BUGGY]  this(new  double[]  {  main,  secondary,  splitTolerance!=  0);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  this(new  double[]  {  main,  secondary,  splitTolerance!=  0);  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	this(new  double[]  {  main,  secondary,  splitTolerance!=  0);	      this(new    double[]    {    main,    secondary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	9	None	replace
42	[BUG]  [BUGGY]  super(new  Double[]  {  main,  secondary,  splitTolerance!=  0);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  super(new  Double[]  {  main,  secondary,  splitTolerance!=  0);  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	super(new  Double[]  {  main,  secondary,  splitTolerance!=  0);	      super(new    Double[]    {    main,    secondary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	14	None	replace
43	[BUG]  [BUGGY]  super(new  Double[]  {  main,  second,  splitTolerance  }  );  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  super(new  Double[]  {  main,  second,  splitTolerance  }  );  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	super(new  Double[]  {  main,  second,  splitTolerance  }  );	      super(new    Double[]    {    main,    secondary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	14	None	replace
44	[BUG]  [BUGGY]  Super(new  Double[]  {  main,  secondary,  splitTolerance  }  );  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  Super(new  Double[]  {  main,  secondary,  splitTolerance  }  );  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	Super(new  Double[]  {  main,  secondary,  splitTolerance  }  );	      super(new    Double[]    {    main,    secondary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	14	None	replace
45	[BUG]  [BUGGY]  super(new  ArrayRealVector[]  {  main,  second,  splitTolerance  }  );  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  super(new  ArrayRealVector[]  {  main,  second,  splitTolerance  }  );  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	super(new  ArrayRealVector[]  {  main,  second,  splitTolerance  }  );	      super(new    ArrayRealVector[]    {    main,    secondary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	13	None	replace
46	[BUG]  [BUGGY]  super(new  ArrayRealVector[]  {  main,  primary,  splitTolerance  }  );  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  super(new  ArrayRealVector[]  {  main,  primary,  splitTolerance  }  );  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	super(new  ArrayRealVector[]  {  main,  primary,  splitTolerance  }  );	      super(new    ArrayRealVector[]    {    main,    secondary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	13	None	replace
47	[BUG]  [BUGGY]  super(new  double[]  {  main,  secondary,  sigmaLow  }  );  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  super(new  double[]  {  main,  secondary,  sigmaLow  }  );  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	super(new  double[]  {  main,  secondary,  sigmaLow  }  );	      super(new    double[]    {    main,    secondary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	4	None	replace
48	[BUG]  [BUGGY]  super(new  double[]  {  main,  secondary,  splitTolerance!=  0);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  super(new  double[]  {  main,  secondary,  splitTolerance!=  0);  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	super(new  double[]  {  main,  secondary,  splitTolerance!=  0);	      super(new    double[]    {    main,    secondary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	4	None	replace
49	[BUG]  [BUGGY]  Super(new  double[]  {  main,  secondary,  splitTolerance  }  );  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  Super(new  double[]  {  main,  secondary,  splitTolerance  }  );  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	Super(new  double[]  {  main,  secondary,  splitTolerance  }  );	      super(new    double[]    {    main,    secondary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	4	None	replace
50	[BUG]  [BUGGY]  this.main  =  secondary.clone();  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  this.main  =  secondary.clone();  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	this.main  =  secondary.clone();	  this.main    =    main.clone();    	non-compiled	[CE]  ';'  expected	2	None	replace
51	[BUG]  [BUGGY]  this.main  =  splitTolerance.clone();  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  this.main  =  splitTolerance.clone();  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	this.main  =  splitTolerance.clone();	  this.main    =    main.clone();    	non-compiled	[CE]  ';'  expected	2	None	replace
52	[BUG]  [BUGGY]  this.main  =  secondary.clone();  this.secondary  =  primary.clone();  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  this.main  =  secondary.clone();  this.secondary  =  primary.clone();  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	this.main  =  secondary.clone();  this.secondary  =  primary.clone();	  this.main    =    main.clone();    this.secondary    =    primary.clone();    	non-compiled	[CE]  ';'  expected	12	None	replace
53	[BUG]  [BUGGY]  this(main,  secondary,  splitTolerance,  realEigenvalues);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  this(main,  secondary,  splitTolerance,  realEigenvalues);  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	this(main,  secondary,  splitTolerance,  realEigenvalues);	      this(main,    secondary,    splitTolerance);    	non-compiled	[CE]  ';'  expected	6	None	replace
54	[BUG]  [BUGGY]  this.main  =  main.clone();  this.secondary  =  splitTolerance.clone();  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  this.main  =  main.clone();  this.secondary  =  splitTolerance.clone();  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	this.main  =  main.clone();  this.secondary  =  splitTolerance.clone();	  this.main    =    main.clone();    this.secondary    =    secondary.clone();    	non-compiled	[CE]  ';'  expected	1	None	replace
55	[BUG]  [BUGGY]  this(main,  secondary,  splitTolerance,  eigenvectors);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  this(main,  secondary,  splitTolerance,  eigenvectors);  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	this(main,  secondary,  splitTolerance,  eigenvectors);	      this(main,    secondary,    splitTolerance,    null);    	non-compiled	[CE]  ';'  expected	7	None	replace
56	[BUG]  [BUGGY]  this(new  double[]  {  main  },  secondary,  squaredSecondary);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  this(new  double[]  {  main  },  secondary,  squaredSecondary);  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	this(new  double[]  {  main  },  secondary,  squaredSecondary);	      this(new    double[]    {    main    },    secondary,    splitTolerance);    	non-compiled	[CE]  ';'  expected	11	None	replace
57	[BUG]  [BUGGY]  this(new  double[]  {  main  },  secondary,  0,  splitTolerance);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  this(new  double[]  {  main  },  secondary,  0,  splitTolerance);  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	this(new  double[]  {  main  },  secondary,  0,  splitTolerance);	      this(new    double[]    {    main    },    secondary,    splitTolerance);    	non-compiled	[CE]  ';'  expected	11	None	replace
58	[BUG]  [BUGGY]  this(new  double[]  {  main  },  secondary,  null,  splitTolerance);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  this(new  double[]  {  main  },  secondary,  null,  splitTolerance);  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	this(new  double[]  {  main  },  secondary,  null,  splitTolerance);	      this(new    double[]    {    main    },    secondary,    splitTolerance);    	non-compiled	[CE]  ';'  expected	11	None	replace
59	[BUG]  [BUGGY]  this(main,  secondary,  squaredSecondary,  null,  splitTolerance);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  this(main,  secondary,  squaredSecondary,  null,  splitTolerance);  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	this(main,  secondary,  squaredSecondary,  null,  splitTolerance);	      this(main,    secondary,    null,    splitTolerance);    	non-compiled	[CE]  ';'  expected	5	None	replace
60	[BUG]  [BUGGY]  this(main,  secondary,  null,  splitTolerance,  imagEigenvalues);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  this(main,  secondary,  null,  splitTolerance,  imagEigenvalues);  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	this(main,  secondary,  null,  splitTolerance,  imagEigenvalues);	      this(main,    secondary,    null,    splitTolerance);    	non-compiled	[CE]  ';'  expected	5	None	replace
61	[BUG]  [BUGGY]  super(new  ArrayRealVector[]  {  main,  secondary,  splitTolerance,  1  }  );  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  super(new  ArrayRealVector[]  {  main,  secondary,  splitTolerance,  1  }  );  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	super(new  ArrayRealVector[]  {  main,  secondary,  splitTolerance,  1  }  );	      super(new    ArrayRealVector[]    {    main,    secondary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	13	None	replace
62	[BUG]  [BUGGY]  super(new  double[]  {  primary,  secondary  }  );  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  super(new  double[]  {  primary,  secondary  }  );  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	super(new  double[]  {  primary,  secondary  }  );	      super(new    double[]    {    main    }    );    	non-compiled	[CE]  ';'  expected	10	None	replace
63	[BUG]  [BUGGY]  this.imagEigenvalues  =  realEigenvalues.clone();  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  this.imagEigenvalues  =  realEigenvalues.clone();  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	this.imagEigenvalues  =  realEigenvalues.clone();	      	non-compiled	[CE]  ';'  expected	3	None	replace
64	[BUG]  [BUGGY]  this.imagEigenvalues  =  eigenvectors.clone();  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  this.imagEigenvalues  =  eigenvectors.clone();  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	this.imagEigenvalues  =  eigenvectors.clone();	      	non-compiled	[CE]  ';'  expected	3	None	replace
65	[BUG]  [BUGGY]  this.imagEigenvalues  =  realEigenvalues.get(main);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  this.imagEigenvalues  =  realEigenvalues.get(main);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	this.imagEigenvalues  =  realEigenvalues.get(main);	      	non-compiled	[CE]  ';'  expected	3	None	replace
66	[BUG]  [BUGGY]  if(this.imagEigenvalues!=  null)  {  super(new  double[]  {  main,  secondary,  splitTolerance  }  );  this.imagEigenvalues  =  realEigenvalues;  }  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  if(this.imagEigenvalues!=  null)  {  super(new  double[]  {  main,  secondary,  splitTolerance  }  );  this.imagEigenvalues  =  realEigenvalues;  }  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	if(this.imagEigenvalues!=  null)  {  super(new  double[]  {  main,  secondary,  splitTolerance  }  );  this.imagEigenvalues  =  realEigenvalues;  }	      super(new    double[]    {    main,    secondary,    splitTolerance    }    );    this.imagEigenvalues    =    realEigenvalues;    	non-compiled	[CE]  ';'  expected	15	None	replace
67	[BUG]  [BUGGY]  if(this.imagEigenvalues!=  null)  {  super(new  double[]  {  main,  secondary,  splitTolerance  }  );  this.imagEigenvalues  =  realEigenvalues;  }  else  {  throw  new  InvalidMatrixException( " ");  }  [CE]  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  if(this.imagEigenvalues!=  null)  {  super(new  double[]  {  main,  secondary,  splitTolerance  }  );  this.imagEigenvalues  =  realEigenvalues;  }  else  {  throw  new  InvalidMatrixException( " ");  }  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	if(this.imagEigenvalues!=  null)  {  super(new  double[]  {  main,  secondary,  splitTolerance  }  );  this.imagEigenvalues  =  realEigenvalues;  }  else  {  throw  new  InvalidMatrixException( " ");  }	      super(new    double[]    {    main,    secondary,    splitTolerance    }    );    this.imagEigenvalues    =    realEigenvalues;    	non-compiled	[CE]  	15	None	replace
68	[BUG]  [BUGGY]  super(new  double[]  {  main  },  secondary,  splitTolerance);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  super(new  double[]  {  main  },  secondary,  splitTolerance);  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	super(new  double[]  {  main  },  secondary,  splitTolerance);	      super(new    double[]    {    main    },    secondary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	8	None	replace
69	[BUG]  [BUGGY]  super(new  double[]  {  main,  secondary,  final  double  splitTolerance  }  );  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  super(new  double[]  {  main,  secondary,  final  double  splitTolerance  }  );  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	super(new  double[]  {  main,  secondary,  final  double  splitTolerance  }  );	      super(new    double[]    {    main,    secondary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	4	None	replace
70	[BUG]  [BUGGY]  super(new  Double[]  {  main,  secondary,  splitTolerance,  realEigenvalues  }  );  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  super(new  Double[]  {  main,  secondary,  splitTolerance,  realEigenvalues  }  );  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	super(new  Double[]  {  main,  secondary,  splitTolerance,  realEigenvalues  }  );	      super(new    Double[]    {    main,    secondary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	14	None	replace
71	[BUG]  [BUGGY]  this(main,  secondary,  null,  splitTolerance,  realEigenvalues);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)    [BUGGY]  this(main,  secondary,  null,  splitTolerance,  realEigenvalues);  [BUGGY]    throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	191	191	1	replace	this(main,  secondary,  null,  splitTolerance,  realEigenvalues);	      this(main,    secondary,    null,    splitTolerance);    	non-compiled	[CE]  ';'  expected	5	None	replace
