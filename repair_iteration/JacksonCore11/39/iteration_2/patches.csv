bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  _count);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  _count);  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	Throwables.throw  new  IllegalStateException( " "  +  _count);	  throw    new    IllegalStateException(   "       "    +    _count);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
2	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  _count  + "  entries  is  now  full  (all   "  +(_hashSize  >=  1024));  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  throw  new  IllegalStateException( " "  +  _count  + "  entries  is  now  full  (all   "  +(_hashSize  >=  1024));  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( " "  +  _count  + "  entries  is  now  full  (all   "  +(_hashSize  >=  1024));	  throw    new    IllegalStateException(   "       "    +    _count);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
3	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  _count  + "  entries  is  now  full  (all   "  +(_hashSize  >=  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  throw  new  IllegalStateException( " "  +  _count  + "  entries  is  now  full  (all   "  +(_hashSize  >=  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( " "  +  _count  + "  entries  is  now  full  (all   "  +(_hashSize  >=  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +	  throw    new    IllegalStateException(   "       "    +    _count);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
4	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  _count  + "  entries  is  now  full  (all   "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  throw  new  IllegalStateException( " "  +  _count  + "  entries  is  now  full  (all   "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( " "  +  _count  + "  entries  is  now  full  (all   "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +	  throw    new    IllegalStateException(   "       "    +    _count);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
5	[BUG]  [BUGGY]  _reportError( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  _reportError( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	_reportError( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.	  _reportError(   "Spill-over    slots    in    symbol    table    with       "+_count    +   "    entries,    hash    area    of   "+_hashSize+   "    slots    is    now    full    (all   "    +(_hashSize    >=    3)+   "    slots    --    suspect    a    DoS    attack    based    on    hash    collisions.    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
6	[BUG]  [BUGGY]  _reportError( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.  }  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  _reportError( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.  }  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	_reportError( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.  }	  _reportError(   "Spill-over    slots    in    symbol    table    with       "+_count    +   "    entries,    hash    area    of   "+_hashSize+   "    slots    is    now    full    (all   "    +(_hashSize    >=    3)+   "    slots    --    suspect    a    DoS    attack    based    on    hash    collisions.    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
7	[BUG]  [BUGGY]  _reportError( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  2)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.  [CE]  illegal  start  of  type  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  _reportError( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  2)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	_reportError( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  2)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.	  _reportError(   "Spill-over    slots    in    symbol    table    with       "+_count    +   "    entries,    hash    area    of   "+_hashSize+   "    slots    is    now    full    (all   "    +(_hashSize    >=    3)+   "    slots    --    suspect    a    DoS    attack    based    on    hash    collisions.    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
8	[BUG]  [BUGGY]  _reportError( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  --  suspect  a  DoS  attack  based  on  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  _reportError( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  --  suspect  a  DoS  attack  based  on  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	_reportError( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  --  suspect  a  DoS  attack  based  on	  _reportError(   "Spill-over    slots    in    symbol    table    with       "+_count    +   "    entries,    hash    area    of   "+_hashSize+   "    slots    is    now    full    (all   "    +(_hashSize    >=    3)+   "    slots    --    suspect    a    DoS    attack    based    on    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
9	[BUG]  [BUGGY]  _reportError( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  16)+ "  slots  --  suspect  a  DoS  attack  based  on  [CE]  illegal  start  of  type  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  _reportError( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  16)+ "  slots  --  suspect  a  DoS  attack  based  on  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	_reportError( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  16)+ "  slots  --  suspect  a  DoS  attack  based  on	  _reportError(   "Spill-over    slots    in    symbol    table    with       "+_count    +   "    entries,    hash    area    of   "+_hashSize+   "    slots    is    now    full    (all   "    +(_hashSize    >=    3)+   "    slots    --    suspect    a    DoS    attack    based    on    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
10	[BUG]  [BUGGY]  _reportError( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  1)+ "  slots  --  suspect  a  DoS  attack  based  on  [CE]  illegal  start  of  type  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  _reportError( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  1)+ "  slots  --  suspect  a  DoS  attack  based  on  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	_reportError( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  1)+ "  slots  --  suspect  a  DoS  attack  based  on	  _reportError(   "Spill-over    slots    in    symbol    table    with       "+_count    +   "    entries,    hash    area    of   "+_hashSize+   "    slots    is    now    full    (all   "    +(_hashSize    >=    3)+   "    slots    --    suspect    a    DoS    attack    based    on    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
11	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +	  throw    new    IllegalStateException(   "Spill-over    slots    in    symbol    table    with       "+_count    +   "    entries,    hash    area    of   "+_hashSize+   "    slots    is    now    full    (all       "    +(_hashSize    >>    8)+   "    slots    --    suspect    a    DoS    attack    based    on    hash    collisions.       "    +    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
12	[BUG]  [BUGGY]  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +	  throw    new    IllegalStateException(   "Spill-over    slots    in    symbol    table    with       "+_count    +   "    entries,    hash    area    of   "+_hashSize+   "    slots    is    now    full    (all       "    +(_hashSize    >>    8)+   "    slots    --    suspect    a    DoS    attack    based    on    hash    collisions.       "    +    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
13	[BUG]  [BUGGY]  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +	  throw    new    IllegalStateException(   "Spill-over    slots    in    symbol    table    with       "+_count    +   "    entries,    hash    area    of   "+_hashSize+   "    slots    is    now    full    (all       "    +(_hashSize    >>    8)+   "    slots    --    suspect    a    DoS    attack    based    on    hash    collisions.       "    +    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
14	[BUG]  [BUGGY]  throw  new  IllegalStateException( "   "  +  _count  +  1));  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  throw  new  IllegalStateException( "   "  +  _count  +  1));  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( "   "  +  _count  +  1));	  throw    new    IllegalStateException(   "       ".equals(_count    +    1));    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
15	[BUG]  [BUGGY]  _reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of  128  entries  is  now  full  (all   "  +(_hashSize  >>  1)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  _reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of  128  entries  is  now  full  (all   "  +(_hashSize  >>  1)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	_reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of  128  entries  is  now  full  (all   "  +(_hashSize  >>  1)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +	  _reportError(   "TooManyCollisions.    Please    check    that    the    hash    area    of    128    entries    is    now    full    (all       "    +(_hashSize    >>    3)+   "    slots    --    suspect    a    DoS    attack    based    on    hash    collisions.       "    +    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
16	[BUG]  [BUGGY]  _reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of  128  entries  is  now  full  (all   "  +(_hashSize  >>  2)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +  [CE]  illegal  start  of  type  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  _reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of  128  entries  is  now  full  (all   "  +(_hashSize  >>  2)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	_reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of  128  entries  is  now  full  (all   "  +(_hashSize  >>  2)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +	  _reportError(   "TooManyCollisions.    Please    check    that    the    hash    area    of    128    entries    is    now    full    (all       "    +(_hashSize    >>    3)+   "    slots    --    suspect    a    DoS    attack    based    on    hash    collisions.       "    +    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
17	[BUG]  [BUGGY]  _reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of  128  entries  is  now  full  (all   "  +(_hashSize  >>  128)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +  [CE]  illegal  start  of  type  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  _reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of  128  entries  is  now  full  (all   "  +(_hashSize  >>  128)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	_reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of  128  entries  is  now  full  (all   "  +(_hashSize  >>  128)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +	  _reportError(   "TooManyCollisions.    Please    check    that    the    hash    area    of    128    entries    is    now    full    (all       "    +(_hashSize    >>    3)+   "    slots    --    suspect    a    DoS    attack    based    on    hash    collisions.       "    +    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
18	[BUG]  [BUGGY]  _reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of  128  entries. ");  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  _reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of  128  entries. ");  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	_reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of  128  entries. ");	  _reportError(   "TooManyCollisions.   ");    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
19	[BUG]  [BUGGY]  _reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of  128  entries  will  be  removed. ");  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  _reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of  128  entries  will  be  removed. ");  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	_reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of  128  entries  will  be  removed. ");	  _reportError(   "TooManyCollisions.   ");    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
20	[BUG]  [BUGGY]  _reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of  128  entries  is  not  possible. ");  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  _reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of  128  entries  is  not  possible. ");  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	_reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of  128  entries  is  not  possible. ");	  _reportError(   "TooManyCollisions.   ");    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
21	[BUG]  [BUGGY]  System.arraycopy(oldNames,  0,  _names,  _hashArea,  _count,  oldNames.length);  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  System.arraycopy(oldNames,  0,  _names,  _hashArea,  _count,  oldNames.length);  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	System.arraycopy(oldNames,  0,  _names,  _hashArea,  _count,  oldNames.length);	  System.arraycopy(oldNames,    0,    _hashArea,    _count,    oldNames.length);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
22	[BUG]  [BUGGY]  System.arraycopy(oldNames,  0,  _names,  _count,  oldNames.length);  [CE]  illegal  start  of  type  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  System.arraycopy(oldNames,  0,  _names,  _count,  oldNames.length);  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	System.arraycopy(oldNames,  0,  _names,  _count,  oldNames.length);	  System.arraycopy(oldNames,    0,    _hashArea,    _count,    oldNames.length);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
23	[BUG]  [BUGGY]  System.arraycopy(oldNames,  0,  _hashArea,  _names,  oldNames.length);  [CE]  illegal  start  of  type  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  System.arraycopy(oldNames,  0,  _hashArea,  _names,  oldNames.length);  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	System.arraycopy(oldNames,  0,  _hashArea,  _names,  oldNames.length);	  System.arraycopy(oldNames,    0,    _hashArea,    _count,    oldNames.length);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
24	[BUG]  [BUGGY]  System.arraycopy(_names,  0,  _hashArea,  _count,  oldNames.length);  [CE]  illegal  start  of  type  [FE]                                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  System.arraycopy(_names,  0,  _hashArea,  _count,  oldNames.length);  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	System.arraycopy(_names,  0,  _hashArea,  _count,  oldNames.length);	  System.arraycopy(oldNames,    0,    _hashArea,    _count,    oldNames.length);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
25	[BUG]  [BUGGY]  new  IllegalStateException( "Symbol  table  with   "+_count  + ",  entries,  hash  area  of  128  entries. ");  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  new  IllegalStateException( "Symbol  table  with   "+_count  + ",  entries,  hash  area  of  128  entries. ");  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	new  IllegalStateException( "Symbol  table  with   "+_count  + ",  entries,  hash  area  of  128  entries. ");	  new    IllegalStateException(   "Symbol    table    with       "+_count    +   "    entries,    hash    area    of    128    entries.       ");    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
26	[BUG]  [BUGGY]  new  IllegalStateException( "Symbol  table  with   "+_count  + "  entries,  hash  area  of   "+_hashSize+ "  entries.   ");  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  new  IllegalStateException( "Symbol  table  with   "+_count  + "  entries,  hash  area  of   "+_hashSize+ "  entries.   ");  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	new  IllegalStateException( "Symbol  table  with   "+_count  + "  entries,  hash  area  of   "+_hashSize+ "  entries.   ");	  new    IllegalStateException(   "Symbol    table    with       "+_count    +   "    entries,    hash    area    of    128    entries.       ");    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
27	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  _hashSize);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  _hashSize);  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	Throwables.throw  new  IllegalStateException( " "  +  _hashSize);	  Throwables.throw    new    IllegalStateException(   "   ".equals(_hashSize));    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
28	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  getName());  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  getName());  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	Throwables.throw  new  IllegalStateException( " "  +  getName());	  Throwables.throw    new    IllegalStateException(   "   ".equals(_hashSize));    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
29	[BUG]  [BUGGY]  Throwables.throwables( "Spill-over  slots  in  symbol  table  with   "+_count  + ",  entries,  hash  area  of  128  entries. "  + "  You  can  disable  the  check  via  JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  Throwables.throwables( "Spill-over  slots  in  symbol  table  with   "+_count  + ",  entries,  hash  area  of  128  entries. "  + "  You  can  disable  the  check  via  JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	Throwables.throwables( "Spill-over  slots  in  symbol  table  with   "+_count  + ",  entries,  hash  area  of  128  entries. "  + "  You  can  disable  the  check  via  JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW	  Throwables.throwables(   "Spill-over    slots    in    symbol    table    with       "+_count    +   "    entries,    hash    area    of    128    entries.   "    +   "    You    can    disable    the    check    via    JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
30	[BUG]  [BUGGY]  Throwables.throwables( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of  128  entries. "  + ",  You  can  disable  the  check  via  JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  Throwables.throwables( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of  128  entries. "  + ",  You  can  disable  the  check  via  JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	Throwables.throwables( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of  128  entries. "  + ",  You  can  disable  the  check  via  JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW	  Throwables.throwables(   "Spill-over    slots    in    symbol    table    with       "+_count    +   "    entries,    hash    area    of    128    entries.   "    +   "    You    can    disable    the    check    via    JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
31	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + ",  entries,  hash  area  of  128  entries. "  + "  You  can  disable  the  check  via  JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  Throwables.throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + ",  entries,  hash  area  of  128  entries. "  + "  You  can  disable  the  check  via  JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	Throwables.throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + ",  entries,  hash  area  of  128  entries. "  + "  You  can  disable  the  check  via  JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW	  Throwables.throw    new    IllegalStateException(   "Spill-over    slots    in    symbol    table    with       "+_count    +   "    entries,    hash    area    of    128    entries.   "    +   "    You    can    disable    the    check    via    JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
32	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of  128  entries.  You  can  disable  the  check  via  JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  Throwables.throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of  128  entries.  You  can  disable  the  check  via  JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	Throwables.throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of  128  entries.  You  can  disable  the  check  via  JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW	  Throwables.throw    new    IllegalStateException(   "Spill-over    slots    in    symbol    table    with       "+_count    +   "    entries,    hash    area    of    128    entries.   "    +   "    You    can    disable    the    check    via    JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
33	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of  128  entries. "  + "  You  can  disable  the  check  via  JsonFactory.Feature.FAIL_ON_SYMBOL_HASH  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  Throwables.throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of  128  entries. "  + "  You  can  disable  the  check  via  JsonFactory.Feature.FAIL_ON_SYMBOL_HASH  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	Throwables.throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of  128  entries. "  + "  You  can  disable  the  check  via  JsonFactory.Feature.FAIL_ON_SYMBOL_HASH	  Throwables.throw    new    IllegalStateException(   "Spill-over    slots    in    symbol    table    with       "+_count    +   "    entries,    hash    area    of    128    entries.   "    +   "    You    can    disable    the    check    via    JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
34	[BUG]  [BUGGY]  _reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of  128  entries  is  now  full  (all   "  +(_hashSize  >>  128)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions. "));  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  _reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of  128  entries  is  now  full  (all   "  +(_hashSize  >>  128)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions. "));  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	_reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of  128  entries  is  now  full  (all   "  +(_hashSize  >>  128)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions. "));	  _reportError(   "TooManyCollisions.    Please    check    that    the    hash    area    of    128    entries    is    now    full    (all       "    +(_hashSize    >>    3)+   "    slots    --    suspect    a    DoS    attack    based    on    hash    collisions.   "));    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
35	[BUG]  [BUGGY]  _reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of  128  entries  is  now  full  (all   "  +(_hashSize  >>  16)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions. "));  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  _reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of  128  entries  is  now  full  (all   "  +(_hashSize  >>  16)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions. "));  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	_reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of  128  entries  is  now  full  (all   "  +(_hashSize  >>  16)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions. "));	  _reportError(   "TooManyCollisions.    Please    check    that    the    hash    area    of    128    entries    is    now    full    (all       "    +(_hashSize    >>    3)+   "    slots    --    suspect    a    DoS    attack    based    on    hash    collisions.   "));    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
36	[BUG]  [BUGGY]  _reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of  128  entries  is  now  full  (all   "  +(_hashSize  >>  2)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions. "));  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  _reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of  128  entries  is  now  full  (all   "  +(_hashSize  >>  2)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions. "));  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	_reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of  128  entries  is  now  full  (all   "  +(_hashSize  >>  2)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions. "));	  _reportError(   "TooManyCollisions.    Please    check    that    the    hash    area    of    128    entries    is    now    full    (all       "    +(_hashSize    >>    3)+   "    slots    --    suspect    a    DoS    attack    based    on    hash    collisions.   "));    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
37	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.	  throw    new    IllegalStateException(   "Spill-over    slots    in    symbol    table    with       "+_count    +   "    entries,    hash    area    of   "+_hashSize+   "    slots    is    now    full    (all       "    +(_hashSize    >>    16)+   "    slots    --    suspect    a    DoS    attack    based    on    hash    collisions.       "    +    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
38	[BUG]  [BUGGY]  throw  new  IllegalStateException( "   "  +  _hashSize  + "  entries  is  now  full  (all   "  +(_hashSize  >=  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  throw  new  IllegalStateException( "   "  +  _hashSize  + "  entries  is  now  full  (all   "  +(_hashSize  >=  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( "   "  +  _hashSize  + "  entries  is  now  full  (all   "  +(_hashSize  >=  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +	  throw    new    IllegalStateException(   "   "    +    _hashSize);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
39	[BUG]  [BUGGY]  throw  new  IllegalStateException( "   "  +  _hashSize  + "  entries  is  now  full  (all   "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  throw  new  IllegalStateException( "   "  +  _hashSize  + "  entries  is  now  full  (all   "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( "   "  +  _hashSize  + "  entries  is  now  full  (all   "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +	  throw    new    IllegalStateException(   "   "    +    _hashSize);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
40	[BUG]  [BUGGY]  throw  new  IllegalStateException( "   "  +  _hashSize  + "  entries  is  now  full  (all   "  +(_hashSize  >=  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +   "  You  can  disable  the  check  via  JsonFactory  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  throw  new  IllegalStateException( "   "  +  _hashSize  + "  entries  is  now  full  (all   "  +(_hashSize  >=  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +   "  You  can  disable  the  check  via  JsonFactory  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( "   "  +  _hashSize  + "  entries  is  now  full  (all   "  +(_hashSize  >=  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +   "  You  can  disable  the  check  via  JsonFactory	  throw    new    IllegalStateException(   "   "    +    _hashSize);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
41	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  _names);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  _names);  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	Throwables.throw  new  IllegalStateException( " "  +  _names);	  throw    new    IllegalStateException(   "       "    +    _names);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
42	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of   "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of   "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of   "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on	  throw    new    IllegalStateException(   "Spill-over    slots    in    symbol    table    with       "+_count    +   "    entries,    hash    area    of    128    entries.   "    +   "    You    can    disable    the    check    via    JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
43	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of   "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >=  3)+ "  slots  --  suspect  a  DoS  attack  based  on  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of   "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >=  3)+ "  slots  --  suspect  a  DoS  attack  based  on  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of   "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >=  3)+ "  slots  --  suspect  a  DoS  attack  based  on	  throw    new    IllegalStateException(   "Spill-over    slots    in    symbol    table    with       "+_count    +   "    entries,    hash    area    of    128    entries.   "    +   "    You    can    disable    the    check    via    JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
44	[BUG]  [BUGGY]  _reportError( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  16)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  _reportError( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  16)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	_reportError( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  16)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.	  _reportError(   "Spill-over    slots    in    symbol    table    with       "+_count    +   "    entries,    hash    area    of   "+_hashSize+   "    slots    is    now    full    (all   "    +(_hashSize    >>    3)+   "    slots    --    suspect    a    DoS    attack    based    on    hash    collisions.    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
45	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".getMessage());  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".getMessage());  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	Throwables.throw  new  IllegalStateException( " ".getMessage());	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
46	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " "));  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  Throwables.throw  new  IllegalStateException( " "));  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	Throwables.throw  new  IllegalStateException( " "));	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
47	[BUG]  [BUGGY]  Throwables.throwables( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of  128  entries. "  + "  You  can  disable  the  check  via  JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW ",  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  Throwables.throwables( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of  128  entries. "  + "  You  can  disable  the  check  via  JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW ",  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	Throwables.throwables( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of  128  entries. "  + "  You  can  disable  the  check  via  JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW ",	  throw    new    IllegalStateException(   "Spill-over    slots    in    symbol    table    with       "+_count    +   "    entries,    hash    area    of    128    entries.   "    +   "    You    can    disable    the    check    via    JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW   ",    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
48	[BUG]  [BUGGY]  Throwables.throwables( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of  128  entries. "  + "  You  can  disable  the  check  via  JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW "  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  Throwables.throwables( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of  128  entries. "  + "  You  can  disable  the  check  via  JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW "  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	Throwables.throwables( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of  128  entries. "  + "  You  can  disable  the  check  via  JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW "	  throw    new    IllegalStateException(   "Spill-over    slots    in    symbol    table    with       "+_count    +   "    entries,    hash    area    of    128    entries.   "    +   "    You    can    disable    the    check    via    JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW   ",    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
49	[BUG]  [BUGGY]  System.arraycopy(_names,  0,  _hashArea,  _count);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  System.arraycopy(_names,  0,  _hashArea,  _count);  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	System.arraycopy(_names,  0,  _hashArea,  _count);	  System.arraycopy(oldNames,    0,    _hashArea,    _count);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
50	[BUG]  [BUGGY]  System.arraycopy(oldNames,  0,  _names,  _count);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  System.arraycopy(oldNames,  0,  _names,  _count);  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	System.arraycopy(oldNames,  0,  _names,  _count);	  System.arraycopy(oldNames,    0,    _hashArea,    _count);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
51	[BUG]  [BUGGY]  System.arraycopy(oldNames,  0,  _names,  _hashArea,  _count);  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  System.arraycopy(oldNames,  0,  _names,  _hashArea,  _count);  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	System.arraycopy(oldNames,  0,  _names,  _hashArea,  _count);	  System.arraycopy(oldNames,    0,    _hashArea,    _count);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
52	[BUG]  [BUGGY]  System.arraycopy(_names,  0,  oldNames,  _count);  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  System.arraycopy(_names,  0,  oldNames,  _count);  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	System.arraycopy(_names,  0,  oldNames,  _count);	  System.arraycopy(oldNames,    0,    _hashArea,    _count);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
53	[BUG]  [BUGGY]  System.arraycopy(_names,  0,  oldNames,  _count,  _hashSize);  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  System.arraycopy(_names,  0,  oldNames,  _count,  _hashSize);  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	System.arraycopy(_names,  0,  oldNames,  _count,  _hashSize);	  System.arraycopy(oldNames,    0,    oldNames,    _count,    _hashSize);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
54	[BUG]  [BUGGY]  System.arraycopy(_names,  0,  oldNames,  _hashSize,  _count);  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  System.arraycopy(_names,  0,  oldNames,  _hashSize,  _count);  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	System.arraycopy(_names,  0,  oldNames,  _hashSize,  _count);	  System.arraycopy(oldNames,    0,    oldNames,    _count,    _hashSize);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
55	[BUG]  [BUGGY]  System.arraycopy(oldNames,  0,  _names,  _hashSize,  oldCount);  [CE]  illegal  start  of  type  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  System.arraycopy(oldNames,  0,  _names,  _hashSize,  oldCount);  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	System.arraycopy(oldNames,  0,  _names,  _hashSize,  oldCount);	  System.arraycopy(oldNames,    0,    oldNames,    _count,    _hashSize);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
56	[BUG]  [BUGGY]  System.arraycopy(oldNames,  0,  _names,  _hashSize,  _count);  [CE]  illegal  start  of  type  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  System.arraycopy(oldNames,  0,  _names,  _hashSize,  _count);  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	System.arraycopy(oldNames,  0,  _names,  _hashSize,  _count);	  System.arraycopy(oldNames,    0,    oldNames,    _count,    _hashSize);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
57	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  --  suspect  a  DoS  attack  based  on  collisions.   "  +  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  --  suspect  a  DoS  attack  based  on  collisions.   "  +  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  --  suspect  a  DoS  attack  based  on  collisions.   "  +	  throw    new    IllegalStateException(   "Spill-over    slots    in    symbol    table    with       "+_count    +   "    entries,    hash    area    of       "+_hashSize+   "    slots    is    now    full    (all       "    +(_hashSize    >>    3)+   "    slots    --    suspect    a    DoS    attack    based    on    collisions.       "    +    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
58	[BUG]  [BUGGY]  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  --  suspect  a  DoS  attack  based  on  collisions.   "  +  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  --  suspect  a  DoS  attack  based  on  collisions.   "  +  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  --  suspect  a  DoS  attack  based  on  collisions.   "  +	  throw    new    IllegalStateException(   "Spill-over    slots    in    symbol    table    with       "+_count    +   "    entries,    hash    area    of       "+_hashSize+   "    slots    is    now    full    (all       "    +(_hashSize    >>    3)+   "    slots    --    suspect    a    DoS    attack    based    on    collisions.       "    +    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
59	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  _names.length);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  _names.length);  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	Throwables.throw  new  IllegalStateException( " "  +  _names.length);	  throw    new    IllegalStateException(   "       "    +    _names.length);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
60	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  _names.length  + "  entries  may  have  side  effects  and  can't  be  removed ");  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  throw  new  IllegalStateException( " "  +  _names.length  + "  entries  may  have  side  effects  and  can't  be  removed ");  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( " "  +  _names.length  + "  entries  may  have  side  effects  and  can't  be  removed ");	  throw    new    IllegalStateException(   "       "    +    _names.length);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
61	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  _names.length  + "  entries: "  +  _names.length);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  throw  new  IllegalStateException( " "  +  _names.length  + "  entries: "  +  _names.length);  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( " "  +  _names.length  + "  entries: "  +  _names.length);	  throw    new    IllegalStateException(   "       "    +    _names.length);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
62	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Symbol  table  with   "+_count  + "  entries,  hash  area  of  128  entries. ");  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  Throwables.throw  new  IllegalStateException( "Symbol  table  with   "+_count  + "  entries,  hash  area  of  128  entries. ");  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	Throwables.throw  new  IllegalStateException( "Symbol  table  with   "+_count  + "  entries,  hash  area  of  128  entries. ");	  throw    new    IllegalStateException(   "Symbol    table    with       "+_count    +   "    entries,    hash    area    of    128    entries.   ");    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
63	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Missing  a  DoS  attack  based  on  hash  collisions.   ");  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  Throwables.throw  new  IllegalStateException( "Missing  a  DoS  attack  based  on  hash  collisions.   ");  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	Throwables.throw  new  IllegalStateException( "Missing  a  DoS  attack  based  on  hash  collisions.   ");	  throw    new    IllegalStateException(   "Missing    a    DoS    attack    based    on    hash    collisions.       ");    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
64	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Missing  a  DoS  attack  based  on  hash  collisions.  You  can  disable  the  check  via  JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW ");  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  throw  new  IllegalStateException( "Missing  a  DoS  attack  based  on  hash  collisions.  You  can  disable  the  check  via  JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW ");  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( "Missing  a  DoS  attack  based  on  hash  collisions.  You  can  disable  the  check  via  JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW ");	  throw    new    IllegalStateException(   "Missing    a    DoS    attack    based    on    hash    collisions.       ");    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
65	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Invalid  area  of  128  entries.   "  +  _hashSize);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  Throwables.throw  new  IllegalStateException( "Invalid  area  of  128  entries.   "  +  _hashSize);  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	Throwables.throw  new  IllegalStateException( "Invalid  area  of  128  entries.   "  +  _hashSize);	  throw    new    IllegalStateException(   "Invalid    area    of    128    entries.       "    +    _hashSize);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
66	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Invalid  area  of  128  entries.n "  +  _hashSize);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  throw  new  IllegalStateException( "Invalid  area  of  128  entries.n "  +  _hashSize);  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( "Invalid  area  of  128  entries.n "  +  _hashSize);	  throw    new    IllegalStateException(   "Invalid    area    of    128    entries.       "    +    _hashSize);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
67	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >=  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >=  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >=  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +	  throw    new    IllegalStateException(   "Spill-over    slots    in    symbol    table    with       "+_count    +   "    entries,    hash    area    of   "+_hashSize+   "    slots    is    now    full    (all       "    +(_hashSize    >>    0)+   "    slots    --    suspect    a    DoS    attack    based    on    hash    collisions.       "    +    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
68	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + ",  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + ",  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + ",  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +	  throw    new    IllegalStateException(   "Spill-over    slots    in    symbol    table    with       "+_count    +   "    entries,    hash    area    of   "+_hashSize+   "    slots    is    now    full    (all       "    +(_hashSize    >>    0)+   "    slots    --    suspect    a    DoS    attack    based    on    hash    collisions.       "    +    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
69	[BUG]  [BUGGY]  _reportInvalidOperation();  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  _reportInvalidOperation();  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	_reportInvalidOperation();	  _reportUnsupportedOperation();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
70	[BUG]  [BUGGY]  _throwIntern();  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  _throwIntern();  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	_throwIntern();	  _reportUnsupportedOperation();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
71	[BUG]  [BUGGY]  _reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of  128  entries  is  now  full  (all   "  +(_hashSize  >=  16)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions. "));  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  _reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of  128  entries  is  now  full  (all   "  +(_hashSize  >=  16)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions. "));  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	_reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of  128  entries  is  now  full  (all   "  +(_hashSize  >=  16)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions. "));	  _reportError(   "TooManyCollisions.    Please    check    that    the    hash    area    of    128    entries    is    now    full    (all       "    +(_hashSize    >=    3)+   "    slots    --    suspect    a    DoS    attack    based    on    hash    collisions.   "));    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
72	[BUG]  [BUGGY]  throw  new  IllegalStateException( "   ".equals(_hashSize  +  1));  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  throw  new  IllegalStateException( "   ".equals(_hashSize  +  1));  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( "   ".equals(_hashSize  +  1));	  throw    new    IllegalStateException(   "       ".equals(_count    +    1));    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
73	[BUG]  [BUGGY]  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.	  throw    new    IllegalStateException(   "Spill-over    slots    in    symbol    table    with       "+_count    +   "    entries,    hash    area    of   "+_hashSize+   "    slots    is    now    full    (all       "    +(_hashSize    >>    8)+   "    slots    --    suspect    a    DoS    attack    based    on    hash    collisions.       "    +    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
74	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ").equals(_hashSize));  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  Throwables.throw  new  IllegalStateException( " ").equals(_hashSize));  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	Throwables.throw  new  IllegalStateException( " ").equals(_hashSize));	  Throwables.throw    new    IllegalStateException(   "   ".equals(_hashSize));    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
75	[BUG]  [BUGGY]  throw  new  IllegalStateException( "   "  +  _names  + "  entries  may  have  side  effects  and  can't  be  removed ");  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  throw  new  IllegalStateException( "   "  +  _names  + "  entries  may  have  side  effects  and  can't  be  removed ");  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( "   "  +  _names  + "  entries  may  have  side  effects  and  can't  be  removed ");	  throw    new    IllegalStateException(   "       "    +    _names);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
76	[BUG]  [BUGGY]  throw  new  IllegalStateException( "   "  +  _names.length  +  128);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  throw  new  IllegalStateException( "   "  +  _names.length  +  128);  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( "   "  +  _names.length  +  128);	  throw    new    IllegalStateException(   "       "    +    _names.length);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
77	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( ", ");  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  Throwables.throw  new  IllegalStateException( ", ");  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	Throwables.throw  new  IllegalStateException( ", ");	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
78	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".);  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	Throwables.throw  new  IllegalStateException( " ".);	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
79	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( ". ");  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  Throwables.throw  new  IllegalStateException( ". ");  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	Throwables.throw  new  IllegalStateException( ". ");	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
80	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Invalid  area  of  128  entries.   "  +  _hashSize,  DEFAULT_T_SIZE);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  throw  new  IllegalStateException( "Invalid  area  of  128  entries.   "  +  _hashSize,  DEFAULT_T_SIZE);  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( "Invalid  area  of  128  entries.   "  +  _hashSize,  DEFAULT_T_SIZE);	  throw    new    IllegalStateException(   "Invalid    area    of    128    entries.       "    +    _hashSize);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
81	[BUG]  [BUGGY]  new  IllegalStateException( "Symbol  table  with   "+_count  + "  entries,  hash  area  of  128  entries.n ");  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  new  IllegalStateException( "Symbol  table  with   "+_count  + "  entries,  hash  area  of  128  entries.n ");  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	new  IllegalStateException( "Symbol  table  with   "+_count  + "  entries,  hash  area  of  128  entries.n ");	  new    IllegalStateException(   "Symbol    table    with       "+_count    +   "    entries,    hash    area    of    128    entries.       ");    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
82	[BUG]  [BUGGY]  throw  new  IllegalStateException( "   "  +  _hashSize  + "  entries  is  now  full  (all   "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +   "  You  can  disable  the  check  via  JsonFactory  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  throw  new  IllegalStateException( "   "  +  _hashSize  + "  entries  is  now  full  (all   "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +   "  You  can  disable  the  check  via  JsonFactory  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( "   "  +  _hashSize  + "  entries  is  now  full  (all   "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +   "  You  can  disable  the  check  via  JsonFactory	  throw    new    IllegalStateException(   "   "    +    _hashSize);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
83	[BUG]  [BUGGY]  _reportError( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >=  16)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  _reportError( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >=  16)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	_reportError( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >=  16)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.	  _reportError(   "Spill-over    slots    in    symbol    table    with       "+_count    +   "    entries,    hash    area    of   "+_hashSize+   "    slots    is    now    full    (all   "    +(_hashSize    >=    3)+   "    slots    --    suspect    a    DoS    attack    based    on    hash    collisions.    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
84	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  8)+ "  slots  --  suspect  a  DoS  attack  based  on  collisions.   "  +  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  8)+ "  slots  --  suspect  a  DoS  attack  based  on  collisions.   "  +  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  8)+ "  slots  --  suspect  a  DoS  attack  based  on  collisions.   "  +	  throw    new    IllegalStateException(   "Spill-over    slots    in    symbol    table    with       "+_count    +   "    entries,    hash    area    of       "+_hashSize+   "    slots    is    now    full    (all       "    +(_hashSize    >>    3)+   "    slots    --    suspect    a    DoS    attack    based    on    collisions.       "    +    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
85	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  16)+ "  slots  --  suspect  a  DoS  attack  based  on  collisions.   "  +  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  16)+ "  slots  --  suspect  a  DoS  attack  based  on  collisions.   "  +  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  16)+ "  slots  --  suspect  a  DoS  attack  based  on  collisions.   "  +	  throw    new    IllegalStateException(   "Spill-over    slots    in    symbol    table    with       "+_count    +   "    entries,    hash    area    of       "+_hashSize+   "    slots    is    now    full    (all       "    +(_hashSize    >>    3)+   "    slots    --    suspect    a    DoS    attack    based    on    collisions.       "    +    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
86	[BUG]  [BUGGY]  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  + "  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  + "  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  + "	  throw    new    IllegalStateException(   "Spill-over    slots    in    symbol    table    with       "+_count    +   "    entries,    hash    area    of   "+_hashSize+   "    slots    --    suspect    a    DoS    attack    based    on    hash    collisions.       "    +   "    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
87	[BUG]  [BUGGY]  Throwables.throwables( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of  128  entries.n "  + "  You  can  disable  the  check  via  JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  Throwables.throwables( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of  128  entries.n "  + "  You  can  disable  the  check  via  JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	Throwables.throwables( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of  128  entries.n "  + "  You  can  disable  the  check  via  JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW	  Throwables.throwables(   "Spill-over    slots    in    symbol    table    with       "+_count    +   "    entries,    hash    area    of    128    entries.   "    +   "    You    can    disable    the    check    via    JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
88	[BUG]  [BUGGY]  _reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of  128  entries  is  now  full  (all   "  +(_hashSize  >>  16)+   "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  _reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of  128  entries  is  now  full  (all   "  +(_hashSize  >>  16)+   "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	_reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of  128  entries  is  now  full  (all   "  +(_hashSize  >>  16)+   "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +	  _reportError(   "TooManyCollisions.    Please    check    that    the    hash    area    of    128    entries    is    now    full    (all       "    +(_hashSize    >>    3)+   "    slots    --    suspect    a    DoS    attack    based    on    hash    collisions.       "    +    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
89	[BUG]  [BUGGY]  _reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of  128  entries  is  not  visible. ");  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  _reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of  128  entries  is  not  visible. ");  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	_reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of  128  entries  is  not  visible. ");	  _reportError(   "TooManyCollisions.   ");    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
90	[BUG]  [BUGGY]  _reportInvalidEOF();  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  _reportInvalidEOF();  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	_reportInvalidEOF();	  _reportUnsupportedOperation();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
91	[BUG]  [BUGGY]  System.arraycopy(oldNames,  0,  _hashArea,  _count  +  128);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  System.arraycopy(oldNames,  0,  _hashArea,  _count  +  128);  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	System.arraycopy(oldNames,  0,  _hashArea,  _count  +  128);	  System.arraycopy(oldNames,    0,    _hashArea,    _count);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
92	[BUG]  [BUGGY]  System.arraycopy(oldNames,  0,  _count,  _hashArea);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  System.arraycopy(oldNames,  0,  _count,  _hashArea);  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	System.arraycopy(oldNames,  0,  _count,  _hashArea);	  System.arraycopy(oldNames,    0,    _hashArea,    _count);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
93	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Symbol  table  with   "+_count  + "  entries,  hash  area  of  128  entries.n ");  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  throw  new  IllegalStateException( "Symbol  table  with   "+_count  + "  entries,  hash  area  of  128  entries.n ");  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( "Symbol  table  with   "+_count  + "  entries,  hash  area  of  128  entries.n ");	  throw    new    IllegalStateException(   "Symbol    table    with       "+_count    +   "    entries,    hash    area    of    128    entries.   ");    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
94	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  _count  + "  entries);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  throw  new  IllegalStateException( " "  +  _count  + "  entries);  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( " "  +  _count  + "  entries);	  throw    new    IllegalStateException(   "       "    +    _count);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
95	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  _count  + "  entries;  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  throw  new  IllegalStateException( " "  +  _count  + "  entries;  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( " "  +  _count  + "  entries;	  throw    new    IllegalStateException(   "       "    +    _count);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
96	[BUG]  [BUGGY]  _reportError( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  2)+ "  slots  --  suspect  a  DoS  attack  based  on  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  _reportError( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  2)+ "  slots  --  suspect  a  DoS  attack  based  on  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	_reportError( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  2)+ "  slots  --  suspect  a  DoS  attack  based  on	  _reportError(   "Spill-over    slots    in    symbol    table    with       "+_count    +   "    entries,    hash    area    of   "+_hashSize+   "    slots    is    now    full    (all   "    +(_hashSize    >>    3)+   "    slots    --    suspect    a    DoS    attack    based    on    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
97	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Missing  a  DoS  attack  based  on  hash  collisions.   "  + "  You  can  disable  the  check  via  JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW ");  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  throw  new  IllegalStateException( "Missing  a  DoS  attack  based  on  hash  collisions.   "  + "  You  can  disable  the  check  via  JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW ");  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( "Missing  a  DoS  attack  based  on  hash  collisions.   "  + "  You  can  disable  the  check  via  JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW ");	  throw    new    IllegalStateException(   "Missing    a    DoS    attack    based    on    hash    collisions.       ");    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
98	[BUG]  [BUGGY]  System.arraycopy(oldNames,  0,  _names,  _hashSize,  oldNames.length);  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  System.arraycopy(oldNames,  0,  _names,  _hashSize,  oldNames.length);  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	System.arraycopy(oldNames,  0,  _names,  _hashSize,  oldNames.length);	  System.arraycopy(oldNames,    0,    oldNames,    _count,    _hashSize);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
99	[BUG]  [BUGGY]  System.arraycopy(oldNames,  0,  _names,  _count,  _hashSize);  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  System.arraycopy(oldNames,  0,  _names,  _count,  _hashSize);  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	System.arraycopy(oldNames,  0,  _names,  _count,  _hashSize);	  System.arraycopy(oldNames,    0,    oldNames,    _count,    _hashSize);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
100	[BUG]  [BUGGY]  System.arraycopy(oldNames,  0,  _names,  _hashArea,  _hashSize);  [CE]  illegal  start  of  type  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  System.arraycopy(oldNames,  0,  _names,  _hashArea,  _hashSize);  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	System.arraycopy(oldNames,  0,  _names,  _hashArea,  _hashSize);	  System.arraycopy(oldNames,    0,    oldNames,    _count,    _hashSize);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
101	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of  128  entries. "  + "  You  can  disable  the  check  via  JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW ", "  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of  128  entries. "  + "  You  can  disable  the  check  via  JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW ", "  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of  128  entries. "  + "  You  can  disable  the  check  via  JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW ", "	  throw    new    IllegalStateException(   "Spill-over    slots    in    symbol    table    with       "+_count    +   "    entries,    hash    area    of    128    entries.   "    +   "    You    can    disable    the    check    via    JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW   ",    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
102	[BUG]  [BUGGY]  _reportError( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  12)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  _reportError( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  12)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	_reportError( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  12)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.	  _reportError(   "Spill-over    slots    in    symbol    table    with       "+_count    +   "    entries,    hash    area    of   "+_hashSize+   "    slots    is    now    full    (all   "    +(_hashSize    >>    3)+   "    slots    --    suspect    a    DoS    attack    based    on    hash    collisions.    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
103	[BUG]  [BUGGY]  _reportError( "Collisions  not  followed  by  128  entries. ");  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  _reportError( "Collisions  not  followed  by  128  entries. ");  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	_reportError( "Collisions  not  followed  by  128  entries. ");	  _throwInternal();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
104	[BUG]  [BUGGY]  _reportError( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >=  16)+ "  slots  --  suspect  a  DoS  attack  based  on  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  _reportError( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >=  16)+ "  slots  --  suspect  a  DoS  attack  based  on  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	_reportError( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >=  16)+ "  slots  --  suspect  a  DoS  attack  based  on	  _reportError(   "Spill-over    slots    in    symbol    table    with       "+_count    +   "    entries,    hash    area    of   "+_hashSize+   "    slots    is    now    full    (all   "    +(_hashSize    >=    3)+   "    slots    --    suspect    a    DoS    attack    based    on    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
105	[BUG]  [BUGGY]  Throw  new  IllegalStateException( "Symbol  table  with   "+_count  + "  entries,  hash  area  of  128  entries. ");  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  Throw  new  IllegalStateException( "Symbol  table  with   "+_count  + "  entries,  hash  area  of  128  entries. ");  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	Throw  new  IllegalStateException( "Symbol  table  with   "+_count  + "  entries,  hash  area  of  128  entries. ");	  throw    new    IllegalStateException(   "Symbol    table    with       "+_count    +   "    entries,    hash    area    of    128    entries.   ");    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
106	[BUG]  [BUGGY]  _reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of  128  entries  is  now  full  (all   "  +(_hashSize  >>  4)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions. "));  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  _reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of  128  entries  is  now  full  (all   "  +(_hashSize  >>  4)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions. "));  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	_reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of  128  entries  is  now  full  (all   "  +(_hashSize  >>  4)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions. "));	  _reportError(   "TooManyCollisions.    Please    check    that    the    hash    area    of    128    entries    is    now    full    (all       "    +(_hashSize    >=    3)+   "    slots    --    suspect    a    DoS    attack    based    on    hash    collisions.   "));    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
107	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  4)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  4)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  4)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +	  throw    new    IllegalStateException(   "Spill-over    slots    in    symbol    table    with       "+_count    +   "    entries,    hash    area    of   "+_hashSize+   "    slots    is    now    full    (all       "    +(_hashSize    >>    3)+   "    slots    --    suspect    a    DoS    attack    based    on    hash    collisions.       "    +    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
108	[BUG]  [BUGGY]  _reportUnimplementedStatement();  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  _reportUnimplementedStatement();  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	_reportUnimplementedStatement();	  _throwInternal();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
109	[BUG]  [BUGGY]  _reportUnexpectedNumberOfLinks();  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  _reportUnexpectedNumberOfLinks();  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	_reportUnexpectedNumberOfLinks();	  _throwInternal();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
110	[BUG]  [BUGGY]  throw  new  IllegalStateException( "   "  +  _names  + "  entries  is  now  full  (all   "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +   "  You  can  disable  the  check  via  JsonFactory  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  throw  new  IllegalStateException( "   "  +  _names  + "  entries  is  now  full  (all   "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +   "  You  can  disable  the  check  via  JsonFactory  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( "   "  +  _names  + "  entries  is  now  full  (all   "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +   "  You  can  disable  the  check  via  JsonFactory	  throw    new    IllegalStateException(   "       "    +    _names);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
111	[BUG]  [BUGGY]  throw  new  IllegalStateException( "   "  +  _names  + "  entries  is  now  full  (all   "  +(_hashSize  >=  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +   "  You  can  disable  the  check  via  JsonFactory  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  throw  new  IllegalStateException( "   "  +  _names  + "  entries  is  now  full  (all   "  +(_hashSize  >=  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +   "  You  can  disable  the  check  via  JsonFactory  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( "   "  +  _names  + "  entries  is  now  full  (all   "  +(_hashSize  >=  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +   "  You  can  disable  the  check  via  JsonFactory	  throw    new    IllegalStateException(   "       "    +    _names);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
112	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of   "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >=  3)+ "  slots  --  suspect  a  DoS  attack  based  on  collisions.   "  +  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of   "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >=  3)+ "  slots  --  suspect  a  DoS  attack  based  on  collisions.   "  +  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of   "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >=  3)+ "  slots  --  suspect  a  DoS  attack  based  on  collisions.   "  +	  throw    new    IllegalStateException(   "Spill-over    slots    in    symbol    table    with       "+_count    +   "    entries,    hash    area    of    128    entries.   "    +   "    You    can    disable    the    check    via    JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
113	[BUG]  [BUGGY]  _throwUnsupportedOperation();  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  _throwUnsupportedOperation();  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	_throwUnsupportedOperation();	  _reportUnsupportedOperation();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
114	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Invalid  area  of  128  entries.   "  +  _count);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  throw  new  IllegalStateException( "Invalid  area  of  128  entries.   "  +  _count);  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( "Invalid  area  of  128  entries.   "  +  _count);	  throw    new    IllegalStateException(   "Invalid    area    of    128    entries.       "    +    _hashSize);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
115	[BUG]  [BUGGY]  System.arraycopy(oldNames,  0,  _names,  _hashArea,  oldNames.length);  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  System.arraycopy(oldNames,  0,  _names,  _hashArea,  oldNames.length);  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	System.arraycopy(oldNames,  0,  _names,  _hashArea,  oldNames.length);	  System.arraycopy(oldNames,    0,    _hashArea,    _count,    oldNames.length);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
116	[BUG]  [BUGGY]  throw  new  IllegalStateException( "   "  +  _count  +  1);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  throw  new  IllegalStateException( "   "  +  _count  +  1);  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( "   "  +  _count  +  1);	  throw    new    IllegalStateException(   "       ".equals(_count    +    1));    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
117	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  + ",  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  + ",  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  + ",	  throw    new    IllegalStateException(   "Spill-over    slots    in    symbol    table    with       "+_count    +   "    entries,    hash    area    of   "+_hashSize+   "    slots    --    suspect    a    DoS    attack    based    on    hash    collisions.       "    +   "    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
118	[BUG]  [BUGGY]  _reportError( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  collisions.  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  _reportError( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  collisions.  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	_reportError( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  collisions.	  _reportError(   "Spill-over    slots    in    symbol    table    with       "+_count    +   "    entries,    hash    area    of   "+_hashSize+   "    slots    is    now    full    (all   "    +(_hashSize    >=    3)+   "    slots    --    suspect    a    DoS    attack    based    on    hash    collisions.    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
119	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  4)+ "  slots  --  suspect  a  DoS  attack  based  on  collisions.   "  +  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  4)+ "  slots  --  suspect  a  DoS  attack  based  on  collisions.   "  +  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  4)+ "  slots  --  suspect  a  DoS  attack  based  on  collisions.   "  +	  throw    new    IllegalStateException(   "Spill-over    slots    in    symbol    table    with       "+_count    +   "    entries,    hash    area    of       "+_hashSize+   "    slots    is    now    full    (all       "    +(_hashSize    >>    3)+   "    slots    --    suspect    a    DoS    attack    based    on    collisions.       "    +    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
120	[BUG]  [BUGGY]  System.arraycopy(oldNames,  0,  _names,  _hashSize,  _secondaryStart);  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  System.arraycopy(oldNames,  0,  _names,  _hashSize,  _secondaryStart);  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	System.arraycopy(oldNames,  0,  _names,  _hashSize,  _secondaryStart);	  System.arraycopy(oldNames,    0,    oldNames,    _count,    _hashSize);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
121	[BUG]  [BUGGY]  System.arraycopy(oldNames,  0,  _hashArea,  _count  +  1);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  System.arraycopy(oldNames,  0,  _hashArea,  _count  +  1);  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	System.arraycopy(oldNames,  0,  _hashArea,  _count  +  1);	  System.arraycopy(oldNames,    0,    _hashArea,    _count);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
122	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +   "equals(_hashSize));  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +   "equals(_hashSize));  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	Throwables.throw  new  IllegalStateException( " "  +   "equals(_hashSize));	  Throwables.throw    new    IllegalStateException(   "   ".equals(_hashSize));    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
123	[BUG]  [BUGGY]  throw  new  IllegalStateException( "   "  +  _count  + "  entries  is  now  full  (all   "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +   "  You  can  disable  the  check  via  JsonFactory  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  throw  new  IllegalStateException( "   "  +  _count  + "  entries  is  now  full  (all   "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +   "  You  can  disable  the  check  via  JsonFactory  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( "   "  +  _count  + "  entries  is  now  full  (all   "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +   "  You  can  disable  the  check  via  JsonFactory	  throw    new    IllegalStateException(   "       "    +    _count);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
124	[BUG]  [BUGGY]  throw  new  IllegalStateException( "   "  +  _count  + "  entries  is  now  full  (all   "  +(_hashSize  >>  3)+ "  entries  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +   "  You  can  disable  the  check  via  JsonFactory  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  throw  new  IllegalStateException( "   "  +  _count  + "  entries  is  now  full  (all   "  +(_hashSize  >>  3)+ "  entries  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +   "  You  can  disable  the  check  via  JsonFactory  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( "   "  +  _count  + "  entries  is  now  full  (all   "  +(_hashSize  >>  3)+ "  entries  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +   "  You  can  disable  the  check  via  JsonFactory	  throw    new    IllegalStateException(   "       "    +    _count);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
125	[BUG]  [BUGGY]  throw  new  IllegalStateException( "   "  +  _count  + "  entries  is  now  full  (all   "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  collisions.   "  +   "  You  can  disable  the  check  via  JsonFactory  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  throw  new  IllegalStateException( "   "  +  _count  + "  entries  is  now  full  (all   "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  collisions.   "  +   "  You  can  disable  the  check  via  JsonFactory  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( "   "  +  _count  + "  entries  is  now  full  (all   "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  collisions.   "  +   "  You  can  disable  the  check  via  JsonFactory	  throw    new    IllegalStateException(   "       "    +    _count);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
126	[BUG]  [BUGGY]  _reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of  128  entries  is  now  full  (all   "  +(_hashSize  >>  4)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  _reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of  128  entries  is  now  full  (all   "  +(_hashSize  >>  4)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	_reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of  128  entries  is  now  full  (all   "  +(_hashSize  >>  4)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +	  _reportError(   "TooManyCollisions.    Please    check    that    the    hash    area    of    128    entries    is    now    full    (all       "    +(_hashSize    >>    3)+   "    slots    --    suspect    a    DoS    attack    based    on    hash    collisions.       "    +    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
127	[BUG]  [BUGGY]  _reportError( "TooManyCollisions.  Please  report  that  the  hash  area  of  128  entries. ");  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  _reportError( "TooManyCollisions.  Please  report  that  the  hash  area  of  128  entries. ");  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	_reportError( "TooManyCollisions.  Please  report  that  the  hash  area  of  128  entries. ");	  _reportError(   "TooManyCollisions.   ");    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
128	[BUG]  [BUGGY]  _reportError( "TooManyCollisions.  Please  check  that  the  hash  area. ");  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  _reportError( "TooManyCollisions.  Please  check  that  the  hash  area. ");  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	_reportError( "TooManyCollisions.  Please  check  that  the  hash  area. ");	  _reportError(   "TooManyCollisions.   ");    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
129	[BUG]  [BUGGY]  _reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of  128  entries  is  now  full  (all   "  +(_hashSize  >>  1)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions. "));  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  _reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of  128  entries  is  now  full  (all   "  +(_hashSize  >>  1)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions. "));  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	_reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of  128  entries  is  now  full  (all   "  +(_hashSize  >>  1)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions. "));	  _reportError(   "TooManyCollisions.    Please    check    that    the    hash    area    of    128    entries    is    now    full    (all       "    +(_hashSize    >>    3)+   "    slots    --    suspect    a    DoS    attack    based    on    hash    collisions.   "));    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
130	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of   "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  3)+   "  slots  --  suspect  a  DoS  attack  based  on  collisions.   "  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries      [BUGGY]  Throwables.throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of   "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  3)+   "  slots  --  suspect  a  DoS  attack  based  on  collisions.   "  [BUGGY]      }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	Throwables.throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of   "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  3)+   "  slots  --  suspect  a  DoS  attack  based  on  collisions.   "	  Throwables.throw    new    IllegalStateException(   "Spill-over    slots    in    symbol    table    with       "+_count    +   "    entries,    hash    area    of    128    entries.   "    +   "    You    can    disable    the    check    via    JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
