bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  + "  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries    [BUGGY]  throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  + "  [BUGGY]    }  throw  new  IllegalStateException(   "Spill-over  slots  in  symbol  table  with     "+_count  +   "  entries,  hash  area  of     "+_hashSize+   "  slots  is  now  full  (all     "  +(_hashSize  >>  3)+   "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +   "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`   ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  + "	  throw    new    IllegalStateException(   "Spill-over    slots    in    symbol    table    with       "+_count    +   "    entries,    hash    area    of   "+_hashSize+   "    slots    is    now    full    (all   "    +(_hashSize    >>    3)+   "    slots    --    suspect    a    DoS    attack    based    on    hash    collisions.   "    +   "    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
2	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + ",  entries,  hash  area  of "+_hashSize+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  + "  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries    [BUGGY]  throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + ",  entries,  hash  area  of "+_hashSize+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  + "  [BUGGY]    }  throw  new  IllegalStateException(   "Spill-over  slots  in  symbol  table  with     "+_count  +   "  entries,  hash  area  of     "+_hashSize+   "  slots  is  now  full  (all     "  +(_hashSize  >>  3)+   "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +   "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`   ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + ",  entries,  hash  area  of "+_hashSize+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  + "	  throw    new    IllegalStateException(   "Spill-over    slots    in    symbol    table    with       "+_count    +   "    entries,    hash    area    of   "+_hashSize+   "    slots    is    now    full    (all   "    +(_hashSize    >>    3)+   "    slots    --    suspect    a    DoS    attack    based    on    hash    collisions.   "    +   "    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
3	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(_hashSize));  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries    [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(_hashSize));  [BUGGY]    }  throw  new  IllegalStateException(   "Spill-over  slots  in  symbol  table  with     "+_count  +   "  entries,  hash  area  of     "+_hashSize+   "  slots  is  now  full  (all     "  +(_hashSize  >>  3)+   "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +   "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`   ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	Throwables.throw  new  IllegalStateException( " ".equals(_hashSize));	  throw    new    IllegalStateException(   "   ".equals(_hashSize));    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
4	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries    [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  [BUGGY]    }  throw  new  IllegalStateException(   "Spill-over  slots  in  symbol  table  with     "+_count  +   "  entries,  hash  area  of     "+_hashSize+   "  slots  is  now  full  (all     "  +(_hashSize  >>  3)+   "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +   "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`   ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	Throwables.throw  new  IllegalStateException( " ");	  throw    new    IllegalStateException(   "   ".equals(_hashSize));    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
5	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  _hashSize);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries    [BUGGY]  throw  new  IllegalStateException( " "  +  _hashSize);  [BUGGY]    }  throw  new  IllegalStateException(   "Spill-over  slots  in  symbol  table  with     "+_count  +   "  entries,  hash  area  of     "+_hashSize+   "  slots  is  now  full  (all     "  +(_hashSize  >>  3)+   "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +   "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`   ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( " "  +  _hashSize);	  throw    new    IllegalStateException(   "   ".equals(_hashSize));    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
6	[BUG]  [BUGGY]  throw  new  IllegalStateException( "   "  +  _names.length);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries    [BUGGY]  throw  new  IllegalStateException( "   "  +  _names.length);  [BUGGY]    }  throw  new  IllegalStateException(   "Spill-over  slots  in  symbol  table  with     "+_count  +   "  entries,  hash  area  of     "+_hashSize+   "  slots  is  now  full  (all     "  +(_hashSize  >>  3)+   "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +   "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`   ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( "   "  +  _names.length);	  throw    new    IllegalStateException(   "   ".equals(_names));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
7	[BUG]  [BUGGY]  throw  new  IllegalStateException( "   ".equals(_count  +  1));  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries    [BUGGY]  throw  new  IllegalStateException( "   ".equals(_count  +  1));  [BUGGY]    }  throw  new  IllegalStateException(   "Spill-over  slots  in  symbol  table  with     "+_count  +   "  entries,  hash  area  of     "+_hashSize+   "  slots  is  now  full  (all     "  +(_hashSize  >>  3)+   "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +   "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`   ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( "   ".equals(_count  +  1));	  throw    new    IllegalStateException(   "   ".equals(_count));    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
8	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of  128  entries. "  + "  You  can  disable  the  check  via  JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries    [BUGGY]  throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of  128  entries. "  + "  You  can  disable  the  check  via  JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW  [BUGGY]    }  throw  new  IllegalStateException(   "Spill-over  slots  in  symbol  table  with     "+_count  +   "  entries,  hash  area  of     "+_hashSize+   "  slots  is  now  full  (all     "  +(_hashSize  >>  3)+   "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +   "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`   ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of  128  entries. "  + "  You  can  disable  the  check  via  JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW	  throw    new    IllegalStateException(   "Spill-over    slots    in    symbol    table    with       "+_count    +   "    entries,    hash    area    of    128    entries.   "    +   "    You    can    disable    the    check    via    JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW   "    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
9	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of  128  entries. "  + "  You  can  disable  the  check  via  JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW ",  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries    [BUGGY]  throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of  128  entries. "  + "  You  can  disable  the  check  via  JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW ",  [BUGGY]    }  throw  new  IllegalStateException(   "Spill-over  slots  in  symbol  table  with     "+_count  +   "  entries,  hash  area  of     "+_hashSize+   "  slots  is  now  full  (all     "  +(_hashSize  >>  3)+   "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +   "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`   ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of  128  entries. "  + "  You  can  disable  the  check  via  JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW ",	  throw    new    IllegalStateException(   "Spill-over    slots    in    symbol    table    with       "+_count    +   "    entries,    hash    area    of    128    entries.   "    +   "    You    can    disable    the    check    via    JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW   "    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
10	[BUG]  [BUGGY]  _reportError( "TooManyCollisions. ");  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries    [BUGGY]  _reportError( "TooManyCollisions. ");  [BUGGY]    }  throw  new  IllegalStateException(   "Spill-over  slots  in  symbol  table  with     "+_count  +   "  entries,  hash  area  of     "+_hashSize+   "  slots  is  now  full  (all     "  +(_hashSize  >>  3)+   "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +   "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`   ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	_reportError( "TooManyCollisions. ");	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
11	[BUG]  [BUGGY]  _reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of  128  entries  is  now  full  (all   "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions. "));  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries    [BUGGY]  _reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of  128  entries  is  now  full  (all   "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions. "));  [BUGGY]    }  throw  new  IllegalStateException(   "Spill-over  slots  in  symbol  table  with     "+_count  +   "  entries,  hash  area  of     "+_hashSize+   "  slots  is  now  full  (all     "  +(_hashSize  >>  3)+   "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +   "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`   ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	_reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of  128  entries  is  now  full  (all   "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions. "));	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
12	[BUG]  [BUGGY]  _reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of  128  entries  is  now  full  (all   "  +(_hashSize  >=  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions. "));  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries    [BUGGY]  _reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of  128  entries  is  now  full  (all   "  +(_hashSize  >=  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions. "));  [BUGGY]    }  throw  new  IllegalStateException(   "Spill-over  slots  in  symbol  table  with     "+_count  +   "  entries,  hash  area  of     "+_hashSize+   "  slots  is  now  full  (all     "  +(_hashSize  >>  3)+   "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +   "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`   ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	_reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of  128  entries  is  now  full  (all   "  +(_hashSize  >=  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions. "));	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
13	[BUG]  [BUGGY]  _reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of  128  entries  is  now  full  (all   "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries    [BUGGY]  _reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of  128  entries  is  now  full  (all   "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +  [BUGGY]    }  throw  new  IllegalStateException(   "Spill-over  slots  in  symbol  table  with     "+_count  +   "  entries,  hash  area  of     "+_hashSize+   "  slots  is  now  full  (all     "  +(_hashSize  >>  3)+   "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +   "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`   ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	_reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of  128  entries  is  now  full  (all   "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
14	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Symbol  table  with   "+_count  + "  entries,  hash  area  of  128  entries. ");  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries    [BUGGY]  throw  new  IllegalStateException( "Symbol  table  with   "+_count  + "  entries,  hash  area  of  128  entries. ");  [BUGGY]    }  throw  new  IllegalStateException(   "Spill-over  slots  in  symbol  table  with     "+_count  +   "  entries,  hash  area  of     "+_hashSize+   "  slots  is  now  full  (all     "  +(_hashSize  >>  3)+   "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +   "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`   ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( "Symbol  table  with   "+_count  + "  entries,  hash  area  of  128  entries. ");	  throw    new    IllegalStateException(   "symbol    table    with       "+_count    +   "    entries,    hash    area    of    128    entries.   ");    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
15	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Symbol  table  with   "+_count  + ",  entries,  hash  area  of  128  entries. ");  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries    [BUGGY]  throw  new  IllegalStateException( "Symbol  table  with   "+_count  + ",  entries,  hash  area  of  128  entries. ");  [BUGGY]    }  throw  new  IllegalStateException(   "Spill-over  slots  in  symbol  table  with     "+_count  +   "  entries,  hash  area  of     "+_hashSize+   "  slots  is  now  full  (all     "  +(_hashSize  >>  3)+   "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +   "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`   ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( "Symbol  table  with   "+_count  + ",  entries,  hash  area  of  128  entries. ");	  throw    new    IllegalStateException(   "symbol    table    with       "+_count    +   "    entries,    hash    area    of    128    entries.   ");    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
16	[BUG]  [BUGGY]  Throwables.throwables( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of  128  entries. "  + "  You  can  disable  the  check  via  JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries    [BUGGY]  Throwables.throwables( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of  128  entries. "  + "  You  can  disable  the  check  via  JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW  [BUGGY]    }  throw  new  IllegalStateException(   "Spill-over  slots  in  symbol  table  with     "+_count  +   "  entries,  hash  area  of     "+_hashSize+   "  slots  is  now  full  (all     "  +(_hashSize  >>  3)+   "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +   "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`   ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	Throwables.throwables( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of  128  entries. "  + "  You  can  disable  the  check  via  JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW	  throw    new    IllegalStateException(   "Spill-over    slots    in    symbol    table    with       "+_count    +   "    entries,    hash    area    of    128    entries.   "    +   "    You    can    disable    the    check    via    JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW   ");    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
17	[BUG]  [BUGGY]  Throwables.throwables( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of  128  entries. "  + "  You  can  disable  the  check  via  JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW ");  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries    [BUGGY]  Throwables.throwables( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of  128  entries. "  + "  You  can  disable  the  check  via  JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW ");  [BUGGY]    }  throw  new  IllegalStateException(   "Spill-over  slots  in  symbol  table  with     "+_count  +   "  entries,  hash  area  of     "+_hashSize+   "  slots  is  now  full  (all     "  +(_hashSize  >>  3)+   "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +   "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`   ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	Throwables.throwables( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of  128  entries. "  + "  You  can  disable  the  check  via  JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW ");	  throw    new    IllegalStateException(   "Spill-over    slots    in    symbol    table    with       "+_count    +   "    entries,    hash    area    of    128    entries.   "    +   "    You    can    disable    the    check    via    JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW   ");    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
18	[BUG]  [BUGGY]  throw  new  IllegalStateException( "   "  +  _count);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries    [BUGGY]  throw  new  IllegalStateException( "   "  +  _count);  [BUGGY]    }  throw  new  IllegalStateException(   "Spill-over  slots  in  symbol  table  with     "+_count  +   "  entries,  hash  area  of     "+_hashSize+   "  slots  is  now  full  (all     "  +(_hashSize  >>  3)+   "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +   "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`   ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( "   "  +  _count);	  throw    new    IllegalStateException(   "   ".equals(_count));    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
19	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries    [BUGGY]  throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +  [BUGGY]    }  throw  new  IllegalStateException(   "Spill-over  slots  in  symbol  table  with     "+_count  +   "  entries,  hash  area  of     "+_hashSize+   "  slots  is  now  full  (all     "  +(_hashSize  >>  3)+   "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +   "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`   ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +	  throw    new    IllegalStateException(   "Spill-over    slots    in    symbol    table    with       "+_count    +   "    entries,    hash    area    of   "+_hashSize+   "    slots    is    now    full    (all   "    +(_hashSize    >>    3)+   "    slots    --    suspect    a    DoS    attack    based    on    hash    collisions.   "    +   "    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
20	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  16)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries    [BUGGY]  throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  16)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +  [BUGGY]    }  throw  new  IllegalStateException(   "Spill-over  slots  in  symbol  table  with     "+_count  +   "  entries,  hash  area  of     "+_hashSize+   "  slots  is  now  full  (all     "  +(_hashSize  >>  3)+   "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +   "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`   ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  16)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +	  throw    new    IllegalStateException(   "Spill-over    slots    in    symbol    table    with       "+_count    +   "    entries,    hash    area    of   "+_hashSize+   "    slots    is    now    full    (all   "    +(_hashSize    >>    3)+   "    slots    --    suspect    a    DoS    attack    based    on    hash    collisions.   "    +   "    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
21	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  8)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries    [BUGGY]  throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  8)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +  [BUGGY]    }  throw  new  IllegalStateException(   "Spill-over  slots  in  symbol  table  with     "+_count  +   "  entries,  hash  area  of     "+_hashSize+   "  slots  is  now  full  (all     "  +(_hashSize  >>  3)+   "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +   "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`   ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  8)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +	  throw    new    IllegalStateException(   "Spill-over    slots    in    symbol    table    with       "+_count    +   "    entries,    hash    area    of   "+_hashSize+   "    slots    is    now    full    (all   "    +(_hashSize    >>    3)+   "    slots    --    suspect    a    DoS    attack    based    on    hash    collisions.   "    +   "    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
22	[BUG]  [BUGGY]  System.arraycopy(oldNames,  0,  _hashArea,  _count);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries    [BUGGY]  System.arraycopy(oldNames,  0,  _hashArea,  _count);  [BUGGY]    }  throw  new  IllegalStateException(   "Spill-over  slots  in  symbol  table  with     "+_count  +   "  entries,  hash  area  of     "+_hashSize+   "  slots  is  now  full  (all     "  +(_hashSize  >>  3)+   "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +   "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`   ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	System.arraycopy(oldNames,  0,  _hashArea,  _count);	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
23	[BUG]  [BUGGY]  _reportUnsupportedOperation();  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries    [BUGGY]  _reportUnsupportedOperation();  [BUGGY]    }  throw  new  IllegalStateException(   "Spill-over  slots  in  symbol  table  with     "+_count  +   "  entries,  hash  area  of     "+_hashSize+   "  slots  is  now  full  (all     "  +(_hashSize  >>  3)+   "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +   "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`   ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	_reportUnsupportedOperation();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
24	[BUG]  [BUGGY]  System.arraycopy(oldNames,  0,  oldNames,  _count,  _hashSize);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries    [BUGGY]  System.arraycopy(oldNames,  0,  oldNames,  _count,  _hashSize);  [BUGGY]    }  throw  new  IllegalStateException(   "Spill-over  slots  in  symbol  table  with     "+_count  +   "  entries,  hash  area  of     "+_hashSize+   "  slots  is  now  full  (all     "  +(_hashSize  >>  3)+   "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +   "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`   ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	System.arraycopy(oldNames,  0,  oldNames,  _count,  _hashSize);	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
25	[BUG]  [BUGGY]  System.arraycopy(oldNames,  0,  _hashArea,  _count,  oldNames.length);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries    [BUGGY]  System.arraycopy(oldNames,  0,  _hashArea,  _count,  oldNames.length);  [BUGGY]    }  throw  new  IllegalStateException(   "Spill-over  slots  in  symbol  table  with     "+_count  +   "  entries,  hash  area  of     "+_hashSize+   "  slots  is  now  full  (all     "  +(_hashSize  >>  3)+   "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +   "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`   ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	System.arraycopy(oldNames,  0,  _hashArea,  _count,  oldNames.length);	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
26	[BUG]  [BUGGY]  throw  new  IllegalStateException( "   "  +  _names);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries    [BUGGY]  throw  new  IllegalStateException( "   "  +  _names);  [BUGGY]    }  throw  new  IllegalStateException(   "Spill-over  slots  in  symbol  table  with     "+_count  +   "  entries,  hash  area  of     "+_hashSize+   "  slots  is  now  full  (all     "  +(_hashSize  >>  3)+   "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +   "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`   ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( "   "  +  _names);	  throw    new    IllegalStateException(   "   ".equals(_names));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
27	[BUG]  [BUGGY]  new  IllegalStateException( "Symbol  table  with   "+_count  + "  entries,  hash  area  of  128  entries.   ");  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries    [BUGGY]  new  IllegalStateException( "Symbol  table  with   "+_count  + "  entries,  hash  area  of  128  entries.   ");  [BUGGY]    }  throw  new  IllegalStateException(   "Spill-over  slots  in  symbol  table  with     "+_count  +   "  entries,  hash  area  of     "+_hashSize+   "  slots  is  now  full  (all     "  +(_hashSize  >>  3)+   "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +   "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`   ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	new  IllegalStateException( "Symbol  table  with   "+_count  + "  entries,  hash  area  of  128  entries.   ");	  throw    new    IllegalStateException(   "symbol    table    with       "+_count    +   "    entries,    hash    area    of    128    entries.   ");    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
28	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Invalid  area  of  128  entries.   "  +  _hashSize);  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries    [BUGGY]  throw  new  IllegalStateException( "Invalid  area  of  128  entries.   "  +  _hashSize);  [BUGGY]    }  throw  new  IllegalStateException(   "Spill-over  slots  in  symbol  table  with     "+_count  +   "  entries,  hash  area  of     "+_hashSize+   "  slots  is  now  full  (all     "  +(_hashSize  >>  3)+   "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +   "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`   ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( "Invalid  area  of  128  entries.   "  +  _hashSize);	  throw    new    IllegalStateException(   "   ".equals(_hashSize));    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
29	[BUG]  [BUGGY]  _throwInternal();  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries    [BUGGY]  _throwInternal();  [BUGGY]    }  throw  new  IllegalStateException(   "Spill-over  slots  in  symbol  table  with     "+_count  +   "  entries,  hash  area  of     "+_hashSize+   "  slots  is  now  full  (all     "  +(_hashSize  >>  3)+   "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +   "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`   ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	_throwInternal();	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
30	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of   "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  collisions.   "  +  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries    [BUGGY]  throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of   "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  collisions.   "  +  [BUGGY]    }  throw  new  IllegalStateException(   "Spill-over  slots  in  symbol  table  with     "+_count  +   "  entries,  hash  area  of     "+_hashSize+   "  slots  is  now  full  (all     "  +(_hashSize  >>  3)+   "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +   "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`   ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of   "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  collisions.   "  +	  throw    new    IllegalStateException(   "Spill-over    slots    in    symbol    table    with       "+_count    +   "    entries,    hash    area    of    128    entries.   "    +   "    You    can    disable    the    check    via    JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW   "    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
31	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Missing  a  DoS  attack  based  on  hash  collisions.   ");  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries    [BUGGY]  throw  new  IllegalStateException( "Missing  a  DoS  attack  based  on  hash  collisions.   ");  [BUGGY]    }  throw  new  IllegalStateException(   "Spill-over  slots  in  symbol  table  with     "+_count  +   "  entries,  hash  area  of     "+_hashSize+   "  slots  is  now  full  (all     "  +(_hashSize  >>  3)+   "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +   "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`   ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( "Missing  a  DoS  attack  based  on  hash  collisions.   ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
32	[BUG]  [BUGGY]  _reportError( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries    [BUGGY]  _reportError( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.  [BUGGY]    }  throw  new  IllegalStateException(   "Spill-over  slots  in  symbol  table  with     "+_count  +   "  entries,  hash  area  of     "+_hashSize+   "  slots  is  now  full  (all     "  +(_hashSize  >>  3)+   "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +   "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`   ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	_reportError( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
33	[BUG]  [BUGGY]  _reportError( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries    [BUGGY]  _reportError( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  [BUGGY]    }  throw  new  IllegalStateException(   "Spill-over  slots  in  symbol  table  with     "+_count  +   "  entries,  hash  area  of     "+_hashSize+   "  slots  is  now  full  (all     "  +(_hashSize  >>  3)+   "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +   "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`   ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	_reportError( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
34	[BUG]  [BUGGY]  _reportError( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all "  +(_hashSize  >=  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries    [BUGGY]  _reportError( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all "  +(_hashSize  >=  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.  [BUGGY]    }  throw  new  IllegalStateException(   "Spill-over  slots  in  symbol  table  with     "+_count  +   "  entries,  hash  area  of     "+_hashSize+   "  slots  is  now  full  (all     "  +(_hashSize  >>  3)+   "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +   "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`   ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	_reportError( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all "  +(_hashSize  >=  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
35	[BUG]  [BUGGY]  _reportError( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all "  +(_hashSize  >=  3)+ "  slots  --  suspect  a  DoS  attack  based  on  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries    [BUGGY]  _reportError( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all "  +(_hashSize  >=  3)+ "  slots  --  suspect  a  DoS  attack  based  on  [BUGGY]    }  throw  new  IllegalStateException(   "Spill-over  slots  in  symbol  table  with     "+_count  +   "  entries,  hash  area  of     "+_hashSize+   "  slots  is  now  full  (all     "  +(_hashSize  >>  3)+   "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +   "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`   ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	_reportError( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all "  +(_hashSize  >=  3)+ "  slots  --  suspect  a  DoS  attack  based  on	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
36	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of  128  entries. "  + "  You  can  disable  the  check  via  JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries    [BUGGY]  Throwables.throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of  128  entries. "  + "  You  can  disable  the  check  via  JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW  [BUGGY]    }  throw  new  IllegalStateException(   "Spill-over  slots  in  symbol  table  with     "+_count  +   "  entries,  hash  area  of     "+_hashSize+   "  slots  is  now  full  (all     "  +(_hashSize  >>  3)+   "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +   "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`   ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	Throwables.throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of  128  entries. "  + "  You  can  disable  the  check  via  JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW	  throw    new    IllegalStateException(   "Spill-over    slots    in    symbol    table    with       "+_count    +   "    entries,    hash    area    of    128    entries.   "    +   "    You    can    disable    the    check    via    JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW   ");    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
37	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  0)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  _reportTooManyCollisions()  {  if  (_hashSize  <=  1024)  {  //  would  have  spill-over  area  of  128  entries    [BUGGY]  throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  0)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +  [BUGGY]    }  throw  new  IllegalStateException(   "Spill-over  slots  in  symbol  table  with     "+_count  +   "  entries,  hash  area  of     "+_hashSize+   "  slots  is  now  full  (all     "  +(_hashSize  >>  3)+   "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +   "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`   ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1184	1184	1	replace	throw  new  IllegalStateException( "Spill-over  slots  in  symbol  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  0)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +	  throw    new    IllegalStateException(   "Spill-over    slots    in    symbol    table    with       "+_count    +   "    entries,    hash    area    of   "+_hashSize+   "    slots    is    now    full    (all   "    +(_hashSize    >=    3)+   "    slots    --    suspect    a    DoS    attack    based    on    hash    collisions.   "    +   "    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
