bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(_count  <  100)  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  if(_count  <  100)  {  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	if(_count  <  100)  {	  if(_count    <    1024)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
2	[BUG]  [BUGGY]  if(_count  <  1000)  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  if(_count  <  1000)  {  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	if(_count  <  1000)  {	  if(_count    <    1024)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
3	[BUG]  [BUGGY]  if(_count  <  1024  ||  _count  >  MAX_ENTRIES_FOR_REUSE)  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  if(_count  <  1024  ||  _count  >  MAX_ENTRIES_FOR_REUSE)  {  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	if(_count  <  1024  ||  _count  >  MAX_ENTRIES_FOR_REUSE)  {	  if(_count    <    1024)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
4	[BUG]  [BUGGY]  if(_count  >  1024)  {  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  if(_count  >  1024)  {  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	if(_count  >  1024)  {	  if(_count    <    1024)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
5	[BUG]  [BUGGY]  if(_hashSize  >=  100)  {  //  would  have  spill-over  area  of  128  entries;  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  if(_hashSize  >=  100)  {  //  would  have  spill-over  area  of  128  entries;  }  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	if(_hashSize  >=  100)  {  //  would  have  spill-over  area  of  128  entries;  }	  if(_hashSize    >=    1024)    {    //    would    have    spill-over    area    of    128    entries;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
6	[BUG]  [BUGGY]  Integer[]  slots  =  _hashArea.getSlots();  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  Integer[]  slots  =  _hashArea.getSlots();  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	Integer[]  slots  =  _hashArea.getSlots();	  Integer[]    slots    =    _hashArea.getValues();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
7	[BUG]  [BUGGY]  Integer[]  slots  =  _hashArea.getAllSlots();  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  Integer[]  slots  =  _hashArea.getAllSlots();  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	Integer[]  slots  =  _hashArea.getAllSlots();	  Integer[]    slots    =    _hashArea.getValues();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
8	[BUG]  [BUGGY]  if(_hashSize  >  100)  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  if(_hashSize  >  100)  {  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	if(_hashSize  >  100)  {	  if(_hashSize    <    100)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
9	[BUG]  [BUGGY]  if(_hashSize  ==  100)  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  if(_hashSize  ==  100)  {  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	if(_hashSize  ==  100)  {	  if(_hashSize    <    100)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
10	[BUG]  [BUGGY]  if(_hashSize  >=  100)  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  if(_hashSize  >=  100)  {  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	if(_hashSize  >=  100)  {	  if(_hashSize    <    100)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
11	[BUG]  [BUGGY]  _reportInvalidOperation();  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  _reportInvalidOperation();  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	_reportInvalidOperation();	  _reportUnsupportedOperation();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
12	[BUG]  [BUGGY]  _throwIntern();  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  _throwIntern();  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	_throwIntern();	  _reportUnsupportedOperation();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
13	[BUG]  [BUGGY]  if(_hashSize  ==  100)  {  //  would  have  spill-over  area  of  128  entries  return;  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  if(_hashSize  ==  100)  {  //  would  have  spill-over  area  of  128  entries  return;  }  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	if(_hashSize  ==  100)  {  //  would  have  spill-over  area  of  128  entries  return;  }	  if(_hashSize    >=    100)    {    //    would    have    spill-over    area    of    128    entries    return;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
14	[BUG]  [BUGGY]  if(_hashSize  >  100)  {  //  would  have  spill-over  area  of  128  entries;  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  if(_hashSize  >  100)  {  //  would  have  spill-over  area  of  128  entries;  }  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	if(_hashSize  >  100)  {  //  would  have  spill-over  area  of  128  entries;  }	  if(_hashSize    <    100)    {    //    would    have    spill-over    area    of    128    entries;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
15	[BUG]  [BUGGY]  if(_hashSize  <  100)  {  //  would  have  spill-over  area  of  128;  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  if(_hashSize  <  100)  {  //  would  have  spill-over  area  of  128;  }  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	if(_hashSize  <  100)  {  //  would  have  spill-over  area  of  128;  }	  if(_hashSize    <    100)    {    //    would    have    spill-over    area    of    128    entries;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
16	[BUG]  [BUGGY]  _reportError( "TooManyCollisions  in  the  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  _reportError( "TooManyCollisions  in  the  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	_reportError( "TooManyCollisions  in  the  table  with   "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.	  _reportError(   "TooManyCollisions    in    the    table    with       "+_count    +   "    entries,    hash    area    of   "+_hashSize+   "    slots    is    now    full    (all   "    +(_hashSize    >>    3)+   "    slots    --    suspect    a    DoS    attack    based    on    hash    collisions.    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
17	[BUG]  [BUGGY]  _reportError( "TooManyCollisions  in  the  table  with "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  _reportError( "TooManyCollisions  in  the  table  with "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	_reportError( "TooManyCollisions  in  the  table  with "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  +	  _reportError(   "TooManyCollisions    in    the    table    with       "+_count    +   "    entries,    hash    area    of   "+_hashSize+   "    slots    is    now    full    (all   "    +(_hashSize    >>    3)+   "    slots    --    suspect    a    DoS    attack    based    on    hash    collisions.    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
18	[BUG]  [BUGGY]  if(_hashSize  >  1000)  {  //  would  have  spill-over  area  of  128  entries  return;  }  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  if(_hashSize  >  1000)  {  //  would  have  spill-over  area  of  128  entries  return;  }  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	if(_hashSize  >  1000)  {  //  would  have  spill-over  area  of  128  entries  return;  }	  if(_hashSize    >    1024)    {    //    would    have    spill-over    area    of    128    entries    return;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
19	[BUG]  [BUGGY]  _reportError( "TooManyCollisions  in  the  table  with "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  --  suspect  a  DoS  attack  based  on  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  _reportError( "TooManyCollisions  in  the  table  with "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  --  suspect  a  DoS  attack  based  on  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	_reportError( "TooManyCollisions  in  the  table  with "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  --  suspect  a  DoS  attack  based  on	  _reportError(   "TooManyCollisions    in    the    table    with       "+_count    +   "    entries,    hash    area    of   "+_hashSize+   "    slots    is    now    full    (all   "    +(_hashSize    >>    3)+   "    slots    --    suspect    a    DoS    attack    based    on    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
20	[BUG]  [BUGGY]  _reportError( "TooManyCollisions  in  the  table  with "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  1)+ "  slots  --  suspect  a  DoS  attack  based  on  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  _reportError( "TooManyCollisions  in  the  table  with "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  1)+ "  slots  --  suspect  a  DoS  attack  based  on  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	_reportError( "TooManyCollisions  in  the  table  with "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  1)+ "  slots  --  suspect  a  DoS  attack  based  on	  _reportError(   "TooManyCollisions    in    the    table    with       "+_count    +   "    entries,    hash    area    of   "+_hashSize+   "    slots    is    now    full    (all   "    +(_hashSize    >>    3)+   "    slots    --    suspect    a    DoS    attack    based    on    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
21	[BUG]  [BUGGY]  _reportError( "TooManyCollisions  in  the  table  with "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  2)+ "  slots  --  suspect  a  DoS  attack  based  on  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  _reportError( "TooManyCollisions  in  the  table  with "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  2)+ "  slots  --  suspect  a  DoS  attack  based  on  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	_reportError( "TooManyCollisions  in  the  table  with "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all   "  +(_hashSize  >>  2)+ "  slots  --  suspect  a  DoS  attack  based  on	  _reportError(   "TooManyCollisions    in    the    table    with       "+_count    +   "    entries,    hash    area    of   "+_hashSize+   "    slots    is    now    full    (all   "    +(_hashSize    >>    3)+   "    slots    --    suspect    a    DoS    attack    based    on    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
22	[BUG]  [BUGGY]  if(_count  <  1024  ||  _count  >  oldHashArea.length)  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  if(_count  <  1024  ||  _count  >  oldHashArea.length)  {  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	if(_count  <  1024  ||  _count  >  oldHashArea.length)  {	  if(_hashSize    <    1024    ||    _count    >    oldHashArea.length)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
23	[BUG]  [BUGGY]  if(_count  <  1024  ||  _hashSize  >  oldHashArea.length)  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  if(_count  <  1024  ||  _hashSize  >  oldHashArea.length)  {  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	if(_count  <  1024  ||  _hashSize  >  oldHashArea.length)  {	  if(_hashSize    <    1024    ||    _count    >    oldHashArea.length)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
24	[BUG]  [BUGGY]  if(_hashSize  <  1024  ||  _count  >=  oldHashArea.length)  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  if(_hashSize  <  1024  ||  _count  >=  oldHashArea.length)  {  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	if(_hashSize  <  1024  ||  _count  >=  oldHashArea.length)  {	  if(_hashSize    <    1024    ||    _count    >    oldHashArea.length)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
25	[BUG]  [BUGGY]  if(_count  <  100)  {  //  would  have  spill-over  area  of  128  entries;  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  if(_count  <  100)  {  //  would  have  spill-over  area  of  128  entries;  }  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	if(_count  <  100)  {  //  would  have  spill-over  area  of  128  entries;  }	  if(_count    <    100)    {    //    would    have    spill-over    area    of    128    entries    return;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
26	[BUG]  [BUGGY]  if(_count  <  1000)  {  //  would  have  spill-over  area  of  128  entries  return;  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  if(_count  <  1000)  {  //  would  have  spill-over  area  of  128  entries  return;  }  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	if(_count  <  1000)  {  //  would  have  spill-over  area  of  128  entries  return;  }	  if(_count    <    100)    {    //    would    have    spill-over    area    of    128    entries    return;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
27	[BUG]  [BUGGY]  if(_count  <  100)  {  //  would  have  spill-over  area  of  128  entries.length;  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  if(_count  <  100)  {  //  would  have  spill-over  area  of  128  entries.length;  }  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	if(_count  <  100)  {  //  would  have  spill-over  area  of  128  entries.length;  }	  if(_count    <    100)    {    //    would    have    spill-over    area    of    128    entries    return;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
28	[BUG]  [BUGGY]  if(_hashSize  >  1000)  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  if(_hashSize  >  1000)  {  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	if(_hashSize  >  1000)  {	  if(_hashSize    >    1024)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
29	[BUG]  [BUGGY]  if(_hashSize  >  1000)  {  //  would  have  spill-over  area  of  128  entries;  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  if(_hashSize  >  1000)  {  //  would  have  spill-over  area  of  128  entries;  }  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	if(_hashSize  >  1000)  {  //  would  have  spill-over  area  of  128  entries;  }	  if(_hashSize    >    1024)    {    //    would    have    spill-over    area    of    128    entries;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
30	[BUG]  [BUGGY]  Integer[]  slots  =  _hashArea.getLength();  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  Integer[]  slots  =  _hashArea.getLength();  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	Integer[]  slots  =  _hashArea.getLength();	  Integer[]    slots    =    _hashArea.getSize();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
31	[BUG]  [BUGGY]  Integer[]  slots  =  _hashArea.getRowSize();  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  Integer[]  slots  =  _hashArea.getRowSize();  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	Integer[]  slots  =  _hashArea.getRowSize();	  Integer[]    slots    =    _hashArea.getSize();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
32	[BUG]  [BUGGY]  Integer[]  slots  =  _hashArea.getSize()  +  1;  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  Integer[]  slots  =  _hashArea.getSize()  +  1;  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	Integer[]  slots  =  _hashArea.getSize()  +  1;	  Integer[]    slots    =    _hashArea.getSize();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
33	[BUG]  [BUGGY]  if(_hashSize  >=  1000)  {  //  would  have  spill-over  area  of  128  entries  return;  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  if(_hashSize  >=  1000)  {  //  would  have  spill-over  area  of  128  entries  return;  }  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	if(_hashSize  >=  1000)  {  //  would  have  spill-over  area  of  128  entries  return;  }	  if(_hashSize    <    1000)    {    //    would    have    spill-over    area    of    128    entries    return;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
34	[BUG]  [BUGGY]  if(_hashSize  <  1000)  {  //  would  have  spill-over  area  of  128  entries;  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  if(_hashSize  <  1000)  {  //  would  have  spill-over  area  of  128  entries;  }  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	if(_hashSize  <  1000)  {  //  would  have  spill-over  area  of  128  entries;  }	  if(_hashSize    <    1000)    {    //    would    have    spill-over    area    of    128    entries    return;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
35	[BUG]  [BUGGY]  if(_hashSize  ==  1000)  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  if(_hashSize  ==  1000)  {  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	if(_hashSize  ==  1000)  {	  if(_hashSize    ==    1024)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
36	[BUG]  [BUGGY]  _reportError( "Too  few  slots  available.  Please  try  again. ");  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  _reportError( "Too  few  slots  available.  Please  try  again. ");  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	_reportError( "Too  few  slots  available.  Please  try  again. ");	  _reportError(   "Too    few    slots    available.   ");    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
37	[BUG]  [BUGGY]  if(_hashSize  <  100000  ||  _hashSize  >  MAX_ENTRIES_FOR_REUSE)  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  if(_hashSize  <  100000  ||  _hashSize  >  MAX_ENTRIES_FOR_REUSE)  {  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	if(_hashSize  <  100000  ||  _hashSize  >  MAX_ENTRIES_FOR_REUSE)  {	  if(_hashSize    <    1024    ||    _hashSize    >    MAX_ENTRIES_FOR_REUSE)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
38	[BUG]  [BUGGY]  if(_hashSize  <  1024  ||  _hashSize  >  MAX_T_SIZE)  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  if(_hashSize  <  1024  ||  _hashSize  >  MAX_T_SIZE)  {  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	if(_hashSize  <  1024  ||  _hashSize  >  MAX_T_SIZE)  {	  if(_hashSize    <    1024    ||    _hashSize    >    MAX_ENTRIES_FOR_REUSE)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
39	[BUG]  [BUGGY]  if(_hashSize  >  1024  ||  _hashSize  >  MAX_ENTRIES_FOR_REUSE)  {  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  if(_hashSize  >  1024  ||  _hashSize  >  MAX_ENTRIES_FOR_REUSE)  {  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	if(_hashSize  >  1024  ||  _hashSize  >  MAX_ENTRIES_FOR_REUSE)  {	  if(_hashSize    <    1024    ||    _hashSize    >    MAX_ENTRIES_FOR_REUSE)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
40	[BUG]  [BUGGY]  if(_hashSize  <  1000  ||  _hashSize  >  MAX_ENTRIES_FOR_REUSE)  {  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  if(_hashSize  <  1000  ||  _hashSize  >  MAX_ENTRIES_FOR_REUSE)  {  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	if(_hashSize  <  1000  ||  _hashSize  >  MAX_ENTRIES_FOR_REUSE)  {	  if(_hashSize    <    1024    ||    _hashSize    >    MAX_ENTRIES_FOR_REUSE)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
41	[BUG]  [BUGGY]  if(_hashSize  <  100)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  if(_hashSize  <  100)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	if(_hashSize  <  100)  {  throw  new  IllegalStateException( " ");  }	  if(_hashSize    <    100)    {    //    would    have    spill-over    area    of    128    entries.length;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
42	[BUG]  [BUGGY]  _reportError( "TooManyCollisions.  Please  report  this  error. ");  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  _reportError( "TooManyCollisions.  Please  report  this  error. ");  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	_reportError( "TooManyCollisions.  Please  report  this  error. ");	  _reportError(   "TooManyCollisions.   ");    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
43	[BUG]  [BUGGY]  _reportError( "TooManyCollisions.  Did  you  need  to  report  the  problem? ");  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  _reportError( "TooManyCollisions.  Did  you  need  to  report  the  problem? ");  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	_reportError( "TooManyCollisions.  Did  you  need  to  report  the  problem? ");	  _reportError(   "TooManyCollisions.   ");    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
44	[BUG]  [BUGGY]  _reportError( "TooManyCollisions:  was  expecting  a  problem.n ");  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  _reportError( "TooManyCollisions:  was  expecting  a  problem.n ");  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	_reportError( "TooManyCollisions:  was  expecting  a  problem.n ");	  _reportError(   "TooManyCollisions:    was    expecting    a    problem.   ");    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
45	[BUG]  [BUGGY]  if(_hashSize  <  =  100)  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  if(_hashSize  <  =  100)  {  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	if(_hashSize  <  =  100)  {	  if(_hashSize    <    100)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
46	[BUG]  [BUGGY]  if(_hashSize  <  =  1000)  {  //  would  have  spill-over  area  of  128  entries  return;  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  if(_hashSize  <  =  1000)  {  //  would  have  spill-over  area  of  128  entries  return;  }  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	if(_hashSize  <  =  1000)  {  //  would  have  spill-over  area  of  128  entries  return;  }	  if(_hashSize    <    1000)    {    //    would    have    spill-over    area    of    128    entries    return;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
47	[BUG]  [BUGGY]  if(_count  ==  0)  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  if(_count  ==  0)  {  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	if(_count  ==  0)  {	  if(_count    <    1024)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
48	[BUG]  [BUGGY]  if(_count  <  =  1024)  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  if(_count  <  =  1024)  {  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	if(_count  <  =  1024)  {	  if(_count    <    1024)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
49	[BUG]  [BUGGY]  if(_count  <  100000  ||  _count  >  oldHashArea.length)  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  if(_count  <  100000  ||  _count  >  oldHashArea.length)  {  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	if(_count  <  100000  ||  _count  >  oldHashArea.length)  {	  if(_hashSize    <    1024    ||    _count    >    oldHashArea.length)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
50	[BUG]  [BUGGY]  if(_hashSize  ==  1024)  {  //  would  have  spill-over  area  of  128  entries  return;  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  if(_hashSize  ==  1024)  {  //  would  have  spill-over  area  of  128  entries  return;  }  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	if(_hashSize  ==  1024)  {  //  would  have  spill-over  area  of  128  entries  return;  }	  if(_hashSize    <    =    1024)    {    //    would    have    spill-over    area    of    128    entries    return;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
51	[BUG]  [BUGGY]  _reportInvalidEOF();  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  _reportInvalidEOF();  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	_reportInvalidEOF();	  _reportUnsupportedOperation();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
52	[BUG]  [BUGGY]  _throwInternal();  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  _throwInternal();  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	_throwInternal();	  _reportUnsupportedOperation();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
53	[BUG]  [BUGGY]  _reportError( "Missing  array  of  type "+_names.length+ "  hash  area  of "+_hashSize+ "  slots  is  now  full  (all "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  _reportError( "Missing  array  of  type "+_names.length+ "  hash  area  of "+_hashSize+ "  slots  is  now  full  (all "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	_reportError( "Missing  array  of  type "+_names.length+ "  hash  area  of "+_hashSize+ "  slots  is  now  full  (all "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.   "	  _reportUnsupportedOperation();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
54	[BUG]  [BUGGY]  if(_hashSize  >=  100)  {  //  would  have  spill-over  area  of  128  entries.length;  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  if(_hashSize  >=  100)  {  //  would  have  spill-over  area  of  128  entries.length;  }  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	if(_hashSize  >=  100)  {  //  would  have  spill-over  area  of  128  entries.length;  }	  if(_hashSize    <    100)    {    //    would    have    spill-over    area    of    128    entries.length;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
55	[BUG]  [BUGGY]  if(_hashSize  >  100)  {  //  would  have  spill-over  area  of  128  entries.length;  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  if(_hashSize  >  100)  {  //  would  have  spill-over  area  of  128  entries.length;  }  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	if(_hashSize  >  100)  {  //  would  have  spill-over  area  of  128  entries.length;  }	  if(_hashSize    <    100)    {    //    would    have    spill-over    area    of    128    entries.length;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
56	[BUG]  [BUGGY]  _reportError( "TooManyCollisions.  Can  not  instantiate  old  names. ");  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  _reportError( "TooManyCollisions.  Can  not  instantiate  old  names. ");  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	_reportError( "TooManyCollisions.  Can  not  instantiate  old  names. ");	  _reportError(   "TooManyCollisions.   ");    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
57	[BUG]  [BUGGY]  _reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of "+_hashSize);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  _reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of "+_hashSize);  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	_reportError( "TooManyCollisions.  Please  check  that  the  hash  area  of "+_hashSize);	  _reportError(   "TooManyCollisions.   ");    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
58	[BUG]  [BUGGY]  _report( "TooManyCollisions. ");  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  _report( "TooManyCollisions. ");  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	_report( "TooManyCollisions. ");	  _reportError(   "TooManyCollisions.   ");    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
59	[BUG]  [BUGGY]  _reportError( "TooManyCollisions  in  the  table  with "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all "  +(_hashSize  >>  2)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  _reportError( "TooManyCollisions  in  the  table  with "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all "  +(_hashSize  >>  2)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	_reportError( "TooManyCollisions  in  the  table  with "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all "  +(_hashSize  >>  2)+ "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.	  _reportError(   "TooManyCollisions    in    the    table    with       "+_count    +   "    entries,    hash    area    of   "+_hashSize+   "    slots    is    now    full    (all   "    +(_hashSize    >>    3)+   "    slots    --    suspect    a    DoS    attack    based    on    hash    collisions.    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
60	[BUG]  [BUGGY]  if(_hashSize  ==  1024)  {  //  would  have  spill-over  area  of  128  entries;  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  if(_hashSize  ==  1024)  {  //  would  have  spill-over  area  of  128  entries;  }  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	if(_hashSize  ==  1024)  {  //  would  have  spill-over  area  of  128  entries;  }	  if(_hashSize    >    1024)    {    //    would    have    spill-over    area    of    128    entries;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
61	[BUG]  [BUGGY]  if(_count  >=  100)  {  //  would  have  spill-over  area  of  128  entries  return;  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  if(_count  >=  100)  {  //  would  have  spill-over  area  of  128  entries  return;  }  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	if(_count  >=  100)  {  //  would  have  spill-over  area  of  128  entries  return;  }	  if(_hashSize    >=    100)    {    //    would    have    spill-over    area    of    128    entries    return;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
62	[BUG]  [BUGGY]  if(_count  >  100)  {  //  would  have  spill-over  area  of  128  entries  return;  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  if(_count  >  100)  {  //  would  have  spill-over  area  of  128  entries  return;  }  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	if(_count  >  100)  {  //  would  have  spill-over  area  of  128  entries  return;  }	  if(_hashSize    >    100)    {    //    would    have    spill-over    area    of    128    entries    return;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
63	[BUG]  [BUGGY]  if(_count  ==  100)  {  //  would  have  spill-over  area  of  128  entries  return;  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  if(_count  ==  100)  {  //  would  have  spill-over  area  of  128  entries  return;  }  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	if(_count  ==  100)  {  //  would  have  spill-over  area  of  128  entries  return;  }	  if(_count    <    100)    {    //    would    have    spill-over    area    of    128    entries    return;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
64	[BUG]  [BUGGY]  Integer[]  slots  =  _hashArea.getQualifiedSize();  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  Integer[]  slots  =  _hashArea.getQualifiedSize();  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	Integer[]  slots  =  _hashArea.getQualifiedSize();	  Integer[]    slots    =    _hashArea.getSize();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
65	[BUG]  [BUGGY]  _reportError( "TooManyCollisions:  was  expecting  a  problem.  Please  check  that  this  is  normalized. ");  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  _reportError( "TooManyCollisions:  was  expecting  a  problem.  Please  check  that  this  is  normalized. ");  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	_reportError( "TooManyCollisions:  was  expecting  a  problem.  Please  check  that  this  is  normalized. ");	  _reportError(   "TooManyCollisions:    was    expecting    a    problem.   ");    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
66	[BUG]  [BUGGY]  _report( "TooManyCollisions:  was  expecting  a  bug. ");  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  _report( "TooManyCollisions:  was  expecting  a  bug. ");  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	_report( "TooManyCollisions:  was  expecting  a  bug. ");	  _reportError(   "TooManyCollisions:    was    expecting    a    bug.   ");    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
67	[BUG]  [BUGGY]  if(_hashSize  ==  0)  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  if(_hashSize  ==  0)  {  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	if(_hashSize  ==  0)  {	  if(_hashSize    ==    1024)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
68	[BUG]  [BUGGY]  Integer[]  slots  =  _hashArea.getKeys();  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  Integer[]  slots  =  _hashArea.getKeys();  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	Integer[]  slots  =  _hashArea.getKeys();	  Integer[]    slots    =    _hashArea.getValues();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
69	[BUG]  [BUGGY]  _reportError( "TooManyCollisions  in  the  table  with "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  collisions.  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  _reportError( "TooManyCollisions  in  the  table  with "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  collisions.  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	_reportError( "TooManyCollisions  in  the  table  with "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all "  +(_hashSize  >>  3)+ "  slots  --  suspect  a  DoS  attack  based  on  collisions.	  _reportError(   "TooManyCollisions    in    the    table    with       "+_count    +   "    entries,    hash    area    of   "+_hashSize+   "    slots    is    now    full    (all   "    +(_hashSize    >=    3)+   "    slots    --    suspect    a    DoS    attack    based    on    hash    collisions.    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
70	[BUG]  [BUGGY]  if((  _hashSize  >=  3)||(_hashSize  <  100))  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  if((  _hashSize  >=  3)||(_hashSize  <  100))  {  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	if((  _hashSize  >=  3)||(_hashSize  <  100))  {	  if(_hashSize    <    100)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
71	[BUG]  [BUGGY]  if((  _hashSize  >=  10)||(_hashSize  <  100))  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  if((  _hashSize  >=  10)||(_hashSize  <  100))  {  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	if((  _hashSize  >=  10)||(_hashSize  <  100))  {	  if(_hashSize    <    100)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
72	[BUG]  [BUGGY]  _reportError( "Too  few  slots  available.  Please  check  that  the  hash  area  of "+_count  + "  entries  is  now  full  (all "+(_hashSize  >>  3)+ ") ");  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  _reportError( "Too  few  slots  available.  Please  check  that  the  hash  area  of "+_count  + "  entries  is  now  full  (all "+(_hashSize  >>  3)+ ") ");  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	_reportError( "Too  few  slots  available.  Please  check  that  the  hash  area  of "+_count  + "  entries  is  now  full  (all "+(_hashSize  >>  3)+ ") ");	  _reportError(   "Too    few    slots    available.   ");    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
73	[BUG]  [BUGGY]  _reportError( "TooManyCollisions:  was  expecting  a  bug.  Try  again. ");  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  _reportError( "TooManyCollisions:  was  expecting  a  bug.  Try  again. ");  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	_reportError( "TooManyCollisions:  was  expecting  a  bug.  Try  again. ");	  _reportError(   "TooManyCollisions:    was    expecting    a    bug.   ");    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
74	[BUG]  [BUGGY]  _reportError( "TooManyCollisions:  was  expecting  a  bug.  Please  check  that  the  hash  area  of "+_hashSize);  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  _reportError( "TooManyCollisions:  was  expecting  a  bug.  Please  check  that  the  hash  area  of "+_hashSize);  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	_reportError( "TooManyCollisions:  was  expecting  a  bug.  Please  check  that  the  hash  area  of "+_hashSize);	  _reportError(   "TooManyCollisions:    was    expecting    a    bug.   ");    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
75	[BUG]  [BUGGY]  if(_hashSize  <  10000)  {  //  would  have  spill-over  area  of  128  entries  return;  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  if(_hashSize  <  10000)  {  //  would  have  spill-over  area  of  128  entries  return;  }  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	if(_hashSize  <  10000)  {  //  would  have  spill-over  area  of  128  entries  return;  }	  if(_hashSize    <    1000)    {    //    would    have    spill-over    area    of    128    entries    return;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
76	[BUG]  [BUGGY]  _reportError( "TooManyCollisions  in  the  table  with "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all "  +(_hashSize  >>  2)+ "  slots  --  suspect  a  DoS  attack  based  on  collisions.  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  _reportError( "TooManyCollisions  in  the  table  with "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all "  +(_hashSize  >>  2)+ "  slots  --  suspect  a  DoS  attack  based  on  collisions.  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	_reportError( "TooManyCollisions  in  the  table  with "+_count  + "  entries,  hash  area  of "+_hashSize+ "  slots  is  now  full  (all "  +(_hashSize  >>  2)+ "  slots  --  suspect  a  DoS  attack  based  on  collisions.	  _reportError(   "TooManyCollisions    in    the    table    with       "+_count    +   "    entries,    hash    area    of   "+_hashSize+   "    slots    is    now    full    (all   "    +(_hashSize    >>    3)+   "    slots    --    suspect    a    DoS    attack    based    on    hash    collisions.    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
77	[BUG]  [BUGGY]  _throwUnsupportedOperation();  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  _throwUnsupportedOperation();  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	_throwUnsupportedOperation();	  _reportUnsupportedOperation();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
78	[BUG]  [BUGGY]  _reportError( "TooManyCollisions:  was  expecting  a  problem.  Try  again. ");  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  _reportError( "TooManyCollisions:  was  expecting  a  problem.  Try  again. ");  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	_reportError( "TooManyCollisions:  was  expecting  a  problem.  Try  again. ");	  _reportError(   "TooManyCollisions:    was    expecting    a    problem.   ");    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
79	[BUG]  [BUGGY]  _reportError( "TooManyCollisions:  was  expecting  a  problem.  Please  check  that  the  file  has  been  updated. ");  [CE]  illegal  start  of  type  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  _reportError( "TooManyCollisions:  was  expecting  a  problem.  Please  check  that  the  file  has  been  updated. ");  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	_reportError( "TooManyCollisions:  was  expecting  a  problem.  Please  check  that  the  file  has  been  updated. ");	  _reportError(   "TooManyCollisions:    was    expecting    a    problem.   ");    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
80	[BUG]  [BUGGY]  if(_hashSize  <  1024  ||  _hashSize  >  MAX_ENTRIES_FOR_REUSE  ||  _count  >  oldHashArea.length)  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  if(_hashSize  <  1024  ||  _hashSize  >  MAX_ENTRIES_FOR_REUSE  ||  _count  >  oldHashArea.length)  {  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	if(_hashSize  <  1024  ||  _hashSize  >  MAX_ENTRIES_FOR_REUSE  ||  _count  >  oldHashArea.length)  {	  if(_hashSize    <    1024    ||    _hashSize    >    MAX_ENTRIES_FOR_REUSE)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
81	[BUG]  [BUGGY]  if(_hashSize  <  1024  ||  _hashSize  >  16)  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  if(_hashSize  <  1024  ||  _hashSize  >  16)  {  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	if(_hashSize  <  1024  ||  _hashSize  >  16)  {	  if(_hashSize    <    1024    ||    _hashSize    >    MAX_ENTRIES_FOR_REUSE)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
82	[BUG]  [BUGGY]  if(_count  <  1024  ||  _seedRehash)  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  if(_count  <  1024  ||  _seedRehash)  {  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	if(_count  <  1024  ||  _seedRehash)  {	  if(_count    <    1024)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
83	[BUG]  [BUGGY]  Integer[]  slots  =  _hashArea.size();  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  Integer[]  slots  =  _hashArea.size();  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	Integer[]  slots  =  _hashArea.size();	  Integer[]    slots    =    _hashArea.getSize();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
84	[BUG]  [BUGGY]  _reportError( "TooManyCollisions.  Try  using  the  same  name. ");  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  _reportError( "TooManyCollisions.  Try  using  the  same  name. ");  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	_reportError( "TooManyCollisions.  Try  using  the  same  name. ");	  _reportError(   "TooManyCollisions.   ");    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
85	[BUG]  [BUGGY]  _reportError( "TooManyCollisions.  Try  using  the  same  name: ");  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  _reportError( "TooManyCollisions.  Try  using  the  same  name: ");  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	_reportError( "TooManyCollisions.  Try  using  the  same  name: ");	  _reportError(   "TooManyCollisions.   ");    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
86	[BUG]  [BUGGY]  if(_count  ==  1024)  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  if(_count  ==  1024)  {  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	if(_count  ==  1024)  {	  if(_hashSize    ==    1024)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
87	[BUG]  [BUGGY]  if(_count  >=  1024)  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  _reportTooManyCollisions()  {        [BUGGY]  if(_count  >=  1024)  {  [BUGGY]      return;  }  throw  new  IllegalStateException(     "Spill-over  slots  in  symbol  table  with       "+_count  +     "  entries,  hash  area  of       "+_hashSize+     "  slots  is  now  full  (all       "  +(_hashSize  >>  3)+     "  slots  --  suspect  a  DoS  attack  based  on  hash  collisions.     "  +     "  You  can  disable  the  check  via  `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`     ");  }  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  _reportTooManyCollisions  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  fill  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	1.0	1183	1184	1	replace	if(_count  >=  1024)  {	  if(_hashSize    >=    1024)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
