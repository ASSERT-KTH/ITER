bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  String  key  =  format.substring(0,  pattern.length());  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  String  key  =  format.substring(0,  pattern.length());  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	String  key  =  format.substring(0,  pattern.length());	  String    key    =    pattern.substring(0,    format.length()    -    1);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
2	[BUG]  [BUGGY]  String  key  =  pattern.substring(0,  format.length()  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  String  key  =  pattern.substring(0,  format.length()  +  1);  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	String  key  =  pattern.substring(0,  format.length()  +  1);	  String    key    =    pattern.substring(0,    format.length()    -    1);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
3	[BUG]  [BUGGY]  Locale  locale  =  cDateTimeInstanceCache.get(format);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  Locale  locale  =  cDateTimeInstanceCache.get(format);  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	Locale  locale  =  cDateTimeInstanceCache.get(format);	  Locale    locale    =    cDateTimeInstanceCache.get(key);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
4	[BUG]  [BUGGY]  Locale  locale  =  cDateTimeInstanceCache.get(dateStyle);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  Locale  locale  =  cDateTimeInstanceCache.get(dateStyle);  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	Locale  locale  =  cDateTimeInstanceCache.get(dateStyle);	  Locale    locale    =    cDateTimeInstanceCache.get(key);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
5	[BUG]  [BUGGY]  Locale  locale  =  cDateTimeInstanceCache.get(dateStyle,  timeStyle);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  Locale  locale  =  cDateTimeInstanceCache.get(dateStyle,  timeStyle);  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	Locale  locale  =  cDateTimeInstanceCache.get(dateStyle,  timeStyle);	  Locale    locale    =    cDateTimeInstanceCache.get(key);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
6	[BUG]  [BUGGY]  Locale  locale  =  cDateTimeInstanceCache.get(pattern);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  Locale  locale  =  cDateTimeInstanceCache.get(pattern);  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	Locale  locale  =  cDateTimeInstanceCache.get(pattern);	  Locale    locale    =    cDateTimeInstanceCache.get(key);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
7	[BUG]  [BUGGY]  Format  <?>  cDateTimeInstanceCache.put(key,  format);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  Format  <?>  cDateTimeInstanceCache.put(key,  format);  [BUGGY]        }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	Format  <?>  cDateTimeInstanceCache.put(key,  format);	  if(format!=    null)    {    cDateTimeInstanceCache.put(key,    format);    }    else    {    cDateTimeInstanceCache.put(value,    format);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
8	[BUG]  [BUGGY]  Format  <?>  cDateTimeInstanceCache.put(key,  format);  }  else  {  cDateTimeInstanceCache.put(value,  format);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  Format  <?>  cDateTimeInstanceCache.put(key,  format);  }  else  {  cDateTimeInstanceCache.put(value,  format);  }  [BUGGY]        }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	Format  <?>  cDateTimeInstanceCache.put(key,  format);  }  else  {  cDateTimeInstanceCache.put(value,  format);  }	  if(format!=    null)    {    cDateTimeInstanceCache.put(key,    format);    }    else    {    cDateTimeInstanceCache.put(value,    format);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
9	[BUG]  [BUGGY]  Locale  locale  =(locale!=  null?  Locale.getDefault()  :  locale);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  Locale  locale  =(locale!=  null?  Locale.getDefault()  :  locale);  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	Locale  locale  =(locale!=  null?  Locale.getDefault()  :  locale);	  Locale    locale    =(locale    ==    null?    Locale.getDefault()    :    locale);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
10	[BUG]  [BUGGY]  Locale  locale  =(locale  ==  null?  Locale.getDefault()  :  format);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  Locale  locale  =(locale  ==  null?  Locale.getDefault()  :  format);  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	Locale  locale  =(locale  ==  null?  Locale.getDefault()  :  format);	  Locale    locale    =(locale    ==    null?    Locale.getDefault()    :    locale);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
11	[BUG]  [BUGGY]  String  key  =  pattern.toStandard();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  String  key  =  pattern.toStandard();  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	String  key  =  pattern.toStandard();	  String    key    =    formatter.toStandard();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
12	[BUG]  [BUGGY]  Locale  locale  =  formatter.getDefault();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  Locale  locale  =  formatter.getDefault();  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	Locale  locale  =  formatter.getDefault();	  Locale    locale    =    locale.getDefault();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
13	[BUG]  [BUGGY]  Locale  locale  =  format.getDefault();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  Locale  locale  =  format.getDefault();  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	Locale  locale  =  format.getDefault();	  Locale    locale    =    locale.getDefault();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
14	[BUG]  [BUGGY]  cDateTimeInstanceCache.put(pattern,  key);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  cDateTimeInstanceCache.put(pattern,  key);  [BUGGY]        }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	cDateTimeInstanceCache.put(pattern,  key);	  cDateTimeInstanceCache.put(key,    pattern);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
15	[BUG]  [BUGGY]  cDateTimeInstanceCache.put(timeStyle,  pattern);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  cDateTimeInstanceCache.put(timeStyle,  pattern);  [BUGGY]        }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	cDateTimeInstanceCache.put(timeStyle,  pattern);	  cDateTimeInstanceCache.put(key,    pattern);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
16	[BUG]  [BUGGY]  String  key  =  pattern.substring(0,  pattern.length()  -  2);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  String  key  =  pattern.substring(0,  pattern.length()  -  2);  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	String  key  =  pattern.substring(0,  pattern.length()  -  2);	  String    key    =    pattern.substring(0,    pattern.length());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
17	[BUG]  [BUGGY]  String  key  =  pattern.substring(0,  pattern.length()  -  3);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  String  key  =  pattern.substring(0,  pattern.length()  -  3);  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	String  key  =  pattern.substring(0,  pattern.length()  -  3);	  String    key    =    pattern.substring(0,    pattern.length());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
18	[BUG]  [BUGGY]  if(format!=  null)  {  cDateTimeInstanceCache.put(values,  format);  }  else  {  cDateTimeInstanceCache.put(key,  format);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  if(format!=  null)  {  cDateTimeInstanceCache.put(values,  format);  }  else  {  cDateTimeInstanceCache.put(key,  format);  }  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	if(format!=  null)  {  cDateTimeInstanceCache.put(values,  format);  }  else  {  cDateTimeInstanceCache.put(key,  format);  }	  cDateTimeInstanceCache.put(values,    format);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
19	[BUG]  [BUGGY]  Format  <?>  format  =  cDateTimeInstanceCache.get(key);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  Format  <?>  format  =  cDateTimeInstanceCache.get(key);  [BUGGY]        }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	Format  <?>  format  =  cDateTimeInstanceCache.get(key);	  if(format!=    null)    {    cDateTimeInstanceCache.put(key,    format);    }    else    {    for(int    i    =    0;    i    <    timeZone;    i++)    {    cDateTimeInstanceCache.put(key,    format);    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
20	[BUG]  [BUGGY]  Format  <  String,Object>  cDateTimeInstanceCache.put(key,  format);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  Format  <  String,Object>  cDateTimeInstanceCache.put(key,  format);  [BUGGY]        }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	Format  <  String,Object>  cDateTimeInstanceCache.put(key,  format);	  if(format!=    null)    {    cDateTimeInstanceCache.put(key,    format);    }    else    {    for(int    i    =    0;    i    <    timeZone;    i++)    {    cDateTimeInstanceCache.put(key,    format);    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
21	[BUG]  [BUGGY]  Format  <?>  format  =  cDateTimeInstanceCache.put(key,  format);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  Format  <?>  format  =  cDateTimeInstanceCache.put(key,  format);  [BUGGY]        }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	Format  <?>  format  =  cDateTimeInstanceCache.put(key,  format);	  if(format!=    null)    {    cDateTimeInstanceCache.put(key,    format);    }    else    {    for(int    i    =    0;    i    <    timeZone;    i++)    {    cDateTimeInstanceCache.put(key,    format);    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
22	[BUG]  [BUGGY]  cDateTimeInstanceCache.put(key,  formatter,  locale,  timeStyle);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  cDateTimeInstanceCache.put(key,  formatter,  locale,  timeStyle);  [BUGGY]        }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	cDateTimeInstanceCache.put(key,  formatter,  locale,  timeStyle);	  cDateTimeInstanceCache.put(key,    formatter,    locale);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
23	[BUG]  [BUGGY]  cDateTimeInstanceCache.put(key,  formatter,  locale,  dateStyle);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  cDateTimeInstanceCache.put(key,  formatter,  locale,  dateStyle);  [BUGGY]        }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	cDateTimeInstanceCache.put(key,  formatter,  locale,  dateStyle);	  cDateTimeInstanceCache.put(key,    formatter,    locale);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
24	[BUG]  [BUGGY]  cDateTimeInstanceCache.put(key,  pattern,  locale);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  cDateTimeInstanceCache.put(key,  pattern,  locale);  [BUGGY]        }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	cDateTimeInstanceCache.put(key,  pattern,  locale);	  cDateTimeInstanceCache.put(key,    formatter,    locale);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
25	[BUG]  [BUGGY]  String  key  =  pattern.toShortPattern();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  String  key  =  pattern.toShortPattern();  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	String  key  =  pattern.toShortPattern();	  String    key    =    formatter.toShortPattern();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
26	[BUG]  [BUGGY]  Locale  locale  =  cDateTimeInstanceCache.get(mValue,  format);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  Locale  locale  =  cDateTimeInstanceCache.get(mValue,  format);  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	Locale  locale  =  cDateTimeInstanceCache.get(mValue,  format);	  Locale    locale    =    cDateTimeInstanceCache.get(mValue);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
27	[BUG]  [BUGGY]  Locale  locale  =  cDateTimeInstanceCache.get(mValue,  pattern);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  Locale  locale  =  cDateTimeInstanceCache.get(mValue,  pattern);  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	Locale  locale  =  cDateTimeInstanceCache.get(mValue,  pattern);	  Locale    locale    =    cDateTimeInstanceCache.get(mValue);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
28	[BUG]  [BUGGY]  String  key  =  pattern.getKey();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  String  key  =  pattern.getKey();  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	String  key  =  pattern.getKey();	  String    key    =    formatter.getKey();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
29	[BUG]  [BUGGY]  String  key  =  formatter.getValue();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  String  key  =  formatter.getValue();  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	String  key  =  formatter.getValue();	  String    key    =    formatter.getKey();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
30	[BUG]  [BUGGY]  Format  <  Date>  cDateTimeInstanceCache  =  cDateTimeInstanceCache.get(key);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  Format  <  Date>  cDateTimeInstanceCache  =  cDateTimeInstanceCache.get(key);  [BUGGY]        }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	Format  <  Date>  cDateTimeInstanceCache  =  cDateTimeInstanceCache.get(key);	  if(format!=    null)    {    cDateTimeInstanceCache.put(key,    format);    }    else    {    cDateTimeInstanceCache.put(dateStyle,    format);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
31	[BUG]  [BUGGY]  Format  <?>  cDateTimeInstanceCache.put(key,  format);  }  else  {  cDateTimeInstanceCache.put(dateStyle,  format);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  Format  <?>  cDateTimeInstanceCache.put(key,  format);  }  else  {  cDateTimeInstanceCache.put(dateStyle,  format);  }  [BUGGY]        }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	Format  <?>  cDateTimeInstanceCache.put(key,  format);  }  else  {  cDateTimeInstanceCache.put(dateStyle,  format);  }	  if(format!=    null)    {    cDateTimeInstanceCache.put(key,    format);    }    else    {    cDateTimeInstanceCache.put(dateStyle,    format);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
32	[BUG]  [BUGGY]  if(format  ==  null)  {  cDateTimeInstanceCache.put(key,  format);  }  else  {  cDateTimeInstanceCache.put(key,  format);  break;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  if(format  ==  null)  {  cDateTimeInstanceCache.put(key,  format);  }  else  {  cDateTimeInstanceCache.put(key,  format);  break;  }  [BUGGY]        }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	if(format  ==  null)  {  cDateTimeInstanceCache.put(key,  format);  }  else  {  cDateTimeInstanceCache.put(key,  format);  break;  }	  if(format!=    null)    {    cDateTimeInstanceCache.put(key,    format);    }    else    {    cDateTimeInstanceCache.put(key,    format);    break;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
33	[BUG]  [BUGGY]  String  key  =  pattern.substring(0,  pattern.length()  -  1));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  String  key  =  pattern.substring(0,  pattern.length()  -  1));  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	String  key  =  pattern.substring(0,  pattern.length()  -  1));	  String    key    =    pattern.substring(0,    pattern.length()));    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
34	[BUG]  [BUGGY]  String  key  =  pattern.substring(0,  pattern.length()  -  2));  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  String  key  =  pattern.substring(0,  pattern.length()  -  2));  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	String  key  =  pattern.substring(0,  pattern.length()  -  2));	  String    key    =    pattern.substring(0,    pattern.length()));    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
35	[BUG]  [BUGGY]  String  key  =  pattern.substring(0,  format.length()));  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  String  key  =  pattern.substring(0,  format.length()));  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	String  key  =  pattern.substring(0,  format.length()));	  String    key    =    pattern.substring(0,    pattern.length()));    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
36	[BUG]  [BUGGY]  String  key  =  pattern.substring(0,  pattern.length()  +  1));  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  String  key  =  pattern.substring(0,  pattern.length()  +  1));  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	String  key  =  pattern.substring(0,  pattern.length()  +  1));	  String    key    =    pattern.substring(0,    pattern.length()));    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
37	[BUG]  [BUGGY]  String  key  =  pattern.toPattern(),  locale);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  String  key  =  pattern.toPattern(),  locale);  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	String  key  =  pattern.toPattern(),  locale);	  String    key    =    format.toPattern(),    locale);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
38	[BUG]  [BUGGY]  String  key  =  format.toPattern(),  timeStyle,  locale);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  String  key  =  format.toPattern(),  timeStyle,  locale);  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	String  key  =  format.toPattern(),  timeStyle,  locale);	  String    key    =    format.toPattern(),    locale);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
39	[BUG]  [BUGGY]  String  key  =  format.toPattern(),  timeZone,  locale);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  String  key  =  format.toPattern(),  timeZone,  locale);  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	String  key  =  format.toPattern(),  timeZone,  locale);	  String    key    =    format.toPattern(),    locale);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
40	[BUG]  [BUGGY]  Format  <  Date>  cDateTimeInstanceCache  =  cDateTimeInstanceCache.get(dateStyle);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  Format  <  Date>  cDateTimeInstanceCache  =  cDateTimeInstanceCache.get(dateStyle);  [BUGGY]        }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	Format  <  Date>  cDateTimeInstanceCache  =  cDateTimeInstanceCache.get(dateStyle);	  if(format!=    null)    {    cDateTimeInstanceCache.put(dateStyle,    format);    }    else    {    cDateTimeInstanceCache.put(key,    format);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
41	[BUG]  [BUGGY]  String  key  =  format.toString()  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  String  key  =  format.toString()  +  1;  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	String  key  =  format.toString()  +  1;	  String    key    =    format.toPattern()    +    1;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
42	[BUG]  [BUGGY]  Locale  locale  =(locale  ==  null)?  null  :  locale.getDefault();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  Locale  locale  =(locale  ==  null)?  null  :  locale.getDefault();  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	Locale  locale  =(locale  ==  null)?  null  :  locale.getDefault();	  Locale    locale    =(locale    ==    null)?    null    :    Locale.getDefault();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
43	[BUG]  [BUGGY]  Locale  locale  =(locale!=  null)?  null  :  locale.getDefault();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  Locale  locale  =(locale!=  null)?  null  :  locale.getDefault();  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	Locale  locale  =(locale!=  null)?  null  :  locale.getDefault();	  Locale    locale    =(locale    ==    null)?    null    :    Locale.getDefault();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
44	[BUG]  [BUGGY]  if(format!=  null)  {  cDateTimeInstanceCache.put(timeStyle,  format);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  if(format!=  null)  {  cDateTimeInstanceCache.put(timeStyle,  format);  }  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	if(format!=  null)  {  cDateTimeInstanceCache.put(timeStyle,  format);  }	  cDateTimeInstanceCache.put(timeStyle,    format);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
45	[BUG]  [BUGGY]  if(formatter!=  null)  {  cDateTimeInstanceCache.put(key,  format);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  if(formatter!=  null)  {  cDateTimeInstanceCache.put(key,  format);  }  [BUGGY]        }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	if(formatter!=  null)  {  cDateTimeInstanceCache.put(key,  format);  }	  cDateTimeInstanceCache.put(formatter,    key);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
46	[BUG]  [BUGGY]  Format  <?>  format  =  cDateTimeInstanceCache.get(dateStyle);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  Format  <?>  format  =  cDateTimeInstanceCache.get(dateStyle);  [BUGGY]        }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	Format  <?>  format  =  cDateTimeInstanceCache.get(dateStyle);	  if(format!=    null)    {    cDateTimeInstanceCache.put(key,    format);    }    else    {    for(int    i    =    0;    i    <    dateStyle;    i++)    {    cDateTimeInstanceCache.put(key,    format);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
47	[BUG]  [BUGGY]  Format  <?>  cDateTimeInstanceCache.put(dateStyle,  format);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  Format  <?>  cDateTimeInstanceCache.put(dateStyle,  format);  [BUGGY]        }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	Format  <?>  cDateTimeInstanceCache.put(dateStyle,  format);	  if(format!=    null)    {    cDateTimeInstanceCache.put(key,    format);    }    else    {    for(int    i    =    0;    i    <    dateStyle;    i++)    {    cDateTimeInstanceCache.put(key,    format);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
48	[BUG]  [BUGGY]  String  key  =  pattern.substring(0,  format.length()  -  2);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  String  key  =  pattern.substring(0,  format.length()  -  2);  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	String  key  =  pattern.substring(0,  format.length()  -  2);	  String    key    =    pattern.substring(0,    format.length());    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
49	[BUG]  [BUGGY]  String  key  =  format.substring(0,  pattern.length()  -  1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  String  key  =  format.substring(0,  pattern.length()  -  1);  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	String  key  =  format.substring(0,  pattern.length()  -  1);	  String    key    =    pattern.substring(0,    format.length());    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
50	[BUG]  [BUGGY]  String  key  =  pattern.substring(0,  format.length()  -  3);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  String  key  =  pattern.substring(0,  format.length()  -  3);  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	String  key  =  pattern.substring(0,  format.length()  -  3);	  String    key    =    pattern.substring(0,    format.length());    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
51	[BUG]  [BUGGY]  if(formatter!=  null)  {  cDateTimeInstanceCache.put(dateStyle,  formatter);  }  else  {  cDateTimeInstanceCache.put(key,  formatter);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  if(formatter!=  null)  {  cDateTimeInstanceCache.put(dateStyle,  formatter);  }  else  {  cDateTimeInstanceCache.put(key,  formatter);  }  [BUGGY]        }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	if(formatter!=  null)  {  cDateTimeInstanceCache.put(dateStyle,  formatter);  }  else  {  cDateTimeInstanceCache.put(key,  formatter);  }	  cDateTimeInstanceCache.put(dateStyle,    formatter);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
52	[BUG]  [BUGGY]  if(formatter!=  null)  {  cDateTimeInstanceCache.put(key,  formatter);  }  else  {  cDateTimeInstanceCache.put(key,  formatter);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  if(formatter!=  null)  {  cDateTimeInstanceCache.put(key,  formatter);  }  else  {  cDateTimeInstanceCache.put(key,  formatter);  }  [BUGGY]        }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	if(formatter!=  null)  {  cDateTimeInstanceCache.put(key,  formatter);  }  else  {  cDateTimeInstanceCache.put(key,  formatter);  }	  cDateTimeInstanceCache.put(dateStyle,    formatter);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
53	[BUG]  [BUGGY]  String  key  =  format.getKey();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  String  key  =  format.getKey();  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	String  key  =  format.getKey();	  String    key    =    format.toString();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
54	[BUG]  [BUGGY]  String  key  =  format.getValue();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  String  key  =  format.getValue();  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	String  key  =  format.getValue();	  String    key    =    format.toString();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
55	[BUG]  [BUGGY]  Locale  locale  =  getDefaultLocale();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  Locale  locale  =  getDefaultLocale();  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	Locale  locale  =  getDefaultLocale();	  Locale    locale    =    getLocale();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
56	[BUG]  [BUGGY]  Locale  locale  =  getLocale(format);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  Locale  locale  =  getLocale(format);  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	Locale  locale  =  getLocale(format);	  Locale    locale    =    getLocale();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
57	[BUG]  [BUGGY]  Locale  locale  =  getLocale(timeStyle);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  Locale  locale  =  getLocale(timeStyle);  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	Locale  locale  =  getLocale(timeStyle);	  Locale    locale    =    getLocale();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
58	[BUG]  [BUGGY]  String  key  =  formatter.toPattern(),  timeStyle,  locale);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  String  key  =  formatter.toPattern(),  timeStyle,  locale);  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	String  key  =  formatter.toPattern(),  timeStyle,  locale);	  String    key    =    formatter.toPattern(),    locale);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
59	[BUG]  [BUGGY]  String  key  =  formatter.toPattern(),  timeZone,  locale);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  String  key  =  formatter.toPattern(),  timeZone,  locale);  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	String  key  =  formatter.toPattern(),  timeZone,  locale);	  String    key    =    formatter.toPattern(),    locale);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
60	[BUG]  [BUGGY]  String  key  =  formatter.toPattern(),  dateStyle,  locale);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  String  key  =  formatter.toPattern(),  dateStyle,  locale);  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	String  key  =  formatter.toPattern(),  dateStyle,  locale);	  String    key    =    formatter.toPattern(),    locale);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
61	[BUG]  [BUGGY]  if(format  ==  null)  {  cDateTimeInstanceCache.put(key,  format);  }  else  {  for(int  i  =  0;  i  <  timeZone;  i++)  {  cDateTimeInstanceCache.put(key,  format);  }  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  if(format  ==  null)  {  cDateTimeInstanceCache.put(key,  format);  }  else  {  for(int  i  =  0;  i  <  timeZone;  i++)  {  cDateTimeInstanceCache.put(key,  format);  }  }  [BUGGY]        }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	if(format  ==  null)  {  cDateTimeInstanceCache.put(key,  format);  }  else  {  for(int  i  =  0;  i  <  timeZone;  i++)  {  cDateTimeInstanceCache.put(key,  format);  }  }	  if(format!=    null)    {    cDateTimeInstanceCache.put(key,    format);    }    else    {    for(int    i    =    0;    i    <    timeZone;    i++)    {    cDateTimeInstanceCache.put(key,    format);    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
62	[BUG]  [BUGGY]  if(format!=  null)  {  cDateTimeInstanceCache.put(key,  format);  }  else  {  for(int  i  =  0;  i  <  timeZone;  i++)  {  cDateTimeInstanceCache.put(key,  format);  }  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  if(format!=  null)  {  cDateTimeInstanceCache.put(key,  format);  }  else  {  for(int  i  =  0;  i  <  timeZone;  i++)  {  cDateTimeInstanceCache.put(key,  format);  }  }  [BUGGY]        }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	if(format!=  null)  {  cDateTimeInstanceCache.put(key,  format);  }  else  {  for(int  i  =  0;  i  <  timeZone;  i++)  {  cDateTimeInstanceCache.put(key,  format);  }  }	  if(format!=    null)    {    cDateTimeInstanceCache.put(key,    format);    }    else    {    for(int    i    =    0;    i    <    timeZone;    i++)    {    cDateTimeInstanceCache.put(key,    format);    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
63	[BUG]  [BUGGY]  if(format  ==  null)  {  cDateTimeInstanceCache.put(key,  format);  }  else  {  for(int  i  =  0;  i  <  timeZone;  i++)  {  cDateTimeInstanceCache.put(key,  format);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  if(format  ==  null)  {  cDateTimeInstanceCache.put(key,  format);  }  else  {  for(int  i  =  0;  i  <  timeZone;  i++)  {  cDateTimeInstanceCache.put(key,  format);  }  [BUGGY]        }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	if(format  ==  null)  {  cDateTimeInstanceCache.put(key,  format);  }  else  {  for(int  i  =  0;  i  <  timeZone;  i++)  {  cDateTimeInstanceCache.put(key,  format);  }	  if(format!=    null)    {    cDateTimeInstanceCache.put(key,    format);    }    else    {    for(int    i    =    0;    i    <    timeZone;    i++)    {    cDateTimeInstanceCache.put(key,    format);    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
64	[BUG]  [BUGGY]  String  key  =  mValues.toPattern();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  String  key  =  mValues.toPattern();  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	String  key  =  mValues.toPattern();	  String    key    =    value.toPattern();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
65	[BUG]  [BUGGY]  String  key  =  value!=  null?  value.toString()  :  value.toPattern();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  String  key  =  value!=  null?  value.toString()  :  value.toPattern();  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	String  key  =  value!=  null?  value.toString()  :  value.toPattern();	  String    key    =    value.toPattern();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
66	[BUG]  [BUGGY]  Locale  locale  =  cDateTimeInstanceCache.get(dateStyle,  format);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  Locale  locale  =  cDateTimeInstanceCache.get(dateStyle,  format);  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	Locale  locale  =  cDateTimeInstanceCache.get(dateStyle,  format);	  Locale    locale    =    cDateTimeInstanceCache.get(mValue);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
67	[BUG]  [BUGGY]  if(format  ==  null)  {  cDateTimeInstanceCache.put(key,  format);  }  else  {  cDateTimeInstanceCache.put(value,  format);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  if(format  ==  null)  {  cDateTimeInstanceCache.put(key,  format);  }  else  {  cDateTimeInstanceCache.put(value,  format);  }  [BUGGY]        }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	if(format  ==  null)  {  cDateTimeInstanceCache.put(key,  format);  }  else  {  cDateTimeInstanceCache.put(value,  format);  }	  if(format!=    null)    {    cDateTimeInstanceCache.put(key,    format);    }    else    {    cDateTimeInstanceCache.put(value,    format);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
68	[BUG]  [BUGGY]  cDateTimeInstanceCache.put(key,  format);  }  else  {  cDateTimeInstanceCache.put(value,  format);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  cDateTimeInstanceCache.put(key,  format);  }  else  {  cDateTimeInstanceCache.put(value,  format);  }  [BUGGY]        }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	cDateTimeInstanceCache.put(key,  format);  }  else  {  cDateTimeInstanceCache.put(value,  format);  }	  if(format!=    null)    {    cDateTimeInstanceCache.put(key,    format);    }    else    {    cDateTimeInstanceCache.put(value,    format);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
69	[BUG]  [BUGGY]  if(format  ==  null)  {  cDateTimeInstanceCache.put(mValue,  format);  }  else  {  cDateTimeInstanceCache.put(key,  format);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  if(format  ==  null)  {  cDateTimeInstanceCache.put(mValue,  format);  }  else  {  cDateTimeInstanceCache.put(key,  format);  }  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	if(format  ==  null)  {  cDateTimeInstanceCache.put(mValue,  format);  }  else  {  cDateTimeInstanceCache.put(key,  format);  }	  if(format!=    null)    {    cDateTimeInstanceCache.put(mValue,    format);    }    else    {    cDateTimeInstanceCache.put(key,    format);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
70	[BUG]  [BUGGY]  Locale  locale  =  getLocale(locale);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  Locale  locale  =  getLocale(locale);  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	Locale  locale  =  getLocale(locale);	  Locale    locale    =    getLocale();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
71	[BUG]  [BUGGY]  String  key  =  value.toString();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  String  key  =  value.toString();  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	String  key  =  value.toString();	  String    key    =    pattern.toString();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
72	[BUG]  [BUGGY]  if(format  ==  null)  {  cDateTimeInstanceCache.put(key,  format);  }  else  {  for(int  i  =  0;  i  <  dateStyle;  i++)  {  cDateTimeInstanceCache.put(key,  format);  }  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  if(format  ==  null)  {  cDateTimeInstanceCache.put(key,  format);  }  else  {  for(int  i  =  0;  i  <  dateStyle;  i++)  {  cDateTimeInstanceCache.put(key,  format);  }  }  [BUGGY]        }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	if(format  ==  null)  {  cDateTimeInstanceCache.put(key,  format);  }  else  {  for(int  i  =  0;  i  <  dateStyle;  i++)  {  cDateTimeInstanceCache.put(key,  format);  }  }	  if(format!=    null)    {    cDateTimeInstanceCache.put(key,    format);    }    else    {    for(int    i    =    0;    i    <    dateStyle;    i++)    {    cDateTimeInstanceCache.put(key,    format);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
73	[BUG]  [BUGGY]  if(format  ==  null)  {  cDateTimeInstanceCache.put(key,  format);  }  else  {  for(int  i  =  0;  i  <  dateStyle;  i++)  {  cDateTimeInstanceCache.put(key,  format);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  if(format  ==  null)  {  cDateTimeInstanceCache.put(key,  format);  }  else  {  for(int  i  =  0;  i  <  dateStyle;  i++)  {  cDateTimeInstanceCache.put(key,  format);  }  [BUGGY]        }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	if(format  ==  null)  {  cDateTimeInstanceCache.put(key,  format);  }  else  {  for(int  i  =  0;  i  <  dateStyle;  i++)  {  cDateTimeInstanceCache.put(key,  format);  }	  if(format!=    null)    {    cDateTimeInstanceCache.put(key,    format);    }    else    {    for(int    i    =    0;    i    <    dateStyle;    i++)    {    cDateTimeInstanceCache.put(key,    format);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
74	[BUG]  [BUGGY]  if(format!=  null)  {  cDateTimeInstanceCache.put(key,  format);  }  else  {  for(int  i  =  0;  i  <  dateStyle;  i++)  {  cDateTimeInstanceCache.put(key,  format);  }  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  if(format!=  null)  {  cDateTimeInstanceCache.put(key,  format);  }  else  {  for(int  i  =  0;  i  <  dateStyle;  i++)  {  cDateTimeInstanceCache.put(key,  format);  }  }  [BUGGY]        }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	if(format!=  null)  {  cDateTimeInstanceCache.put(key,  format);  }  else  {  for(int  i  =  0;  i  <  dateStyle;  i++)  {  cDateTimeInstanceCache.put(key,  format);  }  }	  if(format!=    null)    {    cDateTimeInstanceCache.put(key,    format);    }    else    {    for(int    i    =    0;    i    <    dateStyle;    i++)    {    cDateTimeInstanceCache.put(key,    format);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
75	[BUG]  [BUGGY]  if(format  ==  null)  {  cDateTimeInstanceCache.put(value,  format);  }  else  {  cDateTimeInstanceCache.put(key,  format);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  if(format  ==  null)  {  cDateTimeInstanceCache.put(value,  format);  }  else  {  cDateTimeInstanceCache.put(key,  format);  }  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	if(format  ==  null)  {  cDateTimeInstanceCache.put(value,  format);  }  else  {  cDateTimeInstanceCache.put(key,  format);  }	  if(format!=    null)    {    cDateTimeInstanceCache.put(value,    format);    }    else    {    cDateTimeInstanceCache.put(key,    format);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
76	[BUG]  [BUGGY]  String  key  =  format.getString();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  String  key  =  format.getString();  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	String  key  =  format.getString();	  String    key    =    format.toString();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
77	[BUG]  [BUGGY]  String  key  =  formatter.toValue();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  String  key  =  formatter.toValue();  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	String  key  =  formatter.toValue();	  String    key    =    formatter.toStandard();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
78	[BUG]  [BUGGY]  String  key  =  FormatUtils.toPattern(format);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  String  key  =  FormatUtils.toPattern(format);  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	String  key  =  FormatUtils.toPattern(format);	  String    key    =    format.toPattern()    +    1;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
79	[BUG]  [BUGGY]  if(format  ==  null)  {  cDateTimeInstanceCache.put(value,  format);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  if(format  ==  null)  {  cDateTimeInstanceCache.put(value,  format);  }  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	if(format  ==  null)  {  cDateTimeInstanceCache.put(value,  format);  }	  if(format!=    null)    {    cDateTimeInstanceCache.put(value,    format);    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
80	[BUG]  [BUGGY]  nchDateTimeInstanceCache.put(key,  format);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  nchDateTimeInstanceCache.put(key,  format);  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	nchDateTimeInstanceCache.put(key,  format);	  if(format!=    null)    {    cDateTimeInstanceCache.put(key,    format);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
81	[BUG]  [BUGGY]  String  key  =  formatter.toPattern(),  timeZone);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  String  key  =  formatter.toPattern(),  timeZone);  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	String  key  =  formatter.toPattern(),  timeZone);	  String    key    =    formatter.toPattern(),    locale);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
82	[BUG]  [BUGGY]  if(format!=  null)  {  cDateTimeInstanceCache.put(values,  format);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  if(format!=  null)  {  cDateTimeInstanceCache.put(values,  format);  }  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	if(format!=  null)  {  cDateTimeInstanceCache.put(values,  format);  }	  cDateTimeInstanceCache.put(values,    format);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
83	[BUG]  [BUGGY]  String  key  =  formatter.toString()  + "n ";  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  String  key  =  formatter.toString()  + "n ";  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	String  key  =  formatter.toString()  + "n ";	  String    key    =    formatter.toString();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
84	[BUG]  [BUGGY]  cDateTimeInstanceCache.put(key,  formatter,  dateStyle,  locale);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  cDateTimeInstanceCache.put(key,  formatter,  dateStyle,  locale);  [BUGGY]        }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	cDateTimeInstanceCache.put(key,  formatter,  dateStyle,  locale);	  cDateTimeInstanceCache.put(key,    formatter,    locale);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
85	[BUG]  [BUGGY]  cDateTimeInstanceCache.put(dateStyle,  formatter,  locale);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  cDateTimeInstanceCache.put(dateStyle,  formatter,  locale);  [BUGGY]        }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	cDateTimeInstanceCache.put(dateStyle,  formatter,  locale);	  cDateTimeInstanceCache.put(key,    formatter,    locale);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
86	[BUG]  [BUGGY]  cDateTimeInstanceCache.put(dateStyle,  pattern);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  cDateTimeInstanceCache.put(dateStyle,  pattern);  [BUGGY]        }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	cDateTimeInstanceCache.put(dateStyle,  pattern);	  cDateTimeInstanceCache.put(key,    pattern);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
87	[BUG]  [BUGGY]  if(format!=  null)  {  cDateTimeInstanceCache.put(dateStyle,  format);  }  else  {  cDateTimeInstanceCache.put(key,  format);  break;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  if(format!=  null)  {  cDateTimeInstanceCache.put(dateStyle,  format);  }  else  {  cDateTimeInstanceCache.put(key,  format);  break;  }  [BUGGY]        }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	if(format!=  null)  {  cDateTimeInstanceCache.put(dateStyle,  format);  }  else  {  cDateTimeInstanceCache.put(key,  format);  break;  }	  if(format!=    null)    {    cDateTimeInstanceCache.put(key,    format);    }    else    {    cDateTimeInstanceCache.put(key,    format);    break;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
88	[BUG]  [BUGGY]  if(formatter!=  null)  {  cDateTimeInstanceCache.put(dateStyle,  formatter);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  if(formatter!=  null)  {  cDateTimeInstanceCache.put(dateStyle,  formatter);  }  [BUGGY]        }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	if(formatter!=  null)  {  cDateTimeInstanceCache.put(dateStyle,  formatter);  }	  cDateTimeInstanceCache.put(dateStyle,    formatter);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
89	[BUG]  [BUGGY]  if(format  ==  null)  {  cDateTimeInstanceCache.put(key,  format);  }  else  {  cDateTimeInstanceCache.put(dateStyle,  format);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  if(format  ==  null)  {  cDateTimeInstanceCache.put(key,  format);  }  else  {  cDateTimeInstanceCache.put(dateStyle,  format);  }  [BUGGY]        }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	if(format  ==  null)  {  cDateTimeInstanceCache.put(key,  format);  }  else  {  cDateTimeInstanceCache.put(dateStyle,  format);  }	  if(format!=    null)    {    cDateTimeInstanceCache.put(key,    format);    }    else    {    cDateTimeInstanceCache.put(dateStyle,    format);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
90	[BUG]  [BUGGY]  AssertionFailedError  cDateTimeInstanceCache.put(key,  format);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  AssertionFailedError  cDateTimeInstanceCache.put(key,  format);  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	AssertionFailedError  cDateTimeInstanceCache.put(key,  format);	  if(format    ==    null)    {    cDateTimeInstanceCache.put(key,    format);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
91	[BUG]  [BUGGY]  String  key  =  format.substring(0,  format.length());  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  String  key  =  format.substring(0,  format.length());  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	String  key  =  format.substring(0,  format.length());	  String    key    =    pattern.substring(0,    format.length()    -    1);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
92	[BUG]  [BUGGY]  String  key  =  formatter.toShortPattern()  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  String  key  =  formatter.toShortPattern()  +  1;  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	String  key  =  formatter.toShortPattern()  +  1;	  String    key    =    formatter.toShortPattern();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
93	[BUG]  [BUGGY]  String  key  =  format.toPattern(),  timeZone);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  String  key  =  format.toPattern(),  timeZone);  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	String  key  =  format.toPattern(),  timeZone);	  String    key    =    format.toPattern(),    locale);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
94	[BUG]  [BUGGY]  if(format  ==  null)  {  cDateTimeInstanceCache.put(dateStyle,  format);  }  else  {  cDateTimeInstanceCache.put(key,  format);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  if(format  ==  null)  {  cDateTimeInstanceCache.put(dateStyle,  format);  }  else  {  cDateTimeInstanceCache.put(key,  format);  }  [BUGGY]        }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	if(format  ==  null)  {  cDateTimeInstanceCache.put(dateStyle,  format);  }  else  {  cDateTimeInstanceCache.put(key,  format);  }	  if(format!=    null)    {    cDateTimeInstanceCache.put(dateStyle,    format);    }    else    {    cDateTimeInstanceCache.put(key,    format);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
95	[BUG]  [BUGGY]  String  key  =  pattern.substring(0,  dateStyle.length()));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  String  key  =  pattern.substring(0,  dateStyle.length()));  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	String  key  =  pattern.substring(0,  dateStyle.length()));	  String    key    =    pattern.substring(0,    pattern.length()));    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
96	[BUG]  [BUGGY]  if(format!=  null)  {  cDateTimeInstanceCache.put(dateStyle,  format);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  if(format!=  null)  {  cDateTimeInstanceCache.put(dateStyle,  format);  }  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	if(format!=  null)  {  cDateTimeInstanceCache.put(dateStyle,  format);  }	  if(format!=    null)    {    cDateTimeInstanceCache.put(timeZone,    format);    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
97	[BUG]  [BUGGY]  Locale  locale  =(format  ==  null?  Locale.getDefault()  :  locale);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  Locale  locale  =(format  ==  null?  Locale.getDefault()  :  locale);  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	Locale  locale  =(format  ==  null?  Locale.getDefault()  :  locale);	  Locale    locale    =(locale    ==    null?    Locale.getDefault()    :    locale);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
98	[BUG]  [BUGGY]  Locale  locale  =(format  ==  null)?  null  :  Locale.getDefault();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  Locale  locale  =(format  ==  null)?  null  :  Locale.getDefault();  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	Locale  locale  =(format  ==  null)?  null  :  Locale.getDefault();	  Locale    locale    =(locale    ==    null)?    null    :    Locale.getDefault();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
99	[BUG]  [BUGGY]  if(formatter!=  null)  {  cDateTimeInstanceCache.put(key,  format);  }  else  {  cDateTimeInstanceCache.put(key,  format);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  if(formatter!=  null)  {  cDateTimeInstanceCache.put(key,  format);  }  else  {  cDateTimeInstanceCache.put(key,  format);  }  [BUGGY]        }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	if(formatter!=  null)  {  cDateTimeInstanceCache.put(key,  format);  }  else  {  cDateTimeInstanceCache.put(key,  format);  }	  cDateTimeInstanceCache.put(formatter,    key);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
100	[BUG]  [BUGGY]  String  key  =  this.pattern.toString();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  String  key  =  this.pattern.toString();  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	String  key  =  this.pattern.toString();	  String    key    =    this.pattern.toPattern();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
101	[BUG]  [BUGGY]  if(format!=  null)  {  cDateTimeInstanceCache.put(dateStyle,  format);  }  else  {  for(int  i  =  0;  i  <  dateStyle;  i++)  {  cDateTimeInstanceCache.put(key,  format);  }  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  if(format!=  null)  {  cDateTimeInstanceCache.put(dateStyle,  format);  }  else  {  for(int  i  =  0;  i  <  dateStyle;  i++)  {  cDateTimeInstanceCache.put(key,  format);  }  }  [BUGGY]        }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	if(format!=  null)  {  cDateTimeInstanceCache.put(dateStyle,  format);  }  else  {  for(int  i  =  0;  i  <  dateStyle;  i++)  {  cDateTimeInstanceCache.put(key,  format);  }  }	  if(format!=    null)    {    cDateTimeInstanceCache.put(key,    format);    }    else    {    for(int    i    =    0;    i    <    dateStyle;    i++)    {    cDateTimeInstanceCache.put(key,    format);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
102	[BUG]  [BUGGY]  if(format!=  null)  {  cDateTimeInstanceCache.put(dateStyle,  format);  }  else  {  for(int  i  =  0;  i  <  dateStyle;  i++)  {  cDateTimeInstanceCache.put(key,  format);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  if(format!=  null)  {  cDateTimeInstanceCache.put(dateStyle,  format);  }  else  {  for(int  i  =  0;  i  <  dateStyle;  i++)  {  cDateTimeInstanceCache.put(key,  format);  }  [BUGGY]        }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	if(format!=  null)  {  cDateTimeInstanceCache.put(dateStyle,  format);  }  else  {  for(int  i  =  0;  i  <  dateStyle;  i++)  {  cDateTimeInstanceCache.put(key,  format);  }	  if(format!=    null)    {    cDateTimeInstanceCache.put(key,    format);    }    else    {    for(int    i    =    0;    i    <    dateStyle;    i++)    {    cDateTimeInstanceCache.put(key,    format);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
103	[BUG]  [BUGGY]  if(format  >=  null)  {  cDateTimeInstanceCache.put(key,  format);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  if(format  >=  null)  {  cDateTimeInstanceCache.put(key,  format);  }  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	if(format  >=  null)  {  cDateTimeInstanceCache.put(key,  format);  }	  if(format    ==    null)    {    cDateTimeInstanceCache.put(key,    format);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
104	[BUG]  [BUGGY]  aught(ClassCastException  ex)  {  cDateTimeInstanceCache.put(mValue,  format);  }  else  {  cDateTimeInstanceCache.put(key,  format);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  aught(ClassCastException  ex)  {  cDateTimeInstanceCache.put(mValue,  format);  }  else  {  cDateTimeInstanceCache.put(key,  format);  }  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	aught(ClassCastException  ex)  {  cDateTimeInstanceCache.put(mValue,  format);  }  else  {  cDateTimeInstanceCache.put(key,  format);  }	  if(format!=    null)    {    cDateTimeInstanceCache.put(mValue,    format);    }    else    {    cDateTimeInstanceCache.put(key,    format);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
105	[BUG]  [BUGGY]  if(format  ==  null)  {  if(locale  ==  null)  {  locale  =  Locale.getDefault();  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  if(format  ==  null)  {  if(locale  ==  null)  {  locale  =  Locale.getDefault();  }  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	if(format  ==  null)  {  if(locale  ==  null)  {  locale  =  Locale.getDefault();  }	  if(format!=    null)    {    cDateTimeInstanceCache.put(key,    format);    }    else    {    cDateTimeInstanceCache.put(key,    format);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
106	[BUG]  [BUGGY]  if(format!=  null)  {  cDateTimeInstanceCache.put(timeStyle,  format);  }  else  {  cDateTimeInstanceCache.put(dateStyle,  format);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  if(format!=  null)  {  cDateTimeInstanceCache.put(timeStyle,  format);  }  else  {  cDateTimeInstanceCache.put(dateStyle,  format);  }  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	if(format!=  null)  {  cDateTimeInstanceCache.put(timeStyle,  format);  }  else  {  cDateTimeInstanceCache.put(dateStyle,  format);  }	  cDateTimeInstanceCache.put(timeStyle,    format);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
107	[BUG]  [BUGGY]  if(format  ==  null)  {  cDateTimeInstanceCache.put(timeStyle,  format);  }  else  {  cDateTimeInstanceCache.put(dateStyle,  format);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  if(format  ==  null)  {  cDateTimeInstanceCache.put(timeStyle,  format);  }  else  {  cDateTimeInstanceCache.put(dateStyle,  format);  }  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	if(format  ==  null)  {  cDateTimeInstanceCache.put(timeStyle,  format);  }  else  {  cDateTimeInstanceCache.put(dateStyle,  format);  }	  cDateTimeInstanceCache.put(timeStyle,    format);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
108	[BUG]  [BUGGY]  String  key  =  format.toPattern(),  dateStyle,  timeStyle,  locale);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  String  key  =  format.toPattern(),  dateStyle,  timeStyle,  locale);  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	String  key  =  format.toPattern(),  dateStyle,  timeStyle,  locale);	  String    key    =    format.toPattern(),    locale);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
109	[BUG]  [BUGGY]  String  key  =  formatter.toPattern(),  dateStyle,  timeStyle,  locale);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  String  key  =  formatter.toPattern(),  dateStyle,  timeStyle,  locale);  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	String  key  =  formatter.toPattern(),  dateStyle,  timeStyle,  locale);	  String    key    =    formatter.toPattern(),    locale);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
110	[BUG]  [BUGGY]  if(formatter  ==  null)  {  cDateTimeInstanceCache.put(key,  format);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  if(formatter  ==  null)  {  cDateTimeInstanceCache.put(key,  format);  }  [BUGGY]        }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	if(formatter  ==  null)  {  cDateTimeInstanceCache.put(key,  format);  }	  cDateTimeInstanceCache.put(dateStyle,    formatter);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
111	[BUG]  [BUGGY]  cDateTimeInstanceCache.put(key,  formatter,  locale  +  1);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  cDateTimeInstanceCache.put(key,  formatter,  locale  +  1);  [BUGGY]        }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	cDateTimeInstanceCache.put(key,  formatter,  locale  +  1);	  cDateTimeInstanceCache.put(key,    formatter,    locale);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
112	[BUG]  [BUGGY]  Locale  locale  =  locale.getLocale();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  Locale  locale  =  locale.getLocale();  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	Locale  locale  =  locale.getLocale();	  Locale    locale    =    locale.getDefault();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
113	[BUG]  [BUGGY]  Locale  locale  =  mLocale.getDefault();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  Locale  locale  =  mLocale.getDefault();  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	Locale  locale  =  mLocale.getDefault();	  Locale    locale    =    locale.getDefault();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
114	[BUG]  [BUGGY]  if(format!=  null)  {  cDateTimeInstanceCache.put(key,  format);  }  else  {  cDateTimeInstanceCache.put(values,  format);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  if(format!=  null)  {  cDateTimeInstanceCache.put(key,  format);  }  else  {  cDateTimeInstanceCache.put(values,  format);  }  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	if(format!=  null)  {  cDateTimeInstanceCache.put(key,  format);  }  else  {  cDateTimeInstanceCache.put(values,  format);  }	  cDateTimeInstanceCache.put(values,    format);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
115	[BUG]  [BUGGY]  Locale  locale  =  cDateTimeInstanceCache.get(mLocale);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  Locale  locale  =  cDateTimeInstanceCache.get(mLocale);  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	Locale  locale  =  cDateTimeInstanceCache.get(mLocale);	  Locale    locale    =    cDateTimeInstanceCache.get(mValue);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
116	[BUG]  [BUGGY]  Locale  locale  =  cDateTimeInstanceCache.get(mDaylight);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  Locale  locale  =  cDateTimeInstanceCache.get(mDaylight);  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	Locale  locale  =  cDateTimeInstanceCache.get(mDaylight);	  Locale    locale    =    cDateTimeInstanceCache.get(mValue);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
117	[BUG]  [BUGGY]  String  key  =  format.toPattern()  /  1;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  String  key  =  format.toPattern()  /  1;  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	String  key  =  format.toPattern()  /  1;	  String    key    =    format.toPattern()    +    1;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
118	[BUG]  [BUGGY]  String  key  =  this.pattern.substring(0,  pattern.length());  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  String  key  =  this.pattern.substring(0,  pattern.length());  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	String  key  =  this.pattern.substring(0,  pattern.length());	  String    key    =    pattern.substring(0,    pattern.length());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
119	[BUG]  [BUGGY]  String  key  =  this.pattern.substring(0,  format.length());  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  String  key  =  this.pattern.substring(0,  format.length());  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	String  key  =  this.pattern.substring(0,  format.length());	  String    key    =    pattern.substring(0,    pattern.length());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
120	[BUG]  [BUGGY]  String  key  =  pattern.substring(1,  pattern.length());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  String  key  =  pattern.substring(1,  pattern.length());  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	String  key  =  pattern.substring(1,  pattern.length());	  String    key    =    pattern.substring(0,    pattern.length());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
121	[BUG]  [BUGGY]  String  key  =  pattern.substring(0,  format.length()  -  1));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  String  key  =  pattern.substring(0,  format.length()  -  1));  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	String  key  =  pattern.substring(0,  format.length()  -  1));	  String    key    =    pattern.substring(0,    pattern.length()));    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
122	[BUG]  [BUGGY]  String  key  =  this.pattern.substring(0,  format.length()));  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  String  key  =  this.pattern.substring(0,  format.length()));  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	String  key  =  this.pattern.substring(0,  format.length()));	  String    key    =    pattern.substring(0,    pattern.length()));    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
123	[BUG]  [BUGGY]  String  key  =  format.substring(0,  pattern.length()));  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  String  key  =  format.substring(0,  pattern.length()));  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	String  key  =  format.substring(0,  pattern.length()));	  String    key    =    pattern.substring(0,    pattern.length()));    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
124	[BUG]  [BUGGY]  String  key  =  mValue.toPattern();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  String  key  =  mValue.toPattern();  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	String  key  =  mValue.toPattern();	  String    key    =    value.toPattern();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
125	[BUG]  [BUGGY]  aught(ClassCastException  ex)  {  cDateTimeInstanceCache.put(value,  format);  }  else  {  cDateTimeInstanceCache.put(key,  format);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  aught(ClassCastException  ex)  {  cDateTimeInstanceCache.put(value,  format);  }  else  {  cDateTimeInstanceCache.put(key,  format);  }  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	aught(ClassCastException  ex)  {  cDateTimeInstanceCache.put(value,  format);  }  else  {  cDateTimeInstanceCache.put(key,  format);  }	  if(format!=    null)    {    cDateTimeInstanceCache.put(value,    format);    }    else    {    cDateTimeInstanceCache.put(key,    format);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
126	[BUG]  [BUGGY]  String  key  =  formatter.toString(),  locale);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  String  key  =  formatter.toString(),  locale);  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	String  key  =  formatter.toString(),  locale);	  String    key    =    formatter.toString();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
127	[BUG]  [BUGGY]  String  key  =  pattern.substring(0,  format.length()  -  4);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);      [BUGGY]  String  key  =  pattern.substring(0,  format.length()  -  4);  [BUGGY]      cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  time  pattern  for  locale:       "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	479	479	2	replace	String  key  =  pattern.substring(0,  format.length()  -  4);	  String    key    =    pattern.substring(0,    format.length());    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
