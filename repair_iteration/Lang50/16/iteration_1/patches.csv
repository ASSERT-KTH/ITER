bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Locale  locale  =  getInstance(dateStyle,  timeStyle,  locale);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    Object  key  =  new  Pair(new  Integer(dateStyle),  new  Integer(timeStyle));  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {    [BUGGY]  Locale  locale  =  getInstance(dateStyle,  timeStyle,  locale);  [BUGGY]    if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	471	471	2	replace	Locale  locale  =  getInstance(dateStyle,  timeStyle,  locale);	      Object    locale    =    getInstance(dateStyle,    timeStyle,    locale);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
2	[BUG]  [BUGGY]  String  locale  =  getInstance(dateStyle,  timeStyle,  locale);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    Object  key  =  new  Pair(new  Integer(dateStyle),  new  Integer(timeStyle));  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {    [BUGGY]  String  locale  =  getInstance(dateStyle,  timeStyle,  locale);  [BUGGY]    if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	471	471	2	replace	String  locale  =  getInstance(dateStyle,  timeStyle,  locale);	      Object    locale    =    getInstance(dateStyle,    timeStyle,    locale);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
3	[BUG]  [BUGGY]  Locale  locale  =  cDateTimeInstanceCache.get(key,  timeStyle);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    Object  key  =  new  Pair(new  Integer(dateStyle),  new  Integer(timeStyle));  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {    [BUGGY]  Locale  locale  =  cDateTimeInstanceCache.get(key,  timeStyle);  [BUGGY]    if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	471	471	2	replace	Locale  locale  =  cDateTimeInstanceCache.get(key,  timeStyle);	      Locale    locale    =    cDateTimeInstanceCache.get(key);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
4	[BUG]  [BUGGY]  Locale  locale  =  cDateTimeInstanceCache.get(timeStyle);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    Object  key  =  new  Pair(new  Integer(dateStyle),  new  Integer(timeStyle));  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {    [BUGGY]  Locale  locale  =  cDateTimeInstanceCache.get(timeStyle);  [BUGGY]    if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	471	471	2	replace	Locale  locale  =  cDateTimeInstanceCache.get(timeStyle);	      Locale    locale    =    cDateTimeInstanceCache.get(key);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
5	[BUG]  [BUGGY]  Locale  locale  =  cDateTimeInstanceCache.get(dateStyle);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    Object  key  =  new  Pair(new  Integer(dateStyle),  new  Integer(timeStyle));  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {    [BUGGY]  Locale  locale  =  cDateTimeInstanceCache.get(dateStyle);  [BUGGY]    if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	471	471	2	replace	Locale  locale  =  cDateTimeInstanceCache.get(dateStyle);	      Locale    locale    =    cDateTimeInstanceCache.get(key);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
6	[BUG]  [BUGGY]  cDateTimeInstanceCache.put(key,  format);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    Object  key  =  new  Pair(new  Integer(dateStyle),  new  Integer(timeStyle));  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {    [BUGGY]  cDateTimeInstanceCache.put(key,  format);  [BUGGY]    locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	471	471	2	replace	cDateTimeInstanceCache.put(key,  format);	      	non-compiled	[CE]  illegal  start  of  type	2	None	replace
7	[BUG]  [BUGGY]  String  locale  =  cDateTimeInstanceCache.get(key);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    Object  key  =  new  Pair(new  Integer(dateStyle),  new  Integer(timeStyle));  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {    [BUGGY]  String  locale  =  cDateTimeInstanceCache.get(key);  [BUGGY]    locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	471	471	2	replace	String  locale  =  cDateTimeInstanceCache.get(key);	      	non-compiled	[CE]  illegal  start  of  type	2	None	replace
8	[BUG]  [BUGGY]  String  locale  =  cDateTimeInstanceCache.get(locale);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    Object  key  =  new  Pair(new  Integer(dateStyle),  new  Integer(timeStyle));  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {    [BUGGY]  String  locale  =  cDateTimeInstanceCache.get(locale);  [BUGGY]    locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	471	471	2	replace	String  locale  =  cDateTimeInstanceCache.get(locale);	      	non-compiled	[CE]  illegal  start  of  type	2	None	replace
9	[BUG]  [BUGGY]  if(locale  ==  null  &&  locale!=  null)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    Object  key  =  new  Pair(new  Integer(dateStyle),  new  Integer(timeStyle));  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {    [BUGGY]  if(locale  ==  null  &&  locale!=  null)  {  [BUGGY]    locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	471	471	2	replace	if(locale  ==  null  &&  locale!=  null)  {	  if(locale    ==    null    ||    locale!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
10	[BUG]  [BUGGY]  if(locale!=  null  ||  locale!=  null)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    Object  key  =  new  Pair(new  Integer(dateStyle),  new  Integer(timeStyle));  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {    [BUGGY]  if(locale!=  null  ||  locale!=  null)  {  [BUGGY]    locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	471	471	2	replace	if(locale!=  null  ||  locale!=  null)  {	  if(locale    ==    null    ||    locale!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
11	[BUG]  [BUGGY]  Locale  locale  =(Locale)cDateTimeInstanceCache.get(timeStyle);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    Object  key  =  new  Pair(new  Integer(dateStyle),  new  Integer(timeStyle));  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {    [BUGGY]  Locale  locale  =(Locale)cDateTimeInstanceCache.get(timeStyle);  [BUGGY]    if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	471	471	2	replace	Locale  locale  =(Locale)cDateTimeInstanceCache.get(timeStyle);	      Locale    locale    =(Locale)cDateTimeInstanceCache.get(locale);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
12	[BUG]  [BUGGY]  Object  locale  =  cDateTimeInstanceCache.get(key,  timeStyle);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    Object  key  =  new  Pair(new  Integer(dateStyle),  new  Integer(timeStyle));  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {    [BUGGY]  Object  locale  =  cDateTimeInstanceCache.get(key,  timeStyle);  [BUGGY]    if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	471	471	2	replace	Object  locale  =  cDateTimeInstanceCache.get(key,  timeStyle);	      Object    locale    =    cDateTimeInstanceCache.get(key);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
13	[BUG]  [BUGGY]  Object  locale  =  cDateTimeInstanceCache.get(timeStyle);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    Object  key  =  new  Pair(new  Integer(dateStyle),  new  Integer(timeStyle));  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {    [BUGGY]  Object  locale  =  cDateTimeInstanceCache.get(timeStyle);  [BUGGY]    if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	471	471	2	replace	Object  locale  =  cDateTimeInstanceCache.get(timeStyle);	      Object    locale    =    cDateTimeInstanceCache.get(key);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
14	[BUG]  [BUGGY]  Object  locale  =  cDateTimeInstanceCache.get(key,  dateStyle);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    Object  key  =  new  Pair(new  Integer(dateStyle),  new  Integer(timeStyle));  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {    [BUGGY]  Object  locale  =  cDateTimeInstanceCache.get(key,  dateStyle);  [BUGGY]    if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	471	471	2	replace	Object  locale  =  cDateTimeInstanceCache.get(key,  dateStyle);	      Object    locale    =    cDateTimeInstanceCache.get(key);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
15	[BUG]  [BUGGY]  Locale  locale  =(Locale)cDateTimeInstanceCache.get(dateStyle,  timeStyle);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    Object  key  =  new  Pair(new  Integer(dateStyle),  new  Integer(timeStyle));  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {    [BUGGY]  Locale  locale  =(Locale)cDateTimeInstanceCache.get(dateStyle,  timeStyle);  [BUGGY]    if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	471	471	2	replace	Locale  locale  =(Locale)cDateTimeInstanceCache.get(dateStyle,  timeStyle);	      Locale    locale    =(Locale)cDateTimeInstanceCache.get(dateStyle);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
16	[BUG]  [BUGGY]  Locale  locale  =  cDateTimeInstanceCache.getDefault();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    Object  key  =  new  Pair(new  Integer(dateStyle),  new  Integer(timeStyle));  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {    [BUGGY]  Locale  locale  =  cDateTimeInstanceCache.getDefault();  [BUGGY]    if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	471	471	2	replace	Locale  locale  =  cDateTimeInstanceCache.getDefault();	      Locale    locale    =    Locale.getDefault();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
17	[BUG]  [BUGGY]  Locale  locale  =(Locale)cDateTimeInstanceCache.get(key,  timeStyle);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    Object  key  =  new  Pair(new  Integer(dateStyle),  new  Integer(timeStyle));  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {    [BUGGY]  Locale  locale  =(Locale)cDateTimeInstanceCache.get(key,  timeStyle);  [BUGGY]    if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	471	471	2	replace	Locale  locale  =(Locale)cDateTimeInstanceCache.get(key,  timeStyle);	      Locale    locale    =(Locale)cDateTimeInstanceCache.get(key);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
18	[BUG]  [BUGGY]  Object  locale  =  getInstance(dateStyle,  timeStyle,  locale.toPattern());  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    Object  key  =  new  Pair(new  Integer(dateStyle),  new  Integer(timeStyle));  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {    [BUGGY]  Object  locale  =  getInstance(dateStyle,  timeStyle,  locale.toPattern());  [BUGGY]    if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	471	471	2	replace	Object  locale  =  getInstance(dateStyle,  timeStyle,  locale.toPattern());	      Object    locale    =    getInstance(dateStyle,    timeStyle,    locale);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
19	[BUG]  [BUGGY]  Object  locale  =  getInstance(timeStyle,  dateStyle,  locale);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    Object  key  =  new  Pair(new  Integer(dateStyle),  new  Integer(timeStyle));  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {    [BUGGY]  Object  locale  =  getInstance(timeStyle,  dateStyle,  locale);  [BUGGY]    if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	471	471	2	replace	Object  locale  =  getInstance(timeStyle,  dateStyle,  locale);	      Object    locale    =    getInstance(dateStyle,    timeStyle,    locale);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
20	[BUG]  [BUGGY]  Object  locale  =  getInstance(dateStyle,  timeStyle,  locale.getLocale());  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    Object  key  =  new  Pair(new  Integer(dateStyle),  new  Integer(timeStyle));  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {    [BUGGY]  Object  locale  =  getInstance(dateStyle,  timeStyle,  locale.getLocale());  [BUGGY]    if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	471	471	2	replace	Object  locale  =  getInstance(dateStyle,  timeStyle,  locale.getLocale());	      Object    locale    =    getInstance(dateStyle,    timeStyle,    locale);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
21	[BUG]  [BUGGY]  Locale  locale  =  cDateTimeInstanceCache.get(dateStyle,  timeStyle);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    Object  key  =  new  Pair(new  Integer(dateStyle),  new  Integer(timeStyle));  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {    [BUGGY]  Locale  locale  =  cDateTimeInstanceCache.get(dateStyle,  timeStyle);  [BUGGY]    if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	471	471	2	replace	Locale  locale  =  cDateTimeInstanceCache.get(dateStyle,  timeStyle);	      Locale    locale    =    cDateTimeInstanceCache.get(key);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
22	[BUG]  [BUGGY]  Object  locale  =  cDateTimeInstanceCache.get(key,  timeZone);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    Object  key  =  new  Pair(new  Integer(dateStyle),  new  Integer(timeStyle));  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {    [BUGGY]  Object  locale  =  cDateTimeInstanceCache.get(key,  timeZone);  [BUGGY]    if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	471	471	2	replace	Object  locale  =  cDateTimeInstanceCache.get(key,  timeZone);	      Object    locale    =    cDateTimeInstanceCache.get(key);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
23	[BUG]  [BUGGY]  Object  locale  =  cDateTimeInstanceCache.get(dateStyle);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    Object  key  =  new  Pair(new  Integer(dateStyle),  new  Integer(timeStyle));  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {    [BUGGY]  Object  locale  =  cDateTimeInstanceCache.get(dateStyle);  [BUGGY]    if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	471	471	2	replace	Object  locale  =  cDateTimeInstanceCache.get(dateStyle);	      Object    locale    =    cDateTimeInstanceCache.get(key);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
24	[BUG]  [BUGGY]  Locale  locale  =  DateTimeUtils.getLocale(locale);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    Object  key  =  new  Pair(new  Integer(dateStyle),  new  Integer(timeStyle));  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {    [BUGGY]  Locale  locale  =  DateTimeUtils.getLocale(locale);  [BUGGY]    if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	471	471	2	replace	Locale  locale  =  DateTimeUtils.getLocale(locale);	      Locale    locale    =    Locale.getDefault();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
25	[BUG]  [BUGGY]  Locale  locale  =(Locale)cDateTimeInstanceCache.get(timeZone);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    Object  key  =  new  Pair(new  Integer(dateStyle),  new  Integer(timeStyle));  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {    [BUGGY]  Locale  locale  =(Locale)cDateTimeInstanceCache.get(timeZone);  [BUGGY]    if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	471	471	2	replace	Locale  locale  =(Locale)cDateTimeInstanceCache.get(timeZone);	      Locale    locale    =(Locale)cDateTimeInstanceCache.get(locale);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
26	[BUG]  [BUGGY]  if(locale  ==  null  ||  locale  ==  null)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    Object  key  =  new  Pair(new  Integer(dateStyle),  new  Integer(timeStyle));  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {    [BUGGY]  if(locale  ==  null  ||  locale  ==  null)  {  [BUGGY]    locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	471	471	2	replace	if(locale  ==  null  ||  locale  ==  null)  {	  if(locale    ==    null    ||    locale!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
27	[BUG]  [BUGGY]  if  (Locale.getDefault()!=  null)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    Object  key  =  new  Pair(new  Integer(dateStyle),  new  Integer(timeStyle));  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {    [BUGGY]  if  (Locale.getDefault()!=  null)  {  [BUGGY]    locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	471	471	2	replace	if  (Locale.getDefault()!=  null)  {	  if    (locale!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
28	[BUG]  [BUGGY]  Locale  locale  =(Locale)cDateTimeInstanceCache.get(key,  timeZone);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    Object  key  =  new  Pair(new  Integer(dateStyle),  new  Integer(timeStyle));  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {    [BUGGY]  Locale  locale  =(Locale)cDateTimeInstanceCache.get(key,  timeZone);  [BUGGY]    if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	471	471	2	replace	Locale  locale  =(Locale)cDateTimeInstanceCache.get(key,  timeZone);	      Locale    locale    =(Locale)cDateTimeInstanceCache.get(key);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
29	[BUG]  [BUGGY]  String  dateStyle  =  DateTimeUtils.getDateStyle(dateStyle);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    Object  key  =  new  Pair(new  Integer(dateStyle),  new  Integer(timeStyle));  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {    [BUGGY]  String  dateStyle  =  DateTimeUtils.getDateStyle(dateStyle);  [BUGGY]    locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	471	471	2	replace	String  dateStyle  =  DateTimeUtils.getDateStyle(dateStyle);	      	non-compiled	[CE]  illegal  start  of  type	2	None	replace
30	[BUG]  [BUGGY]  Object  locale  =  getInstance(pattern,  timeStyle,  locale);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    Object  key  =  new  Pair(new  Integer(dateStyle),  new  Integer(timeStyle));  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {    [BUGGY]  Object  locale  =  getInstance(pattern,  timeStyle,  locale);  [BUGGY]    if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	471	471	2	replace	Object  locale  =  getInstance(pattern,  timeStyle,  locale);	      Object    locale    =    getInstance(dateStyle,    timeStyle,    locale);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
31	[BUG]  [BUGGY]  Object  locale  =  getInstance(locale,  timeStyle,  dateStyle);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    Object  key  =  new  Pair(new  Integer(dateStyle),  new  Integer(timeStyle));  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {    [BUGGY]  Object  locale  =  getInstance(locale,  timeStyle,  dateStyle);  [BUGGY]    if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	471	471	2	replace	Object  locale  =  getInstance(locale,  timeStyle,  dateStyle);	      Object    locale    =    getInstance(dateStyle,    timeStyle,    locale);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
32	[BUG]  [BUGGY]  if  (locale!=  null  &&  locale.equals(mLocale))  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    Object  key  =  new  Pair(new  Integer(dateStyle),  new  Integer(timeStyle));  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {    [BUGGY]  if  (locale!=  null  &&  locale.equals(mLocale))  {  [BUGGY]    locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	471	471	2	replace	if  (locale!=  null  &&  locale.equals(mLocale))  {	  if    (locale!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
33	[BUG]  [BUGGY]  if  (locale!=  null  &&  locale!=  Locale.getDefault())  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    Object  key  =  new  Pair(new  Integer(dateStyle),  new  Integer(timeStyle));  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {    [BUGGY]  if  (locale!=  null  &&  locale!=  Locale.getDefault())  {  [BUGGY]    locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	471	471	2	replace	if  (locale!=  null  &&  locale!=  Locale.getDefault())  {	  if    (locale!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
34	[BUG]  [BUGGY]  Locale  locale  =(Locale)cDateTimeInstanceCache.get(key,  format);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    Object  key  =  new  Pair(new  Integer(dateStyle),  new  Integer(timeStyle));  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {    [BUGGY]  Locale  locale  =(Locale)cDateTimeInstanceCache.get(key,  format);  [BUGGY]    if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	471	471	2	replace	Locale  locale  =(Locale)cDateTimeInstanceCache.get(key,  format);	      Locale    locale    =(Locale)cDateTimeInstanceCache.get(key);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
35	[BUG]  [BUGGY]  Object  locale  =  cDateTimeInstanceCache.get(key,  format);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    Object  key  =  new  Pair(new  Integer(dateStyle),  new  Integer(timeStyle));  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {    [BUGGY]  Object  locale  =  cDateTimeInstanceCache.get(key,  format);  [BUGGY]    if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	471	471	2	replace	Object  locale  =  cDateTimeInstanceCache.get(key,  format);	      Object    locale    =    cDateTimeInstanceCache.get(key);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
36	[BUG]  [BUGGY]  Locale  locale  =  cDateTimeInstanceCache.get(key,  format);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    Object  key  =  new  Pair(new  Integer(dateStyle),  new  Integer(timeStyle));  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {    [BUGGY]  Locale  locale  =  cDateTimeInstanceCache.get(key,  format);  [BUGGY]    if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	471	471	2	replace	Locale  locale  =  cDateTimeInstanceCache.get(key,  format);	      Locale    locale    =    cDateTimeInstanceCache.get(key);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
37	[BUG]  [BUGGY]  Locale  locale  =  cDateTimeInstanceCache.get(key,  dateStyle);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    Object  key  =  new  Pair(new  Integer(dateStyle),  new  Integer(timeStyle));  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {    [BUGGY]  Locale  locale  =  cDateTimeInstanceCache.get(key,  dateStyle);  [BUGGY]    if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	471	471	2	replace	Locale  locale  =  cDateTimeInstanceCache.get(key,  dateStyle);	      Locale    locale    =    cDateTimeInstanceCache.get(key);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
