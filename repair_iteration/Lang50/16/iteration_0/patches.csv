bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if  (locale!=  null)  {  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]  Object  key  =  new  Pair(new  Integer(dateStyle),  new  Integer(timeStyle));  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  [BUGGY]  if  (locale!=  null)  {  [BUGGY]  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	471	471	2	replace	if  (locale!=  null)  {	if  (locale  ==  null)  {  	non-compiled	[CE]  illegal  start  of  type	31	None	replace
2	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]      AssertionFailedError  [CONTEXT]  Object  key  =  new  Pair(new  Integer(dateStyle),  new  Integer(timeStyle));  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  [BUGGY]    [BUGGY]  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	471	471	2	replace	  	if  (locale  ==  null)  {  	non-compiled	[CE]  illegal  start  of  type	31	None	replace
3	[BUG]  [BUGGY]    Locale  locale  =  Locale.getDefault();  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]  Object  key  =  new  Pair(new  Integer(dateStyle),  new  Integer(timeStyle));  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  [BUGGY]    Locale  locale  =  Locale.getDefault();  [BUGGY]  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	471	471	2	replace	    Locale  locale  =  Locale.getDefault();		non-compiled	[CE]  illegal  start  of  type	32	None	add
4	[BUG]  [BUGGY]    Locale  locale  =(Locale)cDateTimeInstanceCache.get(locale);  [CE]  illegal  start  of  type  [FE]      AssertionFailedError  [CONTEXT]  Object  key  =  new  Pair(new  Integer(dateStyle),  new  Integer(timeStyle));  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  [BUGGY]    Locale  locale  =(Locale)cDateTimeInstanceCache.get(locale);  [BUGGY]  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	471	471	2	replace	    Locale  locale  =(Locale)cDateTimeInstanceCache.get(locale);		non-compiled	[CE]  illegal  start  of  type	32	None	add
5	[BUG]  [BUGGY]    Locale  locale  =  cDateTimeInstanceCache.get(key);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError  [CONTEXT]  Object  key  =  new  Pair(new  Integer(dateStyle),  new  Integer(timeStyle));  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  [BUGGY]    Locale  locale  =  cDateTimeInstanceCache.get(key);  [BUGGY]  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	471	471	2	replace	    Locale  locale  =  cDateTimeInstanceCache.get(key);		non-compiled	[CE]  illegal  start  of  type	32	None	add
6	[BUG]  [BUGGY]    Locale  locale  =(Locale)cDateTimeInstanceCache.get(key);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError  [CONTEXT]  Object  key  =  new  Pair(new  Integer(dateStyle),  new  Integer(timeStyle));  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  [BUGGY]    Locale  locale  =(Locale)cDateTimeInstanceCache.get(key);  [BUGGY]  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	471	471	2	replace	    Locale  locale  =(Locale)cDateTimeInstanceCache.get(key);		non-compiled	[CE]  illegal  start  of  type	32	None	add
7	[BUG]  [BUGGY]    Locale  locale  =(Locale)cDateTimeInstanceCache.get(dateStyle);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError  [CONTEXT]  Object  key  =  new  Pair(new  Integer(dateStyle),  new  Integer(timeStyle));  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  [BUGGY]    Locale  locale  =(Locale)cDateTimeInstanceCache.get(dateStyle);  [BUGGY]  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	471	471	2	replace	    Locale  locale  =(Locale)cDateTimeInstanceCache.get(dateStyle);		non-compiled	[CE]  illegal  start  of  type	32	None	add
8	[BUG]  [BUGGY]  if(locale  ==  null  ||  locale!=  null)  {  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]  Object  key  =  new  Pair(new  Integer(dateStyle),  new  Integer(timeStyle));  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  [BUGGY]  if(locale  ==  null  ||  locale!=  null)  {  [BUGGY]  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	471	471	2	replace	if(locale  ==  null  ||  locale!=  null)  {	if  (locale  ==  null)  {  	non-compiled	[CE]  illegal  start  of  type	31	None	replace
9	[BUG]  [BUGGY]    Object  locale  =  cDateTimeInstanceCache.get(key);  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]  Object  key  =  new  Pair(new  Integer(dateStyle),  new  Integer(timeStyle));  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  [BUGGY]    Object  locale  =  cDateTimeInstanceCache.get(key);  [BUGGY]  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	471	471	2	replace	    Object  locale  =  cDateTimeInstanceCache.get(key);		non-compiled	[CE]  illegal  start  of  type	32	None	add
10	[BUG]  [BUGGY]    Object  locale  =  getInstance(dateStyle,  timeStyle,  locale);  [CE]  illegal  start  of  type  [FE]      AssertionFailedError  [CONTEXT]  Object  key  =  new  Pair(new  Integer(dateStyle),  new  Integer(timeStyle));  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateTimeInstanceCache.get(key);  if  (format  ==  null)  {  [BUGGY]    Object  locale  =  getInstance(dateStyle,  timeStyle,  locale);  [BUGGY]  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	471	471	2	replace	    Object  locale  =  getInstance(dateStyle,  timeStyle,  locale);		non-compiled	[CE]  illegal  start  of  type	32	None	add
