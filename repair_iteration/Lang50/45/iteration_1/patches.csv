bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  cDateInstanceCache.put(key,  style);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {    [BUGGY]  cDateInstanceCache.put(key,  style);  [BUGGY]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  pattern  for  locale:     "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	296	296	2	replace	cDateInstanceCache.put(key,  style);	      cDateInstanceCache.put(key,    locale);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
2	[BUG]  [BUGGY]  cDateInstanceCache.put(key,  format);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {    [BUGGY]  cDateInstanceCache.put(key,  format);  [BUGGY]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  pattern  for  locale:     "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	296	296	2	replace	cDateInstanceCache.put(key,  format);	      cDateInstanceCache.put(key,    locale);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
3	[BUG]  [BUGGY]  cDateInstanceCache.put(key,  null);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {    [BUGGY]  cDateInstanceCache.put(key,  null);  [BUGGY]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  pattern  for  locale:     "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	296	296	2	replace	cDateInstanceCache.put(key,  null);	      cDateInstanceCache.put(key,    this);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
4	[BUG]  [BUGGY]  locale  =  Locale.getDefault();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {    [BUGGY]  locale  =  Locale.getDefault();  [BUGGY]    String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  pattern  for  locale:     "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	296	296	2	replace	locale  =  Locale.getDefault();	      	non-compiled	[CE]  <identifier>  expected	3	None	replace
5	[BUG]  [BUGGY]  String  key  =  getInstance(locale,  timeZone,  locale);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {    [BUGGY]  String  key  =  getInstance(locale,  timeZone,  locale);  [BUGGY]    String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  pattern  for  locale:     "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	296	296	2	replace	String  key  =  getInstance(locale,  timeZone,  locale);	      	non-compiled	[CE]  <identifier>  expected	3	None	replace
6	[BUG]  [BUGGY]  String  pattern  =  getInstance(locale,  timeZone,  locale);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {    [BUGGY]  String  pattern  =  getInstance(locale,  timeZone,  locale);  [BUGGY]    String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  pattern  for  locale:     "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	296	296	2	replace	String  pattern  =  getInstance(locale,  timeZone,  locale);	      	non-compiled	[CE]  <identifier>  expected	3	None	replace
7	[BUG]  [BUGGY]  SimpleDateFormat  formatter  =(SimpleDateFormat)dateFormat.getDateInstance(style,  timeZone,  locale);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {    [BUGGY]  SimpleDateFormat  formatter  =(SimpleDateFormat)dateFormat.getDateInstance(style,  timeZone,  locale);  [BUGGY]    String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  pattern  for  locale:     "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	296	296	2	replace	SimpleDateFormat  formatter  =(SimpleDateFormat)dateFormat.getDateInstance(style,  timeZone,  locale);	  SimpleDateFormat    formatter    =(SimpleDateFormat)DateFormat.getDateInstance(style,    timeZone);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
8	[BUG]  [BUGGY]  SimpleDateFormat  formatter  =(SimpleDateFormat)cDateInstanceCache.getDateInstance(style,  timeZone);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {    [BUGGY]  SimpleDateFormat  formatter  =(SimpleDateFormat)cDateInstanceCache.getDateInstance(style,  timeZone);  [BUGGY]    String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  pattern  for  locale:     "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	296	296	2	replace	SimpleDateFormat  formatter  =(SimpleDateFormat)cDateInstanceCache.getDateInstance(style,  timeZone);	  SimpleDateFormat    formatter    =(SimpleDateFormat)DateFormat.getDateInstance(style,    timeZone);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
9	[BUG]  [BUGGY]  String  style  =  cDateInstanceCache.get(key,  locale);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {    [BUGGY]  String  style  =  cDateInstanceCache.get(key,  locale);  [BUGGY]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  pattern  for  locale:     "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	296	296	2	replace	String  style  =  cDateInstanceCache.get(key,  locale);	      String    style    =    cDateInstanceCache.get(key);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
10	[BUG]  [BUGGY]  String  style  =  cDateInstanceCache.get(locale);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {    [BUGGY]  String  style  =  cDateInstanceCache.get(locale);  [BUGGY]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  pattern  for  locale:     "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	296	296	2	replace	String  style  =  cDateInstanceCache.get(locale);	      String    style    =    cDateInstanceCache.get(key);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
11	[BUG]  [BUGGY]  String  style  =  cDateInstanceCache.get(mStyle);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {    [BUGGY]  String  style  =  cDateInstanceCache.get(mStyle);  [BUGGY]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  pattern  for  locale:     "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	296	296	2	replace	String  style  =  cDateInstanceCache.get(mStyle);	      String    style    =    cDateInstanceCache.get(key);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
12	[BUG]  [BUGGY]  SimpleDateFormat  formatter  =(SimpleDateFormat)cDateInstanceCache.getDateInstance(style,  timeZone,  locale);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {    [BUGGY]  SimpleDateFormat  formatter  =(SimpleDateFormat)cDateInstanceCache.getDateInstance(style,  timeZone,  locale);  [BUGGY]    String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  pattern  for  locale:     "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	296	296	2	replace	SimpleDateFormat  formatter  =(SimpleDateFormat)cDateInstanceCache.getDateInstance(style,  timeZone,  locale);	  SimpleDateFormat    formatter    =(SimpleDateFormat)DateFormat.getDateInstance(style,    timeZone,    locale);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
13	[BUG]  [BUGGY]  SimpleDateFormat  formatter  =(SimpleDateFormat)locale.getDateInstance(style,  timeZone,  locale);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {    [BUGGY]  SimpleDateFormat  formatter  =(SimpleDateFormat)locale.getDateInstance(style,  timeZone,  locale);  [BUGGY]    String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  pattern  for  locale:     "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	296	296	2	replace	SimpleDateFormat  formatter  =(SimpleDateFormat)locale.getDateInstance(style,  timeZone,  locale);	  SimpleDateFormat    formatter    =(SimpleDateFormat)DateFormat.getDateInstance(style,    timeZone,    locale);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
14	[BUG]  [BUGGY]  Style  style  =  cDateInstanceCache.get(locale);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {    [BUGGY]  Style  style  =  cDateInstanceCache.get(locale);  [BUGGY]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  pattern  for  locale:     "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	296	296	2	replace	Style  style  =  cDateInstanceCache.get(locale);	      Style    style    =    cDateInstanceCache.get(style);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
15	[BUG]  [BUGGY]  Style  style  =  cDateInstanceCache.get(style,  locale);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {    [BUGGY]  Style  style  =  cDateInstanceCache.get(style,  locale);  [BUGGY]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  pattern  for  locale:     "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	296	296	2	replace	Style  style  =  cDateInstanceCache.get(style,  locale);	      Style    style    =    cDateInstanceCache.get(style);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
16	[BUG]  [BUGGY]  Style  style  =  cDateInstanceCache.get(mStyle);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {    [BUGGY]  Style  style  =  cDateInstanceCache.get(mStyle);  [BUGGY]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  pattern  for  locale:     "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	296	296	2	replace	Style  style  =  cDateInstanceCache.get(mStyle);	      Style    style    =    cDateInstanceCache.get(style);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
17	[BUG]  [BUGGY]  String  style  =  getInstance(pattern,  timeZone,  locale);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {    [BUGGY]  String  style  =  getInstance(pattern,  timeZone,  locale);  [BUGGY]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  pattern  for  locale:     "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	296	296	2	replace	String  style  =  getInstance(pattern,  timeZone,  locale);	      String    style    =    getInstance(style,    timeZone,    locale);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
18	[BUG]  [BUGGY]  String  style  =  getInstance(locale,  timeZone,  locale);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {    [BUGGY]  String  style  =  getInstance(locale,  timeZone,  locale);  [BUGGY]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  pattern  for  locale:     "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	296	296	2	replace	String  style  =  getInstance(locale,  timeZone,  locale);	      String    style    =    getInstance(style,    timeZone,    locale);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
19	[BUG]  [BUGGY]  String  style  =  getInstance(locale,  timeZone,  style);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {    [BUGGY]  String  style  =  getInstance(locale,  timeZone,  style);  [BUGGY]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  pattern  for  locale:     "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	296	296	2	replace	String  style  =  getInstance(locale,  timeZone,  style);	      String    style    =    getInstance(style,    timeZone,    locale);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
20	[BUG]  [BUGGY]  Style  style  =  getInstance(pattern,  timeZone,  locale);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {    [BUGGY]  Style  style  =  getInstance(pattern,  timeZone,  locale);  [BUGGY]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  pattern  for  locale:     "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	296	296	2	replace	Style  style  =  getInstance(pattern,  timeZone,  locale);	      Style    style    =    getInstance(style,    timeZone,    locale);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
21	[BUG]  [BUGGY]  Style  style  =  getInstance(locale,  timeZone,  locale);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {    [BUGGY]  Style  style  =  getInstance(locale,  timeZone,  locale);  [BUGGY]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  pattern  for  locale:     "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	296	296	2	replace	Style  style  =  getInstance(locale,  timeZone,  locale);	      Style    style    =    getInstance(style,    timeZone,    locale);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
22	[BUG]  [BUGGY]  Style  style  =  cDateInstanceCache.get(key,  locale);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {    [BUGGY]  Style  style  =  cDateInstanceCache.get(key,  locale);  [BUGGY]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  pattern  for  locale:     "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	296	296	2	replace	Style  style  =  cDateInstanceCache.get(key,  locale);	      Style    style    =    cDateInstanceCache.get(key);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
23	[BUG]  [BUGGY]  Style  style  =  cDateInstanceCache.get(timeZone);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {    [BUGGY]  Style  style  =  cDateInstanceCache.get(timeZone);  [BUGGY]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  pattern  for  locale:     "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	296	296	2	replace	Style  style  =  cDateInstanceCache.get(timeZone);	      Style    style    =    cDateInstanceCache.get(key);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
24	[BUG]  [BUGGY]  Locale  locale  =  cDateInstanceCache.get(key);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {    [BUGGY]  Locale  locale  =  cDateInstanceCache.get(key);  [BUGGY]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  pattern  for  locale:     "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	296	296	2	replace	Locale  locale  =  cDateInstanceCache.get(key);	      Locale    locale    =    Locale.getDefault();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
25	[BUG]  [BUGGY]  Locale  locale  =(Locale)cDateInstanceCache.get(locale);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {    [BUGGY]  Locale  locale  =(Locale)cDateInstanceCache.get(locale);  [BUGGY]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  pattern  for  locale:     "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	296	296	2	replace	Locale  locale  =(Locale)cDateInstanceCache.get(locale);	      Locale    locale    =    Locale.getDefault();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
26	[BUG]  [BUGGY]  Locale  locale  =  cDateInstanceCache.get(locale);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {    [BUGGY]  Locale  locale  =  cDateInstanceCache.get(locale);  [BUGGY]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  pattern  for  locale:     "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	296	296	2	replace	Locale  locale  =  cDateInstanceCache.get(locale);	      Locale    locale    =    Locale.getDefault();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
27	[BUG]  [BUGGY]  Style  style  =  getInstance(pattern,  TimeZone,  locale);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {    [BUGGY]  Style  style  =  getInstance(pattern,  TimeZone,  locale);  [BUGGY]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  pattern  for  locale:     "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	296	296	2	replace	Style  style  =  getInstance(pattern,  TimeZone,  locale);	      Style    style    =    getInstance(style,    timeZone,    locale);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
28	[BUG]  [BUGGY]  Style  style  =  getInstance(locale,  timeZone,  style);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {    [BUGGY]  Style  style  =  getInstance(locale,  timeZone,  style);  [BUGGY]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  pattern  for  locale:     "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	296	296	2	replace	Style  style  =  getInstance(locale,  timeZone,  style);	      Style    style    =    getInstance(style,    timeZone,    locale);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
29	[BUG]  [BUGGY]  SimpleDateFormat  formatter  =(SimpleDateFormat)DateFormat.getDateInstance(style,  timeZone  -  1);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {    [BUGGY]  SimpleDateFormat  formatter  =(SimpleDateFormat)DateFormat.getDateInstance(style,  timeZone  -  1);  [BUGGY]    String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  pattern  for  locale:     "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	296	296	2	replace	SimpleDateFormat  formatter  =(SimpleDateFormat)DateFormat.getDateInstance(style,  timeZone  -  1);	  SimpleDateFormat    formatter    =(SimpleDateFormat)DateFormat.getDateInstance(style,    timeZone);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
30	[BUG]  [BUGGY]  SimpleDateFormat  formatter  =(SimpleDateFormat)DateFormat.getDateInstance(style,  timeZone  +  1);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {    [BUGGY]  SimpleDateFormat  formatter  =(SimpleDateFormat)DateFormat.getDateInstance(style,  timeZone  +  1);  [BUGGY]    String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  pattern  for  locale:     "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	296	296	2	replace	SimpleDateFormat  formatter  =(SimpleDateFormat)DateFormat.getDateInstance(style,  timeZone  +  1);	  SimpleDateFormat    formatter    =(SimpleDateFormat)DateFormat.getDateInstance(style,    timeZone);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
31	[BUG]  [BUGGY]  Locale  locale  =  DateFormat.getLocale(locale);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {    [BUGGY]  Locale  locale  =  DateFormat.getLocale(locale);  [BUGGY]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  pattern  for  locale:     "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	296	296	2	replace	Locale  locale  =  DateFormat.getLocale(locale);	      Locale    locale    =    Locale.getDefault();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
32	[BUG]  [BUGGY]  Locale  locale  =(Locale)locale.clone();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {    [BUGGY]  Locale  locale  =(Locale)locale.clone();  [BUGGY]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  pattern  for  locale:     "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	296	296	2	replace	Locale  locale  =(Locale)locale.clone();	      Locale    locale    =    Locale.getDefault();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
33	[BUG]  [BUGGY]  String  style  =  getInstance(path,  timeZone,  locale);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {    [BUGGY]  String  style  =  getInstance(path,  timeZone,  locale);  [BUGGY]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  pattern  for  locale:     "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	296	296	2	replace	String  style  =  getInstance(path,  timeZone,  locale);	      String    style    =    getInstance(style,    timeZone,    locale);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
34	[BUG]  [BUGGY]  SimpleDateFormat  formatter  =(SimpleDateFormat)DateFormat.getDateInstance(style,  locale,  timeZone);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {    [BUGGY]  SimpleDateFormat  formatter  =(SimpleDateFormat)DateFormat.getDateInstance(style,  locale,  timeZone);  [BUGGY]    String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  pattern  for  locale:     "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	296	296	2	replace	SimpleDateFormat  formatter  =(SimpleDateFormat)DateFormat.getDateInstance(style,  locale,  timeZone);	  SimpleDateFormat    formatter    =(SimpleDateFormat)DateFormat.getDateInstance(style,    timeZone,    locale);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
35	[BUG]  [BUGGY]  cDateInstanceCache.put(key,  new  Pair(style,  locale));  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {    [BUGGY]  cDateInstanceCache.put(key,  new  Pair(style,  locale));  [BUGGY]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  pattern  for  locale:     "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	296	296	2	replace	cDateInstanceCache.put(key,  new  Pair(style,  locale));	      cDateInstanceCache.put(key,    locale);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
36	[BUG]  [BUGGY]  cDateInstanceCache.put(key,  new  FastDateFormat(style,  locale));  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {    [BUGGY]  cDateInstanceCache.put(key,  new  FastDateFormat(style,  locale));  [BUGGY]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  pattern  for  locale:     "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	296	296	2	replace	cDateInstanceCache.put(key,  new  FastDateFormat(style,  locale));	      cDateInstanceCache.put(key,    this);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
37	[BUG]  [BUGGY]  if(locale  ==  null)  {  locale  =  Locale.getDefault();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {    [BUGGY]  if(locale  ==  null)  {  locale  =  Locale.getDefault();  }  [BUGGY]    String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  pattern  for  locale:     "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	296	296	2	replace	if(locale  ==  null)  {  locale  =  Locale.getDefault();  }	      	non-compiled	[CE]  <identifier>  expected	3	None	replace
38	[BUG]  [BUGGY]  String  value  =  cDateInstanceCache.get(key);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {    [BUGGY]  String  value  =  cDateInstanceCache.get(key);  [BUGGY]    String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  pattern  for  locale:     "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	296	296	2	replace	String  value  =  cDateInstanceCache.get(key);	      	non-compiled	[CE]  <identifier>  expected	3	None	replace
39	[BUG]  [BUGGY]  String  style  =  cDateInstanceCache.get(timeZone);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {    [BUGGY]  String  style  =  cDateInstanceCache.get(timeZone);  [BUGGY]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  pattern  for  locale:     "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	296	296	2	replace	String  style  =  cDateInstanceCache.get(timeZone);	      String    style    =    cDateInstanceCache.get(key);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
40	[BUG]  [BUGGY]  Style  style  =  cDateInstanceCache.get(mDaylight);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {    [BUGGY]  Style  style  =  cDateInstanceCache.get(mDaylight);  [BUGGY]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  pattern  for  locale:     "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	296	296	2	replace	Style  style  =  cDateInstanceCache.get(mDaylight);	      Style    style    =    cDateInstanceCache.get(style);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
41	[BUG]  [BUGGY]  Locale  locale  =(Locale)cDateInstanceCache.get(key);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {    [BUGGY]  Locale  locale  =(Locale)cDateInstanceCache.get(key);  [BUGGY]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  pattern  for  locale:     "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	296	296	2	replace	Locale  locale  =(Locale)cDateInstanceCache.get(key);	      Locale    locale    =    Locale.getDefault();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
42	[BUG]  [BUGGY]  Locale  locale  =(locale  ==  null)?  Locale.getDefault()  :  Locale.getDefault();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {    [BUGGY]  Locale  locale  =(locale  ==  null)?  Locale.getDefault()  :  Locale.getDefault();  [BUGGY]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  pattern  for  locale:     "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	296	296	2	replace	Locale  locale  =(locale  ==  null)?  Locale.getDefault()  :  Locale.getDefault();	      Locale    locale    =    Locale.getDefault();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
43	[BUG]  [BUGGY]  Style  style  =  getInstance(path,  timeZone,  locale);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {    [BUGGY]  Style  style  =  getInstance(path,  timeZone,  locale);  [BUGGY]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  pattern  for  locale:     "  +  locale);  }  }  return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	296	296	2	replace	Style  style  =  getInstance(path,  timeZone,  locale);	      Style    style    =    getInstance(style,    timeZone,    locale);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
