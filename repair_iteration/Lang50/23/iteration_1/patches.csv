bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  cDateTimeInstanceCache.getInstance(dateStyle,  timeStyle,  locale);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  return  cDateTimeInstanceCache.getInstance(dateStyle,  timeStyle,  locale);  [BUGGY]    }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	return  cDateTimeInstanceCache.getInstance(dateStyle,  timeStyle,  locale);	  return    format.getInstance(timeStyle,    timeStyle,    locale);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
2	[BUG]  [BUGGY]  return  cDateTimeInstanceCache.getInstance(timeStyle,  timeStyle,  locale);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  return  cDateTimeInstanceCache.getInstance(timeStyle,  timeStyle,  locale);  [BUGGY]    }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	return  cDateTimeInstanceCache.getInstance(timeStyle,  timeStyle,  locale);	  return    format.getInstance(timeStyle,    timeStyle,    locale);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
3	[BUG]  [BUGGY]  return  this.format.getInstance(dateStyle,  timeStyle,  locale);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  return  this.format.getInstance(dateStyle,  timeStyle,  locale);  [BUGGY]    }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	return  this.format.getInstance(dateStyle,  timeStyle,  locale);	  return    format.getInstance(timeStyle,    timeStyle,    locale);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
4	[BUG]  [BUGGY]  return  format.withValue(mValues[0],  value);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  return  format.withValue(mValues[0],  value);  [BUGGY]    }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	return  format.withValue(mValues[0],  value);	  return    format.withValue(mValues[0]);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
5	[BUG]  [BUGGY]  return  format.withValue(mValues,  values[0]);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  return  format.withValue(mValues,  values[0]);  [BUGGY]    }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	return  format.withValue(mValues,  values[0]);	  return    format.withValue(mValues[0]);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
6	[BUG]  [BUGGY]  return  format.withValue(mValues[0],  values[1]);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  return  format.withValue(mValues[0],  values[1]);  [BUGGY]    }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	return  format.withValue(mValues[0],  values[1]);	  return    format.withValue(mValues[0]);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
7	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  values.length;  ++i)  {  mRules[i]  =  mRules[i];  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  For(int  i  =  0;  i  <  values.length;  ++i)  {  mRules[i]  =  mRules[i];  }  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	For(int  i  =  0;  i  <  values.length;  ++i)  {  mRules[i]  =  mRules[i];  }	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    values.length;    ++i)    {    mRules[i]    =    mRules[i];    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.length;  ++i)  {  mRules[i]  =  mRules[i];  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  for(int  i  =  0;  i  <  values.length;  ++i)  {  mRules[i]  =  mRules[i];  }  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	for(int  i  =  0;  i  <  values.length;  ++i)  {  mRules[i]  =  mRules[i];  }	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    values.length;    ++i)    {    mRules[i]    =    mRules[i];    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
9	[BUG]  [BUGGY]  mRules[i]  =  mRules[i];  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  mRules[i]  =  mRules[i];  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	mRules[i]  =  mRules[i];	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    values.length;    ++i)    {    mRules[i]    =    mRules[i];    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
10	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  values.length;  ++i)  {  mRules[i]  =  mRules[i].toString();  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  For(int  i  =  0;  i  <  values.length;  ++i)  {  mRules[i]  =  mRules[i].toString();  }  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	For(int  i  =  0;  i  <  values.length;  ++i)  {  mRules[i]  =  mRules[i].toString();  }	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    values.length;    ++i)    {    mRules[i]    =    mRules[i];    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
11	[BUG]  [BUGGY]  cDateTimeInstanceCache.put(key,  value,  format);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  cDateTimeInstanceCache.put(key,  value,  format);  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	cDateTimeInstanceCache.put(key,  value,  format);	      cDateTimeInstanceCache.put(key,    value);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
12	[BUG]  [BUGGY]  cDateTimeInstanceCache.put(mValues,  value);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  cDateTimeInstanceCache.put(mValues,  value);  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	cDateTimeInstanceCache.put(mValues,  value);	      cDateTimeInstanceCache.put(key,    value);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
13	[BUG]  [BUGGY]  cDateTimeInstanceCache.put(mValue,  value);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  cDateTimeInstanceCache.put(mValue,  value);  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	cDateTimeInstanceCache.put(mValue,  value);	      cDateTimeInstanceCache.put(key,    value);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
14	[BUG]  [BUGGY]  return  mValues.withValue(values[0]);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  return  mValues.withValue(values[0]);  [BUGGY]    }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	return  mValues.withValue(values[0]);	  return    format.withValue(values[0]);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
15	[BUG]  [BUGGY]  return  format  ==  null?  INSTANCE  :  new  FastDateFormat(String.valueOf(mValues));  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  return  format  ==  null?  INSTANCE  :  new  FastDateFormat(String.valueOf(mValues));  [BUGGY]    }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	return  format  ==  null?  INSTANCE  :  new  FastDateFormat(String.valueOf(mValues));	  return    format    ==    null?    INSTANCE    :    new    FastDateFormat(String.valueOf(mValue));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
16	[BUG]  [BUGGY]  return  format  ==  null?  INSTANCE  :  new  FastDateFormat(String.valueOf(mValue),  locale);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  return  format  ==  null?  INSTANCE  :  new  FastDateFormat(String.valueOf(mValue),  locale);  [BUGGY]    }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	return  format  ==  null?  INSTANCE  :  new  FastDateFormat(String.valueOf(mValue),  locale);	  return    format    ==    null?    INSTANCE    :    new    FastDateFormat(String.valueOf(mValue));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
17	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  values.length;  i++)  {  cDateTimeInstanceCache.put(key,  value);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  For(int  i  =  0;  i  <  values.length;  i++)  {  cDateTimeInstanceCache.put(key,  value);  }  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	For(int  i  =  0;  i  <  values.length;  i++)  {  cDateTimeInstanceCache.put(key,  value);  }	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    cDateTimeInstanceCache.put(key,    value);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
18	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.length;  i++)  {  cDateTimeInstanceCache.put(key,  value);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  for(int  i  =  0;  i  <  values.length;  i++)  {  cDateTimeInstanceCache.put(key,  value);  }  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	for(int  i  =  0;  i  <  values.length;  i++)  {  cDateTimeInstanceCache.put(key,  value);  }	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    cDateTimeInstanceCache.put(key,    value);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
19	[BUG]  [BUGGY]  Format  <  String,String>  mRules  =  cDateTimeInstanceCache.get(key);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  Format  <  String,String>  mRules  =  cDateTimeInstanceCache.get(key);  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	Format  <  String,String>  mRules  =  cDateTimeInstanceCache.get(key);	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    cDateTimeInstanceCache.put(key,    value);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
20	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  values.length;  i++)  {  this.cDateTimeInstanceCache.put(key,  value);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  For(int  i  =  0;  i  <  values.length;  i++)  {  this.cDateTimeInstanceCache.put(key,  value);  }  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	For(int  i  =  0;  i  <  values.length;  i++)  {  this.cDateTimeInstanceCache.put(key,  value);  }	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    cDateTimeInstanceCache.put(key,    value);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
21	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  values.size();  ++i)  {  mRules[i]  =  mRules[i];  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  For(int  i  =  0;  i  <  values.size();  ++i)  {  mRules[i]  =  mRules[i];  }  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	For(int  i  =  0;  i  <  values.size();  ++i)  {  mRules[i]  =  mRules[i];  }	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    mRules[i]    =    mRules[i];    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
22	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.size();  ++i)  {  mRules[i]  =  mRules[i];  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  for(int  i  =  0;  i  <  values.size();  ++i)  {  mRules[i]  =  mRules[i];  }  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	for(int  i  =  0;  i  <  values.size();  ++i)  {  mRules[i]  =  mRules[i];  }	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    mRules[i]    =    mRules[i];    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
23	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  values.size();  ++i)  {  mRules[i]  =  mRules[i].toLowerCase();  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  For(int  i  =  0;  i  <  values.size();  ++i)  {  mRules[i]  =  mRules[i].toLowerCase();  }  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	For(int  i  =  0;  i  <  values.size();  ++i)  {  mRules[i]  =  mRules[i].toLowerCase();  }	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    mRules[i]    =    mRules[i];    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
24	[BUG]  [BUGGY]  return  format!=  null?  INSTANCE_NO_COLON  :  format;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  return  format!=  null?  INSTANCE_NO_COLON  :  format;  [BUGGY]    }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	return  format!=  null?  INSTANCE_NO_COLON  :  format;	  return    format!=    null?    INSTANCE    :    format;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
25	[BUG]  [BUGGY]  return  format  ==  null?  INSTANCE_NO_COLON  :  format;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  return  format  ==  null?  INSTANCE_NO_COLON  :  format;  [BUGGY]    }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	return  format  ==  null?  INSTANCE_NO_COLON  :  format;	  return    format!=    null?    INSTANCE    :    format;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
26	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  values.length;  ++i)  {  mRules[i]  =  mRules[i].getValue();  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  For(int  i  =  0;  i  <  values.length;  ++i)  {  mRules[i]  =  mRules[i].getValue();  }  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	For(int  i  =  0;  i  <  values.length;  ++i)  {  mRules[i]  =  mRules[i].getValue();  }	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    values.length;    ++i)    {    mRules[i]    =    mRules[i].getValue();    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
27	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.length;  ++i)  {  mRules[i]  =  mRules[i].getValue();  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  for(int  i  =  0;  i  <  values.length;  ++i)  {  mRules[i]  =  mRules[i].getValue();  }  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	for(int  i  =  0;  i  <  values.length;  ++i)  {  mRules[i]  =  mRules[i].getValue();  }	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    values.length;    ++i)    {    mRules[i]    =    mRules[i].getValue();    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
28	[BUG]  [BUGGY]  mRules[i]  =  mRules[i].getValue();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  mRules[i]  =  mRules[i].getValue();  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	mRules[i]  =  mRules[i].getValue();	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    values.length;    ++i)    {    mRules[i]    =    mRules[i].getValue();    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
29	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  values.length;  ++i)  {  mRules[i]  =  mRules[i].getKey();  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  For(int  i  =  0;  i  <  values.length;  ++i)  {  mRules[i]  =  mRules[i].getKey();  }  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	For(int  i  =  0;  i  <  values.length;  ++i)  {  mRules[i]  =  mRules[i].getKey();  }	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    values.length;    ++i)    {    mRules[i]    =    mRules[i].getValue();    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
30	[BUG]  [BUGGY]  String  value  =  cDateTimeInstanceCache.get(mValue);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  String  value  =  cDateTimeInstanceCache.get(mValue);  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	String  value  =  cDateTimeInstanceCache.get(mValue);	      String    value    =    cDateTimeInstanceCache.get(key);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
31	[BUG]  [BUGGY]  String  value  =  cDateTimeInstanceCache.get(mValues);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  String  value  =  cDateTimeInstanceCache.get(mValues);  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	String  value  =  cDateTimeInstanceCache.get(mValues);	      String    value    =    cDateTimeInstanceCache.get(key);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
32	[BUG]  [BUGGY]  String  value  =  cDateTimeInstanceCache.get(values);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  String  value  =  cDateTimeInstanceCache.get(values);  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	String  value  =  cDateTimeInstanceCache.get(values);	      String    value    =    cDateTimeInstanceCache.get(key);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
33	[BUG]  [BUGGY]  cDateTimeInstanceCache.put(timeStyle,  this);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  cDateTimeInstanceCache.put(timeStyle,  this);  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	cDateTimeInstanceCache.put(timeStyle,  this);	      cDateTimeInstanceCache.put(key,    this);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
34	[BUG]  [BUGGY]  cDateTimeInstanceCache.put(key,  new  DateTimeInstance(dateStyle,  timeStyle,  locale));  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  cDateTimeInstanceCache.put(key,  new  DateTimeInstance(dateStyle,  timeStyle,  locale));  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	cDateTimeInstanceCache.put(key,  new  DateTimeInstance(dateStyle,  timeStyle,  locale));	      cDateTimeInstanceCache.put(key,    this);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
35	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  values.length;  ++i)  {  mRules[i]  =  mRules[i].toPattern();  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  For(int  i  =  0;  i  <  values.length;  ++i)  {  mRules[i]  =  mRules[i].toPattern();  }  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	For(int  i  =  0;  i  <  values.length;  ++i)  {  mRules[i]  =  mRules[i].toPattern();  }	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    values.length;    ++i)    {    mRules[i]    =    mRules[i].toPattern();    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
36	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.length;  ++i)  {  mRules[i]  =  mRules[i].toPattern();  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  for(int  i  =  0;  i  <  values.length;  ++i)  {  mRules[i]  =  mRules[i].toPattern();  }  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	for(int  i  =  0;  i  <  values.length;  ++i)  {  mRules[i]  =  mRules[i].toPattern();  }	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    values.length;    ++i)    {    mRules[i]    =    mRules[i].toPattern();    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
37	[BUG]  [BUGGY]  mRules[i]  =  mRules[i].toPattern();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  mRules[i]  =  mRules[i].toPattern();  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	mRules[i]  =  mRules[i].toPattern();	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    values.length;    ++i)    {    mRules[i]    =    mRules[i].toPattern();    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
38	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  values.length;  ++i)  {  for(int  i  =  0;  i  <  values.length;  ++i)  {  mRules[i]  =  mRules[i].toPattern();  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  For(int  i  =  0;  i  <  values.length;  ++i)  {  for(int  i  =  0;  i  <  values.length;  ++i)  {  mRules[i]  =  mRules[i].toPattern();  }  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	For(int  i  =  0;  i  <  values.length;  ++i)  {  for(int  i  =  0;  i  <  values.length;  ++i)  {  mRules[i]  =  mRules[i].toPattern();  }	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    values.length;    ++i)    {    mRules[i]    =    mRules[i].toPattern();    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
39	[BUG]  [BUGGY]  cDateTimeInstanceCache.put(dateStyle,  format);  break;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  cDateTimeInstanceCache.put(dateStyle,  format);  break;  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	cDateTimeInstanceCache.put(dateStyle,  format);  break;	      cDateTimeInstanceCache.put(key,    format);    break;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
40	[BUG]  [BUGGY]  cDateTimeInstanceCache.put(timeStyle,  format);  break;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  cDateTimeInstanceCache.put(timeStyle,  format);  break;  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	cDateTimeInstanceCache.put(timeStyle,  format);  break;	      cDateTimeInstanceCache.put(key,    format);    break;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
41	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  mRules.size();  i++)  {  cDateTimeInstanceCache.put(key,  this);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  For(int  i  =  0;  i  <  mRules.size();  i++)  {  cDateTimeInstanceCache.put(key,  this);  }  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	For(int  i  =  0;  i  <  mRules.size();  i++)  {  cDateTimeInstanceCache.put(key,  this);  }	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    mRules.size();    i++)    {    cDateTimeInstanceCache.put(key,    this);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
42	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  mRules.size();  i++)  {  cDateTimeInstanceCache.put(key,  this);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  for(int  i  =  0;  i  <  mRules.size();  i++)  {  cDateTimeInstanceCache.put(key,  this);  }  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	for(int  i  =  0;  i  <  mRules.size();  i++)  {  cDateTimeInstanceCache.put(key,  this);  }	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    mRules.size();    i++)    {    cDateTimeInstanceCache.put(key,    this);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
43	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cDateTimeInstanceCache.size();  i++)  {  cDateTimeInstanceCache.put(key,  this);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  for(int  i  =  0;  i  <  cDateTimeInstanceCache.size();  i++)  {  cDateTimeInstanceCache.put(key,  this);  }  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	for(int  i  =  0;  i  <  cDateTimeInstanceCache.size();  i++)  {  cDateTimeInstanceCache.put(key,  this);  }	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    mRules.size();    i++)    {    cDateTimeInstanceCache.put(key,    this);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
44	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  cDateTimeInstanceCache.size();  i++)  {  cDateTimeInstanceCache.put(key,  this);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  For(int  i  =  0;  i  <  cDateTimeInstanceCache.size();  i++)  {  cDateTimeInstanceCache.put(key,  this);  }  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	For(int  i  =  0;  i  <  cDateTimeInstanceCache.size();  i++)  {  cDateTimeInstanceCache.put(key,  this);  }	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    mRules.size();    i++)    {    cDateTimeInstanceCache.put(key,    this);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
45	[BUG]  [BUGGY]  return  INSTANCE_NO_COLON;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  return  INSTANCE_NO_COLON;  [BUGGY]    }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	return  INSTANCE_NO_COLON;	  return    INSTANCE;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
46	[BUG]  [BUGGY]  return  INSTANCE_NO_COLON.getValue();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  return  INSTANCE_NO_COLON.getValue();  [BUGGY]    }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	return  INSTANCE_NO_COLON.getValue();	  return    INSTANCE;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
47	[BUG]  [BUGGY]  return  INSTANCE_NO_COLON.toString();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  return  INSTANCE_NO_COLON.toString();  [BUGGY]    }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	return  INSTANCE_NO_COLON.toString();	  return    INSTANCE;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
48	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  mRules.size();  i++)  {  cDateTimeInstanceCache.put(key,  format);  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  For(int  i  =  0;  i  <  mRules.size();  i++)  {  cDateTimeInstanceCache.put(key,  format);  }  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	For(int  i  =  0;  i  <  mRules.size();  i++)  {  cDateTimeInstanceCache.put(key,  format);  }	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    mRules.size();    i++)    {    cDateTimeInstanceCache.put(key,    format);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
49	[BUG]  [BUGGY]  Format  cDateTimeInstanceCache.put(key,  format);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  Format  cDateTimeInstanceCache.put(key,  format);  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	Format  cDateTimeInstanceCache.put(key,  format);	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    mRules.size();    i++)    {    cDateTimeInstanceCache.put(key,    format);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
50	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  mRules.size();  i++)  {  format  =  cDateTimeInstanceCache.put(key,  format);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  For(int  i  =  0;  i  <  mRules.size();  i++)  {  format  =  cDateTimeInstanceCache.put(key,  format);  }  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	For(int  i  =  0;  i  <  mRules.size();  i++)  {  format  =  cDateTimeInstanceCache.put(key,  format);  }	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    mRules.size();    i++)    {    cDateTimeInstanceCache.put(key,    format);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
51	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  values.length;  i++)  {  cDateTimeInstanceCache.put(key,  format);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  For(int  i  =  0;  i  <  values.length;  i++)  {  cDateTimeInstanceCache.put(key,  format);  }  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	For(int  i  =  0;  i  <  values.length;  i++)  {  cDateTimeInstanceCache.put(key,  format);  }	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    cDateTimeInstanceCache.put(key,    format);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
52	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  values.length;  i++)  {  format  =  cDateTimeInstanceCache.put(key,  format);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  For(int  i  =  0;  i  <  values.length;  i++)  {  format  =  cDateTimeInstanceCache.put(key,  format);  }  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	For(int  i  =  0;  i  <  values.length;  i++)  {  format  =  cDateTimeInstanceCache.put(key,  format);  }	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    cDateTimeInstanceCache.put(key,    format);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
53	[BUG]  [BUGGY]  Format  <  String,Object>  mRules  =  cDateTimeInstanceCache.get(key);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  Format  <  String,Object>  mRules  =  cDateTimeInstanceCache.get(key);  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	Format  <  String,Object>  mRules  =  cDateTimeInstanceCache.get(key);	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    cDateTimeInstanceCache.put(key,    format);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
54	[BUG]  [BUGGY]  return  format.getInstance(dateStyle,  timeStyle,  locale,  mMaxLengthEstimate);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  return  format.getInstance(dateStyle,  timeStyle,  locale,  mMaxLengthEstimate);  [BUGGY]    }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	return  format.getInstance(dateStyle,  timeStyle,  locale,  mMaxLengthEstimate);	  return    format.getInstance(dateStyle,    timeStyle,    locale);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
55	[BUG]  [BUGGY]  return  format.getInstance(locale,  timeStyle,  dateStyle);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  return  format.getInstance(locale,  timeStyle,  dateStyle);  [BUGGY]    }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	return  format.getInstance(locale,  timeStyle,  dateStyle);	  return    format.getInstance(dateStyle,    timeStyle,    locale);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
56	[BUG]  [BUGGY]  return  cDateTimeInstanceCache.getInstance(mDaylight,  timeStyle,  locale);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  return  cDateTimeInstanceCache.getInstance(mDaylight,  timeStyle,  locale);  [BUGGY]    }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	return  cDateTimeInstanceCache.getInstance(mDaylight,  timeStyle,  locale);	  return    format.getInstance(mDaylight,    timeStyle,    locale);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
57	[BUG]  [BUGGY]  return  cDateTimeInstanceCache.getInstance(mDaylight,  dateStyle,  timeStyle,  locale);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  return  cDateTimeInstanceCache.getInstance(mDaylight,  dateStyle,  timeStyle,  locale);  [BUGGY]    }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	return  cDateTimeInstanceCache.getInstance(mDaylight,  dateStyle,  timeStyle,  locale);	  return    format.getInstance(mDaylight,    timeStyle,    locale);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
58	[BUG]  [BUGGY]  return  cDateTimeInstanceCache.getInstance();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  return  cDateTimeInstanceCache.getInstance();  [BUGGY]    }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	return  cDateTimeInstanceCache.getInstance();	  return    format.getInstance();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
59	[BUG]  [BUGGY]  return  cDateTimeInstanceCache.getInstance(key,  format);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  return  cDateTimeInstanceCache.getInstance(key,  format);  [BUGGY]    }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	return  cDateTimeInstanceCache.getInstance(key,  format);	  return    format.getInstance();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
60	[BUG]  [BUGGY]  cDateTimeInstanceCache.put(dateStyle,  format);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  cDateTimeInstanceCache.put(dateStyle,  format);  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	cDateTimeInstanceCache.put(dateStyle,  format);	      cDateTimeInstanceCache.put(key,    format);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
61	[BUG]  [BUGGY]  cDateTimeInstanceCache.put(key,  format,  locale);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  cDateTimeInstanceCache.put(key,  format,  locale);  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	cDateTimeInstanceCache.put(key,  format,  locale);	      cDateTimeInstanceCache.put(key,    format);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
62	[BUG]  [BUGGY]  cDateTimeInstanceCache.put(timeStyle,  format);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  cDateTimeInstanceCache.put(timeStyle,  format);  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	cDateTimeInstanceCache.put(timeStyle,  format);	      cDateTimeInstanceCache.put(key,    format);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
63	[BUG]  [BUGGY]  return  cDateTimeInstanceCache.getInstance(mValues,  dateStyle,  timeStyle,  locale);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  return  cDateTimeInstanceCache.getInstance(mValues,  dateStyle,  timeStyle,  locale);  [BUGGY]    }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	return  cDateTimeInstanceCache.getInstance(mValues,  dateStyle,  timeStyle,  locale);	  return    format.getInstance(mDaylight,    timeStyle,    locale);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
64	[BUG]  [BUGGY]  mRules  =  mRules[i].toPattern();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  mRules  =  mRules[i].toPattern();  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	mRules  =  mRules[i].toPattern();	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    values.length;    ++i)    {    mRules[i]    =    mRules[i].toPattern();    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
65	[BUG]  [BUGGY]  mRules[i]  =  getInstance(dateStyle,  timeStyle,  locale);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  mRules[i]  =  getInstance(dateStyle,  timeStyle,  locale);  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	mRules[i]  =  getInstance(dateStyle,  timeStyle,  locale);	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    values.length;    ++i)    {    mRules[i]    =    mRules[i].toPattern();    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
66	[BUG]  [BUGGY]  cDateTimeInstanceCache.put(date,  format);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  cDateTimeInstanceCache.put(date,  format);  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	cDateTimeInstanceCache.put(date,  format);	      cDateTimeInstanceCache.put(key,    format);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
67	[BUG]  [BUGGY]  return  format.getInstance(timeZone,  locale);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  return  format.getInstance(timeZone,  locale);  [BUGGY]    }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	return  format.getInstance(timeZone,  locale);	  return    format.getInstance();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
68	[BUG]  [BUGGY]  return  cDateTimeInstanceCache.get(key,  INSTANCE_NO_COLON);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  return  cDateTimeInstanceCache.get(key,  INSTANCE_NO_COLON);  [BUGGY]    }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	return  cDateTimeInstanceCache.get(key,  INSTANCE_NO_COLON);	  return    INSTANCE;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
69	[BUG]  [BUGGY]  return  cDateTimeInstanceCache.get(key);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  return  cDateTimeInstanceCache.get(key);  [BUGGY]    }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	return  cDateTimeInstanceCache.get(key);	  return    INSTANCE;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
70	[BUG]  [BUGGY]  Integer  cDateTimeInstanceCache.put(key,  this);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  Integer  cDateTimeInstanceCache.put(key,  this);  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	Integer  cDateTimeInstanceCache.put(key,  this);	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    mRules.size();    i++)    {    cDateTimeInstanceCache.put(key,    this);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
71	[BUG]  [BUGGY]  Integer  cDateTimeInstanceCache  =  getInstance(dateStyle,  timeStyle,  locale);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  Integer  cDateTimeInstanceCache  =  getInstance(dateStyle,  timeStyle,  locale);  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	Integer  cDateTimeInstanceCache  =  getInstance(dateStyle,  timeStyle,  locale);	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    mRules.size();    i++)    {    cDateTimeInstanceCache.put(key,    this);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
72	[BUG]  [BUGGY]  cDateTimeInstanceCache.put(date,  format);  break;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  cDateTimeInstanceCache.put(date,  format);  break;  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	cDateTimeInstanceCache.put(date,  format);  break;	      cDateTimeInstanceCache.put(key,    format);    break;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
73	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.size();  ++i)  {  mRules[i]  =  null;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  for(int  i  =  0;  i  <  values.size();  ++i)  {  mRules[i]  =  null;  }  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	for(int  i  =  0;  i  <  values.size();  ++i)  {  mRules[i]  =  null;  }	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    mRules[i]    =    mRules[i];    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
74	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.size();  ++i)  {  mRules[i]  =  rule[i];  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  for(int  i  =  0;  i  <  values.size();  ++i)  {  mRules[i]  =  rule[i];  }  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	for(int  i  =  0;  i  <  values.size();  ++i)  {  mRules[i]  =  rule[i];  }	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    mRules[i]    =    mRules[i];    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
75	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.length;  ++i)  {  mRules[i]  =  mRules[i].getKey();  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  for(int  i  =  0;  i  <  values.length;  ++i)  {  mRules[i]  =  mRules[i].getKey();  }  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	for(int  i  =  0;  i  <  values.length;  ++i)  {  mRules[i]  =  mRules[i].getKey();  }	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    values.length;    ++i)    {    mRules[i]    =    mRules[i].getValue();    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
76	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.length;  ++i)  {  mRules[i]  =  mRules[i].getLocale();  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  for(int  i  =  0;  i  <  values.length;  ++i)  {  mRules[i]  =  mRules[i].getLocale();  }  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	for(int  i  =  0;  i  <  values.length;  ++i)  {  mRules[i]  =  mRules[i].getLocale();  }	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    values.length;    ++i)    {    mRules[i]    =    mRules[i].getValue();    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
77	[BUG]  [BUGGY]  String  value  =  cDateTimeInstanceCache.get(key,  value);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  String  value  =  cDateTimeInstanceCache.get(key,  value);  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	String  value  =  cDateTimeInstanceCache.get(key,  value);	      String    value    =    cDateTimeInstanceCache.get(key);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
78	[BUG]  [BUGGY]  cDateTimeInstanceCache.put(value,  key);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  cDateTimeInstanceCache.put(value,  key);  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	cDateTimeInstanceCache.put(value,  key);	      cDateTimeInstanceCache.put(key,    value);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
79	[BUG]  [BUGGY]  cDateTimeInstanceCache.put(dateStyle,  value);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  cDateTimeInstanceCache.put(dateStyle,  value);  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	cDateTimeInstanceCache.put(dateStyle,  value);	      cDateTimeInstanceCache.put(key,    value);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
80	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  mRules.size();  i++)  {  cDateTimeInstanceCache.put(key,  format);  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  for(int  i  =  0;  i  <  mRules.size();  i++)  {  cDateTimeInstanceCache.put(key,  format);  }  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	for(int  i  =  0;  i  <  mRules.size();  i++)  {  cDateTimeInstanceCache.put(key,  format);  }	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    mRules.size();    i++)    {    cDateTimeInstanceCache.put(key,    format);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
81	[BUG]  [BUGGY]  Format.setDefaultPattern(mValues[i])  {  for(int  i  =  0;  i  <  mRules.size();  i++)  {  cDateTimeInstanceCache.put(key,  format);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  Format.setDefaultPattern(mValues[i])  {  for(int  i  =  0;  i  <  mRules.size();  i++)  {  cDateTimeInstanceCache.put(key,  format);  }  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	Format.setDefaultPattern(mValues[i])  {  for(int  i  =  0;  i  <  mRules.size();  i++)  {  cDateTimeInstanceCache.put(key,  format);  }	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    mRules.size();    i++)    {    cDateTimeInstanceCache.put(key,    format);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
82	[BUG]  [BUGGY]  Integer  cDateTimeInstanceCache.put(key,  format);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  Integer  cDateTimeInstanceCache.put(key,  format);  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	Integer  cDateTimeInstanceCache.put(key,  format);	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    mRules.size();    i++)    {    cDateTimeInstanceCache.put(key,    format);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
83	[BUG]  [BUGGY]  cDateTimeInstanceCache.put(dateStyle,  this);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  cDateTimeInstanceCache.put(dateStyle,  this);  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	cDateTimeInstanceCache.put(dateStyle,  this);	      cDateTimeInstanceCache.put(key,    this);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
84	[BUG]  [BUGGY]  cDateTimeInstanceCache.put(timeZone,  this);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  cDateTimeInstanceCache.put(timeZone,  this);  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	cDateTimeInstanceCache.put(timeZone,  this);	      cDateTimeInstanceCache.put(key,    this);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
85	[BUG]  [BUGGY]  return  format.withValue(mValues[0]  +  value);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  return  format.withValue(mValues[0]  +  value);  [BUGGY]    }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	return  format.withValue(mValues[0]  +  value);	  return    format.withValue(mValues[0]);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
86	[BUG]  [BUGGY]  return  format.withValue(mValues[1]);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  return  format.withValue(mValues[1]);  [BUGGY]    }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	return  format.withValue(mValues[1]);	  return    format.withValue(values[0]);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
87	[BUG]  [BUGGY]  return  format  ==  null?  INSTANCE  :  new  FastDateFormat(String.valueOf(values));  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  return  format  ==  null?  INSTANCE  :  new  FastDateFormat(String.valueOf(values));  [BUGGY]    }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	return  format  ==  null?  INSTANCE  :  new  FastDateFormat(String.valueOf(values));	  return    format    ==    null?    INSTANCE    :    new    FastDateFormat(String.valueOf(mValue));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
88	[BUG]  [BUGGY]  return  format  ==  null?  INSTANCE  :  new  FastDateFormat(String.valueOf(timeStyle));  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  return  format  ==  null?  INSTANCE  :  new  FastDateFormat(String.valueOf(timeStyle));  [BUGGY]    }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	return  format  ==  null?  INSTANCE  :  new  FastDateFormat(String.valueOf(timeStyle));	  return    format    ==    null?    INSTANCE    :    new    FastDateFormat(String.valueOf(mValue));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
89	[BUG]  [BUGGY]  return  format!=  null?  INSTANCE  :  new  FastDateFormat(String.valueOf(mValue));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  return  format!=  null?  INSTANCE  :  new  FastDateFormat(String.valueOf(mValue));  [BUGGY]    }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	return  format!=  null?  INSTANCE  :  new  FastDateFormat(String.valueOf(mValue));	  return    format    ==    null?    INSTANCE    :    new    FastDateFormat(String.valueOf(mValue));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
90	[BUG]  [BUGGY]  Integer  values[]  =  cDateTimeInstanceCache.get(key);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  Integer  values[]  =  cDateTimeInstanceCache.get(key);  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	Integer  values[]  =  cDateTimeInstanceCache.get(key);	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    cDateTimeInstanceCache.put(key,    value);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
91	[BUG]  [BUGGY]  Integer  values[]  =  cDateTimeInstanceCache.get(key,  value);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  Integer  values[]  =  cDateTimeInstanceCache.get(key,  value);  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	Integer  values[]  =  cDateTimeInstanceCache.get(key,  value);	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    cDateTimeInstanceCache.put(key,    value);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
92	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.length;  i++)  {  cDateTimeInstanceCache.put(key,  format);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  for(int  i  =  0;  i  <  values.length;  i++)  {  cDateTimeInstanceCache.put(key,  format);  }  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	for(int  i  =  0;  i  <  values.length;  i++)  {  cDateTimeInstanceCache.put(key,  format);  }	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    cDateTimeInstanceCache.put(key,    format);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
93	[BUG]  [BUGGY]  Format.setDefaultPattern(mValues[i])  {  for(int  i  =  0;  i  <  values.length;  i++)  {  cDateTimeInstanceCache.put(key,  format);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  Format.setDefaultPattern(mValues[i])  {  for(int  i  =  0;  i  <  values.length;  i++)  {  cDateTimeInstanceCache.put(key,  format);  }  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	Format.setDefaultPattern(mValues[i])  {  for(int  i  =  0;  i  <  values.length;  i++)  {  cDateTimeInstanceCache.put(key,  format);  }	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    cDateTimeInstanceCache.put(key,    format);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
94	[BUG]  [BUGGY]  Format.setDefaultPattern(mValues[i])  {  for(int  i  =  0;  i  <  values.length;  i++)  {  cDateTimeInstanceCache.put(key,  format  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  Format.setDefaultPattern(mValues[i])  {  for(int  i  =  0;  i  <  values.length;  i++)  {  cDateTimeInstanceCache.put(key,  format  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	Format.setDefaultPattern(mValues[i])  {  for(int  i  =  0;  i  <  values.length;  i++)  {  cDateTimeInstanceCache.put(key,  format	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    cDateTimeInstanceCache.put(key,    format);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
95	[BUG]  [BUGGY]  return  format.getInstance(timeStyle,  dateStyle,  locale);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  return  format.getInstance(timeStyle,  dateStyle,  locale);  [BUGGY]    }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	return  format.getInstance(timeStyle,  dateStyle,  locale);	  return    format.getInstance(dateStyle,    timeStyle,    locale);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
96	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.length;  ++i)  {  mRules[i]  =  getInstance(dateStyle,  timeZone,  locale);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  for(int  i  =  0;  i  <  values.length;  ++i)  {  mRules[i]  =  getInstance(dateStyle,  timeZone,  locale);  }  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	for(int  i  =  0;  i  <  values.length;  ++i)  {  mRules[i]  =  getInstance(dateStyle,  timeZone,  locale);  }	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    values.length;    ++i)    {    mRules[i]    =    mRules[i];    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
97	[BUG]  [BUGGY]  cDateTimeInstanceCache.put(timeZone,  format);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  cDateTimeInstanceCache.put(timeZone,  format);  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	cDateTimeInstanceCache.put(timeZone,  format);	      cDateTimeInstanceCache.put(key,    format);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
98	[BUG]  [BUGGY]  Format  <?>  mRules  =  cDateTimeInstanceCache.get(key);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  Format  <?>  mRules  =  cDateTimeInstanceCache.get(key);  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	Format  <?>  mRules  =  cDateTimeInstanceCache.get(key);	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    cDateTimeInstanceCache.put(key,    format);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
99	[BUG]  [BUGGY]  Format  <?>  mRules  =  cDateTimeInstanceCache.get(key,  format);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  Format  <?>  mRules  =  cDateTimeInstanceCache.get(key,  format);  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	Format  <?>  mRules  =  cDateTimeInstanceCache.get(key,  format);	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    cDateTimeInstanceCache.put(key,    format);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
100	[BUG]  [BUGGY]  Format  <  String,  Rule>  cRules  =  cDateTimeInstanceCache.get(key);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  Format  <  String,  Rule>  cRules  =  cDateTimeInstanceCache.get(key);  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	Format  <  String,  Rule>  cRules  =  cDateTimeInstanceCache.get(key);	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    cDateTimeInstanceCache.put(key,    format);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
101	[BUG]  [BUGGY]  cDateTimeInstanceCache.put(value,  format);  break;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  cDateTimeInstanceCache.put(value,  format);  break;  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	cDateTimeInstanceCache.put(value,  format);  break;	      cDateTimeInstanceCache.put(key,    format);    break;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
102	[BUG]  [BUGGY]  return  cDateTimeInstanceCache.get(key,  format.getInstance(dateStyle,  timeStyle,  locale);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  return  cDateTimeInstanceCache.get(key,  format.getInstance(dateStyle,  timeStyle,  locale);  [BUGGY]    }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	return  cDateTimeInstanceCache.get(key,  format.getInstance(dateStyle,  timeStyle,  locale);	  return    format.getInstance(mDaylight,    timeStyle,    locale);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
103	[BUG]  [BUGGY]  return  cDateTimeInstanceCache.get(key,  format.getInstance(dateStyle,  timeStyle,  locale));  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  return  cDateTimeInstanceCache.get(key,  format.getInstance(dateStyle,  timeStyle,  locale));  [BUGGY]    }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	return  cDateTimeInstanceCache.get(key,  format.getInstance(dateStyle,  timeStyle,  locale));	  return    format.getInstance(mDaylight,    timeStyle,    locale);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
104	[BUG]  [BUGGY]  if(mRules!=  null)  {  for(int  i  =  0;  i  <  values.length;  ++i)  {  mRules[i]  =  getInstance(dateStyle,  timeStyle,  locale);  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  if(mRules!=  null)  {  for(int  i  =  0;  i  <  values.length;  ++i)  {  mRules[i]  =  getInstance(dateStyle,  timeStyle,  locale);  }  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	if(mRules!=  null)  {  for(int  i  =  0;  i  <  values.length;  ++i)  {  mRules[i]  =  getInstance(dateStyle,  timeStyle,  locale);  }	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    values.length;    ++i)    {    mRules[i]    =    mRules[i].toPattern();    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
105	[BUG]  [BUGGY]  if(mRules!=  null)  {  for(int  i  =  0;  i  <  values.length;  ++i)  {  mRules[i]  =  mRules[i].getKey();  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  if(mRules!=  null)  {  for(int  i  =  0;  i  <  values.length;  ++i)  {  mRules[i]  =  mRules[i].getKey();  }  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	if(mRules!=  null)  {  for(int  i  =  0;  i  <  values.length;  ++i)  {  mRules[i]  =  mRules[i].getKey();  }	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    values.length;    ++i)    {    mRules[i]    =    mRules[i].getValue();    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
106	[BUG]  [BUGGY]  return  format  ==  null?  INSTANCE  :  format.toString();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  return  format  ==  null?  INSTANCE  :  format.toString();  [BUGGY]    }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	return  format  ==  null?  INSTANCE  :  format.toString();	  return    format    ==    null?    INSTANCE    :    format;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
107	[BUG]  [BUGGY]  return  format.getInstance(pattern,  timeStyle,  locale);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  return  format.getInstance(pattern,  timeStyle,  locale);  [BUGGY]    }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	return  format.getInstance(pattern,  timeStyle,  locale);	  return    format.getInstance(dateStyle,    timeStyle,    locale);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
108	[BUG]  [BUGGY]  return  format.withValue(mValues[0],  mValues[1]);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  return  format.withValue(mValues[0],  mValues[1]);  [BUGGY]    }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	return  format.withValue(mValues[0],  mValues[1]);	  return    format.withValue(mValues[0]);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
109	[BUG]  [BUGGY]  return  cDateTimeInstanceCache.withValue(mValues[0]);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  return  cDateTimeInstanceCache.withValue(mValues[0]);  [BUGGY]    }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	return  cDateTimeInstanceCache.withValue(mValues[0]);	  return    format.withValue(values[0]);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
110	[BUG]  [BUGGY]  return  format.withValue(mValues);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  return  format.withValue(mValues);  [BUGGY]    }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	return  format.withValue(mValues);	  return    format.withValue(values[0]);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
111	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.length;  ++i)  {  mRules[i]  =  getInstance(dateStyle,  timeStyle,  locale);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  for(int  i  =  0;  i  <  values.length;  ++i)  {  mRules[i]  =  getInstance(dateStyle,  timeStyle,  locale);  }  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	for(int  i  =  0;  i  <  values.length;  ++i)  {  mRules[i]  =  getInstance(dateStyle,  timeStyle,  locale);  }	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    values.length;    ++i)    {    mRules[i]    =    mRules[i];    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
112	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cDateTimeInstanceCache.size();  i++)  {  format.put(key,  format);  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  for(int  i  =  0;  i  <  cDateTimeInstanceCache.size();  i++)  {  format.put(key,  format);  }  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	for(int  i  =  0;  i  <  cDateTimeInstanceCache.size();  i++)  {  format.put(key,  format);  }	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    mRules.size();    i++)    {    cDateTimeInstanceCache.put(key,    format);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
113	[BUG]  [BUGGY]  Format  <  String,  Rule>  cDateTimeInstanceCache  =  cDateTimeInstanceCache.get(key);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  Format  <  String,  Rule>  cDateTimeInstanceCache  =  cDateTimeInstanceCache.get(key);  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	Format  <  String,  Rule>  cDateTimeInstanceCache  =  cDateTimeInstanceCache.get(key);	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    cDateTimeInstanceCache.put(key,    value);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
114	[BUG]  [BUGGY]  cDateTimeInstanceCache.put(timeStyle,  value);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  cDateTimeInstanceCache.put(timeStyle,  value);  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	cDateTimeInstanceCache.put(timeStyle,  value);	      cDateTimeInstanceCache.put(key,    value);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
115	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.size();  ++i)  {  mRules[i]  =  getInstance(dateStyle,  timeStyle,  locale);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  for(int  i  =  0;  i  <  values.size();  ++i)  {  mRules[i]  =  getInstance(dateStyle,  timeStyle,  locale);  }  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	for(int  i  =  0;  i  <  values.size();  ++i)  {  mRules[i]  =  getInstance(dateStyle,  timeStyle,  locale);  }	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    mRules[i]    =    mRules[i];    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
116	[BUG]  [BUGGY]  String  value  =  cDateTimeInstanceCache.get(key,  format);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  String  value  =  cDateTimeInstanceCache.get(key,  format);  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	String  value  =  cDateTimeInstanceCache.get(key,  format);	      String    value    =    cDateTimeInstanceCache.get(key);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
117	[BUG]  [BUGGY]  String  value  =  cDateTimeInstanceCache.get(value);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  String  value  =  cDateTimeInstanceCache.get(value);  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	String  value  =  cDateTimeInstanceCache.get(value);	      String    value    =    cDateTimeInstanceCache.get(key);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
118	[BUG]  [BUGGY]  String  value  =  cDateTimeInstanceCache.get(timeStyle,  key);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  String  value  =  cDateTimeInstanceCache.get(timeStyle,  key);  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	String  value  =  cDateTimeInstanceCache.get(timeStyle,  key);	      String    value    =    cDateTimeInstanceCache.get(key);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
119	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cDateTimeInstanceCache.size();  i++)  {  format.put(key,  this);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  for(int  i  =  0;  i  <  cDateTimeInstanceCache.size();  i++)  {  format.put(key,  this);  }  [BUGGY]    return  format;  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	for(int  i  =  0;  i  <  cDateTimeInstanceCache.size();  i++)  {  format.put(key,  this);  }	      if(mRules!=    null)    {    for(int    i    =    0;    i    <    mRules.size();    i++)    {    cDateTimeInstanceCache.put(key,    this);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
120	[BUG]  [BUGGY]  return  cDateTimeInstanceCache.put(key,  INSTANCE_NO_COLON);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  return  cDateTimeInstanceCache.put(key,  INSTANCE_NO_COLON);  [BUGGY]    }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	return  cDateTimeInstanceCache.put(key,  INSTANCE_NO_COLON);	  return    INSTANCE;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
121	[BUG]  [BUGGY]  return  cDateTimeInstanceCache.get(key,  format.getInstance());  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  return  cDateTimeInstanceCache.get(key,  format.getInstance());  [BUGGY]    }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	return  cDateTimeInstanceCache.get(key,  format.getInstance());	  return    format.getInstance();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
122	[BUG]  [BUGGY]  return  cDateTimeInstanceCache.get(key).getInstance();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateTimeInstance(dateStyle,  timeStyle,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateTimeInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(   "No  date  time  pattern  for  locale:     "  +  locale);  }  }    [BUGGY]  return  cDateTimeInstanceCache.get(key).getInstance();  [BUGGY]    }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateTimeInstance  [RETURN_TYPE]  FastDateFormat  int  dateStyle  int  timeStyle  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  dateStyle  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  timeStyle  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	485	485	2	replace	return  cDateTimeInstanceCache.get(key).getInstance();	  return    format.getInstance();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
