bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  locale  =  Locale.getDefault();  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  static  synchronized  FastDateFormat  getDateInstance(int  style,  TimeZone  timeZone,  Locale  locale)  {  Object  key  =  new  Integer(style);  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }    [BUGGY]  locale  =  Locale.getDefault();  [BUGGY]    if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	285	285	2	replace	locale  =  Locale.getDefault();	      if(cDateInstanceCache!=    null)    {    if(locale!=    null)    {    locale    =    Locale.getDefault();    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
2	[BUG]  [BUGGY]  if(locale!=  null)  {  locale  =  Locale.getDefault();  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  static  synchronized  FastDateFormat  getDateInstance(int  style,  TimeZone  timeZone,  Locale  locale)  {  Object  key  =  new  Integer(style);  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }    [BUGGY]  if(locale!=  null)  {  locale  =  Locale.getDefault();  }  [BUGGY]    if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	285	285	2	replace	if(locale!=  null)  {  locale  =  Locale.getDefault();  }	      if(cDateInstanceCache!=    null)    {    if(locale!=    null)    {    locale    =    Locale.getDefault();    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
3	[BUG]  [BUGGY]  if(locale  ==  null)  {  locale  =  Locale.getDefault();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  static  synchronized  FastDateFormat  getDateInstance(int  style,  TimeZone  timeZone,  Locale  locale)  {  Object  key  =  new  Integer(style);  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }    [BUGGY]  if(locale  ==  null)  {  locale  =  Locale.getDefault();  }  [BUGGY]    if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	285	285	2	replace	if(locale  ==  null)  {  locale  =  Locale.getDefault();  }	      if(cDateInstanceCache!=    null)    {    if(locale    ==    null)    {    locale    =    Locale.getDefault();    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
4	[BUG]  [BUGGY]  if(cDateInstanceCache  ==  null)  {  if(locale  ==  null)  {  locale  =  Locale.getDefault();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  static  synchronized  FastDateFormat  getDateInstance(int  style,  TimeZone  timeZone,  Locale  locale)  {  Object  key  =  new  Integer(style);  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }    [BUGGY]  if(cDateInstanceCache  ==  null)  {  if(locale  ==  null)  {  locale  =  Locale.getDefault();  }  [BUGGY]    if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	285	285	2	replace	if(cDateInstanceCache  ==  null)  {  if(locale  ==  null)  {  locale  =  Locale.getDefault();  }	      if(cDateInstanceCache!=    null)    {    if(locale    ==    null)    {    locale    =    Locale.getDefault();    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
5	[BUG]  [BUGGY]  cDateInstanceCache.put(key,  locale);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  static  synchronized  FastDateFormat  getDateInstance(int  style,  TimeZone  timeZone,  Locale  locale)  {  Object  key  =  new  Integer(style);  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }    [BUGGY]  cDateInstanceCache.put(key,  locale);  [BUGGY]    key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	285	285	2	replace	cDateInstanceCache.put(key,  locale);	      	non-compiled	[CE]  <identifier>  expected	3	None	replace
6	[BUG]  [BUGGY]  Locale  locale  =  Locale.getDefault();  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  static  synchronized  FastDateFormat  getDateInstance(int  style,  TimeZone  timeZone,  Locale  locale)  {  Object  key  =  new  Integer(style);  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }    [BUGGY]  Locale  locale  =  Locale.getDefault();  [BUGGY]    key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	285	285	2	replace	Locale  locale  =  Locale.getDefault();	      	non-compiled	[CE]  <identifier>  expected	3	None	replace
7	[BUG]  [BUGGY]  if(cDateInstanceCache  ==  null)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  static  synchronized  FastDateFormat  getDateInstance(int  style,  TimeZone  timeZone,  Locale  locale)  {  Object  key  =  new  Integer(style);  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }    [BUGGY]  if(cDateInstanceCache  ==  null)  {  [BUGGY]    key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	285	285	2	replace	if(cDateInstanceCache  ==  null)  {	  if(cDateInstanceCache!=    null)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
8	[BUG]  [BUGGY]  Locale  locale  =  cDateInstanceCache.get(key,  locale);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  static  synchronized  FastDateFormat  getDateInstance(int  style,  TimeZone  timeZone,  Locale  locale)  {  Object  key  =  new  Integer(style);  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }    [BUGGY]  Locale  locale  =  cDateInstanceCache.get(key,  locale);  [BUGGY]    if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	285	285	2	replace	Locale  locale  =  cDateInstanceCache.get(key,  locale);	      Locale    locale    =    cDateInstanceCache.get(key);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
9	[BUG]  [BUGGY]  Locale  locale  =  cDateInstanceCache.get(key,  style);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  static  synchronized  FastDateFormat  getDateInstance(int  style,  TimeZone  timeZone,  Locale  locale)  {  Object  key  =  new  Integer(style);  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }    [BUGGY]  Locale  locale  =  cDateInstanceCache.get(key,  style);  [BUGGY]    if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	285	285	2	replace	Locale  locale  =  cDateInstanceCache.get(key,  style);	      Locale    locale    =    cDateInstanceCache.get(key);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
10	[BUG]  [BUGGY]  Locale  locale  =  cDateInstanceCache.get(locale);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  static  synchronized  FastDateFormat  getDateInstance(int  style,  TimeZone  timeZone,  Locale  locale)  {  Object  key  =  new  Integer(style);  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }    [BUGGY]  Locale  locale  =  cDateInstanceCache.get(locale);  [BUGGY]    if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	285	285	2	replace	Locale  locale  =  cDateInstanceCache.get(locale);	      Locale    locale    =    cDateInstanceCache.get(key);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
11	[BUG]  [BUGGY]  String  locale  =  cDateInstanceCache.get(key);  if(locale  ==  null)  {  locale  =  Locale.getDefault();  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  static  synchronized  FastDateFormat  getDateInstance(int  style,  TimeZone  timeZone,  Locale  locale)  {  Object  key  =  new  Integer(style);  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }    [BUGGY]  String  locale  =  cDateInstanceCache.get(key);  if(locale  ==  null)  {  locale  =  Locale.getDefault();  }  [BUGGY]    if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	285	285	2	replace	String  locale  =  cDateInstanceCache.get(key);  if(locale  ==  null)  {  locale  =  Locale.getDefault();  }	      if(cDateInstanceCache!=    null)    {    String    locale    =    cDateInstanceCache.get(key);    if(locale    ==    null)    {    locale    =    Locale.getDefault();    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
12	[BUG]  [BUGGY]  String  locale  =  cDateInstanceCache.get(key);  if(locale!=  null)  {  locale  =  Locale.getDefault();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  static  synchronized  FastDateFormat  getDateInstance(int  style,  TimeZone  timeZone,  Locale  locale)  {  Object  key  =  new  Integer(style);  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }    [BUGGY]  String  locale  =  cDateInstanceCache.get(key);  if(locale!=  null)  {  locale  =  Locale.getDefault();  }  [BUGGY]    if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	285	285	2	replace	String  locale  =  cDateInstanceCache.get(key);  if(locale!=  null)  {  locale  =  Locale.getDefault();  }	      if(cDateInstanceCache!=    null)    {    String    locale    =    cDateInstanceCache.get(key);    if(locale    ==    null)    {    locale    =    Locale.getDefault();    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
13	[BUG]  [BUGGY]  Locale  locale  =  cDateInstanceCache.get(key);  if(locale!=  null)  {  locale  =  Locale.getDefault();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  static  synchronized  FastDateFormat  getDateInstance(int  style,  TimeZone  timeZone,  Locale  locale)  {  Object  key  =  new  Integer(style);  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }    [BUGGY]  Locale  locale  =  cDateInstanceCache.get(key);  if(locale!=  null)  {  locale  =  Locale.getDefault();  }  [BUGGY]    if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	285	285	2	replace	Locale  locale  =  cDateInstanceCache.get(key);  if(locale!=  null)  {  locale  =  Locale.getDefault();  }	      if(cDateInstanceCache!=    null)    {    Locale    locale    =    cDateInstanceCache.get(key);    if(locale!=    null)    {    locale    =    Locale.getDefault();    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
14	[BUG]  [BUGGY]  if(locale!=  null)  {  Locale  locale  =  cDateInstanceCache.get(key);  if(locale!=  null)  {  locale  =  Locale.getDefault();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  static  synchronized  FastDateFormat  getDateInstance(int  style,  TimeZone  timeZone,  Locale  locale)  {  Object  key  =  new  Integer(style);  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }    [BUGGY]  if(locale!=  null)  {  Locale  locale  =  cDateInstanceCache.get(key);  if(locale!=  null)  {  locale  =  Locale.getDefault();  }  [BUGGY]    if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	285	285	2	replace	if(locale!=  null)  {  Locale  locale  =  cDateInstanceCache.get(key);  if(locale!=  null)  {  locale  =  Locale.getDefault();  }	      if(cDateInstanceCache!=    null)    {    Locale    locale    =    cDateInstanceCache.get(key);    if(locale!=    null)    {    locale    =    Locale.getDefault();    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
15	[BUG]  [BUGGY]  if(locale  ==  null  ||  locale.equals(mLocale))  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  static  synchronized  FastDateFormat  getDateInstance(int  style,  TimeZone  timeZone,  Locale  locale)  {  Object  key  =  new  Integer(style);  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }    [BUGGY]  if(locale  ==  null  ||  locale.equals(mLocale))  {  [BUGGY]    key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	285	285	2	replace	if(locale  ==  null  ||  locale.equals(mLocale))  {	  if(locale    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
16	[BUG]  [BUGGY]  if(locale  ==  null  &&  locale.equals(mLocale))  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  static  synchronized  FastDateFormat  getDateInstance(int  style,  TimeZone  timeZone,  Locale  locale)  {  Object  key  =  new  Integer(style);  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }    [BUGGY]  if(locale  ==  null  &&  locale.equals(mLocale))  {  [BUGGY]    key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	285	285	2	replace	if(locale  ==  null  &&  locale.equals(mLocale))  {	  if(locale!=    null    &&    locale.equals(mLocale))    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
17	[BUG]  [BUGGY]  if(locale!=  null  ||  locale.equals(mLocale))  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  static  synchronized  FastDateFormat  getDateInstance(int  style,  TimeZone  timeZone,  Locale  locale)  {  Object  key  =  new  Integer(style);  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }    [BUGGY]  if(locale!=  null  ||  locale.equals(mLocale))  {  [BUGGY]    key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	285	285	2	replace	if(locale!=  null  ||  locale.equals(mLocale))  {	  if(locale!=    null    &&    locale.equals(mLocale))    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
18	[BUG]  [BUGGY]  Locale  locale  =(Locale)cDateInstanceCache.get(key,  locale);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  static  synchronized  FastDateFormat  getDateInstance(int  style,  TimeZone  timeZone,  Locale  locale)  {  Object  key  =  new  Integer(style);  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }    [BUGGY]  Locale  locale  =(Locale)cDateInstanceCache.get(key,  locale);  [BUGGY]    if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	285	285	2	replace	Locale  locale  =(Locale)cDateInstanceCache.get(key,  locale);	      Locale    locale    =(Locale)cDateInstanceCache.get(key);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
19	[BUG]  [BUGGY]  Locale  locale  =(Locale)cDateInstanceCache.get(key,  style);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  static  synchronized  FastDateFormat  getDateInstance(int  style,  TimeZone  timeZone,  Locale  locale)  {  Object  key  =  new  Integer(style);  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }    [BUGGY]  Locale  locale  =(Locale)cDateInstanceCache.get(key,  style);  [BUGGY]    if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	285	285	2	replace	Locale  locale  =(Locale)cDateInstanceCache.get(key,  style);	      Locale    locale    =(Locale)cDateInstanceCache.get(key);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
20	[BUG]  [BUGGY]  Locale  locale  =(Locale)cDateInstanceCache.get(locale);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  static  synchronized  FastDateFormat  getDateInstance(int  style,  TimeZone  timeZone,  Locale  locale)  {  Object  key  =  new  Integer(style);  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }    [BUGGY]  Locale  locale  =(Locale)cDateInstanceCache.get(locale);  [BUGGY]    if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	285	285	2	replace	Locale  locale  =(Locale)cDateInstanceCache.get(locale);	      Locale    locale    =(Locale)cDateInstanceCache.get(key);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
21	[BUG]  [BUGGY]  Locale  locale  =  cDateInstanceCache.get(key);  if(locale  ==  null)  {  locale  =  Locale.getDefault();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  static  synchronized  FastDateFormat  getDateInstance(int  style,  TimeZone  timeZone,  Locale  locale)  {  Object  key  =  new  Integer(style);  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }    [BUGGY]  Locale  locale  =  cDateInstanceCache.get(key);  if(locale  ==  null)  {  locale  =  Locale.getDefault();  }  [BUGGY]    if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	285	285	2	replace	Locale  locale  =  cDateInstanceCache.get(key);  if(locale  ==  null)  {  locale  =  Locale.getDefault();  }	      if(cDateInstanceCache!=    null)    {    Locale    locale    =    cDateInstanceCache.get(key);    if(locale    ==    null)    {    locale    =    Locale.getDefault();    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
22	[BUG]  [BUGGY]  Locale  locale  =(Locale)cDateInstanceCache.get(key  -  1);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  static  synchronized  FastDateFormat  getDateInstance(int  style,  TimeZone  timeZone,  Locale  locale)  {  Object  key  =  new  Integer(style);  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }    [BUGGY]  Locale  locale  =(Locale)cDateInstanceCache.get(key  -  1);  [BUGGY]    if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	285	285	2	replace	Locale  locale  =(Locale)cDateInstanceCache.get(key  -  1);	      Locale    locale    =(Locale)cDateInstanceCache.get(key);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
23	[BUG]  [BUGGY]  Locale  locale  =(Locale)cDateInstanceCache.get(key  +  1);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  static  synchronized  FastDateFormat  getDateInstance(int  style,  TimeZone  timeZone,  Locale  locale)  {  Object  key  =  new  Integer(style);  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }    [BUGGY]  Locale  locale  =(Locale)cDateInstanceCache.get(key  +  1);  [BUGGY]    if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	285	285	2	replace	Locale  locale  =(Locale)cDateInstanceCache.get(key  +  1);	      Locale    locale    =(Locale)cDateInstanceCache.get(key);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
24	[BUG]  [BUGGY]  if(locale!=  null  &&  key.equals(mLocale))  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  static  synchronized  FastDateFormat  getDateInstance(int  style,  TimeZone  timeZone,  Locale  locale)  {  Object  key  =  new  Integer(style);  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }    [BUGGY]  if(locale!=  null  &&  key.equals(mLocale))  {  [BUGGY]    key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	285	285	2	replace	if(locale!=  null  &&  key.equals(mLocale))  {	  if(locale!=    null    &&    locale.equals(mLocale))    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
25	[BUG]  [BUGGY]  if(locale  ==  null)  {  Locale  locale  =  cDateInstanceCache.get(key);  if(locale!=  null)  {  locale  =  Locale.getDefault();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  static  synchronized  FastDateFormat  getDateInstance(int  style,  TimeZone  timeZone,  Locale  locale)  {  Object  key  =  new  Integer(style);  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }    [BUGGY]  if(locale  ==  null)  {  Locale  locale  =  cDateInstanceCache.get(key);  if(locale!=  null)  {  locale  =  Locale.getDefault();  }  [BUGGY]    if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	285	285	2	replace	if(locale  ==  null)  {  Locale  locale  =  cDateInstanceCache.get(key);  if(locale!=  null)  {  locale  =  Locale.getDefault();  }	      if(cDateInstanceCache!=    null)    {    Locale    locale    =    cDateInstanceCache.get(key);    if(locale!=    null)    {    locale    =    Locale.getDefault();    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
26	[BUG]  [BUGGY]  if(locale  ==  null)  {  String  locale  =  cDateInstanceCache.get(key);  if(locale  ==  null)  {  locale  =  Locale.getDefault();  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  static  synchronized  FastDateFormat  getDateInstance(int  style,  TimeZone  timeZone,  Locale  locale)  {  Object  key  =  new  Integer(style);  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }    [BUGGY]  if(locale  ==  null)  {  String  locale  =  cDateInstanceCache.get(key);  if(locale  ==  null)  {  locale  =  Locale.getDefault();  }  [BUGGY]    if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	285	285	2	replace	if(locale  ==  null)  {  String  locale  =  cDateInstanceCache.get(key);  if(locale  ==  null)  {  locale  =  Locale.getDefault();  }	      if(cDateInstanceCache!=    null)    {    String    locale    =    cDateInstanceCache.get(key);    if(locale    ==    null)    {    locale    =    Locale.getDefault();    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
27	[BUG]  [BUGGY]  if(locale!=  null)  {  String  locale  =  cDateInstanceCache.get(key);  if(locale  ==  null)  {  locale  =  Locale.getDefault();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  static  synchronized  FastDateFormat  getDateInstance(int  style,  TimeZone  timeZone,  Locale  locale)  {  Object  key  =  new  Integer(style);  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }    [BUGGY]  if(locale!=  null)  {  String  locale  =  cDateInstanceCache.get(key);  if(locale  ==  null)  {  locale  =  Locale.getDefault();  }  [BUGGY]    if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	285	285	2	replace	if(locale!=  null)  {  String  locale  =  cDateInstanceCache.get(key);  if(locale  ==  null)  {  locale  =  Locale.getDefault();  }	      if(cDateInstanceCache!=    null)    {    String    locale    =    cDateInstanceCache.get(key);    if(locale    ==    null)    {    locale    =    Locale.getDefault();    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
28	[BUG]  [BUGGY]  if(cDateInstanceCache!=  null)  {  String  key  =  cDateInstanceCache.get(key);  if(locale  ==  null)  {  locale  =  Locale.getDefault();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  static  synchronized  FastDateFormat  getDateInstance(int  style,  TimeZone  timeZone,  Locale  locale)  {  Object  key  =  new  Integer(style);  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }    [BUGGY]  if(cDateInstanceCache!=  null)  {  String  key  =  cDateInstanceCache.get(key);  if(locale  ==  null)  {  locale  =  Locale.getDefault();  }  [BUGGY]    if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	285	285	2	replace	if(cDateInstanceCache!=  null)  {  String  key  =  cDateInstanceCache.get(key);  if(locale  ==  null)  {  locale  =  Locale.getDefault();  }	      if(cDateInstanceCache!=    null)    {    String    locale    =    cDateInstanceCache.get(key);    if(locale    ==    null)    {    locale    =    Locale.getDefault();    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
29	[BUG]  [BUGGY]  Locale  locale  =  cDateInstanceCache.get(key  +  1);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  static  synchronized  FastDateFormat  getDateInstance(int  style,  TimeZone  timeZone,  Locale  locale)  {  Object  key  =  new  Integer(style);  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }    [BUGGY]  Locale  locale  =  cDateInstanceCache.get(key  +  1);  [BUGGY]    if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	285	285	2	replace	Locale  locale  =  cDateInstanceCache.get(key  +  1);	      Locale    locale    =    cDateInstanceCache.get(key);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
30	[BUG]  [BUGGY]  if(locale  ==  null)  {  String  locale  =  cDateInstanceCache.get(key);  if(locale!=  null)  {  locale  =  Locale.getDefault();  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  static  synchronized  FastDateFormat  getDateInstance(int  style,  TimeZone  timeZone,  Locale  locale)  {  Object  key  =  new  Integer(style);  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }    [BUGGY]  if(locale  ==  null)  {  String  locale  =  cDateInstanceCache.get(key);  if(locale!=  null)  {  locale  =  Locale.getDefault();  }  [BUGGY]    if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	285	285	2	replace	if(locale  ==  null)  {  String  locale  =  cDateInstanceCache.get(key);  if(locale!=  null)  {  locale  =  Locale.getDefault();  }	      if(cDateInstanceCache!=    null)    {    String    locale    =    cDateInstanceCache.get(key);    if(locale!=    null)    {    locale    =    Locale.getDefault();    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
31	[BUG]  [BUGGY]  if(locale!=  null)  {  String  locale  =  cDateInstanceCache.get(key);  if(locale!=  null)  {  locale  =  Locale.getDefault();  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  static  synchronized  FastDateFormat  getDateInstance(int  style,  TimeZone  timeZone,  Locale  locale)  {  Object  key  =  new  Integer(style);  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }    [BUGGY]  if(locale!=  null)  {  String  locale  =  cDateInstanceCache.get(key);  if(locale!=  null)  {  locale  =  Locale.getDefault();  }  [BUGGY]    if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	285	285	2	replace	if(locale!=  null)  {  String  locale  =  cDateInstanceCache.get(key);  if(locale!=  null)  {  locale  =  Locale.getDefault();  }	      if(cDateInstanceCache!=    null)    {    String    locale    =    cDateInstanceCache.get(key);    if(locale!=    null)    {    locale    =    Locale.getDefault();    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
32	[BUG]  [BUGGY]  if(cDateInstanceCache!=  null)  {  String  key  =  cDateInstanceCache.get(key);  if(locale!=  null)  {  locale  =  Locale.getDefault();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  static  synchronized  FastDateFormat  getDateInstance(int  style,  TimeZone  timeZone,  Locale  locale)  {  Object  key  =  new  Integer(style);  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }    [BUGGY]  if(cDateInstanceCache!=  null)  {  String  key  =  cDateInstanceCache.get(key);  if(locale!=  null)  {  locale  =  Locale.getDefault();  }  [BUGGY]    if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	285	285	2	replace	if(cDateInstanceCache!=  null)  {  String  key  =  cDateInstanceCache.get(key);  if(locale!=  null)  {  locale  =  Locale.getDefault();  }	      if(cDateInstanceCache!=    null)    {    String    locale    =    cDateInstanceCache.get(key);    if(locale!=    null)    {    locale    =    Locale.getDefault();    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
33	[BUG]  [BUGGY]  if(locale!=  null)  {  if(locale  ==  null)  {  locale  =  Locale.getDefault();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  static  synchronized  FastDateFormat  getDateInstance(int  style,  TimeZone  timeZone,  Locale  locale)  {  Object  key  =  new  Integer(style);  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }    [BUGGY]  if(locale!=  null)  {  if(locale  ==  null)  {  locale  =  Locale.getDefault();  }  [BUGGY]    if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	285	285	2	replace	if(locale!=  null)  {  if(locale  ==  null)  {  locale  =  Locale.getDefault();  }	      if(cDateInstanceCache!=    null)    {    if(locale    ==    null)    {    locale    =    Locale.getDefault();    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
34	[BUG]  [BUGGY]  if(locale  ==  null)  {  Locale  locale  =  cDateInstanceCache.get(key);  if(locale  ==  null)  {  locale  =  Locale.getDefault();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  static  synchronized  FastDateFormat  getDateInstance(int  style,  TimeZone  timeZone,  Locale  locale)  {  Object  key  =  new  Integer(style);  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }    [BUGGY]  if(locale  ==  null)  {  Locale  locale  =  cDateInstanceCache.get(key);  if(locale  ==  null)  {  locale  =  Locale.getDefault();  }  [BUGGY]    if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	285	285	2	replace	if(locale  ==  null)  {  Locale  locale  =  cDateInstanceCache.get(key);  if(locale  ==  null)  {  locale  =  Locale.getDefault();  }	      if(cDateInstanceCache!=    null)    {    Locale    locale    =    cDateInstanceCache.get(key);    if(locale    ==    null)    {    locale    =    Locale.getDefault();    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
35	[BUG]  [BUGGY]  if(locale  ==  null)  {  if(locale!=  null)  {  locale  =  Locale.getDefault();  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  static  synchronized  FastDateFormat  getDateInstance(int  style,  TimeZone  timeZone,  Locale  locale)  {  Object  key  =  new  Integer(style);  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }    [BUGGY]  if(locale  ==  null)  {  if(locale!=  null)  {  locale  =  Locale.getDefault();  }  [BUGGY]    if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	285	285	2	replace	if(locale  ==  null)  {  if(locale!=  null)  {  locale  =  Locale.getDefault();  }	      if(cDateInstanceCache!=    null)    {    if(locale!=    null)    {    locale    =    Locale.getDefault();    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
36	[BUG]  [BUGGY]  if(locale!=  null)  {  if(locale!=  null)  {  locale  =  Locale.getDefault();  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  static  synchronized  FastDateFormat  getDateInstance(int  style,  TimeZone  timeZone,  Locale  locale)  {  Object  key  =  new  Integer(style);  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }    [BUGGY]  if(locale!=  null)  {  if(locale!=  null)  {  locale  =  Locale.getDefault();  }  [BUGGY]    if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	285	285	2	replace	if(locale!=  null)  {  if(locale!=  null)  {  locale  =  Locale.getDefault();  }	      if(cDateInstanceCache!=    null)    {    if(locale!=    null)    {    locale    =    Locale.getDefault();    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
37	[BUG]  [BUGGY]  Locale  locale  =(Locale)cDateInstanceCache.get(timeZone);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  static  synchronized  FastDateFormat  getDateInstance(int  style,  TimeZone  timeZone,  Locale  locale)  {  Object  key  =  new  Integer(style);  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }    [BUGGY]  Locale  locale  =(Locale)cDateInstanceCache.get(timeZone);  [BUGGY]    if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	285	285	2	replace	Locale  locale  =(Locale)cDateInstanceCache.get(timeZone);	      Locale    locale    =(Locale)cDateInstanceCache.get(key);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
38	[BUG]  [BUGGY]  if(locale  ==  null  ||  locale.equals(mValue))  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  static  synchronized  FastDateFormat  getDateInstance(int  style,  TimeZone  timeZone,  Locale  locale)  {  Object  key  =  new  Integer(style);  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }    [BUGGY]  if(locale  ==  null  ||  locale.equals(mValue))  {  [BUGGY]    key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	285	285	2	replace	if(locale  ==  null  ||  locale.equals(mValue))  {	  if(locale    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
39	[BUG]  [BUGGY]  if(cDateInstanceCache  ==  null)  {  if(locale!=  null)  {  locale  =  Locale.getDefault();  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  static  synchronized  FastDateFormat  getDateInstance(int  style,  TimeZone  timeZone,  Locale  locale)  {  Object  key  =  new  Integer(style);  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }    [BUGGY]  if(cDateInstanceCache  ==  null)  {  if(locale!=  null)  {  locale  =  Locale.getDefault();  }  [BUGGY]    if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	285	285	2	replace	if(cDateInstanceCache  ==  null)  {  if(locale!=  null)  {  locale  =  Locale.getDefault();  }	      if(cDateInstanceCache!=    null)    {    if(locale!=    null)    {    locale    =    Locale.getDefault();    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
40	[BUG]  [BUGGY]  Locale  locale  =  cDateInstanceCache.get(timeZone);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  static  synchronized  FastDateFormat  getDateInstance(int  style,  TimeZone  timeZone,  Locale  locale)  {  Object  key  =  new  Integer(style);  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }    [BUGGY]  Locale  locale  =  cDateInstanceCache.get(timeZone);  [BUGGY]    if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	285	285	2	replace	Locale  locale  =  cDateInstanceCache.get(timeZone);	      Locale    locale    =    cDateInstanceCache.get(key);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
41	[BUG]  [BUGGY]  if(cDateInstanceCache!=  null  &&  cDateInstanceCache.containsKey(key))  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  static  synchronized  FastDateFormat  getDateInstance(int  style,  TimeZone  timeZone,  Locale  locale)  {  Object  key  =  new  Integer(style);  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }    [BUGGY]  if(cDateInstanceCache!=  null  &&  cDateInstanceCache.containsKey(key))  {  [BUGGY]    key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	285	285	2	replace	if(cDateInstanceCache!=  null  &&  cDateInstanceCache.containsKey(key))  {	  if(cDateInstanceCache!=    null)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
42	[BUG]  [BUGGY]  if(cDateInstanceCache!=  null  ||  cDateInstanceCache.containsKey(key))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  static  synchronized  FastDateFormat  getDateInstance(int  style,  TimeZone  timeZone,  Locale  locale)  {  Object  key  =  new  Integer(style);  if  (timeZone  !=  null)  {  key  =  new  Pair(key,  timeZone);  }    [BUGGY]  if(cDateInstanceCache!=  null  ||  cDateInstanceCache.containsKey(key))  {  [BUGGY]    key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  locale  =  Locale.getDefault();  }  try  {  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.5	285	285	2	replace	if(cDateInstanceCache!=  null  ||  cDateInstanceCache.containsKey(key))  {	  if(cDateInstanceCache!=    null)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
