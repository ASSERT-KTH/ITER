bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(locale  ==  null)  {  cDateInstanceCache.put(value,  format);  }  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  if(locale  ==  null)  {  cDateInstanceCache.put(value,  format);  }  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	if(locale  ==  null)  {  cDateInstanceCache.put(value,  format);  }	  cDateInstanceCache.put(value,    format);    	non-compiled	[CE]  case,  default,  or  '}'  expected	51	None	replace
2	[BUG]  [BUGGY]  if(locale  ==  null)  {  cDateInstanceCache.put(key,  format);  }  [CE]  case,  default,  or  '}'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  if(locale  ==  null)  {  cDateInstanceCache.put(key,  format);  }  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	if(locale  ==  null)  {  cDateInstanceCache.put(key,  format);  }	  cDateInstanceCache.put(value,    format);    	non-compiled	[CE]  case,  default,  or  '}'  expected	51	None	replace
3	[BUG]  [BUGGY]  locale  =(Locale)timeZone.clone();  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  locale  =(Locale)timeZone.clone();  [BUGGY]      }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	locale  =(Locale)timeZone.clone();	  locale    =(Locale)mTimeZone.clone();    	non-compiled	[CE]  case,  default,  or  '}'  expected	52	None	replace
4	[BUG]  [BUGGY]  cDateInstanceCache.put(key,  format.toPattern()  +  1);  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  cDateInstanceCache.put(key,  format.toPattern()  +  1);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	cDateInstanceCache.put(key,  format.toPattern()  +  1);	  cDateInstanceCache.put(key,    format    +    1);    	non-compiled	[CE]  case,  default,  or  '}'  expected	11	None	replace
5	[BUG]  [BUGGY]  cDateInstanceCache.put(key,  format  +  2);  [CE]  case,  default,  or  '}'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  cDateInstanceCache.put(key,  format  +  2);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	cDateInstanceCache.put(key,  format  +  2);	  cDateInstanceCache.put(key,    format    +    1);    	non-compiled	[CE]  case,  default,  or  '}'  expected	11	None	replace
6	[BUG]  [BUGGY]  Style  style  =  cDateInstanceCache.get(locale,  key);  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  Style  style  =  cDateInstanceCache.get(locale,  key);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	Style  style  =  cDateInstanceCache.get(locale,  key);	  Style    style    =    cDateInstanceCache.get(key,    locale);    	non-compiled	[CE]  case,  default,  or  '}'  expected	13	None	replace
7	[BUG]  [BUGGY]  Style  style  =  cDateInstanceCache.get(key,  style);  [CE]  case,  default,  or  '}'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  Style  style  =  cDateInstanceCache.get(key,  style);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	Style  style  =  cDateInstanceCache.get(key,  style);	  Style    style    =    cDateInstanceCache.get(key,    locale);    	non-compiled	[CE]  case,  default,  or  '}'  expected	13	None	replace
8	[BUG]  [BUGGY]  locale  =(Locale)cDateInstanceCache.get(locale,  key);  [CE]  case,  default,  or  '}'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  locale  =(Locale)cDateInstanceCache.get(locale,  key);  [BUGGY]      }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	locale  =(Locale)cDateInstanceCache.get(locale,  key);	  locale    =(Locale)cDateInstanceCache.get(key,    locale);    	non-compiled	[CE]  case,  default,  or  '}'  expected	21	None	replace
9	[BUG]  [BUGGY]  locale  =(Locale)cDateInstanceCache.get(key,  style);  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  locale  =(Locale)cDateInstanceCache.get(key,  style);  [BUGGY]      }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	locale  =(Locale)cDateInstanceCache.get(key,  style);	  locale    =(Locale)cDateInstanceCache.get(key,    locale);    	non-compiled	[CE]  case,  default,  or  '}'  expected	21	None	replace
10	[BUG]  [BUGGY]  locale  =(Locale)cDateInstanceCache.get(key,  format);  [CE]  case,  default,  or  '}'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  locale  =(Locale)cDateInstanceCache.get(key,  format);  [BUGGY]      }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	locale  =(Locale)cDateInstanceCache.get(key,  format);	  locale    =(Locale)cDateInstanceCache.get(key,    locale);    	non-compiled	[CE]  case,  default,  or  '}'  expected	21	None	replace
11	[BUG]  [BUGGY]  locale  =(Locale)cDateInstanceCache.get(locale,  style);  [CE]  case,  default,  or  '}'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  locale  =(Locale)cDateInstanceCache.get(locale,  style);  [BUGGY]      }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	locale  =(Locale)cDateInstanceCache.get(locale,  style);	  locale    =(Locale)cDateInstanceCache.get(key,    locale);    	non-compiled	[CE]  case,  default,  or  '}'  expected	21	None	replace
12	[BUG]  [BUGGY]  Locale  locale  =  cDateInstanceCache.get(locale,  format);  [CE]  case,  default,  or  '}'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  Locale  locale  =  cDateInstanceCache.get(locale,  format);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	Locale  locale  =  cDateInstanceCache.get(locale,  format);	  Locale    locale    =    cDateInstanceCache.get(key,    format);    	non-compiled	[CE]  case,  default,  or  '}'  expected	44	None	replace
13	[BUG]  [BUGGY]  Locale  locale  =  cDateInstanceCache.get(key,  format,  locale);  [CE]  case,  default,  or  '}'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  Locale  locale  =  cDateInstanceCache.get(key,  format,  locale);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	Locale  locale  =  cDateInstanceCache.get(key,  format,  locale);	  Locale    locale    =    cDateInstanceCache.get(key,    format);    	non-compiled	[CE]  case,  default,  or  '}'  expected	44	None	replace
14	[BUG]  [BUGGY]  Locale  locale  =  cDateInstanceCache.get(format,  key);  [CE]  case,  default,  or  '}'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  Locale  locale  =  cDateInstanceCache.get(format,  key);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	Locale  locale  =  cDateInstanceCache.get(format,  key);	  Locale    locale    =    cDateInstanceCache.get(key,    format);    	non-compiled	[CE]  case,  default,  or  '}'  expected	44	None	replace
15	[BUG]  [BUGGY]  cDateInstanceCache.put(key,  new  Pair(style,  locale));  [CE]  case,  default,  or  '}'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  cDateInstanceCache.put(key,  new  Pair(style,  locale));  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	cDateInstanceCache.put(key,  new  Pair(style,  locale));	  cDateInstanceCache.put(key,    new    Pair(locale));    	non-compiled	[CE]  case,  default,  or  '}'  expected	6	None	replace
16	[BUG]  [BUGGY]  Style  style  =  cDateInstanceCache.get(style);  [CE]  case,  default,  or  '}'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  Style  style  =  cDateInstanceCache.get(style);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	Style  style  =  cDateInstanceCache.get(style);	  Style    style    =    cDateInstanceCache.get(timeZone);    	non-compiled	[CE]  case,  default,  or  '}'  expected	14	None	replace
17	[BUG]  [BUGGY]  Style  style  =  cDateInstanceCache.get(timeZone,  locale);  [CE]  case,  default,  or  '}'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  Style  style  =  cDateInstanceCache.get(timeZone,  locale);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	Style  style  =  cDateInstanceCache.get(timeZone,  locale);	  Style    style    =    cDateInstanceCache.get(timeZone);    	non-compiled	[CE]  case,  default,  or  '}'  expected	14	None	replace
18	[BUG]  [BUGGY]  String  style  =  cDateInstanceCache.get(key  +  3);  [CE]  case,  default,  or  '}'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  String  style  =  cDateInstanceCache.get(key  +  3);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	String  style  =  cDateInstanceCache.get(key  +  3);	  String    style    =    cDateInstanceCache.get(key    +    1);    	non-compiled	[CE]  case,  default,  or  '}'  expected	37	None	replace
19	[BUG]  [BUGGY]  String  style  =  cDateInstanceCache.get(key  +  2);  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  String  style  =  cDateInstanceCache.get(key  +  2);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	String  style  =  cDateInstanceCache.get(key  +  2);	  String    style    =    cDateInstanceCache.get(key    +    1);    	non-compiled	[CE]  case,  default,  or  '}'  expected	37	None	replace
20	[BUG]  [BUGGY]  locale  =(Locale)cDateInstanceCache.get(style);  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  locale  =(Locale)cDateInstanceCache.get(style);  [BUGGY]      }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	locale  =(Locale)cDateInstanceCache.get(style);	  locale    =(Locale)cDateInstanceCache.get(timeZone);    	non-compiled	[CE]  case,  default,  or  '}'  expected	22	None	replace
21	[BUG]  [BUGGY]  style  =  cDateInstanceCache.get(style,  locale);  [CE]  case,  default,  or  '}'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  style  =  cDateInstanceCache.get(style,  locale);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	style  =  cDateInstanceCache.get(style,  locale);	  style    =    cDateInstanceCache.get(style);    	non-compiled	[CE]  case,  default,  or  '}'  expected	28	None	replace
22	[BUG]  [BUGGY]  style  =  cDateInstanceCache.get(style  +  1);  [CE]  case,  default,  or  '}'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  style  =  cDateInstanceCache.get(style  +  1);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	style  =  cDateInstanceCache.get(style  +  1);	  style    =    cDateInstanceCache.get(style);    	non-compiled	[CE]  case,  default,  or  '}'  expected	28	None	replace
23	[BUG]  [BUGGY]  style  =  cDateInstanceCache.get(key,  format,  locale);  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  style  =  cDateInstanceCache.get(key,  format,  locale);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	style  =  cDateInstanceCache.get(key,  format,  locale);	  style    =    cDateInstanceCache.get(key,    format);    	non-compiled	[CE]  case,  default,  or  '}'  expected	43	None	replace
24	[BUG]  [BUGGY]  style  =  cDateInstanceCache.get(locale,  format);  [CE]  case,  default,  or  '}'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  style  =  cDateInstanceCache.get(locale,  format);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	style  =  cDateInstanceCache.get(locale,  format);	  style    =    cDateInstanceCache.get(key,    format);    	non-compiled	[CE]  case,  default,  or  '}'  expected	43	None	replace
25	[BUG]  [BUGGY]  Locale  locale  =  cDateInstanceCache.get(locale,  style);  [CE]  case,  default,  or  '}'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  Locale  locale  =  cDateInstanceCache.get(locale,  style);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	Locale  locale  =  cDateInstanceCache.get(locale,  style);	  Locale    locale    =    cDateInstanceCache.get(locale);    	non-compiled	[CE]  case,  default,  or  '}'  expected	31	None	replace
26	[BUG]  [BUGGY]  Locale  locale  =  cDateInstanceCache.get(timeZone);  [CE]  case,  default,  or  '}'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  Locale  locale  =  cDateInstanceCache.get(timeZone);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	Locale  locale  =  cDateInstanceCache.get(timeZone);	  Locale    locale    =    cDateInstanceCache.get(locale);    	non-compiled	[CE]  case,  default,  or  '}'  expected	31	None	replace
27	[BUG]  [BUGGY]  Locale  locale  =  cDateInstanceCache.get(key,  style,  locale);  [CE]  case,  default,  or  '}'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  Locale  locale  =  cDateInstanceCache.get(key,  style,  locale);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	Locale  locale  =  cDateInstanceCache.get(key,  style,  locale);	  Locale    locale    =    cDateInstanceCache.get(key,    style);    	non-compiled	[CE]  case,  default,  or  '}'  expected	32	None	replace
28	[BUG]  [BUGGY]  Locale  locale  =  cDateInstanceCache.get(key,  style,  timeZone);  [CE]  case,  default,  or  '}'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  Locale  locale  =  cDateInstanceCache.get(key,  style,  timeZone);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	Locale  locale  =  cDateInstanceCache.get(key,  style,  timeZone);	  Locale    locale    =    cDateInstanceCache.get(key,    style);    	non-compiled	[CE]  case,  default,  or  '}'  expected	32	None	replace
29	[BUG]  [BUGGY]  locale  =(locale  ==  null)?  Locale.getDefaultLocale()  :  Locale.getDefault();  [CE]  case,  default,  or  '}'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  locale  =(locale  ==  null)?  Locale.getDefaultLocale()  :  Locale.getDefault();  [BUGGY]      }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	locale  =(locale  ==  null)?  Locale.getDefaultLocale()  :  Locale.getDefault();	  locale    =(locale    ==    null)?    Locale.getLocale()    :    Locale.getDefault();    	non-compiled	[CE]  case,  default,  or  '}'  expected	8	None	replace
30	[BUG]  [BUGGY]  cDateInstanceCache.put(key,  new  Pair(locale,  locale),  locale);  [CE]  case,  default,  or  '}'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  cDateInstanceCache.put(key,  new  Pair(locale,  locale),  locale);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	cDateInstanceCache.put(key,  new  Pair(locale,  locale),  locale);	  cDateInstanceCache.put(key,    new    Pair(locale,    locale));    	non-compiled	[CE]  case,  default,  or  '}'  expected	46	None	replace
31	[BUG]  [BUGGY]  cDateInstanceCache.put(key,  new  Pair(locale,  locale),  format);  [CE]  case,  default,  or  '}'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  cDateInstanceCache.put(key,  new  Pair(locale,  locale),  format);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	cDateInstanceCache.put(key,  new  Pair(locale,  locale),  format);	  cDateInstanceCache.put(key,    new    Pair(locale,    locale));    	non-compiled	[CE]  case,  default,  or  '}'  expected	46	None	replace
32	[BUG]  [BUGGY]  Locale  locale  =  cDateInstanceCache.get(locale,  key);  [CE]  case,  default,  or  '}'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  Locale  locale  =  cDateInstanceCache.get(locale,  key);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	Locale  locale  =  cDateInstanceCache.get(locale,  key);	  Locale    locale    =    cDateInstanceCache.get(key,    locale);    	non-compiled	[CE]  case,  default,  or  '}'  expected	33	None	replace
33	[BUG]  [BUGGY]  Style  style  =  cDateInstanceCache.get(key,  format,  locale);  [CE]  case,  default,  or  '}'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  Style  style  =  cDateInstanceCache.get(key,  format,  locale);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	Style  style  =  cDateInstanceCache.get(key,  format,  locale);	  Style    style    =    cDateInstanceCache.get(key,    format);    	non-compiled	[CE]  case,  default,  or  '}'  expected	42	None	replace
34	[BUG]  [BUGGY]  Style  style  =  cDateInstanceCache.get(locale,  format);  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  Style  style  =  cDateInstanceCache.get(locale,  format);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	Style  style  =  cDateInstanceCache.get(locale,  format);	  Style    style    =    cDateInstanceCache.get(key,    format);    	non-compiled	[CE]  case,  default,  or  '}'  expected	42	None	replace
35	[BUG]  [BUGGY]  Style  style  =  format.get(key,  cDateInstanceCache);  [CE]  case,  default,  or  '}'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  Style  style  =  format.get(key,  cDateInstanceCache);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	Style  style  =  format.get(key,  cDateInstanceCache);	  Style    style    =    cDateInstanceCache.get(key,    format);    	non-compiled	[CE]  case,  default,  or  '}'  expected	42	None	replace
36	[BUG]  [BUGGY]  cDateInstanceCache.put(key,  new  Pair(style,  locale),  locale);  [CE]  case,  default,  or  '}'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  cDateInstanceCache.put(key,  new  Pair(style,  locale),  locale);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	cDateInstanceCache.put(key,  new  Pair(style,  locale),  locale);	  cDateInstanceCache.put(key,    new    Pair(locale),    locale);    	non-compiled	[CE]  case,  default,  or  '}'  expected	38	None	replace
37	[BUG]  [BUGGY]  cDateInstanceCache.put(key,  new  Pair(locale),  format);  [CE]  case,  default,  or  '}'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  cDateInstanceCache.put(key,  new  Pair(locale),  format);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	cDateInstanceCache.put(key,  new  Pair(locale),  format);	  cDateInstanceCache.put(key,    new    Pair(locale),    locale);    	non-compiled	[CE]  case,  default,  or  '}'  expected	38	None	replace
38	[BUG]  [BUGGY]  String  style  =  cDateInstanceCache.get(key,  format,  locale);  [CE]  case,  default,  or  '}'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  String  style  =  cDateInstanceCache.get(key,  format,  locale);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	String  style  =  cDateInstanceCache.get(key,  format,  locale);	  String    style    =    cDateInstanceCache.get(key,    format);    	non-compiled	[CE]  case,  default,  or  '}'  expected	50	None	replace
39	[BUG]  [BUGGY]  String  style  =  format.get(key,  cDateInstanceCache);  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  String  style  =  format.get(key,  cDateInstanceCache);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	String  style  =  format.get(key,  cDateInstanceCache);	  String    style    =    cDateInstanceCache.get(key,    format);    	non-compiled	[CE]  case,  default,  or  '}'  expected	50	None	replace
40	[BUG]  [BUGGY]  String  style  =  format.get(key);  [CE]  case,  default,  or  '}'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  String  style  =  format.get(key);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	String  style  =  format.get(key);	  String    style    =    cDateInstanceCache.get(key,    format);    	non-compiled	[CE]  case,  default,  or  '}'  expected	50	None	replace
41	[BUG]  [BUGGY]  Locale.getDefault();  [CE]  case,  default,  or  '}'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  Locale.getDefault();  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	Locale.getDefault();	  >>    [Delete]    else    if(style    ==    Pattern.TIME_ZONE)    {    locale    =    Locale.getDefault();    }    	non-compiled	[CE]  case,  default,  or  '}'  expected	49	None	replace
42	[BUG]  [BUGGY]  Locale  locale  =(locale!=  null)?  Locale.getDefault()  :  Locale.getDefault();  [CE]  case,  default,  or  '}'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  Locale  locale  =(locale!=  null)?  Locale.getDefault()  :  Locale.getDefault();  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	Locale  locale  =(locale!=  null)?  Locale.getDefault()  :  Locale.getDefault();	  Locale    locale    =(locale    ==    null)?    Locale.getDefault()    :    Locale.getDefault();    	non-compiled	[CE]  case,  default,  or  '}'  expected	45	None	replace
43	[BUG]  [BUGGY]  Locale  locale  =(locale  ==  null)?  Locale.getLocale()  :  Locale.getDefault();  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  Locale  locale  =(locale  ==  null)?  Locale.getLocale()  :  Locale.getDefault();  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	Locale  locale  =(locale  ==  null)?  Locale.getLocale()  :  Locale.getDefault();	  Locale    locale    =(locale    ==    null)?    Locale.getDefault()    :    Locale.getDefault();    	non-compiled	[CE]  case,  default,  or  '}'  expected	45	None	replace
44	[BUG]  [BUGGY]  Locale  locale  =(locale  ==  null)?  Locale.getDefault()  :  Locale.getLocale();  [CE]  case,  default,  or  '}'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  Locale  locale  =(locale  ==  null)?  Locale.getDefault()  :  Locale.getLocale();  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	Locale  locale  =(locale  ==  null)?  Locale.getDefault()  :  Locale.getLocale();	  Locale    locale    =(locale    ==    null)?    Locale.getDefault()    :    Locale.getDefault();    	non-compiled	[CE]  case,  default,  or  '}'  expected	45	None	replace
45	[BUG]  [BUGGY]  Locale  locale  =(locale  ==  null)?  null  :  locale.getDefault();  [CE]  case,  default,  or  '}'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  Locale  locale  =(locale  ==  null)?  null  :  locale.getDefault();  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	Locale  locale  =(locale  ==  null)?  null  :  locale.getDefault();	  Locale    locale    =(locale    ==    null)?    null    :    Locale.getDefault();    	non-compiled	[CE]  case,  default,  or  '}'  expected	39	None	replace
46	[BUG]  [BUGGY]  Locale  locale  =(locale!=  null)?  null  :  Locale.getDefault();  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  Locale  locale  =(locale!=  null)?  null  :  Locale.getDefault();  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	Locale  locale  =(locale!=  null)?  null  :  Locale.getDefault();	  Locale    locale    =(locale    ==    null)?    null    :    Locale.getDefault();    	non-compiled	[CE]  case,  default,  or  '}'  expected	39	None	replace
47	[BUG]  [BUGGY]  String  style  =  cDateInstanceCache.get(locale,  style);  [CE]  case,  default,  or  '}'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  String  style  =  cDateInstanceCache.get(locale,  style);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	String  style  =  cDateInstanceCache.get(locale,  style);	  String    style    =    cDateInstanceCache.get(key,    style);    	non-compiled	[CE]  case,  default,  or  '}'  expected	5	None	replace
48	[BUG]  [BUGGY]  locale  =(locale  ==  null)?  Locale.getDefaultLocale()  :  locale;  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  locale  =(locale  ==  null)?  Locale.getDefaultLocale()  :  locale;  [BUGGY]      }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	locale  =(locale  ==  null)?  Locale.getDefaultLocale()  :  locale;	  locale    =(locale    ==    null)?    Locale.getLocale()    :    locale;    	non-compiled	[CE]  case,  default,  or  '}'  expected	29	None	replace
49	[BUG]  [BUGGY]  locale  =  Locale.getDefaultInstance(style,  timeZone);  [CE]  case,  default,  or  '}'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  locale  =  Locale.getDefaultInstance(style,  timeZone);  [BUGGY]      }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	locale  =  Locale.getDefaultInstance(style,  timeZone);	  locale    =    Locale.getDefaultInstance(style);    	non-compiled	[CE]  case,  default,  or  '}'  expected	2	None	replace
50	[BUG]  [BUGGY]  locale  =  Locale.getInstance(style,  locale);  [CE]  case,  default,  or  '}'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  locale  =  Locale.getInstance(style,  locale);  [BUGGY]      }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	locale  =  Locale.getInstance(style,  locale);	  locale    =    Locale.getDefaultInstance(style);    	non-compiled	[CE]  case,  default,  or  '}'  expected	2	None	replace
51	[BUG]  [BUGGY]  locale  =  Locale.getLocale(style);  [CE]  case,  default,  or  '}'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  locale  =  Locale.getLocale(style);  [BUGGY]      }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	locale  =  Locale.getLocale(style);	  locale    =    Locale.getDefaultInstance(style);    	non-compiled	[CE]  case,  default,  or  '}'  expected	2	None	replace
52	[BUG]  [BUGGY]  locale  =  locale.getDefault();  [CE]  case,  default,  or  '}'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  locale  =  locale.getDefault();  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	locale  =  locale.getDefault();	  >>    [Delete]    else    if(style    ==    Locale.getDefault())    {    locale    =    Locale.getDefault();    }    	non-compiled	[CE]  case,  default,  or  '}'  expected	47	None	replace
53	[BUG]  [BUGGY]  locale  =  cDateInstanceCache.get(style);  [CE]  case,  default,  or  '}'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  locale  =  cDateInstanceCache.get(style);  [BUGGY]      }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	locale  =  cDateInstanceCache.get(style);	  locale    =    cDateInstanceCache.get(timeZone);    	non-compiled	[CE]  case,  default,  or  '}'  expected	25	None	replace
54	[BUG]  [BUGGY]  String  style  =  cDateInstanceCache.get(style);  [CE]  case,  default,  or  '}'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  String  style  =  cDateInstanceCache.get(style);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	String  style  =  cDateInstanceCache.get(style);	  String    style    =    cDateInstanceCache.get(locale);    	non-compiled	[CE]  case,  default,  or  '}'  expected	3	None	replace
55	[BUG]  [BUGGY]  String  style  =  cDateInstanceCache.get(timeZone);  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  String  style  =  cDateInstanceCache.get(timeZone);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	String  style  =  cDateInstanceCache.get(timeZone);	  String    style    =    cDateInstanceCache.get(locale);    	non-compiled	[CE]  case,  default,  or  '}'  expected	3	None	replace
56	[BUG]  [BUGGY]  locale  =  cDateInstanceCache.get(locale,  key);  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  locale  =  cDateInstanceCache.get(locale,  key);  [BUGGY]      }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	locale  =  cDateInstanceCache.get(locale,  key);	  locale    =    cDateInstanceCache.get(key,    locale);    	non-compiled	[CE]  case,  default,  or  '}'  expected	24	None	replace
57	[BUG]  [BUGGY]  locale  =  cDateInstanceCache.get(key,  style);  [CE]  case,  default,  or  '}'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  locale  =  cDateInstanceCache.get(key,  style);  [BUGGY]      }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	locale  =  cDateInstanceCache.get(key,  style);	  locale    =    cDateInstanceCache.get(key,    locale);    	non-compiled	[CE]  case,  default,  or  '}'  expected	24	None	replace
58	[BUG]  [BUGGY]  String  style  =  cDateInstanceCache.get(locale,  key);  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  String  style  =  cDateInstanceCache.get(locale,  key);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	String  style  =  cDateInstanceCache.get(locale,  key);	  String    style    =    cDateInstanceCache.get(key,    locale);    	non-compiled	[CE]  case,  default,  or  '}'  expected	4	None	replace
59	[BUG]  [BUGGY]  locale  =  Locale.getDefaultInstance(style,  locale,  timeZone);  [CE]  case,  default,  or  '}'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  locale  =  Locale.getDefaultInstance(style,  locale,  timeZone);  [BUGGY]      }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	locale  =  Locale.getDefaultInstance(style,  locale,  timeZone);	  locale    =    Locale.getDefaultInstance(style,    locale);    	non-compiled	[CE]  case,  default,  or  '}'  expected	1	None	replace
60	[BUG]  [BUGGY]  Locale  locale  =(Locale)cDateInstanceCache.get(key,  style);  [CE]  case,  default,  or  '}'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  Locale  locale  =(Locale)cDateInstanceCache.get(key,  style);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	Locale  locale  =(Locale)cDateInstanceCache.get(key,  style);	  Locale    locale    =(Locale)cDateInstanceCache.get(key);    	non-compiled	[CE]  case,  default,  or  '}'  expected	34	None	replace
61	[BUG]  [BUGGY]  Locale  locale  =(Locale)cDateInstanceCache.get(timeZone);  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  Locale  locale  =(Locale)cDateInstanceCache.get(timeZone);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	Locale  locale  =(Locale)cDateInstanceCache.get(timeZone);	  Locale    locale    =(Locale)cDateInstanceCache.get(key);    	non-compiled	[CE]  case,  default,  or  '}'  expected	34	None	replace
62	[BUG]  [BUGGY]  rmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmând  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  rmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmând  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	rmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmând	  [Delete]    else    if(style    ==    Locale.getDefault())    {    locale    =    Locale.getDefault();    }    	non-compiled	[CE]  ';'  expected	48	None	replace
63	[BUG]  [BUGGY]  rmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmând  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  rmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmând  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	rmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmând	  [Delete]    else    if(style    ==    Locale.getDefault())    {    locale    =    Locale.getDefault();    }    	non-compiled	[CE]  ';'  expected	48	None	replace
64	[BUG]  [BUGGY]  locale  =  cDateInstanceCache.get(locale,  style);  [CE]  case,  default,  or  '}'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  locale  =  cDateInstanceCache.get(locale,  style);  [BUGGY]      }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	locale  =  cDateInstanceCache.get(locale,  style);	  locale    =    cDateInstanceCache.get(locale);    	non-compiled	[CE]  case,  default,  or  '}'  expected	23	None	replace
65	[BUG]  [BUGGY]  Locale  locale  =(Locale)mLocale.clone();  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  Locale  locale  =(Locale)mLocale.clone();  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	Locale  locale  =(Locale)mLocale.clone();	  Locale    locale    =(Locale)locale.clone();    	non-compiled	[CE]  case,  default,  or  '}'  expected	40	None	replace
66	[BUG]  [BUGGY]  Locale  locale  =(Locale)cDateInstanceCache.clone();  [CE]  case,  default,  or  '}'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  Locale  locale  =(Locale)cDateInstanceCache.clone();  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	Locale  locale  =(Locale)cDateInstanceCache.clone();	  Locale    locale    =(Locale)locale.clone();    	non-compiled	[CE]  case,  default,  or  '}'  expected	40	None	replace
67	[BUG]  [BUGGY]  style  =  cDateInstanceCache.get(locale,  key);  [CE]  case,  default,  or  '}'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  style  =  cDateInstanceCache.get(locale,  key);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	style  =  cDateInstanceCache.get(locale,  key);	  style    =    cDateInstanceCache.get(key,    locale);    	non-compiled	[CE]  case,  default,  or  '}'  expected	27	None	replace
68	[BUG]  [BUGGY]  Locale  locale  =(Locale)cDateInstanceCache.get(locale,  style);  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  Locale  locale  =(Locale)cDateInstanceCache.get(locale,  style);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	Locale  locale  =(Locale)cDateInstanceCache.get(locale,  style);	  Locale    locale    =(Locale)cDateInstanceCache.get(locale);    	non-compiled	[CE]  case,  default,  or  '}'  expected	35	None	replace
69	[BUG]  [BUGGY]  Style  style  =  cDateInstanceCache.get(key  +  1,  locale);  [CE]  case,  default,  or  '}'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  Style  style  =  cDateInstanceCache.get(key  +  1,  locale);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	Style  style  =  cDateInstanceCache.get(key  +  1,  locale);	  Style    style    =    cDateInstanceCache.get(key    +    1);    	non-compiled	[CE]  case,  default,  or  '}'  expected	41	None	replace
70	[BUG]  [BUGGY]  Style  style  =  cDateInstanceCache.get(key  +  3);  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  Style  style  =  cDateInstanceCache.get(key  +  3);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	Style  style  =  cDateInstanceCache.get(key  +  3);	  Style    style    =    cDateInstanceCache.get(key    +    1);    	non-compiled	[CE]  case,  default,  or  '}'  expected	41	None	replace
71	[BUG]  [BUGGY]  style  =  cDateInstanceCache.get(timeZone);  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  style  =  cDateInstanceCache.get(timeZone);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	style  =  cDateInstanceCache.get(timeZone);	  style    =    cDateInstanceCache.get(locale);    	non-compiled	[CE]  case,  default,  or  '}'  expected	26	None	replace
72	[BUG]  [BUGGY]  if(locale!=  null)  {  cDateInstanceCache.put(key,  format);  }  else  {  cDateInstanceCache.put(key,  format);  }  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  if(locale!=  null)  {  cDateInstanceCache.put(key,  format);  }  else  {  cDateInstanceCache.put(key,  format);  }  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	if(locale!=  null)  {  cDateInstanceCache.put(key,  format);  }  else  {  cDateInstanceCache.put(key,  format);  }	  cDateInstanceCache.put(locale,    format);    	non-compiled	[CE]  case,  default,  or  '}'  expected	36	None	replace
73	[BUG]  [BUGGY]  if(locale  ==  null)  {  cDateInstanceCache.put(key,  format);  }  else  {  cDateInstanceCache.put(key,  format);  }  [CE]  case,  default,  or  '}'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  if(locale  ==  null)  {  cDateInstanceCache.put(key,  format);  }  else  {  cDateInstanceCache.put(key,  format);  }  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	if(locale  ==  null)  {  cDateInstanceCache.put(key,  format);  }  else  {  cDateInstanceCache.put(key,  format);  }	  cDateInstanceCache.put(locale,    format);    	non-compiled	[CE]  case,  default,  or  '}'  expected	36	None	replace
74	[BUG]  [BUGGY]  if(locale!=  null)  {  cDateInstanceCache.put(key,  format);  }  [CE]  case,  default,  or  '}'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  if(locale!=  null)  {  cDateInstanceCache.put(key,  format);  }  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	if(locale!=  null)  {  cDateInstanceCache.put(key,  format);  }	  cDateInstanceCache.put(locale,    format);    	non-compiled	[CE]  case,  default,  or  '}'  expected	36	None	replace
75	[BUG]  [BUGGY]  locale  =(Locale)cDateInstanceCache.get(locale  +  1);  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  locale  =(Locale)cDateInstanceCache.get(locale  +  1);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	locale  =(Locale)cDateInstanceCache.get(locale  +  1);	  locale    =(Locale)cDateInstanceCache.get(locale);    	non-compiled	[CE]  case,  default,  or  '}'  expected	7	None	replace
76	[BUG]  [BUGGY]  cDateInstanceCache.put(name,  format);  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  cDateInstanceCache.put(name,  format);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	cDateInstanceCache.put(name,  format);	  cDateInstanceCache.put(locale,    format);    	non-compiled	[CE]  case,  default,  or  '}'  expected	36	None	replace
77	[BUG]  [BUGGY]  cDateInstanceCache.put(values,  format);  [CE]  case,  default,  or  '}'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  cDateInstanceCache.put(values,  format);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	cDateInstanceCache.put(values,  format);	  cDateInstanceCache.put(locale,    format);    	non-compiled	[CE]  case,  default,  or  '}'  expected	36	None	replace
78	[BUG]  [BUGGY]  cDateInstanceCache.put(key,  new  Pair(locale,  format));  [CE]  case,  default,  or  '}'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  cDateInstanceCache.put(key,  new  Pair(locale,  format));  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	cDateInstanceCache.put(key,  new  Pair(locale,  format));	  cDateInstanceCache.put(key,    new    Pair(locale,    locale));    	non-compiled	[CE]  case,  default,  or  '}'  expected	46	None	replace
79	[BUG]  [BUGGY]  locale  =  cDateInstanceCache.get(timeZone,  locale);  [CE]  case,  default,  or  '}'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  locale  =  cDateInstanceCache.get(timeZone,  locale);  [BUGGY]      }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	locale  =  cDateInstanceCache.get(timeZone,  locale);	  locale    =    cDateInstanceCache.get(timeZone);    	non-compiled	[CE]  case,  default,  or  '}'  expected	25	None	replace
80	[BUG]  [BUGGY]  cDateInstanceCache.put(key,  format  +  3);  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  cDateInstanceCache.put(key,  format  +  3);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	cDateInstanceCache.put(key,  format  +  3);	  cDateInstanceCache.put(key,    format    +    1);    	non-compiled	[CE]  case,  default,  or  '}'  expected	11	None	replace
81	[BUG]  [BUGGY]  String  style  =  cDateInstanceCache.get(locale  +  1);  [CE]  case,  default,  or  '}'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  String  style  =  cDateInstanceCache.get(locale  +  1);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	String  style  =  cDateInstanceCache.get(locale  +  1);	  String    style    =    cDateInstanceCache.get(locale);    	non-compiled	[CE]  case,  default,  or  '}'  expected	3	None	replace
82	[BUG]  [BUGGY]  locale  =  Locale.getDefaultInstance(locale);  [CE]  case,  default,  or  '}'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  locale  =  Locale.getDefaultInstance(locale);  [BUGGY]      }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	locale  =  Locale.getDefaultInstance(locale);	  locale    =    Locale.getDefaultInstance(style);    	non-compiled	[CE]  case,  default,  or  '}'  expected	2	None	replace
83	[BUG]  [BUGGY]  locale  =  Locale.getDefaultInstance(style  -  1);  [CE]  case,  default,  or  '}'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  locale  =  Locale.getDefaultInstance(style  -  1);  [BUGGY]      }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	locale  =  Locale.getDefaultInstance(style  -  1);	  locale    =    Locale.getDefaultInstance(style);    	non-compiled	[CE]  case,  default,  or  '}'  expected	2	None	replace
84	[BUG]  [BUGGY]  String  style  =  cDateInstanceCache.get(key,  locale  +  1);  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  String  style  =  cDateInstanceCache.get(key,  locale  +  1);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	String  style  =  cDateInstanceCache.get(key,  locale  +  1);	  String    style    =    cDateInstanceCache.get(key,    locale);    	non-compiled	[CE]  case,  default,  or  '}'  expected	4	None	replace
85	[BUG]  [BUGGY]  Locale  locale  =  cDateInstanceCache.get(locale  +  1);  [CE]  case,  default,  or  '}'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  Locale  locale  =  cDateInstanceCache.get(locale  +  1);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	Locale  locale  =  cDateInstanceCache.get(locale  +  1);	  Locale    locale    =    cDateInstanceCache.get(locale);    	non-compiled	[CE]  case,  default,  or  '}'  expected	31	None	replace
86	[BUG]  [BUGGY]  locale  =  cDateInstanceCache.get(locale  +  1);  [CE]  case,  default,  or  '}'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  locale  =  cDateInstanceCache.get(locale  +  1);  [BUGGY]      }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	locale  =  cDateInstanceCache.get(locale  +  1);	  locale    =    cDateInstanceCache.get(locale);    	non-compiled	[CE]  case,  default,  or  '}'  expected	23	None	replace
87	[BUG]  [BUGGY]  locale  =  Locale.getDefaultInstance(style,  locale  +  1);  [CE]  case,  default,  or  '}'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  locale  =  Locale.getDefaultInstance(style,  locale  +  1);  [BUGGY]      }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	locale  =  Locale.getDefaultInstance(style,  locale  +  1);	  locale    =    Locale.getDefaultInstance(style,    locale);    	non-compiled	[CE]  case,  default,  or  '}'  expected	1	None	replace
88	[BUG]  [BUGGY]  cDateInstanceCache.put(key,  new  Pair  <  Locale>(locale));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  cDateInstanceCache.put(key,  new  Pair  <  Locale>(locale));  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	cDateInstanceCache.put(key,  new  Pair  <  Locale>(locale));	  cDateInstanceCache.put(key,    new    Pair(locale));    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
89	[BUG]  [BUGGY]  style  =  cDateInstanceCache.get(format,  key);  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  style  =  cDateInstanceCache.get(format,  key);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	style  =  cDateInstanceCache.get(format,  key);	  style    =    cDateInstanceCache.get(key,    format);    	non-compiled	[CE]  case,  default,  or  '}'  expected	43	None	replace
90	[BUG]  [BUGGY]  locale  =  cDateInstanceCache.get(key,  format);  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  locale  =  cDateInstanceCache.get(key,  format);  [BUGGY]      }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	locale  =  cDateInstanceCache.get(key,  format);	  locale    =    cDateInstanceCache.get(key,    locale);    	non-compiled	[CE]  case,  default,  or  '}'  expected	24	None	replace
91	[BUG]  [BUGGY]  MunteDateFormat  timeZone  =(StandardDateFormat)cDateInstanceCache.get(key);  [CE]  case,  default,  or  '}'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  MunteDateFormat  timeZone  =(StandardDateFormat)cDateInstanceCache.get(key);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	MunteDateFormat  timeZone  =(StandardDateFormat)cDateInstanceCache.get(key);	  [Delete]    else    if(style    ==    Locale.getDefault())    {    locale    =    Locale.getDefault();    }    	non-compiled	[CE]  case,  default,  or  '}'  expected	48	None	replace
92	[BUG]  [BUGGY]  MunteDateFormat  timeZone  =  cDateInstanceCache.get(key);  [CE]  case,  default,  or  '}'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  MunteDateFormat  timeZone  =  cDateInstanceCache.get(key);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	MunteDateFormat  timeZone  =  cDateInstanceCache.get(key);	  [Delete]    else    if(style    ==    Locale.getDefault())    {    locale    =    Locale.getDefault();    }    	non-compiled	[CE]  case,  default,  or  '}'  expected	48	None	replace
93	[BUG]  [BUGGY]  Style  style  =  cDateInstanceCache.get(locale,  locale);  [CE]  case,  default,  or  '}'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  Style  style  =  cDateInstanceCache.get(locale,  locale);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	Style  style  =  cDateInstanceCache.get(locale,  locale);	  Style    style    =    cDateInstanceCache.get(locale);    	non-compiled	[CE]  case,  default,  or  '}'  expected	12	None	replace
94	[BUG]  [BUGGY]  Style  style  =  cDateInstanceCache.get(locale,  timeZone);  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  Style  style  =  cDateInstanceCache.get(locale,  timeZone);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	Style  style  =  cDateInstanceCache.get(locale,  timeZone);	  Style    style    =    cDateInstanceCache.get(locale);    	non-compiled	[CE]  case,  default,  or  '}'  expected	12	None	replace
95	[BUG]  [BUGGY]  style  =  cDateInstanceCache.get(code);  [CE]  case,  default,  or  '}'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  style  =  cDateInstanceCache.get(code);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	style  =  cDateInstanceCache.get(code);	  style    =    cDateInstanceCache.get(style);    	non-compiled	[CE]  case,  default,  or  '}'  expected	28	None	replace
96	[BUG]  [BUGGY]  Locale  locale  =(locale  ==  null)?  null  :  locale.toLocale();  [CE]  case,  default,  or  '}'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  Locale  locale  =(locale  ==  null)?  null  :  locale.toLocale();  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	Locale  locale  =(locale  ==  null)?  null  :  locale.toLocale();	  Locale    locale    =(locale    ==    null)?    null    :    Locale.getDefault();    	non-compiled	[CE]  case,  default,  or  '}'  expected	39	None	replace
97	[BUG]  [BUGGY]  locale  =(Locale)cDateInstanceCache.get(timeZone,  locale);  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  locale  =(Locale)cDateInstanceCache.get(timeZone,  locale);  [BUGGY]      }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	locale  =(Locale)cDateInstanceCache.get(timeZone,  locale);	  locale    =(Locale)cDateInstanceCache.get(timeZone);    	non-compiled	[CE]  case,  default,  or  '}'  expected	22	None	replace
98	[BUG]  [BUGGY]  Style  style  =  cDateInstanceCache.get(key  +  2);  [CE]  case,  default,  or  '}'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  Style  style  =  cDateInstanceCache.get(key  +  2);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	Style  style  =  cDateInstanceCache.get(key  +  2);	  Style    style    =    cDateInstanceCache.get(key    +    1);    	non-compiled	[CE]  case,  default,  or  '}'  expected	41	None	replace
99	[BUG]  [BUGGY]  Style  style  =  cDateInstanceCache.get(locale  +  1);  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  Style  style  =  cDateInstanceCache.get(locale  +  1);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	Style  style  =  cDateInstanceCache.get(locale  +  1);	  Style    style    =    cDateInstanceCache.get(key    +    1);    	non-compiled	[CE]  case,  default,  or  '}'  expected	41	None	replace
100	[BUG]  [BUGGY]  Locale  locale  =  cDateInstanceCache.get(key,  format  +  1);  [CE]  case,  default,  or  '}'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  Locale  locale  =  cDateInstanceCache.get(key,  format  +  1);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	Locale  locale  =  cDateInstanceCache.get(key,  format  +  1);	  Locale    locale    =    cDateInstanceCache.get(key,    format);    	non-compiled	[CE]  case,  default,  or  '}'  expected	44	None	replace
101	[BUG]  [BUGGY]  Locale  locale  =(Locale.getDefault()  ==  null)?  Locale.getDefault()  :  Locale.getDefault();  [CE]  case,  default,  or  '}'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  Locale  locale  =(Locale.getDefault()  ==  null)?  Locale.getDefault()  :  Locale.getDefault();  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	Locale  locale  =(Locale.getDefault()  ==  null)?  Locale.getDefault()  :  Locale.getDefault();	  Locale    locale    =(locale    ==    null)?    Locale.getDefault()    :    Locale.getDefault();    	non-compiled	[CE]  case,  default,  or  '}'  expected	45	None	replace
102	[BUG]  [BUGGY]  Style  style  =  cDateInstanceCache.get(key,  locale  +  1);  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  Style  style  =  cDateInstanceCache.get(key,  locale  +  1);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	Style  style  =  cDateInstanceCache.get(key,  locale  +  1);	  Style    style    =    cDateInstanceCache.get(key,    locale);    	non-compiled	[CE]  case,  default,  or  '}'  expected	13	None	replace
103	[BUG]  [BUGGY]  Style  style  =  cDateInstanceCache.get(key,  locale,  timeZone);  [CE]  case,  default,  or  '}'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  Style  style  =  cDateInstanceCache.get(key,  locale,  timeZone);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	Style  style  =  cDateInstanceCache.get(key,  locale,  timeZone);	  Style    style    =    cDateInstanceCache.get(key,    locale);    	non-compiled	[CE]  case,  default,  or  '}'  expected	13	None	replace
104	[BUG]  [BUGGY]  String  style  =  cDateInstanceCache.get(locale,  format);  [CE]  case,  default,  or  '}'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  String  style  =  cDateInstanceCache.get(locale,  format);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	String  style  =  cDateInstanceCache.get(locale,  format);	  String    style    =    cDateInstanceCache.get(key,    format);    	non-compiled	[CE]  case,  default,  or  '}'  expected	50	None	replace
105	[BUG]  [BUGGY]  String  style  =  cDateInstanceCache.get(key  +  1,  locale);  [CE]  case,  default,  or  '}'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  String  style  =  cDateInstanceCache.get(key  +  1,  locale);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	String  style  =  cDateInstanceCache.get(key  +  1,  locale);	  String    style    =    cDateInstanceCache.get(key    +    1);    	non-compiled	[CE]  case,  default,  or  '}'  expected	37	None	replace
106	[BUG]  [BUGGY]  cDateInstanceCache.remove(key);  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  cDateInstanceCache.remove(key);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	cDateInstanceCache.remove(key);	  cDateInstanceCache.put(value,    format);    	non-compiled	[CE]  case,  default,  or  '}'  expected	51	None	replace
107	[BUG]  [BUGGY]  Locale  locale  =(Locale)locales.clone();  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  Locale  locale  =(Locale)locales.clone();  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	Locale  locale  =(Locale)locales.clone();	  Locale    locale    =(Locale)locale.clone();    	non-compiled	[CE]  case,  default,  or  '}'  expected	40	None	replace
108	[BUG]  [BUGGY]  rmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmând  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  rmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmând  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	rmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmând	  [Delete]    else    if(style    ==    Locale.getDefault())    {    locale    =    Locale.getDefault();    }    	non-compiled	[CE]  ';'  expected	48	None	replace
109	[BUG]  [BUGGY]  rmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmând  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  rmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmând  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	rmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmândrmând	  [Delete]    else    if(style    ==    Locale.getDefault())    {    locale    =    Locale.getDefault();    }    	non-compiled	[CE]  ';'  expected	48	None	replace
110	[BUG]  [BUGGY]  locale  =(Locale)cDateInstanceCache.get(locale,  locale);  [CE]  case,  default,  or  '}'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  locale  =(Locale)cDateInstanceCache.get(locale,  locale);  [BUGGY]      }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	locale  =(Locale)cDateInstanceCache.get(locale,  locale);	  locale    =(Locale)cDateInstanceCache.get(key,    locale);    	non-compiled	[CE]  case,  default,  or  '}'  expected	21	None	replace
111	[BUG]  [BUGGY]  default:  throw  new  IllegalStateException( " ");  [CE]  orphaned  default  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  default:  throw  new  IllegalStateException( " ");  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	default:  throw  new  IllegalStateException( " ");	  >>    [Delete]    else    if(style    ==    Locale.getDefault())    {    locale    =    Locale.getDefault();    }    	non-compiled	[CE]  orphaned  default	47	None	replace
112	[BUG]  [BUGGY]  cDateInstanceCache.put(key,  new  Pair(locale,  format),  locale);  [CE]  case,  default,  or  '}'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  cDateInstanceCache.put(key,  new  Pair(locale,  format),  locale);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	cDateInstanceCache.put(key,  new  Pair(locale,  format),  locale);	  cDateInstanceCache.put(key,    new    Pair(locale),    locale);    	non-compiled	[CE]  case,  default,  or  '}'  expected	38	None	replace
113	[BUG]  [BUGGY]  cDateInstanceCache.put(key,  new  Pair(locale,  style),  locale);  [CE]  case,  default,  or  '}'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  cDateInstanceCache.put(key,  new  Pair(locale,  style),  locale);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	cDateInstanceCache.put(key,  new  Pair(locale,  style),  locale);	  cDateInstanceCache.put(key,    new    Pair(locale),    locale);    	non-compiled	[CE]  case,  default,  or  '}'  expected	38	None	replace
114	[BUG]  [BUGGY]  locale  =  cDateInstanceCache.get(mLocale);  [CE]  case,  default,  or  '}'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  locale  =  cDateInstanceCache.get(mLocale);  [BUGGY]      }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	locale  =  cDateInstanceCache.get(mLocale);	  locale    =    cDateInstanceCache.get(locale);    	non-compiled	[CE]  case,  default,  or  '}'  expected	23	None	replace
115	[BUG]  [BUGGY]  Locale  locale  =(locale  ==  null)?  null  :  locale.toLowerCase();  [CE]  case,  default,  or  '}'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  Locale  locale  =(locale  ==  null)?  null  :  locale.toLowerCase();  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	Locale  locale  =(locale  ==  null)?  null  :  locale.toLowerCase();	  Locale    locale    =(locale    ==    null)?    null    :    Locale.getDefault();    	non-compiled	[CE]  case,  default,  or  '}'  expected	39	None	replace
116	[BUG]  [BUGGY]  Locale  locale  =(locale  ==  null)?  null  :  locale.toString();  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  Locale  locale  =(locale  ==  null)?  null  :  locale.toString();  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	Locale  locale  =(locale  ==  null)?  null  :  locale.toString();	  Locale    locale    =(locale    ==    null)?    null    :    Locale.getDefault();    	non-compiled	[CE]  case,  default,  or  '}'  expected	39	None	replace
117	[BUG]  [BUGGY]  Locale  locale  =(Locale)cDateInstanceCache.get(code);  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  Locale  locale  =(Locale)cDateInstanceCache.get(code);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	Locale  locale  =(Locale)cDateInstanceCache.get(code);	  Locale    locale    =(Locale)cDateInstanceCache.get(locale);    	non-compiled	[CE]  case,  default,  or  '}'  expected	35	None	replace
118	[BUG]  [BUGGY]  if(locale  ==  null)  {  cDateInstanceCache.put(key,  format);  }  else  {  cDateInstanceCache.put(value,  format);  }  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  if(locale  ==  null)  {  cDateInstanceCache.put(key,  format);  }  else  {  cDateInstanceCache.put(value,  format);  }  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	if(locale  ==  null)  {  cDateInstanceCache.put(key,  format);  }  else  {  cDateInstanceCache.put(value,  format);  }	  cDateInstanceCache.put(locale,    format);    	non-compiled	[CE]  case,  default,  or  '}'  expected	36	None	replace
119	[BUG]  [BUGGY]  String  style  =  cDateInstanceCache.get(code,  locale);  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  String  style  =  cDateInstanceCache.get(code,  locale);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	String  style  =  cDateInstanceCache.get(code,  locale);	  String    style    =    cDateInstanceCache.get(key,    locale);    	non-compiled	[CE]  case,  default,  or  '}'  expected	4	None	replace
120	[BUG]  [BUGGY]  locale  =(locale!=  null)?  Locale.getDefault()  :  Locale.getLocale();  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  locale  =(locale!=  null)?  Locale.getDefault()  :  Locale.getLocale();  [BUGGY]      }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	locale  =(locale!=  null)?  Locale.getDefault()  :  Locale.getLocale();	  locale    =(locale    ==    null)?    Locale.getDefault()    :    Locale.getLocale();    	non-compiled	[CE]  case,  default,  or  '}'  expected	9	None	replace
121	[BUG]  [BUGGY]  locale  =  Locale.getDefaultInstance(style,  locale).withUTC();  [CE]  case,  default,  or  '}'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  locale  =  Locale.getDefaultInstance(style,  locale).withUTC();  [BUGGY]      }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	locale  =  Locale.getDefaultInstance(style,  locale).withUTC();	  locale    =    Locale.getDefaultInstance(style,    locale);    	non-compiled	[CE]  case,  default,  or  '}'  expected	1	None	replace
122	[BUG]  [BUGGY]  Locale  locale  =(Locale)cDateInstanceCache.get(key,  format);  [CE]  case,  default,  or  '}'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {      [BUGGY]  Locale  locale  =(Locale)cDateInstanceCache.get(key,  format);  [BUGGY]      locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException(     "No  date  pattern  for  locale:       "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	Locale  locale  =(Locale)cDateInstanceCache.get(key,  format);	  Locale    locale    =(Locale)cDateInstanceCache.get(key);    	non-compiled	[CE]  case,  default,  or  '}'  expected	34	None	replace
