bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    Locale  locale  =  Locale.getDefault();  [CE]  case,  default,  or  '}'  expected  [FE]    AssertionFailedError  [CONTEXT]  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  [BUGGY]    Locale  locale  =  Locale.getDefault();  [BUGGY]  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException( "No  date  pattern  for  locale:   "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	    Locale  locale  =  Locale.getDefault();		non-compiled	[CE]  case,  default,  or  '}'  expected	14	None	add
2	[BUG]  [BUGGY]    locale  =  Locale.getDefault();  [CE]  case,  default,  or  '}'  expected  [FE]      AssertionFailedError  [CONTEXT]  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  [BUGGY]    locale  =  Locale.getDefault();  [BUGGY]  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException( "No  date  pattern  for  locale:   "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	    locale  =  Locale.getDefault();		non-compiled	[CE]  case,  default,  or  '}'  expected	14	None	add
3	[BUG]  [BUGGY]    Locale  locale  =  cDateInstanceCache.get(key);  [CE]  case,  default,  or  '}'  expected  [FE]        AssertionFailedError  [CONTEXT]  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  [BUGGY]    Locale  locale  =  cDateInstanceCache.get(key);  [BUGGY]  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException( "No  date  pattern  for  locale:   "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	    Locale  locale  =  cDateInstanceCache.get(key);		non-compiled	[CE]  case,  default,  or  '}'  expected	14	None	add
4	[BUG]  [BUGGY]    if(locale  ==  null)  {  locale  =  Locale.getDefault();  }  [CE]  case,  default,  or  '}'  expected  [FE]          AssertionFailedError  [CONTEXT]  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  [BUGGY]    if(locale  ==  null)  {  locale  =  Locale.getDefault();  }  [BUGGY]  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException( "No  date  pattern  for  locale:   "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	    if(locale  ==  null)  {  locale  =  Locale.getDefault();  }		non-compiled	[CE]  case,  default,  or  '}'  expected	14	None	add
5	[BUG]  [BUGGY]    cDateInstanceCache.put(key,  locale);  [CE]  case,  default,  or  '}'  expected  [FE]            AssertionFailedError  [CONTEXT]  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  [BUGGY]    cDateInstanceCache.put(key,  locale);  [BUGGY]  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException( "No  date  pattern  for  locale:   "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	    cDateInstanceCache.put(key,  locale);		non-compiled	[CE]  case,  default,  or  '}'  expected	14	None	add
6	[BUG]  [BUGGY]  locale  =  cDateInstanceCache.get(key);  [CE]  case,  default,  or  '}'  expected  [FE]    AssertionFailedError  [CONTEXT]  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  [BUGGY]  locale  =  cDateInstanceCache.get(key);  [BUGGY]  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException( "No  date  pattern  for  locale:   "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	locale  =  cDateInstanceCache.get(key);	locale  =  Locale.getDefault();  	non-compiled	[CE]  case,  default,  or  '}'  expected	13	None	replace
7	[BUG]  [BUGGY]  locale  =(Locale)locale.clone();  [CE]  case,  default,  or  '}'  expected  [FE]      AssertionFailedError  [CONTEXT]  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  [BUGGY]  locale  =(Locale)locale.clone();  [BUGGY]  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException( "No  date  pattern  for  locale:   "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	locale  =(Locale)locale.clone();	locale  =  Locale.getDefault();  	non-compiled	[CE]  case,  default,  or  '}'  expected	13	None	replace
8	[BUG]  [BUGGY]  locale  =  Locale.getDefaultInstance();  [CE]  case,  default,  or  '}'  expected  [FE]        AssertionFailedError  [CONTEXT]  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  [BUGGY]  locale  =  Locale.getDefaultInstance();  [BUGGY]  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException( "No  date  pattern  for  locale:   "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	locale  =  Locale.getDefaultInstance();	locale  =  Locale.getDefault();  	non-compiled	[CE]  case,  default,  or  '}'  expected	13	None	replace
9	[BUG]  [BUGGY]    Style  style  =  cDateInstanceCache.get(key);  [CE]  case,  default,  or  '}'  expected  [FE]    AssertionFailedError  [CONTEXT]  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  [BUGGY]    Style  style  =  cDateInstanceCache.get(key);  [BUGGY]  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException( "No  date  pattern  for  locale:   "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	    Style  style  =  cDateInstanceCache.get(key);		non-compiled	[CE]  case,  default,  or  '}'  expected	14	None	add
10	[BUG]  [BUGGY]    cDateInstanceCache.put(key,  format);  [CE]  case,  default,  or  '}'  expected  [FE]      AssertionFailedError  [CONTEXT]  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  [BUGGY]    cDateInstanceCache.put(key,  format);  [BUGGY]  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException( "No  date  pattern  for  locale:   "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	    cDateInstanceCache.put(key,  format);		non-compiled	[CE]  case,  default,  or  '}'  expected	14	None	add
11	[BUG]  [BUGGY]  locale  =(locale  ==  null)?  Locale.getDefault()  :  Locale.getDefault();  [CE]  case,  default,  or  '}'  expected  [FE]    AssertionFailedError  [CONTEXT]  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  [BUGGY]  locale  =(locale  ==  null)?  Locale.getDefault()  :  Locale.getDefault();  [BUGGY]  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException( "No  date  pattern  for  locale:   "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	locale  =(locale  ==  null)?  Locale.getDefault()  :  Locale.getDefault();	locale  =  Locale.getDefault();  	non-compiled	[CE]  case,  default,  or  '}'  expected	13	None	replace
12	[BUG]  [BUGGY]    String  style  =  cDateInstanceCache.get(key);  [CE]  case,  default,  or  '}'  expected  [FE]    AssertionFailedError  [CONTEXT]  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  [BUGGY]    String  style  =  cDateInstanceCache.get(key);  [BUGGY]  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException( "No  date  pattern  for  locale:   "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	    String  style  =  cDateInstanceCache.get(key);		non-compiled	[CE]  case,  default,  or  '}'  expected	14	None	add
13	[BUG]  [BUGGY]    style  =  cDateInstanceCache.get(key);  [CE]  case,  default,  or  '}'  expected  [FE]      AssertionFailedError  [CONTEXT]  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  [BUGGY]    style  =  cDateInstanceCache.get(key);  [BUGGY]  locale  =  Locale.getDefault();  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException( "No  date  pattern  for  locale:   "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	    style  =  cDateInstanceCache.get(key);		non-compiled	[CE]  case,  default,  or  '}'  expected	14	None	add
14	[BUG]  [BUGGY]  locale  =(Locale)cDateInstanceCache.get(key);  [CE]  case,  default,  or  '}'  expected  [FE]    AssertionFailedError  [CONTEXT]  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  [BUGGY]  locale  =(Locale)cDateInstanceCache.get(key);  [BUGGY]  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException( "No  date  pattern  for  locale:   "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	locale  =(Locale)cDateInstanceCache.get(key);	locale  =  Locale.getDefault();  	non-compiled	[CE]  case,  default,  or  '}'  expected	13	None	replace
15	[BUG]  [BUGGY]  locale  =(locale  ==  null)?  Locale.getDefault()  :  locale;  [CE]  case,  default,  or  '}'  expected  [FE]      AssertionFailedError  [CONTEXT]  }  if  (locale  !=  null)  {  key  =  new  Pair(key,  locale);  }  FastDateFormat  format  =  (FastDateFormat)  cDateInstanceCache.get(key);  if  (format  ==  null)  {  if  (locale  ==  null)  {  [BUGGY]  locale  =(locale  ==  null)?  Locale.getDefault()  :  locale;  [BUGGY]  }  try  {  SimpleDateFormat  formatter  =  (SimpleDateFormat)  DateFormat.getDateInstance(style,  locale);  String  pattern  =  formatter.toPattern();  format  =  getInstance(pattern,  timeZone,  locale);  cDateInstanceCache.put(key,  format);  }  catch  (ClassCastException  ex)  {  throw  new  IllegalArgumentException( "No  date  pattern  for  locale:   "  +  locale);  }  [CLASS]  FastDateFormat  CharacterLiteral  StringLiteral  TextField  UnpaddedNumberField  UnpaddedMonthField  PaddedNumberField  TwoDigitNumberField  TwoDigitYearField  TwoDigitMonthField  TwelveHourField  TwentyFourHourField  TimeZoneNameRule  TimeZoneNumberRule  TimeZoneDisplayKey  Pair  [METHOD]  getDateInstance  [RETURN_TYPE]  FastDateFormat  int  style  TimeZone  timeZone  Locale  locale  [VARIABLES]  Locale  locale  mLocale  TimeZoneNumberRule  INSTANCE_COLON  INSTANCE_NO_COLON  TwoDigitYearField  INSTANCE  FastDateFormat  format  String  cDefaultPattern  mDaylight  mPattern  mStandard  mValue  pattern  value  String[]  mValues  values  UnpaddedNumberField  INSTANCE_YEAR  long  serialVersionUID  int  FULL  LONG  MEDIUM  SHORT  field  mField  mMaxLengthEstimate  mSize  mStyle  size  style  Rule[]  mRules  TimeZone  mTimeZone  timeZone  boolean  colon  daylight  mColon  mLocaleForced  mTimeZoneForced  timeZoneForced  NumberRule  mRule  rule  ClassCastException  ex  char  mValue  value  TwoDigitMonthField  INSTANCE  UnpaddedMonthField  INSTANCE  Object  key  mObj1  mObj2  obj1  obj2  Map  cDateInstanceCache  cDateTimeInstanceCache  cInstanceCache  cTimeInstanceCache  cTimeZoneDisplayCache  SimpleDateFormat  formatter  	projects/Lang50/src/java/org/apache/commons/lang/time/FastDateFormat.java	0.7071067811865475	293	293	2	replace	locale  =(locale  ==  null)?  Locale.getDefault()  :  locale;	locale  =  Locale.getDefault();  	non-compiled	[CE]  case,  default,  or  '}'  expected	13	None	replace
