bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  &&  val.get(i)  ==  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	add	if(field!=  DateUtils.SEMI_MONTH  &&  val.get(i)  ==  1)  {	  if(field!=    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)    ==    1)    {    	compilable	  [FE]  AssertionFailedError  	124	2	replace
2	[BUG]  [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  &&  val.get(i)  ==  1)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  &&  val.get(i)  ==  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field!=  DateUtils.SEMI_MONTH  &&  val.get(i)  ==  1)  {	  if(field!=    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)    ==    1)    {    	compilable	  [FE]  AssertionFailedError  	124	2	replace
3	[BUG]  [BUGGY]  val.add(Calendar.MONTH,  0);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  val.add(Calendar.MONTH,  0);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	val.add(Calendar.MONTH,  0);	  val.add(Calendar.MONTH,    2);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
4	[BUG]  [BUGGY]  val.add(Calendar.MILLISECOND,  0,  i);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  val.add(Calendar.MILLISECOND,  0,  i);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	val.add(Calendar.MILLISECOND,  0,  i);	          val.add(Calendar.MILLISECOND,    0);    val.add(Calendar.MILLISECOND,    0,    0);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
5	[BUG]  [BUGGY]  val.add(Calendar.MILLISECOND,  0,  0);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  val.add(Calendar.MILLISECOND,  0,  0);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	val.add(Calendar.MILLISECOND,  0,  0);	          val.add(Calendar.MILLISECOND,    0);    val.add(Calendar.MILLISECOND,    0,    0);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
6	[BUG]  [BUGGY]  val.add(Calendar.MILLISECOND,  0,  j);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  val.add(Calendar.MILLISECOND,  0,  j);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	val.add(Calendar.MILLISECOND,  0,  j);	          val.add(Calendar.MILLISECOND,    0);    val.add(Calendar.MILLISECOND,    0,    0);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
7	[BUG]  [BUGGY]  if(round  ==  DateUtils.SEMI_MONTH)  {  if(field!=  DateUtils.SEMI_MONTH  ||  round)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(round  ==  DateUtils.SEMI_MONTH)  {  if(field!=  DateUtils.SEMI_MONTH  ||  round)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(round  ==  DateUtils.SEMI_MONTH)  {  if(field!=  DateUtils.SEMI_MONTH  ||  round)  {	  if(field    ==    DateUtils.SEMI_MONTH    ||    round)    {    if(field    >=    DateUtils.SEMI_MONTH    ||    round)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
8	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH)  {  if(field!=  DateUtils.SEMI_MONTH  ||  roundUp)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH)  {  if(field!=  DateUtils.SEMI_MONTH  ||  roundUp)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH)  {  if(field!=  DateUtils.SEMI_MONTH  ||  roundUp)  {	  if(field    ==    DateUtils.SEMI_MONTH    ||    round)    {    if(field    >=    DateUtils.SEMI_MONTH    ||    round)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
9	[BUG]  [BUGGY]  ((  Calendar)val).setTime(field,  date);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  ((  Calendar)val).setTime(field,  date);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	((  Calendar)val).setTime(field,  date);	          ((    Calendar)val).setTime(date);    val.add((    Calendar)val).setTime(date);    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
10	[BUG]  [BUGGY]  val.add((  Calendar)val).setTime(date);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  val.add((  Calendar)val).setTime(date);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	val.add((  Calendar)val).setTime(date);	          ((    Calendar)val).setTime(date);    val.add((    Calendar)val).setTime(date);    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
11	[BUG]  [BUGGY]  val.add((  Calendar)val).setTime(date,  round);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  val.add((  Calendar)val).setTime(date,  round);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	val.add((  Calendar)val).setTime(date,  round);	          ((    Calendar)val).setTime(date);    val.add((    Calendar)val).setTime(date);    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
12	[BUG]  [BUGGY]  val.add((  Calendar)val).setTime(field);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  val.add((  Calendar)val).setTime(field);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	val.add((  Calendar)val).setTime(field);	          ((    Calendar)val).setTime(date);    val.add((    Calendar)val).setTime(date);    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
13	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.YEAR)  ==  1)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.YEAR)  ==  1)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.YEAR)  ==  1)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.YEAR)  ==  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.YEAR)    ==    1)    {    if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.YEAR)  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	107	None	add
14	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.YEAR)  ==  1)  {  if(field!=  DateUtils.SEMI_MONTH  &&  val.get(Calendar.YEAR)  ==  1)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.YEAR)  ==  1)  {  if(field!=  DateUtils.SEMI_MONTH  &&  val.get(Calendar.YEAR)  ==  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.YEAR)    ==    1)    {    if(field!=  DateUtils.SEMI_MONTH  &&  val.get(Calendar.YEAR)  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	107	None	add
15	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.YEAR)  ==  1)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.YEAR)!=  1)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.YEAR)  ==  1)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.YEAR)!=  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.YEAR)    ==    1)    {    if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.YEAR)!=  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	107	None	add
16	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.YEAR)  ==  1)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.YEAR)  >=  1)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.YEAR)  ==  1)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.YEAR)  >=  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.YEAR)    ==    1)    {    if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.YEAR)  >=  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	107	None	add
17	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.DATE)  {  If(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  ==  1)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.DATE)  {  If(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  ==  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.DATE)  {  If(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  ==  1)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)    ==    1)    {    If(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)    ==    1)    {    	non-compiled	[CE]  ';'  expected	117	None	replace
18	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  field!=  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	add	if(field  ==  DateUtils.SEMI_MONTH  &&  field!=  DateUtils.SEMI_MONTH)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    field    ==    DateUtils.SEMI_MONTH)    {    	compilable	  [FE]  AssertionFailedError  	84	2	replace
19	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  field!=  DateUtils.SEMI_MONTH)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  field!=  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH  &&  field!=  DateUtils.SEMI_MONTH)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    field    ==    DateUtils.SEMI_MONTH)    {    	compilable	  [FE]  AssertionFailedError  	84	2	replace
20	[BUG]  [BUGGY]  val.add(Calendar.DATE,  0);  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  val.add(Calendar.DATE,  0);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	val.add(Calendar.DATE,  0);	          val.add(Calendar.DATE,    1);    val.add(Calendar.DATE,    1);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.MILLISECOND,    1);    val.add(Calendar.MILLISECOND,  1);  val.add(Calendar.MILLISECOND,  1);  val.add(Calendar.MILLISECOND,  1);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	add	                val.add(Calendar.MILLISECOND,        1);        val.add(Calendar.MILLISECOND,    1);    val.add(Calendar.MILLISECOND,  1);  val.add(Calendar.MILLISECOND,  1);	  	compilable	  [FE]  AssertionFailedError  	12	2	add
22	[BUG]  [BUGGY]          val.add(Calendar.MILLISECOND,    1);    val.add(Calendar.MILLISECOND,  1);  val.add(Calendar.MILLISECOND,  1);  val.add(Calendar.MILLISECOND,  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.MILLISECOND,    1);    val.add(Calendar.MILLISECOND,  1);  val.add(Calendar.MILLISECOND,  1);  val.add(Calendar.MILLISECOND,  1);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                val.add(Calendar.MILLISECOND,        1);        val.add(Calendar.MILLISECOND,    1);    val.add(Calendar.MILLISECOND,  1);  val.add(Calendar.MILLISECOND,  1);	  	compilable	  [FE]  AssertionFailedError  	12	2	add
23	[BUG]  [BUGGY]          val.add(Calendar.MILLISECOND,    1);    val.add(Calendar.MILLISECOND,  1);  val.add(Calendar.MILLISECOND,  1));  val.add(Calendar.MILLISECOND,  1);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.MILLISECOND,    1);    val.add(Calendar.MILLISECOND,  1);  val.add(Calendar.MILLISECOND,  1));  val.add(Calendar.MILLISECOND,  1);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                val.add(Calendar.MILLISECOND,        1);        val.add(Calendar.MILLISECOND,    1);    val.add(Calendar.MILLISECOND,  1));  val.add(Calendar.MILLISECOND,  1);	  	non-compiled	[CE]  ';'  expected	12	None	add
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.HOUR_OF_DAY,    1);    val.add(Calendar.HOUR_OF_DAY,  1);  val.add(Calendar.HOUR_OF_DAY,  1);  val.add(Calendar.HOUR_OF_DAY,  1);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	add	                val.add(Calendar.HOUR_OF_DAY,        1);        val.add(Calendar.HOUR_OF_DAY,    1);    val.add(Calendar.HOUR_OF_DAY,  1);  val.add(Calendar.HOUR_OF_DAY,  1);	  	compilable	  [FE]  AssertionFailedError  	63	2	add
25	[BUG]  [BUGGY]          val.add(Calendar.HOUR_OF_DAY,    1);    val.add(Calendar.HOUR_OF_DAY,  1);  val.add(Calendar.HOUR_OF_DAY,  1);  val.add(Calendar.HOUR_OF_DAY,  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.HOUR_OF_DAY,    1);    val.add(Calendar.HOUR_OF_DAY,  1);  val.add(Calendar.HOUR_OF_DAY,  1);  val.add(Calendar.HOUR_OF_DAY,  1);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                val.add(Calendar.HOUR_OF_DAY,        1);        val.add(Calendar.HOUR_OF_DAY,    1);    val.add(Calendar.HOUR_OF_DAY,  1);  val.add(Calendar.HOUR_OF_DAY,  1);	  	compilable	  [FE]  AssertionFailedError  	63	2	add
26	[BUG]  [BUGGY]          val.add(Calendar.HOUR_OF_DAY,    1);    val.add(Calendar.HOUR_OF_DAY,  1);  val.add(Calendar.HOUR_OF_DAY,  1));  val.add(Calendar.HOUR_OF_DAY,  1);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.HOUR_OF_DAY,    1);    val.add(Calendar.HOUR_OF_DAY,  1);  val.add(Calendar.HOUR_OF_DAY,  1));  val.add(Calendar.HOUR_OF_DAY,  1);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                val.add(Calendar.HOUR_OF_DAY,        1);        val.add(Calendar.HOUR_OF_DAY,    1);    val.add(Calendar.HOUR_OF_DAY,  1));  val.add(Calendar.HOUR_OF_DAY,  1);	  	non-compiled	[CE]  ';'  expected	63	None	add
27	[BUG]  [BUGGY]          val.add(Calendar.HOUR_OF_DAY,    1);    val.add(Calendar.HOUR_OF_DAY,  1);  val.add(Calendar.HOUR_OF_DAY,  1,  val.add(Calendar.HOUR_OF_DAY,  1);  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.HOUR_OF_DAY,    1);    val.add(Calendar.HOUR_OF_DAY,  1);  val.add(Calendar.HOUR_OF_DAY,  1,  val.add(Calendar.HOUR_OF_DAY,  1);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                val.add(Calendar.HOUR_OF_DAY,        1);        val.add(Calendar.HOUR_OF_DAY,    1);    val.add(Calendar.HOUR_OF_DAY,  1,  val.add(Calendar.HOUR_OF_DAY,  1);	  	non-compiled	[CE]  ')'  expected	63	None	add
28	[BUG]  [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  ||  round)  {  if(field!=  DateUtils.SEMI_MONTH  ||  round)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  ||  round)  {  if(field!=  DateUtils.SEMI_MONTH  ||  round)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field!=    DateUtils.SEMI_MONTH    ||    round)    {    if(field!=  DateUtils.SEMI_MONTH  ||  round)  {	  	non-compiled	[CE]  illegal  start  of  expression	127	None	add
29	[BUG]  [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  ||  round)  {  if(field  ==  DateUtils.SEMI_MONTH  ||  round)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  ||  round)  {  if(field  ==  DateUtils.SEMI_MONTH  ||  round)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field!=    DateUtils.SEMI_MONTH    ||    round)    {    if(field  ==  DateUtils.SEMI_MONTH  ||  round)  {	  	non-compiled	[CE]  illegal  start  of  expression	127	None	add
30	[BUG]  [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  ||  round)  {  if(field  >=  DateUtils.SEMI_MONTH  ||  round)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  ||  round)  {  if(field  >=  DateUtils.SEMI_MONTH  ||  round)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field!=    DateUtils.SEMI_MONTH    ||    round)    {    if(field  >=  DateUtils.SEMI_MONTH  ||  round)  {	  	non-compiled	[CE]  illegal  start  of  expression	127	None	add
31	[BUG]  [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  ||  round)  {  if(field  >>  DateUtils.SEMI_MONTH  ||  round)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  ||  round)  {  if(field  >>  DateUtils.SEMI_MONTH  ||  round)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field!=    DateUtils.SEMI_MONTH    ||    round)    {    if(field  >>  DateUtils.SEMI_MONTH  ||  round)  {	  	non-compiled	[CE]  illegal  start  of  expression	127	None	add
32	[BUG]  [BUGGY]  if(field  >=  DateUtils.SEMI_MONTH  &&  roundUp)  {  if(field  >=  DateUtils.SEMI_MONTH  &&  roundUp)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  >=  DateUtils.SEMI_MONTH  &&  roundUp)  {  if(field  >=  DateUtils.SEMI_MONTH  &&  roundUp)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    >=    DateUtils.SEMI_MONTH    &&    roundUp)    {    if(field  >=  DateUtils.SEMI_MONTH  &&  roundUp)  {	  	non-compiled	[CE]  illegal  start  of  expression	100	None	add
33	[BUG]  [BUGGY]  if(field  >=  DateUtils.SEMI_MONTH  &&  roundUp)  {  if(field!=  DateUtils.SEMI_MONTH  &&  roundUp)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  >=  DateUtils.SEMI_MONTH  &&  roundUp)  {  if(field!=  DateUtils.SEMI_MONTH  &&  roundUp)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    >=    DateUtils.SEMI_MONTH    &&    roundUp)    {    if(field!=  DateUtils.SEMI_MONTH  &&  roundUp)  {	  	non-compiled	[CE]  illegal  start  of  expression	100	None	add
34	[BUG]  [BUGGY]  if(field  >=  DateUtils.SEMI_MONTH  &&  roundUp)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  roundUp)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  >=  DateUtils.SEMI_MONTH  &&  roundUp)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  roundUp)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    >=    DateUtils.SEMI_MONTH    &&    roundUp)    {    if(field  ==  DateUtils.SEMI_MONTH  &&  roundUp)  {	  	non-compiled	[CE]  illegal  start  of  expression	100	None	add
35	[BUG]  [BUGGY]  if(field  >=  DateUtils.SEMI_MONTH  &&  roundUp)  {  if(field  >>  DateUtils.SEMI_MONTH  &&  roundUp)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  >=  DateUtils.SEMI_MONTH  &&  roundUp)  {  if(field  >>  DateUtils.SEMI_MONTH  &&  roundUp)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    >=    DateUtils.SEMI_MONTH    &&    roundUp)    {    if(field  >>  DateUtils.SEMI_MONTH  &&  roundUp)  {	  	non-compiled	[CE]  illegal  start  of  expression	100	None	add
36	[BUG]  [BUGGY]  val.add(Calendar.DATE,  -1);  val.add(Calendar.DATE,  -1);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  val.add(Calendar.DATE,  -1);  val.add(Calendar.DATE,  -1);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	val.add(Calendar.DATE,  -1);  val.add(Calendar.DATE,  -1);	          val.add(Calendar.DATE,    -15);    VAL.add(Calendar.DATE,    -15);    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
37	[BUG]  [BUGGY]  val.add(Calendar.HOUR_OF_DAY,  0,  field);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  val.add(Calendar.HOUR_OF_DAY,  0,  field);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	val.add(Calendar.HOUR_OF_DAY,  0,  field);	  val.add(Calendar.HOUR_OF_DAY,    0);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
38	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.MONTH,    1);    val.add(Calendar.MONTH,  1);  val.add(Calendar.MONTH,  1);  val.add(Calendar.MONTH,  1);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	add	                val.add(Calendar.MONTH,        1);        val.add(Calendar.MONTH,    1);    val.add(Calendar.MONTH,  1);  val.add(Calendar.MONTH,  1);	  	compilable	  [FE]  AssertionFailedError  	51	2	add
39	[BUG]  [BUGGY]          val.add(Calendar.MONTH,    1);    val.add(Calendar.MONTH,  1);  val.add(Calendar.MONTH,  1);  val.add(Calendar.MONTH,  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.MONTH,    1);    val.add(Calendar.MONTH,  1);  val.add(Calendar.MONTH,  1);  val.add(Calendar.MONTH,  1);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                val.add(Calendar.MONTH,        1);        val.add(Calendar.MONTH,    1);    val.add(Calendar.MONTH,  1);  val.add(Calendar.MONTH,  1);	  	compilable	  [FE]  AssertionFailedError  	51	2	add
40	[BUG]  [BUGGY]          val.add(Calendar.MONTH,    1);    val.add(Calendar.MONTH,  1);  val.add(Calendar.MONTH,  1));  val.add(Calendar.MONTH,  1);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.MONTH,    1);    val.add(Calendar.MONTH,  1);  val.add(Calendar.MONTH,  1));  val.add(Calendar.MONTH,  1);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                val.add(Calendar.MONTH,        1);        val.add(Calendar.MONTH,    1);    val.add(Calendar.MONTH,  1));  val.add(Calendar.MONTH,  1);	  	non-compiled	[CE]  ';'  expected	51	None	add
41	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH)  {  if(field!=  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH)  {  if(field!=  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH)  {  if(field!=  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {	  if(field    ==    DateUtils.SEMI_MONTH    ||    field    ==    DateUtils.SEMI_MONTH)    {    if(field!=    DateUtils.SEMI_MONTH    ||    field    ==    DateUtils.SEMI_MONTH)    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
42	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  >=  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	add	if(field  >=  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {	  if(field    ==    DateUtils.SEMI_MONTH    ||    field    ==    DateUtils.SEMI_MONTH)    {    if(field!=    DateUtils.SEMI_MONTH    ||    field    ==    DateUtils.SEMI_MONTH)    {    	compilable	  [FE]  AssertionFailedError  	27	1	replace
43	[BUG]  [BUGGY]  if(field  >=  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  >=  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  >=  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {	  if(field    ==    DateUtils.SEMI_MONTH    ||    field    ==    DateUtils.SEMI_MONTH)    {    if(field!=    DateUtils.SEMI_MONTH    ||    field    ==    DateUtils.SEMI_MONTH)    {    	compilable	  [FE]  AssertionFailedError  	27	1	replace
44	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  ||  roundUp)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	add	if(field!=  DateUtils.SEMI_MONTH  ||  roundUp)  {	  if(field!=    DateUtils.SEMI_MONTH    &&    roundUp)    {    	compilable	  [FE]  AssertionFailedError  	99	2	replace
45	[BUG]  [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  ||  roundUp)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  ||  roundUp)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field!=  DateUtils.SEMI_MONTH  ||  roundUp)  {	  if(field!=    DateUtils.SEMI_MONTH    &&    roundUp)    {    	compilable	  [FE]  AssertionFailedError  	99	2	replace
46	[BUG]  [BUGGY]  ((  Calendar)val).setTime(this.date,  round);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  ((  Calendar)val).setTime(this.date,  round);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	((  Calendar)val).setTime(this.date,  round);	  ((    Calendar)val).setTime(this.date);    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
47	[BUG]  [BUGGY]  ((  Calendar)val).setTime(this.date,  field);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  ((  Calendar)val).setTime(this.date,  field);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	((  Calendar)val).setTime(this.date,  field);	  ((    Calendar)val).setTime(this.date);    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
48	[BUG]  [BUGGY]  ((  Calendar)val).setTime(this.dayOfMonth,  this.date);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  ((  Calendar)val).setTime(this.dayOfMonth,  this.date);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	((  Calendar)val).setTime(this.dayOfMonth,  this.date);	  ((    Calendar)val).setTime(this.date);    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
49	[BUG]  [BUGGY]  ((  Calendar)val).setTime(this.time);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  ((  Calendar)val).setTime(this.time);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	((  Calendar)val).setTime(this.time);	  ((    Calendar)val).setTime(this.date);    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
50	[BUG]  [BUGGY]  if(field  ==  DateUtils.SECOND_MONTH  ||  field  ==  DateUtils.SECOND_MONTH)  {  [CE]  cannot  find  symbol  SECOND_MONTH  [FE]          AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SECOND_MONTH  ||  field  ==  DateUtils.SECOND_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SECOND_MONTH  ||  field  ==  DateUtils.SECOND_MONTH)  {	  if(field    ==    DateUtils.SEMI_MONTH    ||    field    ==    DateUtils.SECOND_MONTH)    {    	non-compiled	[CE]  cannot  find  symbol  SECOND_MONTH	85	None	replace
51	[BUG]  [BUGGY]  if(field  ==  DateUtils.DATE  ||  field  ==  DateUtils.SECOND_MONTH)  {  [CE]  cannot  find  symbol  DATE  [FE]            AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.DATE  ||  field  ==  DateUtils.SECOND_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.DATE  ||  field  ==  DateUtils.SECOND_MONTH)  {	  if(field    ==    DateUtils.SEMI_MONTH    ||    field    ==    DateUtils.SECOND_MONTH)    {    	non-compiled	[CE]  cannot  find  symbol  DATE	85	None	replace
52	[BUG]  [BUGGY]  if(field  ==  DateUtils.SECOND  ||  field  ==  DateUtils.SECOND_MONTH)  {  [CE]  cannot  find  symbol  SECOND  [FE]              AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SECOND  ||  field  ==  DateUtils.SECOND_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SECOND  ||  field  ==  DateUtils.SECOND_MONTH)  {	  if(field    ==    DateUtils.SEMI_MONTH    ||    field    ==    DateUtils.SECOND_MONTH)    {    	non-compiled	[CE]  cannot  find  symbol  SECOND	85	None	replace
53	[BUG]  [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  &&  round)  {  if(field!=  DateUtils.SEMI_MONTH  &&  round)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  &&  round)  {  if(field!=  DateUtils.SEMI_MONTH  &&  round)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field!=    DateUtils.SEMI_MONTH    &&    round)    {    if(field!=  DateUtils.SEMI_MONTH  &&  round)  {	  	non-compiled	[CE]  illegal  start  of  expression	109	None	add
54	[BUG]  [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  &&  round)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  round)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  &&  round)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  round)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field!=    DateUtils.SEMI_MONTH    &&    round)    {    if(field  ==  DateUtils.SEMI_MONTH  &&  round)  {	  	non-compiled	[CE]  illegal  start  of  expression	109	None	add
55	[BUG]  [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  &&  round)  {  if(field  >=  DateUtils.SEMI_MONTH  &&  round)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  &&  round)  {  if(field  >=  DateUtils.SEMI_MONTH  &&  round)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field!=    DateUtils.SEMI_MONTH    &&    round)    {    if(field  >=  DateUtils.SEMI_MONTH  &&  round)  {	  	non-compiled	[CE]  illegal  start  of  expression	109	None	add
56	[BUG]  [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  &&  round)  {  if(field  >>  DateUtils.SEMI_MONTH  &&  round)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  &&  round)  {  if(field  >>  DateUtils.SEMI_MONTH  &&  round)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field!=    DateUtils.SEMI_MONTH    &&    round)    {    if(field  >>  DateUtils.SEMI_MONTH  &&  round)  {	  	non-compiled	[CE]  illegal  start  of  expression	109	None	add
57	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  field  ==  DateUtils.SEMI_MONTH)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  field  ==  DateUtils.SEMI_MONTH)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  field  ==  DateUtils.SEMI_MONTH)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  field  ==  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    ==    DateUtils.SEMI_MONTH    &&    field    ==    DateUtils.SEMI_MONTH)    {    if(field  ==  DateUtils.SEMI_MONTH  &&  field  ==  DateUtils.SEMI_MONTH)  {	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
58	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  field  ==  DateUtils.SEMI_MONTH)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  field!=  DateUtils.SEMI_MONTH)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  field  ==  DateUtils.SEMI_MONTH)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  field!=  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    ==    DateUtils.SEMI_MONTH    &&    field    ==    DateUtils.SEMI_MONTH)    {    if(field  ==  DateUtils.SEMI_MONTH  &&  field!=  DateUtils.SEMI_MONTH)  {	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
59	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  field  ==  DateUtils.SEMI_MONTH)  {  if(field!=  DateUtils.SEMI_MONTH  &&  field  ==  DateUtils.SEMI_MONTH)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  field  ==  DateUtils.SEMI_MONTH)  {  if(field!=  DateUtils.SEMI_MONTH  &&  field  ==  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    ==    DateUtils.SEMI_MONTH    &&    field    ==    DateUtils.SEMI_MONTH)    {    if(field!=  DateUtils.SEMI_MONTH  &&  field  ==  DateUtils.SEMI_MONTH)  {	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
60	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  field  ==  DateUtils.SEMI_MONTH)  {  if(field  >=  DateUtils.SEMI_MONTH  &&  field  ==  DateUtils.SEMI_MONTH)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  field  ==  DateUtils.SEMI_MONTH)  {  if(field  >=  DateUtils.SEMI_MONTH  &&  field  ==  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    ==    DateUtils.SEMI_MONTH    &&    field    ==    DateUtils.SEMI_MONTH)    {    if(field  >=  DateUtils.SEMI_MONTH  &&  field  ==  DateUtils.SEMI_MONTH)  {	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
61	[BUG]  [BUGGY]  ((  Calendar)val).setTime(dayOfMonth,  year);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  ((  Calendar)val).setTime(dayOfMonth,  year);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	((  Calendar)val).setTime(dayOfMonth,  year);	  ((    Calendar)val).setTime(year);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
62	[BUG]  [BUGGY]  ((  Calendar)val).setTime(this.year);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  ((  Calendar)val).setTime(this.year);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	((  Calendar)val).setTime(this.year);	  ((    Calendar)val).setTime(year);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
63	[BUG]  [BUGGY]  val.add(Calendar.MILLISECOND,  2);  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  val.add(Calendar.MILLISECOND,  2);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	val.add(Calendar.MILLISECOND,  2);	          val.add(Calendar.MILLISECOND,    1);    val.add(Calendar.MILLISECOND,    2);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
64	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.DATE,    -15);    val.add(Calendar.DATE,  -15);  val.add(Calendar.DATE,  -15);  val.add(Calendar.DATE,  -15);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	add	                val.add(Calendar.DATE,        -15);        val.add(Calendar.DATE,    -15);    val.add(Calendar.DATE,  -15);  val.add(Calendar.DATE,  -15);	  	compilable	  [FE]  AssertionFailedError  	92	2	add
65	[BUG]  [BUGGY]          val.add(Calendar.DATE,    -15);    val.add(Calendar.DATE,  -15);  val.add(Calendar.DATE,  -15);  val.add(Calendar.DATE,  -15);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.DATE,    -15);    val.add(Calendar.DATE,  -15);  val.add(Calendar.DATE,  -15);  val.add(Calendar.DATE,  -15);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                val.add(Calendar.DATE,        -15);        val.add(Calendar.DATE,    -15);    val.add(Calendar.DATE,  -15);  val.add(Calendar.DATE,  -15);	  	compilable	  [FE]  AssertionFailedError  	92	2	add
66	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.DATE,    -15);    val.add(Calendar.DATE,  -15);  val.add(Calendar.DATE,  15);  val.add(Calendar.DATE,  -15);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	add	                val.add(Calendar.DATE,        -15);        val.add(Calendar.DATE,    -15);    val.add(Calendar.DATE,  15);  val.add(Calendar.DATE,  -15);	  	compilable	  [FE]  AssertionFailedError  	92	2	add
67	[BUG]  [BUGGY]          val.add(Calendar.DATE,    -15);    val.add(Calendar.DATE,  -15);  val.add(Calendar.DATE,  15);  val.add(Calendar.DATE,  -15);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.DATE,    -15);    val.add(Calendar.DATE,  -15);  val.add(Calendar.DATE,  15);  val.add(Calendar.DATE,  -15);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                val.add(Calendar.DATE,        -15);        val.add(Calendar.DATE,    -15);    val.add(Calendar.DATE,  15);  val.add(Calendar.DATE,  -15);	  	compilable	  [FE]  AssertionFailedError  	92	2	add
68	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  val.get(Calendar.DATE)  ==  1)  {  if(field  ==  DateUtils.SEMI_MONTH  ||  val.get(Calendar.DATE)  ==  1)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  val.get(Calendar.DATE)  ==  1)  {  if(field  ==  DateUtils.SEMI_MONTH  ||  val.get(Calendar.DATE)  ==  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    ==    DateUtils.SEMI_MONTH    ||    val.get(Calendar.DATE)    ==    1)    {    if(field  ==  DateUtils.SEMI_MONTH  ||  val.get(Calendar.DATE)  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
69	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  val.get(Calendar.DATE)  ==  1)  {  if(field  ==  DateUtils.SEMI_MONTH  ||  val.get(Calendar.DATE)!=  1)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  val.get(Calendar.DATE)  ==  1)  {  if(field  ==  DateUtils.SEMI_MONTH  ||  val.get(Calendar.DATE)!=  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    ==    DateUtils.SEMI_MONTH    ||    val.get(Calendar.DATE)    ==    1)    {    if(field  ==  DateUtils.SEMI_MONTH  ||  val.get(Calendar.DATE)!=  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
70	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  val.get(Calendar.DATE)  ==  1)  {  if(field  ==  DateUtils.SEMI_MONTH  ||  val.get(Calendar.DATE)  >=  1)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  val.get(Calendar.DATE)  ==  1)  {  if(field  ==  DateUtils.SEMI_MONTH  ||  val.get(Calendar.DATE)  >=  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    ==    DateUtils.SEMI_MONTH    ||    val.get(Calendar.DATE)    ==    1)    {    if(field  ==  DateUtils.SEMI_MONTH  ||  val.get(Calendar.DATE)  >=  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
71	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  val.get(Calendar.DATE)  ==  1)  {  if(field!=  DateUtils.SEMI_MONTH  ||  val.get(Calendar.DATE)  ==  1)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  val.get(Calendar.DATE)  ==  1)  {  if(field!=  DateUtils.SEMI_MONTH  ||  val.get(Calendar.DATE)  ==  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    ==    DateUtils.SEMI_MONTH    ||    val.get(Calendar.DATE)    ==    1)    {    if(field!=  DateUtils.SEMI_MONTH  ||  val.get(Calendar.DATE)  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
72	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  >  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	add	if(field  >  DateUtils.SEMI_MONTH)  {	  if(field    >=    DateUtils.SEMI_MONTH)    {    	compilable	  [FE]  AssertionFailedError  	39	2	replace
73	[BUG]  [BUGGY]  if(field  >  DateUtils.SEMI_MONTH)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  >  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  >  DateUtils.SEMI_MONTH)  {	  if(field    >=    DateUtils.SEMI_MONTH)    {    	compilable	  [FE]  AssertionFailedError  	39	2	replace
74	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.DATE)  {  [CE]  cannot  find  symbol  DATE  [FE]          AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.DATE)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.DATE)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)    ==    1)    {    if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)!=    1)    {    	non-compiled	[CE]  cannot  find  symbol  DATE	22	None	replace
75	[BUG]  [BUGGY]  if(round  ||  round)  {  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(round  ||  round)  {  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(round  ||  round)  {  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {	  if(field    ==    DateUtils.SEMI_MONTH    ||    field    ==    DateUtils.SEMI_MONTH)    {    if(field    ==    DateUtils.SEMI_MONTH    ||    field!=    DateUtils.SEMI_MONTH)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
76	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  >=  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	add	if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  >=  1)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)    ==    1)    {    if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)    >=    1)    {    	compilable	  [FE]  AssertionFailedError  	24	1	replace
77	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  >=  1)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  >=  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  >=  1)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)    ==    1)    {    if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)    >=    1)    {    	compilable	  [FE]  AssertionFailedError  	24	1	replace
78	[BUG]  [BUGGY]  val.add(Calendar.DATE,  -1);  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  val.add(Calendar.DATE,  -1);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	val.add(Calendar.DATE,  -1);	          val.add(Calendar.DATE,    -15);    val.add(Calendar.DATE,    -15);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
79	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.MILLISECOND,    0);    val.add(Calendar.MILLISECOND,  1);  val.add(Calendar.MILLISECOND,  0);  val.add(Calendar.MILLISECOND,  1);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	add	                val.add(Calendar.MILLISECOND,        0);        val.add(Calendar.MILLISECOND,    1);    val.add(Calendar.MILLISECOND,  0);  val.add(Calendar.MILLISECOND,  1);	  	compilable	  [FE]  AssertionFailedError  	114	2	add
80	[BUG]  [BUGGY]          val.add(Calendar.MILLISECOND,    0);    val.add(Calendar.MILLISECOND,  1);  val.add(Calendar.MILLISECOND,  0);  val.add(Calendar.MILLISECOND,  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.MILLISECOND,    0);    val.add(Calendar.MILLISECOND,  1);  val.add(Calendar.MILLISECOND,  0);  val.add(Calendar.MILLISECOND,  1);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                val.add(Calendar.MILLISECOND,        0);        val.add(Calendar.MILLISECOND,    1);    val.add(Calendar.MILLISECOND,  0);  val.add(Calendar.MILLISECOND,  1);	  	compilable	  [FE]  AssertionFailedError  	114	2	add
81	[BUG]  [BUGGY]          val.add(Calendar.MILLISECOND,    0);    val.add(Calendar.MILLISECOND,  1);  val.add(Calendar.MILLISECOND,  0,  val.add(Calendar.MILLISECOND,  1);  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.MILLISECOND,    0);    val.add(Calendar.MILLISECOND,  1);  val.add(Calendar.MILLISECOND,  0,  val.add(Calendar.MILLISECOND,  1);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                val.add(Calendar.MILLISECOND,        0);        val.add(Calendar.MILLISECOND,    1);    val.add(Calendar.MILLISECOND,  0,  val.add(Calendar.MILLISECOND,  1);	  	non-compiled	[CE]  ')'  expected	114	None	add
82	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH)  {  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH)  {  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH)  {  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {	  if(field    ==    DateUtils.SEMI_MONTH    ||    field    ==    DateUtils.SEMI_MONTH)    {    if(field    ==    DateUtils.SEMI_MONTH    ||    field    ==    DateUtils.SEMI_MONTH)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
83	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  Calendar.DATE)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	add	if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  Calendar.DATE)  {	  if(field    ==    DateUtils.SEMI_MONTH    ||    field    ==    Calendar.SEMI_MONTH)    {    	compilable	  [FE]  AssertionFailedError  	130	2	replace
84	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  Calendar.DATE)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  Calendar.DATE)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  Calendar.DATE)  {	  if(field    ==    DateUtils.SEMI_MONTH    ||    field    ==    Calendar.SEMI_MONTH)    {    	compilable	  [FE]  AssertionFailedError  	130	2	replace
85	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  Calendar.SECOND)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	add	if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  Calendar.SECOND)  {	  if(field    ==    DateUtils.SEMI_MONTH    ||    field    ==    Calendar.SEMI_MONTH)    {    	compilable	  [FE]  AssertionFailedError  	130	2	replace
86	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  Calendar.SECOND)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  Calendar.SECOND)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  Calendar.SECOND)  {	  if(field    ==    DateUtils.SEMI_MONTH    ||    field    ==    Calendar.SEMI_MONTH)    {    	compilable	  [FE]  AssertionFailedError  	130	2	replace
87	[BUG]  [BUGGY]  if(field  ==  DateUtils.DATE  ||  field  ==  Calendar.SEMI_MONTH)  {  [CE]  cannot  find  symbol  DATE  [FE]            AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.DATE  ||  field  ==  Calendar.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.DATE  ||  field  ==  Calendar.SEMI_MONTH)  {	  if(field    ==    DateUtils.SEMI_MONTH    ||    field    ==    Calendar.SEMI_MONTH)    {    	non-compiled	[CE]  cannot  find  symbol  DATE	130	None	replace
88	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  Calendar.DAY_OF_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	add	if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  Calendar.DAY_OF_MONTH)  {	  if(field    ==    DateUtils.SEMI_MONTH    ||    field    ==    Calendar.SEMI_MONTH)    {    	compilable	  [FE]  AssertionFailedError  	130	2	replace
89	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  Calendar.DAY_OF_MONTH)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  Calendar.DAY_OF_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  Calendar.DAY_OF_MONTH)  {	  if(field    ==    DateUtils.SEMI_MONTH    ||    field    ==    Calendar.SEMI_MONTH)    {    	compilable	  [FE]  AssertionFailedError  	130	2	replace
90	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  roundUp  ||  round)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	add	if(field  ==  DateUtils.SEMI_MONTH  &&  roundUp  ||  round)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    round    ||    round)    {    	compilable	  [FE]  AssertionFailedError  	11	2	replace
91	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  roundUp  ||  round)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  roundUp  ||  round)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH  &&  roundUp  ||  round)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    round    ||    round)    {    	compilable	  [FE]  AssertionFailedError  	11	2	replace
92	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  round  ||  roundUp)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	add	if(field  ==  DateUtils.SEMI_MONTH  &&  round  ||  roundUp)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    round    ||    round)    {    	compilable	  [FE]  AssertionFailedError  	11	2	replace
93	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  round  ||  roundUp)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  round  ||  roundUp)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH  &&  round  ||  roundUp)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    round    ||    round)    {    	compilable	  [FE]  AssertionFailedError  	11	2	replace
94	[BUG]  [BUGGY]  ((  Calendar)val).setTime(dayOfMonth  -  1);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  ((  Calendar)val).setTime(dayOfMonth  -  1);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	((  Calendar)val).setTime(dayOfMonth  -  1);	  ((    Calendar)val).setTime(dayOfMonth);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
95	[BUG]  [BUGGY]  ((  Calendar)val).setTime(dayOfMonth,  round);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  ((  Calendar)val).setTime(dayOfMonth,  round);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	((  Calendar)val).setTime(dayOfMonth,  round);	  ((    Calendar)val).setTime(dayOfMonth);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
96	[BUG]  [BUGGY]  ((  Calendar)val).setTime(this.dayOfMonth);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  ((  Calendar)val).setTime(this.dayOfMonth);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	((  Calendar)val).setTime(this.dayOfMonth);	  ((    Calendar)val).setTime(dayOfMonth);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
97	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.DATE,    3);    val.add(Calendar.DATE,  4);  val.add(Calendar.DATE,  3);  val.add(Calendar.DATE,  4);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	add	                val.add(Calendar.DATE,        3);        val.add(Calendar.DATE,    4);    val.add(Calendar.DATE,  3);  val.add(Calendar.DATE,  4);	  	compilable	  [FE]  AssertionFailedError  	3	2	add
98	[BUG]  [BUGGY]          val.add(Calendar.DATE,    3);    val.add(Calendar.DATE,  4);  val.add(Calendar.DATE,  3);  val.add(Calendar.DATE,  4);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.DATE,    3);    val.add(Calendar.DATE,  4);  val.add(Calendar.DATE,  3);  val.add(Calendar.DATE,  4);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                val.add(Calendar.DATE,        3);        val.add(Calendar.DATE,    4);    val.add(Calendar.DATE,  3);  val.add(Calendar.DATE,  4);	  	compilable	  [FE]  AssertionFailedError  	3	2	add
99	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.DATE,    3);    val.add(Calendar.DATE,  4);  val.add(Calendar.DATE,  4);  val.add(Calendar.DATE,  4);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	add	                val.add(Calendar.DATE,        3);        val.add(Calendar.DATE,    4);    val.add(Calendar.DATE,  4);  val.add(Calendar.DATE,  4);	  	compilable	  [FE]  AssertionFailedError  	3	2	add
100	[BUG]  [BUGGY]          val.add(Calendar.DATE,    3);    val.add(Calendar.DATE,  4);  val.add(Calendar.DATE,  4);  val.add(Calendar.DATE,  4);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.DATE,    3);    val.add(Calendar.DATE,  4);  val.add(Calendar.DATE,  4);  val.add(Calendar.DATE,  4);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                val.add(Calendar.DATE,        3);        val.add(Calendar.DATE,    4);    val.add(Calendar.DATE,  4);  val.add(Calendar.DATE,  4);	  	compilable	  [FE]  AssertionFailedError  	3	2	add
101	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.DATE,    3);    val.add(Calendar.DATE,  4);  val.add(Calendar.DATE,  3);  val.add(Calendar.DATE,  5);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	add	                val.add(Calendar.DATE,        3);        val.add(Calendar.DATE,    4);    val.add(Calendar.DATE,  3);  val.add(Calendar.DATE,  5);	  	compilable	  [FE]  AssertionFailedError  	3	2	add
102	[BUG]  [BUGGY]          val.add(Calendar.DATE,    3);    val.add(Calendar.DATE,  4);  val.add(Calendar.DATE,  3);  val.add(Calendar.DATE,  5);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.DATE,    3);    val.add(Calendar.DATE,  4);  val.add(Calendar.DATE,  3);  val.add(Calendar.DATE,  5);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                val.add(Calendar.DATE,        3);        val.add(Calendar.DATE,    4);    val.add(Calendar.DATE,  3);  val.add(Calendar.DATE,  5);	  	compilable	  [FE]  AssertionFailedError  	3	2	add
103	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(j)  ==  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	add	if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(j)  ==  1)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(i)    ==    1)    {    	compilable	  [FE]  AssertionFailedError  	69	2	replace
104	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(j)  ==  1)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(j)  ==  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(j)  ==  1)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(i)    ==    1)    {    	compilable	  [FE]  AssertionFailedError  	69	2	replace
105	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(i)  <  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	add	if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(i)  <  1)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(i)    ==    1)    {    	compilable	  [FE]  AssertionFailedError  	69	2	replace
106	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(i)  <  1)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(i)  <  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(i)  <  1)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(i)    ==    1)    {    	compilable	  [FE]  AssertionFailedError  	69	2	replace
107	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  val.get(i)  ==  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	add	if(field  ==  DateUtils.SEMI_MONTH  ||  val.get(i)  ==  1)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(i)    ==    1)    {    	compilable	  [FE]  AssertionFailedError  	69	2	replace
108	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  val.get(i)  ==  1)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  val.get(i)  ==  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH  ||  val.get(i)  ==  1)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(i)    ==    1)    {    	compilable	  [FE]  AssertionFailedError  	69	2	replace
109	[BUG]  [BUGGY]  val.add(Calendar.HOUR_OF_DAY,  15);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  val.add(Calendar.HOUR_OF_DAY,  15);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	val.add(Calendar.HOUR_OF_DAY,  15);	  val.add(Calendar.HOUR_OF_DAY,    -15);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
110	[BUG]  [BUGGY]  val.set(i,  1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  val.set(i,  1);  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	val.set(i,  1);	  val.set(Calendar.MONTH,    1);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
111	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  roundUp)  {  if(field  ==  DateUtils.SEMI_MONTH  ||  roundUp)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  roundUp)  {  if(field  ==  DateUtils.SEMI_MONTH  ||  roundUp)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    ==    DateUtils.SEMI_MONTH    ||    roundUp)    {    if(field  ==  DateUtils.SEMI_MONTH  ||  roundUp)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
112	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  roundUp)  {  if(field!=  DateUtils.SEMI_MONTH  ||  roundUp)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  roundUp)  {  if(field!=  DateUtils.SEMI_MONTH  ||  roundUp)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    ==    DateUtils.SEMI_MONTH    ||    roundUp)    {    if(field!=  DateUtils.SEMI_MONTH  ||  roundUp)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
113	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  roundUp)  {  If(field  ==  DateUtils.SEMI_MONTH  ||  roundUp)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  roundUp)  {  If(field  ==  DateUtils.SEMI_MONTH  ||  roundUp)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    ==    DateUtils.SEMI_MONTH    ||    roundUp)    {    If(field  ==  DateUtils.SEMI_MONTH  ||  roundUp)  {	  	non-compiled	[CE]  ';'  expected	6	None	add
114	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  roundUp)  {  if(field  >=  DateUtils.SEMI_MONTH  ||  roundUp)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  roundUp)  {  if(field  >=  DateUtils.SEMI_MONTH  ||  roundUp)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    ==    DateUtils.SEMI_MONTH    ||    roundUp)    {    if(field  >=  DateUtils.SEMI_MONTH  ||  roundUp)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
115	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(i)  ==  1)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(i)  ==  1)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(i)  ==  1)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(i)  ==  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(i)    ==    1)    {    if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(i)  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
116	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(i)  ==  1)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(i)  >=  1)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(i)  ==  1)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(i)  >=  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(i)    ==    1)    {    if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(i)  >=  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
117	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(i)  ==  1)  {  if(field!=  DateUtils.SEMI_MONTH  &&  val.get(i)  ==  1)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(i)  ==  1)  {  if(field!=  DateUtils.SEMI_MONTH  &&  val.get(i)  ==  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(i)    ==    1)    {    if(field!=  DateUtils.SEMI_MONTH  &&  val.get(i)  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
118	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(i)  ==  1)  {  If(field  ==  DateUtils.SEMI_MONTH  &&  val.get(i)  ==  1)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(i)  ==  1)  {  If(field  ==  DateUtils.SEMI_MONTH  &&  val.get(i)  ==  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(i)    ==    1)    {    If(field  ==  DateUtils.SEMI_MONTH  &&  val.get(i)  ==  1)  {	  	non-compiled	[CE]  ';'  expected	68	None	add
119	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)    ==    1)    {    if(field!=    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
120	[BUG]  [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  &&  field  ==  DateUtils.SEMI_MONTH)  {  if(field!=  DateUtils.SEMI_MONTH  &&  field  ==  DateUtils.SEMI_MONTH)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  &&  field  ==  DateUtils.SEMI_MONTH)  {  if(field!=  DateUtils.SEMI_MONTH  &&  field  ==  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field!=    DateUtils.SEMI_MONTH    &&    field    ==    DateUtils.SEMI_MONTH)    {    if(field!=  DateUtils.SEMI_MONTH  &&  field  ==  DateUtils.SEMI_MONTH)  {	  	non-compiled	[CE]  illegal  start  of  expression	112	None	add
121	[BUG]  [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  &&  field  ==  DateUtils.SEMI_MONTH)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  field  ==  DateUtils.SEMI_MONTH)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  &&  field  ==  DateUtils.SEMI_MONTH)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  field  ==  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field!=    DateUtils.SEMI_MONTH    &&    field    ==    DateUtils.SEMI_MONTH)    {    if(field  ==  DateUtils.SEMI_MONTH  &&  field  ==  DateUtils.SEMI_MONTH)  {	  	non-compiled	[CE]  illegal  start  of  expression	112	None	add
122	[BUG]  [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  &&  field  ==  DateUtils.SEMI_MONTH)  {  if(field  >=  DateUtils.SEMI_MONTH  &&  field  ==  DateUtils.SEMI_MONTH)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  &&  field  ==  DateUtils.SEMI_MONTH)  {  if(field  >=  DateUtils.SEMI_MONTH  &&  field  ==  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field!=    DateUtils.SEMI_MONTH    &&    field    ==    DateUtils.SEMI_MONTH)    {    if(field  >=  DateUtils.SEMI_MONTH  &&  field  ==  DateUtils.SEMI_MONTH)  {	  	non-compiled	[CE]  illegal  start  of  expression	112	None	add
123	[BUG]  [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  &&  field  ==  DateUtils.SEMI_MONTH)  {  if(field  >>  DateUtils.SEMI_MONTH  &&  field  ==  DateUtils.SEMI_MONTH)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  &&  field  ==  DateUtils.SEMI_MONTH)  {  if(field  >>  DateUtils.SEMI_MONTH  &&  field  ==  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field!=    DateUtils.SEMI_MONTH    &&    field    ==    DateUtils.SEMI_MONTH)    {    if(field  >>  DateUtils.SEMI_MONTH  &&  field  ==  DateUtils.SEMI_MONTH)  {	  	non-compiled	[CE]  illegal  start  of  expression	112	None	add
124	[BUG]  [BUGGY]  val.add(Calendar.YEAR,  -15);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  val.add(Calendar.YEAR,  -15);  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	val.add(Calendar.YEAR,  -15);	  val.add(Calendar.YEAR,    1);    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
125	[BUG]  [BUGGY]  val.add(Calendar.YEAR,  0);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  val.add(Calendar.YEAR,  0);  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	val.add(Calendar.YEAR,  0);	  val.add(Calendar.YEAR,    1);    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
126	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  val.get(Calendar.DATE)!=  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	add	if(field  ==  DateUtils.SEMI_MONTH  ||  val.get(Calendar.DATE)!=  1)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)!=    1)    {    	compilable	  [FE]  AssertionFailedError  	106	2	replace
127	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  val.get(Calendar.DATE)!=  1)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  val.get(Calendar.DATE)!=  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH  ||  val.get(Calendar.DATE)!=  1)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)!=    1)    {    	compilable	  [FE]  AssertionFailedError  	106	2	replace
128	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  {  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)    ==    1)    {    if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)    {    1)    {    	non-compiled	[CE]  ')'  expected	116	None	replace
129	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.DATE)  {  if(val.get(Calendar.DATE)  {  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.DATE)  {  if(val.get(Calendar.DATE)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.DATE)  {  if(val.get(Calendar.DATE)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)    ==    1)    {    if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)    {    1)    {    	non-compiled	[CE]  ')'  expected	116	None	replace
130	[BUG]  [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  &&  roundUp)  {  if(field!=  DateUtils.SEMI_MONTH  &&  roundUp)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  &&  roundUp)  {  if(field!=  DateUtils.SEMI_MONTH  &&  roundUp)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field!=    DateUtils.SEMI_MONTH    &&    roundUp)    {    if(field!=  DateUtils.SEMI_MONTH  &&  roundUp)  {	  	non-compiled	[CE]  illegal  start  of  expression	98	None	add
131	[BUG]  [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  &&  roundUp)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  roundUp)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  &&  roundUp)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  roundUp)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field!=    DateUtils.SEMI_MONTH    &&    roundUp)    {    if(field  ==  DateUtils.SEMI_MONTH  &&  roundUp)  {	  	non-compiled	[CE]  illegal  start  of  expression	98	None	add
132	[BUG]  [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  &&  roundUp)  {  if(field  >=  DateUtils.SEMI_MONTH  &&  roundUp)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  &&  roundUp)  {  if(field  >=  DateUtils.SEMI_MONTH  &&  roundUp)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field!=    DateUtils.SEMI_MONTH    &&    roundUp)    {    if(field  >=  DateUtils.SEMI_MONTH  &&  roundUp)  {	  	non-compiled	[CE]  illegal  start  of  expression	98	None	add
133	[BUG]  [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  &&  roundUp)  {  if(field  >>  DateUtils.SEMI_MONTH  &&  roundUp)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  &&  roundUp)  {  if(field  >>  DateUtils.SEMI_MONTH  &&  roundUp)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field!=    DateUtils.SEMI_MONTH    &&    roundUp)    {    if(field  >>  DateUtils.SEMI_MONTH  &&  roundUp)  {	  	non-compiled	[CE]  illegal  start  of  expression	98	None	add
134	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)!=  1)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)!=  1)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)!=  1)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)!=  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)!=    1)    {    if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)!=  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	105	None	add
135	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)!=  1)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  >=  1)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)!=  1)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  >=  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)!=    1)    {    if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  >=  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	105	None	add
136	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)!=  1)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  >>  1)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)!=  1)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  >>  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)!=    1)    {    if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  >>  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	105	None	add
137	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)!=  1)  {  if(field!=  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)!=  1)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)!=  1)  {  if(field!=  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)!=  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)!=    1)    {    if(field!=  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)!=  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	105	None	add
138	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.DATE,    -15);    val.add(Calendar.DATE,  15);  val.add(Calendar.DATE,  -15);  val.add(Calendar.DATE,  15);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	add	                val.add(Calendar.DATE,        -15);        val.add(Calendar.DATE,    15);    val.add(Calendar.DATE,  -15);  val.add(Calendar.DATE,  15);	  	compilable	  [FE]  AssertionFailedError  	94	1	add
139	[BUG]  [BUGGY]          val.add(Calendar.DATE,    -15);    val.add(Calendar.DATE,  15);  val.add(Calendar.DATE,  -15);  val.add(Calendar.DATE,  15);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.DATE,    -15);    val.add(Calendar.DATE,  15);  val.add(Calendar.DATE,  -15);  val.add(Calendar.DATE,  15);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                val.add(Calendar.DATE,        -15);        val.add(Calendar.DATE,    15);    val.add(Calendar.DATE,  -15);  val.add(Calendar.DATE,  15);	  	compilable	  [FE]  AssertionFailedError  	94	1	add
140	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.DATE,    -15);    val.add(Calendar.DATE,  15);  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.DATE,  15);  }  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	add	                val.add(Calendar.DATE,        -15);        val.add(Calendar.DATE,    15);    if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.DATE,  15);  }	  	compilable	  [FE]  AssertionFailedError  	94	1	add
141	[BUG]  [BUGGY]          val.add(Calendar.DATE,    -15);    val.add(Calendar.DATE,  15);  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.DATE,  15);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.DATE,    -15);    val.add(Calendar.DATE,  15);  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.DATE,  15);  }  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                val.add(Calendar.DATE,        -15);        val.add(Calendar.DATE,    15);    if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.DATE,  15);  }	  	compilable	  [FE]  AssertionFailedError  	94	1	add
142	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.DATE,    -15);    val.add(Calendar.DATE,  15);  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  1);  }  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	add	                val.add(Calendar.DATE,        -15);        val.add(Calendar.DATE,    15);    if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  1);  }	  	compilable	  [FE]  AssertionFailedError  	94	2	add
143	[BUG]  [BUGGY]          val.add(Calendar.DATE,    -15);    val.add(Calendar.DATE,  15);  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  1);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.DATE,    -15);    val.add(Calendar.DATE,  15);  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  1);  }  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                val.add(Calendar.DATE,        -15);        val.add(Calendar.DATE,    15);    if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  1);  }	  	compilable	  [FE]  AssertionFailedError  	94	2	add
144	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.HOUR_OF_DAY,    1);    val.add(Calendar.HOUR_OF_DAY,  2);  val.add(Calendar.HOUR_OF_DAY,  1);  val.add(Calendar.HOUR_OF_DAY,  2);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	add	                val.add(Calendar.HOUR_OF_DAY,        1);        val.add(Calendar.HOUR_OF_DAY,    2);    val.add(Calendar.HOUR_OF_DAY,  1);  val.add(Calendar.HOUR_OF_DAY,  2);	  	compilable	  [FE]  AssertionFailedError  	66	2	add
145	[BUG]  [BUGGY]          val.add(Calendar.HOUR_OF_DAY,    1);    val.add(Calendar.HOUR_OF_DAY,  2);  val.add(Calendar.HOUR_OF_DAY,  1);  val.add(Calendar.HOUR_OF_DAY,  2);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.HOUR_OF_DAY,    1);    val.add(Calendar.HOUR_OF_DAY,  2);  val.add(Calendar.HOUR_OF_DAY,  1);  val.add(Calendar.HOUR_OF_DAY,  2);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                val.add(Calendar.HOUR_OF_DAY,        1);        val.add(Calendar.HOUR_OF_DAY,    2);    val.add(Calendar.HOUR_OF_DAY,  1);  val.add(Calendar.HOUR_OF_DAY,  2);	  	compilable	  [FE]  AssertionFailedError  	66	2	add
146	[BUG]  [BUGGY]          val.add(Calendar.HOUR_OF_DAY,    1);    val.add(Calendar.HOUR_OF_DAY,  2);  val.add(Calendar.HOUR_OF_DAY,  1));  val.add(Calendar.HOUR_OF_DAY,  2);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.HOUR_OF_DAY,    1);    val.add(Calendar.HOUR_OF_DAY,  2);  val.add(Calendar.HOUR_OF_DAY,  1));  val.add(Calendar.HOUR_OF_DAY,  2);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                val.add(Calendar.HOUR_OF_DAY,        1);        val.add(Calendar.HOUR_OF_DAY,    2);    val.add(Calendar.HOUR_OF_DAY,  1));  val.add(Calendar.HOUR_OF_DAY,  2);	  	non-compiled	[CE]  ';'  expected	66	None	add
147	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.HOUR_OF_DAY,    1);    val.add(Calendar.HOUR_OF_DAY,  2);  val.add(Calendar.HOUR_OF_DAY,  1);  val.add(Calendar.HOUR_OF_DAY,  3);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	add	                val.add(Calendar.HOUR_OF_DAY,        1);        val.add(Calendar.HOUR_OF_DAY,    2);    val.add(Calendar.HOUR_OF_DAY,  1);  val.add(Calendar.HOUR_OF_DAY,  3);	  	compilable	  [FE]  AssertionFailedError  	66	2	add
148	[BUG]  [BUGGY]          val.add(Calendar.HOUR_OF_DAY,    1);    val.add(Calendar.HOUR_OF_DAY,  2);  val.add(Calendar.HOUR_OF_DAY,  1);  val.add(Calendar.HOUR_OF_DAY,  3);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.HOUR_OF_DAY,    1);    val.add(Calendar.HOUR_OF_DAY,  2);  val.add(Calendar.HOUR_OF_DAY,  1);  val.add(Calendar.HOUR_OF_DAY,  3);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                val.add(Calendar.HOUR_OF_DAY,        1);        val.add(Calendar.HOUR_OF_DAY,    2);    val.add(Calendar.HOUR_OF_DAY,  1);  val.add(Calendar.HOUR_OF_DAY,  3);	  	compilable	  [FE]  AssertionFailedError  	66	2	add
149	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.DATE,    1);    val.add(Calendar.DATE,  1);  val.add(Calendar.DATE,  1);  val.add(Calendar.DATE,  1);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	add	                val.add(Calendar.DATE,        1);        val.add(Calendar.DATE,    1);    val.add(Calendar.DATE,  1);  val.add(Calendar.DATE,  1);	  	compilable	  [FE]  AssertionFailedError  	42	2	add
150	[BUG]  [BUGGY]          val.add(Calendar.DATE,    1);    val.add(Calendar.DATE,  1);  val.add(Calendar.DATE,  1);  val.add(Calendar.DATE,  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.DATE,    1);    val.add(Calendar.DATE,  1);  val.add(Calendar.DATE,  1);  val.add(Calendar.DATE,  1);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                val.add(Calendar.DATE,        1);        val.add(Calendar.DATE,    1);    val.add(Calendar.DATE,  1);  val.add(Calendar.DATE,  1);	  	compilable	  [FE]  AssertionFailedError  	42	2	add
151	[BUG]  [BUGGY]          val.add(Calendar.DATE,    1);    val.add(Calendar.DATE,  1);  val.add(Calendar.DATE,  1));  val.add(Calendar.DATE,  1);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.DATE,    1);    val.add(Calendar.DATE,  1);  val.add(Calendar.DATE,  1));  val.add(Calendar.DATE,  1);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                val.add(Calendar.DATE,        1);        val.add(Calendar.DATE,    1);    val.add(Calendar.DATE,  1));  val.add(Calendar.DATE,  1);	  	non-compiled	[CE]  ';'  expected	42	None	add
152	[BUG]  [BUGGY]          val.add(Calendar.DATE,    1);    val.add(Calendar.DATE,  1);  val.add(Calendar.DATE,  1,  val.add(Calendar.DATE,  1);  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.DATE,    1);    val.add(Calendar.DATE,  1);  val.add(Calendar.DATE,  1,  val.add(Calendar.DATE,  1);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                val.add(Calendar.DATE,        1);        val.add(Calendar.DATE,    1);    val.add(Calendar.DATE,  1,  val.add(Calendar.DATE,  1);	  	non-compiled	[CE]  ')'  expected	42	None	add
153	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  round!=  DateUtils.SEMI_MONTH)  {  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]        AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  round!=  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH  ||  round!=  DateUtils.SEMI_MONTH)  {	  if(round    ==    DateUtils.SEMI_MONTH    ||    field    ==    DateUtils.SEMI_MONTH)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	78	None	replace
154	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  round  {  DateUtils.SEMI_MONTH)  {  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  round  {  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH  ||  round  {  DateUtils.SEMI_MONTH)  {	  if(round    ==    DateUtils.SEMI_MONTH    ||    field    ==    DateUtils.SEMI_MONTH)    {    	non-compiled	[CE]  ')'  expected	78	None	replace
155	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  round  >=  DateUtils.SEMI_MONTH)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  round  >=  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH  ||  round  >=  DateUtils.SEMI_MONTH)  {	  if(round    ==    DateUtils.SEMI_MONTH    ||    field    ==    DateUtils.SEMI_MONTH)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	78	None	replace
156	[BUG]  [BUGGY]  (1  <  <  ((  Calendar)val).setTime(date);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  (1  <  <  ((  Calendar)val).setTime(date);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	(1  <  <  ((  Calendar)val).setTime(date);	          ((    Calendar)val).setTime(date);    (1    <    <    ((    Calendar)val).setTime(date);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	120	None	replace
157	[BUG]  [BUGGY]  (1  <  <  ((  Calendar)val).setTime(field);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  (1  <  <  ((  Calendar)val).setTime(field);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	(1  <  <  ((  Calendar)val).setTime(field);	          ((    Calendar)val).setTime(date);    (1    <    <    ((    Calendar)val).setTime(date);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	120	None	replace
158	[BUG]  [BUGGY]  (1  <  <  ((  Calendar)val).setTime(time);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  (1  <  <  ((  Calendar)val).setTime(time);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	(1  <  <  ((  Calendar)val).setTime(time);	          ((    Calendar)val).setTime(date);    (1    <    <    ((    Calendar)val).setTime(date);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	120	None	replace
159	[BUG]  [BUGGY]  (1  <  <  ((  Calendar)val).setTime(i);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  (1  <  <  ((  Calendar)val).setTime(i);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	(1  <  <  ((  Calendar)val).setTime(i);	          ((    Calendar)val).setTime(date);    (1    <    <    ((    Calendar)val).setTime(date);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	120	None	replace
160	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.DATE,    1);    val.add(Calendar.DATE,  2);  val.add(Calendar.DATE,  1);  val.add(Calendar.DATE,  2);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	add	                val.add(Calendar.DATE,        1);        val.add(Calendar.DATE,    2);    val.add(Calendar.DATE,  1);  val.add(Calendar.DATE,  2);	  	compilable	  [FE]  AssertionFailedError  	45	2	add
161	[BUG]  [BUGGY]          val.add(Calendar.DATE,    1);    val.add(Calendar.DATE,  2);  val.add(Calendar.DATE,  1);  val.add(Calendar.DATE,  2);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.DATE,    1);    val.add(Calendar.DATE,  2);  val.add(Calendar.DATE,  1);  val.add(Calendar.DATE,  2);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                val.add(Calendar.DATE,        1);        val.add(Calendar.DATE,    2);    val.add(Calendar.DATE,  1);  val.add(Calendar.DATE,  2);	  	compilable	  [FE]  AssertionFailedError  	45	2	add
162	[BUG]  [BUGGY]          val.add(Calendar.DATE,    1);    val.add(Calendar.DATE,  2);  val.add(Calendar.DATE,  1));  val.add(Calendar.DATE,  2);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.DATE,    1);    val.add(Calendar.DATE,  2);  val.add(Calendar.DATE,  1));  val.add(Calendar.DATE,  2);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                val.add(Calendar.DATE,        1);        val.add(Calendar.DATE,    2);    val.add(Calendar.DATE,  1));  val.add(Calendar.DATE,  2);	  	non-compiled	[CE]  ';'  expected	45	None	add
163	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.DATE,    1);    val.add(Calendar.DATE,  2);  val.add(Calendar.DATE,  1);  val.add(Calendar.DATE,  3);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	add	                val.add(Calendar.DATE,        1);        val.add(Calendar.DATE,    2);    val.add(Calendar.DATE,  1);  val.add(Calendar.DATE,  3);	  	compilable	  [FE]  AssertionFailedError  	45	2	add
164	[BUG]  [BUGGY]          val.add(Calendar.DATE,    1);    val.add(Calendar.DATE,  2);  val.add(Calendar.DATE,  1);  val.add(Calendar.DATE,  3);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.DATE,    1);    val.add(Calendar.DATE,  2);  val.add(Calendar.DATE,  1);  val.add(Calendar.DATE,  3);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                val.add(Calendar.DATE,        1);        val.add(Calendar.DATE,    2);    val.add(Calendar.DATE,  1);  val.add(Calendar.DATE,  3);	  	compilable	  [FE]  AssertionFailedError  	45	2	add
165	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          ((    Calendar)val).setTime(date);    ((  Calendar)val).setTime(date);  ((  Calendar)val).setTime(date);  ((  Calendar)val).setTime(date);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	add	                ((        Calendar)val).setTime(date);        ((    Calendar)val).setTime(date);    ((  Calendar)val).setTime(date);  ((  Calendar)val).setTime(date);	  	compilable	  [FE]  AssertionFailedError  	17	2	add
166	[BUG]  [BUGGY]          ((    Calendar)val).setTime(date);    ((  Calendar)val).setTime(date);  ((  Calendar)val).setTime(date);  ((  Calendar)val).setTime(date);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          ((    Calendar)val).setTime(date);    ((  Calendar)val).setTime(date);  ((  Calendar)val).setTime(date);  ((  Calendar)val).setTime(date);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                ((        Calendar)val).setTime(date);        ((    Calendar)val).setTime(date);    ((  Calendar)val).setTime(date);  ((  Calendar)val).setTime(date);	  	compilable	  [FE]  AssertionFailedError  	17	2	add
167	[BUG]  [BUGGY]          ((    Calendar)val).setTime(date);    ((  Calendar)val).setTime(date);  ((  Calendar)val).setTime(date);  ((  Kalender)val).setTime(date);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          ((    Calendar)val).setTime(date);    ((  Calendar)val).setTime(date);  ((  Calendar)val).setTime(date);  ((  Kalender)val).setTime(date);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                ((        Calendar)val).setTime(date);        ((    Calendar)val).setTime(date);    ((  Calendar)val).setTime(date);  ((  Kalender)val).setTime(date);	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
168	[BUG]  [BUGGY]  If(field  ==  DateUtils.SEMI_MONTH  &&  roundUp)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  If(field  ==  DateUtils.SEMI_MONTH  &&  roundUp)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	If(field  ==  DateUtils.SEMI_MONTH  &&  roundUp)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    roundUp)    {    If(field    ==    DateUtils.SEMI_MONTH    &&    roundUp)    {    	non-compiled	[CE]  ';'  expected	36	None	replace
169	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  If(field  ==  DateUtils.SEMI_MONTH  ||  roundUp)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  If(field  ==  DateUtils.SEMI_MONTH  ||  roundUp)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  If(field  ==  DateUtils.SEMI_MONTH  ||  roundUp)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    roundUp)    {    If(field    ==    DateUtils.SEMI_MONTH    &&    roundUp)    {    	non-compiled	[CE]  ';'  expected	36	None	replace
170	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  if(field  ==  DateUtils.SEMI_MONTH  ||  roundUp)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  if(field  ==  DateUtils.SEMI_MONTH  ||  roundUp)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  if(field  ==  DateUtils.SEMI_MONTH  ||  roundUp)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    roundUp)    {    If(field    ==    DateUtils.SEMI_MONTH    &&    roundUp)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
171	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field  >=  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	add	if(field  ==  DateUtils.SEMI_MONTH  ||  field  >=  DateUtils.SEMI_MONTH)  {	  if(field    ==    DateUtils.SEMI_MONTH    ||    field!=    DateUtils.SEMI_MONTH)    {    	compilable	  [FE]  AssertionFailedError  	87	1	replace
172	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field  >=  DateUtils.SEMI_MONTH)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field  >=  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH  ||  field  >=  DateUtils.SEMI_MONTH)  {	  if(field    ==    DateUtils.SEMI_MONTH    ||    field!=    DateUtils.SEMI_MONTH)    {    	compilable	  [FE]  AssertionFailedError  	87	1	replace
173	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  round  ||  round)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  round  ||  round)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  round  ||  round)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  round  ||  round)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    ==    DateUtils.SEMI_MONTH    &&    round    ||    round)    {    if(field  ==  DateUtils.SEMI_MONTH  &&  round  ||  round)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
174	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  round  ||  round)  {  if(field!=  DateUtils.SEMI_MONTH  &&  round  ||  round)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  round  ||  round)  {  if(field!=  DateUtils.SEMI_MONTH  &&  round  ||  round)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    ==    DateUtils.SEMI_MONTH    &&    round    ||    round)    {    if(field!=  DateUtils.SEMI_MONTH  &&  round  ||  round)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
175	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  round  ||  round)  {  If(field  ==  DateUtils.SEMI_MONTH  &&  round  ||  round)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  round  ||  round)  {  If(field  ==  DateUtils.SEMI_MONTH  &&  round  ||  round)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    ==    DateUtils.SEMI_MONTH    &&    round    ||    round)    {    If(field  ==  DateUtils.SEMI_MONTH  &&  round  ||  round)  {	  	non-compiled	[CE]  ';'  expected	10	None	add
176	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  round  ||  round)  {  if(field  >=  DateUtils.SEMI_MONTH  &&  round  ||  round)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  round  ||  round)  {  if(field  >=  DateUtils.SEMI_MONTH  &&  round  ||  round)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    ==    DateUtils.SEMI_MONTH    &&    round    ||    round)    {    if(field  >=  DateUtils.SEMI_MONTH  &&  round  ||  round)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
177	[BUG]  [BUGGY]  val.add(Calendar.MILLISECOND,  0));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  val.add(Calendar.MILLISECOND,  0));  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	val.add(Calendar.MILLISECOND,  0));	          val.add(Calendar.MILLISECOND,    0);    val.add(Calendar.MILLISECOND,    0));    	non-compiled	[CE]  	91	None	replace
178	[BUG]  [BUGGY]  Date  date  =  val.getTimeInMillis()  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  Date  date  =  val.getTimeInMillis()  +  1;  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	Date  date  =  val.getTimeInMillis()  +  1;	  Date    date    =    val.getTimeInMillis();    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
179	[BUG]  [BUGGY]  Date  date  =  val.getTimeInMillis(),  i);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  Date  date  =  val.getTimeInMillis(),  i);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	Date  date  =  val.getTimeInMillis(),  i);	  Date    date    =    val.getTimeInMillis();    	non-compiled	[CE]  	125	None	replace
180	[BUG]  [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  if(field!=  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  if(field!=  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field!=    DateUtils.SEMI_MONTH    ||    field    ==    DateUtils.SEMI_MONTH)    {    if(field!=  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
181	[BUG]  [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field!=    DateUtils.SEMI_MONTH    ||    field    ==    DateUtils.SEMI_MONTH)    {    if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
182	[BUG]  [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  if(field  >=  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  if(field  >=  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field!=    DateUtils.SEMI_MONTH    ||    field    ==    DateUtils.SEMI_MONTH)    {    if(field  >=  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
183	[BUG]  [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  if(field  >>  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  if(field  >>  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field!=    DateUtils.SEMI_MONTH    ||    field    ==    DateUtils.SEMI_MONTH)    {    if(field  >>  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
184	[BUG]  [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  ==  1)  {  if(field!=  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  ==  1)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  ==  1)  {  if(field!=  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  ==  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field!=    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)    ==    1)    {    if(field!=  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	123	None	add
185	[BUG]  [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  ==  1)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  ==  1)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  ==  1)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  ==  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field!=    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)    ==    1)    {    if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	123	None	add
186	[BUG]  [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  ==  1)  {  if(field  >=  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  ==  1)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  ==  1)  {  if(field  >=  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  ==  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field!=    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)    ==    1)    {    if(field  >=  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	123	None	add
187	[BUG]  [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  ==  1)  {  if(field  >>  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  ==  1)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  ==  1)  {  if(field  >>  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  ==  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field!=    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)    ==    1)    {    if(field  >>  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	123	None	add
188	[BUG]  [BUGGY]  if(round)  {  if(field  ==  DateUtils.SEMI_MONTH  ||  round)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(round)  {  if(field  ==  DateUtils.SEMI_MONTH  ||  round)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(round)  {  if(field  ==  DateUtils.SEMI_MONTH  ||  round)  {	  if(field    ==    DateUtils.SEMI_MONTH    ||    round)    {    if(field    ==    DateUtils.SEMI_MONTH    ||    round)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
189	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(round  ||  field  ==  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	add	if(round  ||  field  ==  DateUtils.SEMI_MONTH)  {	  if(field    ==    DateUtils.SEMI_MONTH    ||    round)    {    if(field    ==    DateUtils.SEMI_MONTH    ||    round)    {    	compilable	  [FE]  AssertionFailedError  	74	2	replace
190	[BUG]  [BUGGY]  if(round  ||  field  ==  DateUtils.SEMI_MONTH)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(round  ||  field  ==  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(round  ||  field  ==  DateUtils.SEMI_MONTH)  {	  if(field    ==    DateUtils.SEMI_MONTH    ||    round)    {    if(field    ==    DateUtils.SEMI_MONTH    ||    round)    {    	compilable	  [FE]  AssertionFailedError  	74	2	replace
191	[BUG]  [BUGGY]  if(field  >=  DateUtils.SEMI_MONTH)  {  if(field  >=  DateUtils.SEMI_MONTH)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  >=  DateUtils.SEMI_MONTH)  {  if(field  >=  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    >=    DateUtils.SEMI_MONTH)    {    if(field  >=  DateUtils.SEMI_MONTH)  {	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
192	[BUG]  [BUGGY]  if(field  >=  DateUtils.SEMI_MONTH)  {  if(field!=  DateUtils.SEMI_MONTH)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  >=  DateUtils.SEMI_MONTH)  {  if(field!=  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    >=    DateUtils.SEMI_MONTH)    {    if(field!=  DateUtils.SEMI_MONTH)  {	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
193	[BUG]  [BUGGY]  if(field  >=  DateUtils.SEMI_MONTH)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  >=  DateUtils.SEMI_MONTH)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    >=    DateUtils.SEMI_MONTH)    {    if(field  ==  DateUtils.SEMI_MONTH)  {	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
194	[BUG]  [BUGGY]  if(field  >=  DateUtils.SEMI_MONTH)  {  if(field  >>  DateUtils.SEMI_MONTH)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  >=  DateUtils.SEMI_MONTH)  {  if(field  >>  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    >=    DateUtils.SEMI_MONTH)    {    if(field  >>  DateUtils.SEMI_MONTH)  {	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
195	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH)  {  if(field!=  DateUtils.SEMI_MONTH  &&  roundUp)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH)  {  if(field!=  DateUtils.SEMI_MONTH  &&  roundUp)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH)  {  if(field!=  DateUtils.SEMI_MONTH  &&  roundUp)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    roundUp)    {    if(field    >=    DateUtils.SEMI_MONTH    &&    roundUp)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
196	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.MONTH,    1);    val.add(Calendar.MONTH,  2);  val.add(Calendar.MONTH,  1);  val.add(Calendar.MONTH,  2);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	add	                val.add(Calendar.MONTH,        1);        val.add(Calendar.MONTH,    2);    val.add(Calendar.MONTH,  1);  val.add(Calendar.MONTH,  2);	  	compilable	  [FE]  AssertionFailedError  	54	2	add
197	[BUG]  [BUGGY]          val.add(Calendar.MONTH,    1);    val.add(Calendar.MONTH,  2);  val.add(Calendar.MONTH,  1);  val.add(Calendar.MONTH,  2);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.MONTH,    1);    val.add(Calendar.MONTH,  2);  val.add(Calendar.MONTH,  1);  val.add(Calendar.MONTH,  2);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                val.add(Calendar.MONTH,        1);        val.add(Calendar.MONTH,    2);    val.add(Calendar.MONTH,  1);  val.add(Calendar.MONTH,  2);	  	compilable	  [FE]  AssertionFailedError  	54	2	add
198	[BUG]  [BUGGY]          val.add(Calendar.MONTH,    1);    val.add(Calendar.MONTH,  2);  val.add(Calendar.MONTH,  1));  val.add(Calendar.MONTH,  2);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.MONTH,    1);    val.add(Calendar.MONTH,  2);  val.add(Calendar.MONTH,  1));  val.add(Calendar.MONTH,  2);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                val.add(Calendar.MONTH,        1);        val.add(Calendar.MONTH,    2);    val.add(Calendar.MONTH,  1));  val.add(Calendar.MONTH,  2);	  	non-compiled	[CE]  ';'  expected	54	None	add
199	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.MONTH,    1);    val.add(Calendar.MONTH,  2);  val.add(Calendar.MONTH,  1);  val.add(Calendar.MONTH,  3);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	add	                val.add(Calendar.MONTH,        1);        val.add(Calendar.MONTH,    2);    val.add(Calendar.MONTH,  1);  val.add(Calendar.MONTH,  3);	  	compilable	  [FE]  AssertionFailedError  	54	2	add
200	[BUG]  [BUGGY]          val.add(Calendar.MONTH,    1);    val.add(Calendar.MONTH,  2);  val.add(Calendar.MONTH,  1);  val.add(Calendar.MONTH,  3);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.MONTH,    1);    val.add(Calendar.MONTH,  2);  val.add(Calendar.MONTH,  1);  val.add(Calendar.MONTH,  3);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                val.add(Calendar.MONTH,        1);        val.add(Calendar.MONTH,    2);    val.add(Calendar.MONTH,  1);  val.add(Calendar.MONTH,  3);	  	compilable	  [FE]  AssertionFailedError  	54	2	add
201	[BUG]  [BUGGY]  ((  Calendar)val).setTime(dayOfMonth,  field);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  ((  Calendar)val).setTime(dayOfMonth,  field);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	((  Calendar)val).setTime(dayOfMonth,  field);	  ((    Calendar)val).setTime(field);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
202	[BUG]  [BUGGY]  ((  Calendar)val).setTime(this.dayOfMonth,  field);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  ((  Calendar)val).setTime(this.dayOfMonth,  field);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	((  Calendar)val).setTime(this.dayOfMonth,  field);	  ((    Calendar)val).setTime(field);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
203	[BUG]  [BUGGY]  val.add(Calendar.DATE,  12);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  val.add(Calendar.DATE,  12);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	val.add(Calendar.DATE,  12);	  val.add(Calendar.DATE,    15);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
204	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(round  ||  field  ==  DateUtils.SEMI_MONTH  ||  roundUp)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	add	if(round  ||  field  ==  DateUtils.SEMI_MONTH  ||  roundUp)  {	  if(field    ==    DateUtils.SEMI_MONTH    ||    roundUp)    {    	compilable	  [FE]  AssertionFailedError  	7	2	replace
205	[BUG]  [BUGGY]  if(round  ||  field  ==  DateUtils.SEMI_MONTH  ||  roundUp)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(round  ||  field  ==  DateUtils.SEMI_MONTH  ||  roundUp)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(round  ||  field  ==  DateUtils.SEMI_MONTH  ||  roundUp)  {	  if(field    ==    DateUtils.SEMI_MONTH    ||    roundUp)    {    	compilable	  [FE]  AssertionFailedError  	7	2	replace
206	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  val.get(Calendar.YEAR)  ==  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	add	if(field  ==  DateUtils.SEMI_MONTH  ||  val.get(Calendar.YEAR)  ==  1)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.YEAR)    ==    1)    {    	compilable	  [FE]  AssertionFailedError  	108	1	replace
207	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  val.get(Calendar.YEAR)  ==  1)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  val.get(Calendar.YEAR)  ==  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH  ||  val.get(Calendar.YEAR)  ==  1)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.YEAR)    ==    1)    {    	compilable	  [FE]  AssertionFailedError  	108	1	replace
208	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.YEAR)  <  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	add	if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.YEAR)  <  1)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.YEAR)    ==    1)    {    	compilable	  [FE]  AssertionFailedError  	108	2	replace
209	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.YEAR)  <  1)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.YEAR)  <  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.YEAR)  <  1)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.YEAR)    ==    1)    {    	compilable	  [FE]  AssertionFailedError  	108	2	replace
210	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.YEAR)  ==  0)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	add	if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.YEAR)  ==  0)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.YEAR)    ==    1)    {    	compilable	  [FE]  AssertionFailedError  	108	2	replace
211	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.YEAR)  ==  0)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.YEAR)  ==  0)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.YEAR)  ==  0)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.YEAR)    ==    1)    {    	compilable	  [FE]  AssertionFailedError  	108	2	replace
212	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  round)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  round)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  round)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  round)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    ==    DateUtils.SEMI_MONTH    &&    round)    {    if(field  ==  DateUtils.SEMI_MONTH  &&  round)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
213	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  round)  {  if(field!=  DateUtils.SEMI_MONTH  &&  round)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  round)  {  if(field!=  DateUtils.SEMI_MONTH  &&  round)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    ==    DateUtils.SEMI_MONTH    &&    round)    {    if(field!=  DateUtils.SEMI_MONTH  &&  round)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
214	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  round)  {  If(field  ==  DateUtils.SEMI_MONTH  &&  round)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  round)  {  If(field  ==  DateUtils.SEMI_MONTH  &&  round)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    ==    DateUtils.SEMI_MONTH    &&    round)    {    If(field  ==  DateUtils.SEMI_MONTH  &&  round)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
215	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  round)  {  if(field  >=  DateUtils.SEMI_MONTH  &&  round)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  round)  {  if(field  >=  DateUtils.SEMI_MONTH  &&  round)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    ==    DateUtils.SEMI_MONTH    &&    round)    {    if(field  >=  DateUtils.SEMI_MONTH  &&  round)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
216	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field!=  DateUtils.SEMI_MONTH)  {  if(field  ==  DateUtils.SEMI_MONTH  ||  field!=  DateUtils.SEMI_MONTH)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field!=  DateUtils.SEMI_MONTH)  {  if(field  ==  DateUtils.SEMI_MONTH  ||  field!=  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    ==    DateUtils.SEMI_MONTH    ||    field!=    DateUtils.SEMI_MONTH)    {    if(field  ==  DateUtils.SEMI_MONTH  ||  field!=  DateUtils.SEMI_MONTH)  {	  	non-compiled	[CE]  illegal  start  of  expression	86	None	add
217	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field!=  DateUtils.SEMI_MONTH)  {  if(field  ==  DateUtils.SEMI_MONTH  ||  field  >>  DateUtils.SEMI_MONTH)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field!=  DateUtils.SEMI_MONTH)  {  if(field  ==  DateUtils.SEMI_MONTH  ||  field  >>  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    ==    DateUtils.SEMI_MONTH    ||    field!=    DateUtils.SEMI_MONTH)    {    if(field  ==  DateUtils.SEMI_MONTH  ||  field  >>  DateUtils.SEMI_MONTH)  {	  	non-compiled	[CE]  illegal  start  of  expression	86	None	add
218	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field!=  DateUtils.SEMI_MONTH)  {  if(field  ==  DateUtils.SEMI_MONTH  ||  field  >=  DateUtils.SEMI_MONTH)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field!=  DateUtils.SEMI_MONTH)  {  if(field  ==  DateUtils.SEMI_MONTH  ||  field  >=  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    ==    DateUtils.SEMI_MONTH    ||    field!=    DateUtils.SEMI_MONTH)    {    if(field  ==  DateUtils.SEMI_MONTH  ||  field  >=  DateUtils.SEMI_MONTH)  {	  	non-compiled	[CE]  illegal  start  of  expression	86	None	add
219	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field!=  DateUtils.SEMI_MONTH)  {  if(field!=  DateUtils.SEMI_MONTH  ||  field!=  DateUtils.SEMI_MONTH)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field!=  DateUtils.SEMI_MONTH)  {  if(field!=  DateUtils.SEMI_MONTH  ||  field!=  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    ==    DateUtils.SEMI_MONTH    ||    field!=    DateUtils.SEMI_MONTH)    {    if(field!=  DateUtils.SEMI_MONTH  ||  field!=  DateUtils.SEMI_MONTH)  {	  	non-compiled	[CE]  illegal  start  of  expression	86	None	add
220	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.MILLISECOND,    0);    val.add(Calendar.MILLISECOND,  0);  val.add(Calendar.MILLISECOND,  0);  val.add(Calendar.MILLISECOND,  0);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	add	                val.add(Calendar.MILLISECOND,        0);        val.add(Calendar.MILLISECOND,    0);    val.add(Calendar.MILLISECOND,  0);  val.add(Calendar.MILLISECOND,  0);	  	compilable	  [FE]  AssertionFailedError  	88	1	add
221	[BUG]  [BUGGY]          val.add(Calendar.MILLISECOND,    0);    val.add(Calendar.MILLISECOND,  0);  val.add(Calendar.MILLISECOND,  0);  val.add(Calendar.MILLISECOND,  0);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.MILLISECOND,    0);    val.add(Calendar.MILLISECOND,  0);  val.add(Calendar.MILLISECOND,  0);  val.add(Calendar.MILLISECOND,  0);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                val.add(Calendar.MILLISECOND,        0);        val.add(Calendar.MILLISECOND,    0);    val.add(Calendar.MILLISECOND,  0);  val.add(Calendar.MILLISECOND,  0);	  	compilable	  [FE]  AssertionFailedError  	88	1	add
222	[BUG]  [BUGGY]          val.add(Calendar.MILLISECOND,    0);    val.add(Calendar.MILLISECOND,  0);  val.add(Calendar.MILLISECOND,  0,  val.add(Calendar.MILLISECOND,  0);  val.add(Calendar.MILLISECOND,  0);  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.MILLISECOND,    0);    val.add(Calendar.MILLISECOND,  0);  val.add(Calendar.MILLISECOND,  0,  val.add(Calendar.MILLISECOND,  0);  val.add(Calendar.MILLISECOND,  0);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                val.add(Calendar.MILLISECOND,        0);        val.add(Calendar.MILLISECOND,    0);    val.add(Calendar.MILLISECOND,  0,  val.add(Calendar.MILLISECOND,  0);  val.add(Calendar.MILLISECOND,  0);	  	non-compiled	[CE]  ')'  expected	88	None	add
223	[BUG]  [BUGGY]          val.add(Calendar.MILLISECOND,    0);    val.add(Calendar.MILLISECOND,  0);  val.add(Calendar.MILLISECOND,  0,  val.add(Calendar.MILLISECOND,  0);  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.MILLISECOND,    0);    val.add(Calendar.MILLISECOND,  0);  val.add(Calendar.MILLISECOND,  0,  val.add(Calendar.MILLISECOND,  0);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                val.add(Calendar.MILLISECOND,        0);        val.add(Calendar.MILLISECOND,    0);    val.add(Calendar.MILLISECOND,  0,  val.add(Calendar.MILLISECOND,  0);	  	non-compiled	[CE]  ')'  expected	88	None	add
224	[BUG]  [BUGGY]  ((  Calendar)val).setTime(new  Date(fields[i][j]),  round);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  ((  Calendar)val).setTime(new  Date(fields[i][j]),  round);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	((  Calendar)val).setTime(new  Date(fields[i][j]),  round);	  ((    Calendar)val).setTime(new    Date(fields[i][j]));    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
225	[BUG]  [BUGGY]  ((  Calendar)val).setTime(new  Date(fields[i][j],  round));  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  ((  Calendar)val).setTime(new  Date(fields[i][j],  round));  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	((  Calendar)val).setTime(new  Date(fields[i][j],  round));	  ((    Calendar)val).setTime(new    Date(fields[i][j]));    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
226	[BUG]  [BUGGY]  ((  Calendar)val).setTime(new  Date(fields[i][j]  -  1));  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  ((  Calendar)val).setTime(new  Date(fields[i][j]  -  1));  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	((  Calendar)val).setTime(new  Date(fields[i][j]  -  1));	  ((    Calendar)val).setTime(new    Date(fields[i][j]));    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
227	[BUG]  [BUGGY]  ((  Calendar)val).setTime(new  Date(fields[i][j]  +  1));  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  ((  Calendar)val).setTime(new  Date(fields[i][j]  +  1));  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	((  Calendar)val).setTime(new  Date(fields[i][j]  +  1));	  ((    Calendar)val).setTime(new    Date(fields[i][j]));    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
228	[BUG]  [BUGGY]  If(field  ==  DateUtils.SEMI_MONTH  ||  round)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  If(field  ==  DateUtils.SEMI_MONTH  ||  round)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	If(field  ==  DateUtils.SEMI_MONTH  ||  round)  {	  if(field    ==    DateUtils.SEMI_MONTH    ||    round)    {    If(field    ==    DateUtils.SEMI_MONTH    ||    round)    {    	non-compiled	[CE]  ';'  expected	76	None	replace
229	[BUG]  [BUGGY]  If(field  ==  DateUtils.SEMI_MONTH  ||  roundUp)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  If(field  ==  DateUtils.SEMI_MONTH  ||  roundUp)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	If(field  ==  DateUtils.SEMI_MONTH  ||  roundUp)  {	  if(field    ==    DateUtils.SEMI_MONTH    ||    round)    {    If(field    ==    DateUtils.SEMI_MONTH    ||    round)    {    	non-compiled	[CE]  ';'  expected	76	None	replace
230	[BUG]  [BUGGY]  If(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  If(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	If(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {	  if(field    ==    DateUtils.SEMI_MONTH    ||    field    ==    DateUtils.SEMI_MONTH)    {    If(field    ==    DateUtils.SEMI_MONTH    ||    field    ==    DateUtils.SEMI_MONTH)    {    	non-compiled	[CE]  ';'  expected	96	None	replace
231	[BUG]  [BUGGY]  Date  date  =  val.getDate()  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  Date  date  =  val.getDate()  +  1;  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	Date  date  =  val.getDate()  +  1;	  Date    date    =    val.getDate();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
232	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.MILLISECOND,    1);    val.add(Calendar.MILLISECOND,  2);  val.add(Calendar.MILLISECOND,  1);  val.add(Calendar.MILLISECOND,  2);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	add	                val.add(Calendar.MILLISECOND,        1);        val.add(Calendar.MILLISECOND,    2);    val.add(Calendar.MILLISECOND,  1);  val.add(Calendar.MILLISECOND,  2);	  	compilable	  [FE]  AssertionFailedError  	15	2	add
233	[BUG]  [BUGGY]          val.add(Calendar.MILLISECOND,    1);    val.add(Calendar.MILLISECOND,  2);  val.add(Calendar.MILLISECOND,  1);  val.add(Calendar.MILLISECOND,  2);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.MILLISECOND,    1);    val.add(Calendar.MILLISECOND,  2);  val.add(Calendar.MILLISECOND,  1);  val.add(Calendar.MILLISECOND,  2);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                val.add(Calendar.MILLISECOND,        1);        val.add(Calendar.MILLISECOND,    2);    val.add(Calendar.MILLISECOND,  1);  val.add(Calendar.MILLISECOND,  2);	  	compilable	  [FE]  AssertionFailedError  	15	2	add
234	[BUG]  [BUGGY]          val.add(Calendar.MILLISECOND,    1);    val.add(Calendar.MILLISECOND,  2);  val.add(Calendar.MILLISECOND,  1));  val.add(Calendar.MILLISECOND,  2);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.MILLISECOND,    1);    val.add(Calendar.MILLISECOND,  2);  val.add(Calendar.MILLISECOND,  1));  val.add(Calendar.MILLISECOND,  2);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                val.add(Calendar.MILLISECOND,        1);        val.add(Calendar.MILLISECOND,    2);    val.add(Calendar.MILLISECOND,  1));  val.add(Calendar.MILLISECOND,  2);	  	non-compiled	[CE]  ';'  expected	15	None	add
235	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.MILLISECOND,    1);    val.add(Calendar.MILLISECOND,  2);  val.add(Calendar.MILLISECOND,  2);  val.add(Calendar.MILLISECOND,  2);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	add	                val.add(Calendar.MILLISECOND,        1);        val.add(Calendar.MILLISECOND,    2);    val.add(Calendar.MILLISECOND,  2);  val.add(Calendar.MILLISECOND,  2);	  	compilable	  [FE]  AssertionFailedError  	15	2	add
236	[BUG]  [BUGGY]          val.add(Calendar.MILLISECOND,    1);    val.add(Calendar.MILLISECOND,  2);  val.add(Calendar.MILLISECOND,  2);  val.add(Calendar.MILLISECOND,  2);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.MILLISECOND,    1);    val.add(Calendar.MILLISECOND,  2);  val.add(Calendar.MILLISECOND,  2);  val.add(Calendar.MILLISECOND,  2);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                val.add(Calendar.MILLISECOND,        1);        val.add(Calendar.MILLISECOND,    2);    val.add(Calendar.MILLISECOND,  2);  val.add(Calendar.MILLISECOND,  2);	  	compilable	  [FE]  AssertionFailedError  	15	2	add
237	[BUG]  [BUGGY]  ((  Calendar)val).setTime(dayOfMonth,  time);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  ((  Calendar)val).setTime(dayOfMonth,  time);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	((  Calendar)val).setTime(dayOfMonth,  time);	  ((    Calendar)val).setTime(time);    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
238	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  val.get(Calendar.MONTH)  ==  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	add	if(field  ==  DateUtils.SEMI_MONTH  ||  val.get(Calendar.MONTH)  ==  1)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.MONTH)    ==    1)    {    	compilable	  [FE]  AssertionFailedError  	73	2	replace
239	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  val.get(Calendar.MONTH)  ==  1)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  val.get(Calendar.MONTH)  ==  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH  ||  val.get(Calendar.MONTH)  ==  1)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.MONTH)    ==    1)    {    	compilable	  [FE]  AssertionFailedError  	73	2	replace
240	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.MONTH)  <  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	add	if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.MONTH)  <  1)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.MONTH)    ==    1)    {    	compilable	  [FE]  AssertionFailedError  	73	2	replace
241	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.MONTH)  <  1)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.MONTH)  <  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.MONTH)  <  1)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.MONTH)    ==    1)    {    	compilable	  [FE]  AssertionFailedError  	73	2	replace
242	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.MONTH)>  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	add	if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.MONTH)>  1)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.MONTH)    ==    1)    {    	compilable	  [FE]  AssertionFailedError  	73	2	replace
243	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.MONTH)>  1)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.MONTH)>  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.MONTH)>  1)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.MONTH)    ==    1)    {    	compilable	  [FE]  AssertionFailedError  	73	2	replace
244	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.DATE)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  ==  1)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.DATE)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  ==  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.DATE)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  ==  1)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)    ==    1)    {    if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
245	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.MONTH)  ==  1)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.MONTH)  ==  1)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.MONTH)  ==  1)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.MONTH)  ==  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.MONTH)    ==    1)    {    if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.MONTH)  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
246	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.MONTH)  ==  1)  {  if(field!=  DateUtils.SEMI_MONTH  &&  val.get(Calendar.MONTH)  ==  1)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.MONTH)  ==  1)  {  if(field!=  DateUtils.SEMI_MONTH  &&  val.get(Calendar.MONTH)  ==  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.MONTH)    ==    1)    {    if(field!=  DateUtils.SEMI_MONTH  &&  val.get(Calendar.MONTH)  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
247	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.MONTH)  ==  1)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.MONTH)!=  1)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.MONTH)  ==  1)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.MONTH)!=  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.MONTH)    ==    1)    {    if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.MONTH)!=  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
248	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.MONTH)  ==  1)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.MONTH)  >=  1)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.MONTH)  ==  1)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.MONTH)  >=  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.MONTH)    ==    1)    {    if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.MONTH)  >=  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
249	[BUG]  [BUGGY]  Date  date  =  val.get(j);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  Date  date  =  val.get(j);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	Date  date  =  val.get(j);	  Date    date    =    val.get(i);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
250	[BUG]  [BUGGY]  Date  date  =  val.get(i  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  Date  date  =  val.get(i  +  1);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	Date  date  =  val.get(i  +  1);	  Date    date    =    val.get(i);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
251	[BUG]  [BUGGY]  Date  date  =  val.get(i,  field);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  Date  date  =  val.get(i,  field);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	Date  date  =  val.get(i,  field);	  Date    date    =    val.get(i);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
252	[BUG]  [BUGGY]  ((  Calendar)val).setTime(j);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  ((  Calendar)val).setTime(j);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	((  Calendar)val).setTime(j);	  ((    Calendar)val).setTime(i);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
253	[BUG]  [BUGGY]  ((  Calendar)val).setTime(dayOfMonth,  i);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  ((  Calendar)val).setTime(dayOfMonth,  i);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	((  Calendar)val).setTime(dayOfMonth,  i);	  ((    Calendar)val).setTime(i);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
254	[BUG]  [BUGGY]  ((  Calendar)val).setTime(fields[i][j]);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  ((  Calendar)val).setTime(fields[i][j]);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	((  Calendar)val).setTime(fields[i][j]);	  ((    Calendar)val).setTime(i);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
255	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.DATE,    3);    val.add(Calendar.DATE,  3);  val.add(Calendar.DATE,  3);  val.add(Calendar.DATE,  3);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	add	                val.add(Calendar.DATE,        3);        val.add(Calendar.DATE,    3);    val.add(Calendar.DATE,  3);  val.add(Calendar.DATE,  3);	  	compilable	  [FE]  AssertionFailedError  	1	2	add
256	[BUG]  [BUGGY]          val.add(Calendar.DATE,    3);    val.add(Calendar.DATE,  3);  val.add(Calendar.DATE,  3);  val.add(Calendar.DATE,  3);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.DATE,    3);    val.add(Calendar.DATE,  3);  val.add(Calendar.DATE,  3);  val.add(Calendar.DATE,  3);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                val.add(Calendar.DATE,        3);        val.add(Calendar.DATE,    3);    val.add(Calendar.DATE,  3);  val.add(Calendar.DATE,  3);	  	compilable	  [FE]  AssertionFailedError  	1	2	add
257	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.DATE,    3);    val.add(Calendar.DATE,  3);  val.add(Calendar.DATE,  4);  val.add(Calendar.DATE,  3);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	add	                val.add(Calendar.DATE,        3);        val.add(Calendar.DATE,    3);    val.add(Calendar.DATE,  4);  val.add(Calendar.DATE,  3);	  	compilable	  [FE]  AssertionFailedError  	1	2	add
258	[BUG]  [BUGGY]          val.add(Calendar.DATE,    3);    val.add(Calendar.DATE,  3);  val.add(Calendar.DATE,  4);  val.add(Calendar.DATE,  3);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.DATE,    3);    val.add(Calendar.DATE,  3);  val.add(Calendar.DATE,  4);  val.add(Calendar.DATE,  3);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                val.add(Calendar.DATE,        3);        val.add(Calendar.DATE,    3);    val.add(Calendar.DATE,  4);  val.add(Calendar.DATE,  3);	  	compilable	  [FE]  AssertionFailedError  	1	2	add
259	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.DATE,    3);    val.add(Calendar.DATE,  3);  val.add(Calendar.DATE,  1);  val.add(Calendar.DATE,  3);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	add	                val.add(Calendar.DATE,        3);        val.add(Calendar.DATE,    3);    val.add(Calendar.DATE,  1);  val.add(Calendar.DATE,  3);	  	compilable	  [FE]  AssertionFailedError  	1	3	add
260	[BUG]  [BUGGY]          val.add(Calendar.DATE,    3);    val.add(Calendar.DATE,  3);  val.add(Calendar.DATE,  1);  val.add(Calendar.DATE,  3);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.DATE,    3);    val.add(Calendar.DATE,  3);  val.add(Calendar.DATE,  1);  val.add(Calendar.DATE,  3);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                val.add(Calendar.DATE,        3);        val.add(Calendar.DATE,    3);    val.add(Calendar.DATE,  1);  val.add(Calendar.DATE,  3);	  	compilable	  [FE]  AssertionFailedError  	1	3	add
261	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  if(field!=  DateUtils.SEMI_MONTH)  {  [CE]  orphaned  case  [FE]          AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  if(field!=  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  if(field!=  DateUtils.SEMI_MONTH)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    roundUp)    {    if(field!=    DateUtils.SEMI_MONTH    &&    roundUp)    {    	non-compiled	[CE]  orphaned  case	35	None	replace
262	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH)  {  if(field!=  DateUtils.SEMI_MONTH)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH)  {  if(field!=  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH)  {  if(field!=  DateUtils.SEMI_MONTH)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    roundUp)    {    if(field!=    DateUtils.SEMI_MONTH    &&    roundUp)    {    	non-compiled	[CE]  orphaned  case	35	None	replace
263	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  if(field  ==  DateUtils.SEMI_MONTH  ||  val.get(Calendar.DATE)  ==  1)  {  [CE]  orphaned  case  [FE]        AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  if(field  ==  DateUtils.SEMI_MONTH  ||  val.get(Calendar.DATE)  ==  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  if(field  ==  DateUtils.SEMI_MONTH  ||  val.get(Calendar.DATE)  ==  1)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)    ==    1)    {    if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)    {    1)    {    	non-compiled	[CE]  orphaned  case	116	None	replace
264	[BUG]  [BUGGY]  if(field  ==  null)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  ==  1)  {  [CE]  orphaned  case  [FE]          AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  null)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  ==  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  null)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  ==  1)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)    ==    1)    {    if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)    {    1)    {    	non-compiled	[CE]  orphaned  case	116	None	replace
265	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  if(field  ==  DateUtils.SEMI_DATE  ||  field  ==  DateUtils.SEMI_DATE)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  if(field  ==  DateUtils.SEMI_DATE  ||  field  ==  DateUtils.SEMI_DATE)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  if(field  ==  DateUtils.SEMI_DATE  ||  field  ==  DateUtils.SEMI_DATE)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)    ==    1)    {    if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)    {    1)    {    	non-compiled	[CE]  orphaned  case	116	None	replace
266	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  date)  {  [CE]  orphaned  case  [FE]        AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  date)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH  &&  date)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    setUp)    {    	non-compiled	[CE]  orphaned  case	118	None	replace
267	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(i)  ==  1)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(i)!=  1)  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(i)  ==  1)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(i)!=  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(i)    ==    1)    {    if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(i)!=  1)  {	  	non-compiled	[CE]  orphaned  case	68	None	add
268	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.MONTH)  ==  0)  {  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.MONTH)  ==  0)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.MONTH)  ==  0)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.MONTH)    ==    1)    {    	non-compiled	[CE]  orphaned  case	73	None	replace
269	[BUG]  [BUGGY]  ((  Calendar)val).setTime(offset);  [CE]  variable  date  is  already  defined  in  method  truncate(Date,int)  [FE]        AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  ((  Calendar)val).setTime(offset);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	((  Calendar)val).setTime(offset);	  ((    Calendar)val).setTime(time);    	non-compiled	[CE]  variable  date  is  already  defined  in  method  truncate(Date,int)	121	None	replace
270	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.MONTH)  ==  1)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.MONTH)  {  1)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.MONTH)  ==  1)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.MONTH)  {  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.MONTH)    ==    1)    {    if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.MONTH)  {  1)  {	  	non-compiled	[CE]  ')'  expected	72	None	add
271	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.MONTH)  ==  1)  {  If(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.MONTH)  ==  1)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.MONTH)  ==  1)  {  If(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.MONTH)  ==  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.MONTH)    ==    1)    {    If(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.MONTH)  ==  1)  {	  	non-compiled	[CE]  ';'  expected	72	None	add
272	[BUG]  [BUGGY]          val.add(Calendar.DATE,    -15);    val.add(Calendar.DATE,  -15);  val.add(Calendar.DATE,  15,);  val.add(Calendar.DATE,  -15);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.DATE,    -15);    val.add(Calendar.DATE,  -15);  val.add(Calendar.DATE,  15,);  val.add(Calendar.DATE,  -15);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                val.add(Calendar.DATE,        -15);        val.add(Calendar.DATE,    -15);    val.add(Calendar.DATE,  15,);  val.add(Calendar.DATE,  -15);	  	non-compiled	[CE]  illegal  start  of  expression	92	None	add
273	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH)  {  if(field  >=  DateUtils.SEMI_MONTH  ||  roundUp)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH)  {  if(field  >=  DateUtils.SEMI_MONTH  ||  roundUp)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH)  {  if(field  >=  DateUtils.SEMI_MONTH  ||  roundUp)  {	  if(field    ==    DateUtils.SEMI_MONTH    ||    round)    {    if(field    >=    DateUtils.SEMI_MONTH    ||    round)    {    	non-compiled	[CE]  ')'  expected	77	None	replace
274	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH)  {  if(field  >  DateUtils.SEMI_MONTH  ||  round)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH)  {  if(field  >  DateUtils.SEMI_MONTH  ||  round)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH)  {  if(field  >  DateUtils.SEMI_MONTH  ||  round)  {	  if(field    ==    DateUtils.SEMI_MONTH    ||    round)    {    if(field    >=    DateUtils.SEMI_MONTH    ||    round)    {    	non-compiled	[CE]  ')'  expected	77	None	replace
275	[BUG]  [BUGGY]  if(field!=  DateUtils.SEMI_MONTH)  {  if(field  >=  DateUtils.SEMI_MONTH  ||  roundUp)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field!=  DateUtils.SEMI_MONTH)  {  if(field  >=  DateUtils.SEMI_MONTH  ||  roundUp)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field!=  DateUtils.SEMI_MONTH)  {  if(field  >=  DateUtils.SEMI_MONTH  ||  roundUp)  {	  if(field    ==    DateUtils.SEMI_MONTH    ||    round)    {    if(field    >=    DateUtils.SEMI_MONTH    ||    round)    {    	non-compiled	[CE]  ')'  expected	77	None	replace
276	[BUG]  [BUGGY]  ((  Calendar)field).setTime(i);  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  ((  Calendar)field).setTime(i);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	((  Calendar)field).setTime(i);	  ((    Calendar)val).setTime(i);    	non-compiled	[CE]  ')'  expected	30	None	replace
277	[BUG]  [BUGGY]  val.add(Calendar.DATE,  0,  1);  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  val.add(Calendar.DATE,  0,  1);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	val.add(Calendar.DATE,  0,  1);	          val.add(Calendar.DATE,    1);    val.add(Calendar.DATE,    1));    	non-compiled	[CE]  ')'  expected	44	None	replace
278	[BUG]  [BUGGY]  if(field  >=  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  ==  1)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  >=  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  ==  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  >=  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  ==  1)  {	  if(field    ==    DateUtils.SEMI_MONTH    ||    val.get(Calendar.DATE)    ==    1)    {    	non-compiled	[CE]  ')'  expected	71	None	replace
279	[BUG]  [BUGGY]  ((  Calendar)val).setTime(field);  ((  Kalender)val).setTime(date);  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  ((  Calendar)val).setTime(field);  ((  Kalender)val).setTime(date);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	((  Calendar)val).setTime(field);  ((  Kalender)val).setTime(date);	          ((    Calendar)val).setTime(date);    ((    Kalender)val).setTime(date);    	non-compiled	[CE]  ')'  expected	111	None	replace
280	[BUG]  [BUGGY]  ((  Calendar)val).setTime(dayOfMonth);  ((  Kalender)val).setTime(date);  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  ((  Calendar)val).setTime(dayOfMonth);  ((  Kalender)val).setTime(date);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	((  Calendar)val).setTime(dayOfMonth);  ((  Kalender)val).setTime(date);	          ((    Calendar)val).setTime(date);    ((    Kalender)val).setTime(date);    	non-compiled	[CE]  ')'  expected	111	None	replace
281	[BUG]  [BUGGY]  ((  Calendar)val).setTime(year);  ((  Kalender)val).setTime(date);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  ((  Calendar)val).setTime(year);  ((  Kalender)val).setTime(date);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	((  Calendar)val).setTime(year);  ((  Kalender)val).setTime(date);	          ((    Calendar)val).setTime(date);    ((    Kalender)val).setTime(date);    	non-compiled	[CE]  ')'  expected	111	None	replace
282	[BUG]  [BUGGY]  ((  Calendar)val).setTime(date);  ((  Kalender)val).setTime(field);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  ((  Calendar)val).setTime(date);  ((  Kalender)val).setTime(field);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	((  Calendar)val).setTime(date);  ((  Kalender)val).setTime(field);	          ((    Calendar)val).setTime(date);    ((    Kalender)val).setTime(date);    	non-compiled	[CE]  ')'  expected	111	None	replace
283	[BUG]  [BUGGY]  Date  date  =  val.getDate(i);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  Date  date  =  val.getDate(i);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	Date  date  =  val.getDate(i);	  Date    date    =    val.getDate();    	non-compiled	[CE]  ')'  expected	59	None	replace
284	[BUG]  [BUGGY]  Date  date  =  val.getDateTime();  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  Date  date  =  val.getDateTime();  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	Date  date  =  val.getDateTime();	  Date    date    =    val.getDate();    	non-compiled	[CE]  ')'  expected	59	None	replace
285	[BUG]  [BUGGY]          val.add(Calendar.DATE,    3);    val.add(Calendar.DATE,  3);  val.add(Calendar.DATE,  4);  val.add(Calendar.DATE,  4);  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.DATE,    3);    val.add(Calendar.DATE,  3);  val.add(Calendar.DATE,  4);  val.add(Calendar.DATE,  4);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                val.add(Calendar.DATE,        3);        val.add(Calendar.DATE,    3);    val.add(Calendar.DATE,  4);  val.add(Calendar.DATE,  4);	  	non-compiled	[CE]  ')'  expected	1	None	add
286	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  field  ==  DateUtils.SEMI_MONTH)  {  If(field  ==  DateUtils.SEMI_MONTH  &&  field  ==  DateUtils.SEMI_MONTH)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  field  ==  DateUtils.SEMI_MONTH)  {  If(field  ==  DateUtils.SEMI_MONTH  &&  field  ==  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    ==    DateUtils.SEMI_MONTH    &&    field    ==    DateUtils.SEMI_MONTH)    {    If(field  ==  DateUtils.SEMI_MONTH  &&  field  ==  DateUtils.SEMI_MONTH)  {	  	non-compiled	[CE]  ';'  expected	83	None	add
287	[BUG]  [BUGGY]  if(field  ==  null  ||  field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  ==  1)  {  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  null  ||  field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  ==  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  null  ||  field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  ==  1)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)    ==    1)    {    if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)    ==    1)    {    	non-compiled	[CE]  ')'  expected	21	None	replace
288	[BUG]  [BUGGY]  ((  Calendar)val).setTime(this.date  -  1);  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  ((  Calendar)val).setTime(this.date  -  1);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	((  Calendar)val).setTime(this.date  -  1);	  ((    Calendar)val).setTime(this.date);    	non-compiled	[CE]  ')'  expected	122	None	replace
289	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  field  <  =  DateUtils.SEMI_MONTH)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  field  <  =  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH  &&  field  <  =  DateUtils.SEMI_MONTH)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    field    ==    DateUtils.SEMI_MONTH)    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
290	[BUG]  [BUGGY]  (1  <  <  ((  Calendar)val).setTime(year);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  (1  <  <  ((  Calendar)val).setTime(year);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	(1  <  <  ((  Calendar)val).setTime(year);	          ((    Calendar)val).setTime(date);    (1    <    <    ((    Calendar)val).setTime(date);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	120	None	replace
291	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  Calendar.YEAR)  {  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  Calendar.YEAR)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  Calendar.YEAR)  {	  if(field    ==    DateUtils.SEMI_MONTH    ||    field    ==    Calendar.SEMI_MONTH)    {    	non-compiled	[CE]  ')'  expected	130	None	replace
292	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  Calendar.MILLISECOND)  {  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  Calendar.MILLISECOND)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  Calendar.MILLISECOND)  {	  if(field    ==    DateUtils.SEMI_MONTH    ||    field    ==    Calendar.SEMI_MONTH)    {    	non-compiled	[CE]  ')'  expected	130	None	replace
293	[BUG]  [BUGGY]  if(field!=  DateUtils.SEMI_MONTH)  {  if(field!=  DateUtils.SEMI_MONTH  ||  roundUp)  {  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field!=  DateUtils.SEMI_MONTH)  {  if(field!=  DateUtils.SEMI_MONTH  ||  roundUp)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field!=  DateUtils.SEMI_MONTH)  {  if(field!=  DateUtils.SEMI_MONTH  ||  roundUp)  {	  if(field    ==    DateUtils.SEMI_MONTH    ||    round)    {    if(field!=    DateUtils.SEMI_MONTH    ||    round)    {    	non-compiled	[CE]  ')'  expected	75	None	replace
294	[BUG]  [BUGGY]  ((  Calendar)val).setTime(field,  date);  val.add((  Calendar)val).setTime(date);  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  ((  Calendar)val).setTime(field,  date);  val.add((  Calendar)val).setTime(date);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	((  Calendar)val).setTime(field,  date);  val.add((  Calendar)val).setTime(date);	          ((    Calendar)val).setTime(date);    val.add((    Calendar)val).setTime(date);    	non-compiled	[CE]  ')'  expected	119	None	replace
295	[BUG]  [BUGGY]  ((  Calendar)val).setTime(field);  val.add((  Calendar)val).setTime(date);  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  ((  Calendar)val).setTime(field);  val.add((  Calendar)val).setTime(date);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	((  Calendar)val).setTime(field);  val.add((  Calendar)val).setTime(date);	          ((    Calendar)val).setTime(date);    val.add((    Calendar)val).setTime(date);    	non-compiled	[CE]  ')'  expected	119	None	replace
296	[BUG]  [BUGGY]          val.add(Calendar.MILLISECOND,    0);    val.add(Calendar.MILLISECOND,  0);  val.add(Calendar.MILLISECOND,  0,  val);  val.add(Calendar.MILLISECOND,  0);  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.MILLISECOND,    0);    val.add(Calendar.MILLISECOND,  0);  val.add(Calendar.MILLISECOND,  0,  val);  val.add(Calendar.MILLISECOND,  0);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                val.add(Calendar.MILLISECOND,        0);        val.add(Calendar.MILLISECOND,    0);    val.add(Calendar.MILLISECOND,  0,  val);  val.add(Calendar.MILLISECOND,  0);	  	non-compiled	[CE]  ')'  expected	88	None	add
297	[BUG]  [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  &&  field!=  DateUtils.SEMI_MONTH)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  &&  field!=  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field!=  DateUtils.SEMI_MONTH  &&  field!=  DateUtils.SEMI_MONTH)  {	  if(field    ==    DateUtils.SEMI_MONTH    ||    field!=    DateUtils.SEMI_MONTH)    {    	non-compiled	[CE]  ')'  expected	87	None	replace
298	[BUG]  [BUGGY]  if(field!=  DateUtils.SEMI_MONTH)  {  if(field!=  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field!=  DateUtils.SEMI_MONTH)  {  if(field!=  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field!=  DateUtils.SEMI_MONTH)  {  if(field!=  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {	  if(field    ==    DateUtils.SEMI_MONTH    ||    field    ==    DateUtils.SEMI_MONTH)    {    if(field!=    DateUtils.SEMI_MONTH    ||    field    ==    DateUtils.SEMI_MONTH)    {    	non-compiled	[CE]  ')'  expected	27	None	replace
299	[BUG]  [BUGGY]  if(match  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(match  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(match  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {	  if(round    ==    DateUtils.SEMI_MONTH    ||    field    ==    DateUtils.SEMI_MONTH)    {    	non-compiled	[CE]  ')'  expected	78	None	replace
300	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  roundup  ||  field  ==  DateUtils.SEMI_MONTH)  {  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  roundup  ||  field  ==  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH  ||  roundup  ||  field  ==  DateUtils.SEMI_MONTH)  {	  if(round    ==    DateUtils.SEMI_MONTH    ||    field    ==    DateUtils.SEMI_MONTH)    {    	non-compiled	[CE]  ')'  expected	78	None	replace
301	[BUG]  [BUGGY]  if(field  <  DateUtils.SEMI_MONTH)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  <  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  <  DateUtils.SEMI_MONTH)  {	  if(field    >=    DateUtils.SEMI_MONTH)    {    	non-compiled	[CE]  ')'  expected	39	None	replace
302	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH)  {  if(field  >=  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH)  {  if(field  >=  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH)  {  if(field  >=  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {	  if(field    ==    DateUtils.SEMI_MONTH    ||    field    ==    DateUtils.SEMI_MONTH)    {    if(field    >=    DateUtils.SEMI_MONTH    ||    field    ==    DateUtils.SEMI_MONTH)    {    	non-compiled	[CE]  ')'  expected	28	None	replace
303	[BUG]  [BUGGY]  if(field!=  DateUtils.SEMI_MONTH)  {  if(field  >=  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field!=  DateUtils.SEMI_MONTH)  {  if(field  >=  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field!=  DateUtils.SEMI_MONTH)  {  if(field  >=  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {	  if(field    ==    DateUtils.SEMI_MONTH    ||    field    ==    DateUtils.SEMI_MONTH)    {    if(field    >=    DateUtils.SEMI_MONTH    ||    field    ==    DateUtils.SEMI_MONTH)    {    	non-compiled	[CE]  ')'  expected	28	None	replace
304	[BUG]  [BUGGY]  ((  Calendar)val).setTime(new  Date(fields[i][j],  roundUp));  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  ((  Calendar)val).setTime(new  Date(fields[i][j],  roundUp));  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	((  Calendar)val).setTime(new  Date(fields[i][j],  roundUp));	  ((    Calendar)val).setTime(new    Date(fields[i][j]));    	non-compiled	[CE]  ')'  expected	103	None	replace
305	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH)  {  if(field  >  DateUtils.SEMI_MONTH  ||  roundUp)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH)  {  if(field  >  DateUtils.SEMI_MONTH  ||  roundUp)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH)  {  if(field  >  DateUtils.SEMI_MONTH  ||  roundUp)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    roundUp)    {    if(field    >=    DateUtils.SEMI_MONTH    &&    roundUp)    {    	non-compiled	[CE]  ')'  expected	37	None	replace
306	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  if(field  >=  DateUtils.SEMI_MONTH)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  if(field  >=  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  if(field  >=  DateUtils.SEMI_MONTH)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    roundUp)    {    if(field    >=    DateUtils.SEMI_MONTH    &&    roundUp)    {    	non-compiled	[CE]  ')'  expected	37	None	replace
307	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH)  {  if(field  >  DateUtils.SEMI_MONTH)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH)  {  if(field  >  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH)  {  if(field  >  DateUtils.SEMI_MONTH)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    roundUp)    {    if(field    >=    DateUtils.SEMI_MONTH    &&    roundUp)    {    	non-compiled	[CE]  ')'  expected	37	None	replace
308	[BUG]  [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  &&  val.get(Calendar.YEAR)  ==  1)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  &&  val.get(Calendar.YEAR)  ==  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field!=  DateUtils.SEMI_MONTH  &&  val.get(Calendar.YEAR)  ==  1)  {	  if(field!=    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)    ==    1)    {    	non-compiled	[CE]  ')'  expected	124	None	replace
309	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(i)  ==  0)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(i)  ==  0)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(i)  ==  0)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(i)    ==    1)    {    	non-compiled	[CE]  ')'  expected	69	None	replace
310	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(i)!=  0)  {  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(i)!=  0)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(i)!=  0)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(i)    ==    1)    {    	non-compiled	[CE]  ')'  expected	69	None	replace
311	[BUG]  [BUGGY]  ((  Calendar)field).setTime(val);  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  ((  Calendar)field).setTime(val);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	((  Calendar)field).setTime(val);	  ((    Calendar)val).setTime(field);    	non-compiled	[CE]  ')'  expected	29	None	replace
312	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)!=  1)  {  If(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)!=  1)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)!=  1)  {  If(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)!=  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)!=    1)    {    If(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)!=  1)  {	  	non-compiled	[CE]  ';'  expected	105	None	add
313	[BUG]  [BUGGY]          val.add(Calendar.DATE,    -15);    val.add(Calendar.DATE,  15);  val.add(Calendar.DATE,  15);  val.add(Calendar.DATE,  15);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.DATE,    -15);    val.add(Calendar.DATE,  15);  val.add(Calendar.DATE,  15);  val.add(Calendar.DATE,  15);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                val.add(Calendar.DATE,        -15);        val.add(Calendar.DATE,    15);    val.add(Calendar.DATE,  15);  val.add(Calendar.DATE,  15);	  	non-compiled	[CE]  ';'  expected	94	None	add
314	[BUG]  [BUGGY]          val.add(Calendar.DATE,    -15);    val.add(Calendar.DATE,  15);  val.add(Calendar.DATE,  -15);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.DATE,    -15);    val.add(Calendar.DATE,  15);  val.add(Calendar.DATE,  -15);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                val.add(Calendar.DATE,        -15);        val.add(Calendar.DATE,    15);    val.add(Calendar.DATE,  -15);	  	non-compiled	[CE]  ';'  expected	94	None	add
315	[BUG]  [BUGGY]  if(field  ==  null)  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.DATE,  -15);  }  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  null)  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.DATE,  -15);  }  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  null)  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.DATE,  -15);  }	          val.add(Calendar.DATE,    -15);    (val.add(Calendar.DATE,    -15);    	non-compiled	[CE]  ')'  expected	97	None	replace
316	[BUG]  [BUGGY]  if(field  ==  null)  {  val.add(Calendar.DATE,  -15);  }  else  {  val.add(Calendar.DATE,  -15);  }  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  null)  {  val.add(Calendar.DATE,  -15);  }  else  {  val.add(Calendar.DATE,  -15);  }  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  null)  {  val.add(Calendar.DATE,  -15);  }  else  {  val.add(Calendar.DATE,  -15);  }	          val.add(Calendar.DATE,    -15);    (val.add(Calendar.DATE,    -15);    	non-compiled	[CE]  ')'  expected	97	None	replace
317	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  val.get(Calendar.DATE)  ==  1)  {  if(field  ==  DateUtils.SEMI_MONTH  ||  val.get(Calendar.DATE)  {  1)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  val.get(Calendar.DATE)  ==  1)  {  if(field  ==  DateUtils.SEMI_MONTH  ||  val.get(Calendar.DATE)  {  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    ==    DateUtils.SEMI_MONTH    ||    val.get(Calendar.DATE)    ==    1)    {    if(field  ==  DateUtils.SEMI_MONTH  ||  val.get(Calendar.DATE)  {  1)  {	  	non-compiled	[CE]  ')'  expected	70	None	add
318	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  val.get(Calendar.DATE)  ==  1)  {  If(field  ==  DateUtils.SEMI_MONTH  ||  val.get(Calendar.DATE)  ==  1)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  val.get(Calendar.DATE)  ==  1)  {  If(field  ==  DateUtils.SEMI_MONTH  ||  val.get(Calendar.DATE)  ==  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    ==    DateUtils.SEMI_MONTH    ||    val.get(Calendar.DATE)    ==    1)    {    If(field  ==  DateUtils.SEMI_MONTH  ||  val.get(Calendar.DATE)  ==  1)  {	  	non-compiled	[CE]  ';'  expected	70	None	add
319	[BUG]  [BUGGY]  if(field  >  DateUtils.SEMI_MONTH  &&  roundUp)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  >  DateUtils.SEMI_MONTH  &&  roundUp)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  >  DateUtils.SEMI_MONTH  &&  roundUp)  {	  if(field    >=    DateUtils.SEMI_MONTH    &&    roundUp)    {    	non-compiled	[CE]  ')'  expected	101	None	replace
320	[BUG]  [BUGGY]  if(field  ==  null  ||  field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  ==  1)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  ==  1)  {  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  null  ||  field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  ==  1)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  ==  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  null  ||  field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  ==  1)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  ==  1)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)    ==    1)    {    If(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)    ==    1)    {    	non-compiled	[CE]  ')'  expected	117	None	replace
321	[BUG]  [BUGGY]  ((  Calendar)val).setTime(millisecs);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  ((  Calendar)val).setTime(millisecs);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	((  Calendar)val).setTime(millisecs);	  ((    Calendar)val).setTime(year);    	non-compiled	[CE]  ')'  expected	32	None	replace
322	[BUG]  [BUGGY]  ((  Calendar)val).setTime(year,  field);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  ((  Calendar)val).setTime(year,  field);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	((  Calendar)val).setTime(year,  field);	  ((    Calendar)val).setTime(year);    	non-compiled	[CE]  ')'  expected	32	None	replace
323	[BUG]  [BUGGY]          val.add(Calendar.MILLISECOND,    0);    val.add(Calendar.MILLISECOND,  1);  val.add(Calendar.MILLISECOND,  0,);  val.add(Calendar.MILLISECOND,  1);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.MILLISECOND,    0);    val.add(Calendar.MILLISECOND,  1);  val.add(Calendar.MILLISECOND,  0,);  val.add(Calendar.MILLISECOND,  1);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                val.add(Calendar.MILLISECOND,        0);        val.add(Calendar.MILLISECOND,    1);    val.add(Calendar.MILLISECOND,  0,);  val.add(Calendar.MILLISECOND,  1);	  	non-compiled	[CE]  illegal  start  of  expression	114	None	add
324	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  if(field  ==  DateUtils.SEMI_MONTH  ||  val.get(Calendar.DATE)!=  1)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  if(field  ==  DateUtils.SEMI_MONTH  ||  val.get(Calendar.DATE)!=  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  if(field  ==  DateUtils.SEMI_MONTH  ||  val.get(Calendar.DATE)!=  1)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)    ==    1)    {    if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)!=    1)    {    	non-compiled	[CE]  ';'  expected	22	None	replace
325	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)!=  1)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)!=  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)!=  1)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)    ==    1)    {    if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)!=    1)    {    	non-compiled	[CE]  ';'  expected	22	None	replace
326	[BUG]  [BUGGY]  if(field  ==  null  ||  field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)!=  1)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  null  ||  field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)!=  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  null  ||  field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)!=  1)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)    ==    1)    {    if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)!=    1)    {    	non-compiled	[CE]  ';'  expected	22	None	replace
327	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  if(field  ==  DateUtils.SEMI_MONTH  ||  val.get(Calendar.DATE)  >=  1)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  if(field  ==  DateUtils.SEMI_MONTH  ||  val.get(Calendar.DATE)  >=  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  if(field  ==  DateUtils.SEMI_MONTH  ||  val.get(Calendar.DATE)  >=  1)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)    ==    1)    {    if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)    >=    1)    {    	non-compiled	[CE]  ';'  expected	24	None	replace
328	[BUG]  [BUGGY]  if(field  ==  DateUtils.SECOND_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SECOND_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SECOND_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {	  if(field    ==    DateUtils.SEMI_MONTH    ||    field    ==    DateUtils.SECOND_MONTH)    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
329	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  field  ==  DateUtils.SECOND_MONTH)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  field  ==  DateUtils.SECOND_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH  &&  field  ==  DateUtils.SECOND_MONTH)  {	  if(field    ==    DateUtils.SEMI_MONTH    ||    field    ==    DateUtils.SECOND_MONTH)    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
330	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SECOND_DAY)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SECOND_DAY)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SECOND_DAY)  {	  if(field    ==    DateUtils.SEMI_MONTH    ||    field    ==    DateUtils.SECOND_MONTH)    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
331	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field!=  DateUtils.SEMI_MONTH)  {  If(field  ==  DateUtils.SEMI_MONTH  ||  field!=  DateUtils.SEMI_MONTH)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field!=  DateUtils.SEMI_MONTH)  {  If(field  ==  DateUtils.SEMI_MONTH  ||  field!=  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    ==    DateUtils.SEMI_MONTH    ||    field!=    DateUtils.SEMI_MONTH)    {    If(field  ==  DateUtils.SEMI_MONTH  ||  field!=  DateUtils.SEMI_MONTH)  {	  	non-compiled	[CE]  illegal  start  of  expression	86	None	add
332	[BUG]  [BUGGY]  val.add(Calendar.DATE,  2);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  val.add(Calendar.DATE,  2);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	val.add(Calendar.DATE,  2);	          val.add(Calendar.DATE,    1);    val.add(Calendar.DATE,    2);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
333	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH)  {  if(field  ==  DateUtils.SEMI_MONTH  ||  roundUp)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH)  {  if(field  ==  DateUtils.SEMI_MONTH  ||  roundUp)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH)  {  if(field  ==  DateUtils.SEMI_MONTH  ||  roundUp)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    roundUp)    {    If(field    ==    DateUtils.SEMI_MONTH    &&    roundUp)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
334	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.YEAR)  ==  1)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.YEAR)  {  1)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.YEAR)  ==  1)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.YEAR)  {  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.YEAR)    ==    1)    {    if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.YEAR)  {  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	107	None	add
335	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.YEAR)  ==  1)  {  If(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.YEAR)  ==  1)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.YEAR)  ==  1)  {  If(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.YEAR)  ==  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.YEAR)    ==    1)    {    If(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.YEAR)  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	107	None	add
336	[BUG]  [BUGGY]  Date  date  =  val.getTimeInMillis(i);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  Date  date  =  val.getTimeInMillis(i);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	Date  date  =  val.getTimeInMillis(i);	  Date    date    =    val.getTimeInMillis();    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
337	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.DATE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.DATE)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.DATE)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)    ==    1)    {    if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)    {    1)    {    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
338	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH)  {  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_DATE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH)  {  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_DATE)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH)  {  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_DATE)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)    ==    1)    {    if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)    {    1)    {    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
339	[BUG]  [BUGGY]  if(field  ==  Calendar.DATE)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  ==  1)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  Calendar.DATE)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  ==  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  Calendar.DATE)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  ==  1)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)    ==    1)    {    if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)    {    1)    {    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
340	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(i)  ==  1)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(i)  {  1)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(i)  ==  1)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(i)  {  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(i)    ==    1)    {    if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(i)  {  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
341	[BUG]  [BUGGY]          val.add(Calendar.DATE,    1);    val.add(Calendar.DATE,  1);  val.add(Calendar.DATE,  2);  val.add(Calendar.DATE,  1);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.DATE,    1);    val.add(Calendar.DATE,  1);  val.add(Calendar.DATE,  2);  val.add(Calendar.DATE,  1);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                val.add(Calendar.DATE,        1);        val.add(Calendar.DATE,    1);    val.add(Calendar.DATE,  2);  val.add(Calendar.DATE,  1);	  	non-compiled	[CE]  illegal  start  of  expression	42	None	add
342	[BUG]  [BUGGY]  if(field  >=  DateUtils.SEMI_MONTH  ||  roundUp)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  >=  DateUtils.SEMI_MONTH  ||  roundUp)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  >=  DateUtils.SEMI_MONTH  ||  roundUp)  {	  if(field    ==    DateUtils.SEMI_MONTH    ||    roundUp)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
343	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  <  1)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  <  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  <  1)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)    ==    1)    {    if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)    >=    1)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
344	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  this.setUp)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  this.setUp)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH  &&  this.setUp)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    setUp)    {    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
345	[BUG]  [BUGGY]          val.add(Calendar.MONTH,    1);    val.add(Calendar.MONTH,  1);  val.add(Calendar.MONTH,  2);  val.add(Calendar.MONTH,  1);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.MONTH,    1);    val.add(Calendar.MONTH,  1);  val.add(Calendar.MONTH,  2);  val.add(Calendar.MONTH,  1);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                val.add(Calendar.MONTH,        1);        val.add(Calendar.MONTH,    1);    val.add(Calendar.MONTH,  2);  val.add(Calendar.MONTH,  1);	  	non-compiled	[CE]  ';'  expected	51	None	add
346	[BUG]  [BUGGY]  ((  Calendar)val).setTime(this.calendar);  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  ((  Calendar)val).setTime(this.calendar);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	((  Calendar)val).setTime(this.calendar);	          ((    Calendar)val).setTime(date);    ((    Kalender)val).setTime(date);    	non-compiled	[CE]  ';'  expected	111	None	replace
347	[BUG]  [BUGGY]          val.add(Calendar.MILLISECOND,    0);    val.add(Calendar.MILLISECOND,  0);  val.add(Calendar.MILLISECOND,  1);  val.add(Calendar.MILLISECOND,  0);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.MILLISECOND,    0);    val.add(Calendar.MILLISECOND,  0);  val.add(Calendar.MILLISECOND,  1);  val.add(Calendar.MILLISECOND,  0);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                val.add(Calendar.MILLISECOND,        0);        val.add(Calendar.MILLISECOND,    0);    val.add(Calendar.MILLISECOND,  1);  val.add(Calendar.MILLISECOND,  0);	  	non-compiled	[CE]  ';'  expected	88	None	add
348	[BUG]  [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  &&  round)  {  If(field!=  DateUtils.SEMI_MONTH  &&  round)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  &&  round)  {  If(field!=  DateUtils.SEMI_MONTH  &&  round)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field!=    DateUtils.SEMI_MONTH    &&    round)    {    If(field!=  DateUtils.SEMI_MONTH  &&  round)  {	  	non-compiled	[CE]  ';'  expected	109	None	add
349	[BUG]  [BUGGY]  ((  Calendar)val).setTime(new  Date(fields[i],  field[j]));  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  ((  Calendar)val).setTime(new  Date(fields[i],  field[j]));  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	((  Calendar)val).setTime(new  Date(fields[i],  field[j]));	  ((    Calendar)val).setTime(new    Date(fields[i][j]));    	non-compiled	[CE]  ';'  expected	103	None	replace
350	[BUG]  [BUGGY]          val.add(Calendar.MILLISECOND,    0);    val.add(Calendar.MILLISECOND,  1);  val.add(Calendar.MILLISECOND,  0);  val.add(Calendar.MILLISECOND,  1));  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.MILLISECOND,    0);    val.add(Calendar.MILLISECOND,  1);  val.add(Calendar.MILLISECOND,  0);  val.add(Calendar.MILLISECOND,  1));  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                val.add(Calendar.MILLISECOND,        0);        val.add(Calendar.MILLISECOND,    1);    val.add(Calendar.MILLISECOND,  0);  val.add(Calendar.MILLISECOND,  1));	  	non-compiled	[CE]  ';'  expected	114	None	add
351	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  if(field!=  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  ==  1)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  if(field!=  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  ==  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  if(field!=  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  ==  1)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)    ==    1)    {    if(field!=    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)    ==    1)    {    	non-compiled	[CE]  ';'  expected	23	None	replace
352	[BUG]  [BUGGY]          val.add(Calendar.HOUR_OF_DAY,    1);    val.add(Calendar.HOUR_OF_DAY,  2);  val.add(Calendar.HOUR_OF_DAY,  2);  val.add(Calendar.HOUR_OF_DAY,  2);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.HOUR_OF_DAY,    1);    val.add(Calendar.HOUR_OF_DAY,  2);  val.add(Calendar.HOUR_OF_DAY,  2);  val.add(Calendar.HOUR_OF_DAY,  2);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                val.add(Calendar.HOUR_OF_DAY,        1);        val.add(Calendar.HOUR_OF_DAY,    2);    val.add(Calendar.HOUR_OF_DAY,  2);  val.add(Calendar.HOUR_OF_DAY,  2);	  	non-compiled	[CE]  ';'  expected	66	None	add
353	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  If(field  ==  DateUtils.SEMI_MONTH  ||  val.get(Calendar.DATE)  ==  1)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  If(field  ==  DateUtils.SEMI_MONTH  ||  val.get(Calendar.DATE)  ==  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  If(field  ==  DateUtils.SEMI_MONTH  ||  val.get(Calendar.DATE)  ==  1)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)    ==    1)    {    If(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
354	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH)  {  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.DATE)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH)  {  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.DATE)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH)  {  if(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.DATE)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)    ==    1)    {    If(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
355	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  round  ==  DateUtils.SEMI_MONTH)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  ||  round  ==  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH  ||  round  ==  DateUtils.SEMI_MONTH)  {	  if(round    ==    DateUtils.SEMI_MONTH    ||    field    ==    DateUtils.SEMI_MONTH)    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
356	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  roundUp)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  roundUp)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH)  {  if(field  ==  DateUtils.SEMI_MONTH  &&  roundUp)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    roundUp)    {    If(field    ==    DateUtils.SEMI_MONTH    &&    roundUp)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
357	[BUG]  [BUGGY]          ((    Calendar)val).setTime(date);    ((  Calendar)val).setTime(date);  ((  Calendar)val).setTime(field);  ((  Calendar)val).setTime(date);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          ((    Calendar)val).setTime(date);    ((  Calendar)val).setTime(date);  ((  Calendar)val).setTime(field);  ((  Calendar)val).setTime(date);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                ((        Calendar)val).setTime(date);        ((    Calendar)val).setTime(date);    ((  Calendar)val).setTime(field);  ((  Calendar)val).setTime(date);	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
358	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH)  {  If(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH)  {  If(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH)  {  If(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {	  if(field    ==    DateUtils.SEMI_MONTH    ||    field    ==    DateUtils.SEMI_MONTH)    {    If(field    ==    DateUtils.SEMI_MONTH    ||    field    ==    DateUtils.SEMI_MONTH)    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
359	[BUG]  [BUGGY]  if(field!=  DateUtils.SEMI_MONTH)  {  If(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field!=  DateUtils.SEMI_MONTH)  {  If(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field!=  DateUtils.SEMI_MONTH)  {  If(field  ==  DateUtils.SEMI_MONTH  ||  field  ==  DateUtils.SEMI_MONTH)  {	  if(field    ==    DateUtils.SEMI_MONTH    ||    field    ==    DateUtils.SEMI_MONTH)    {    If(field    ==    DateUtils.SEMI_MONTH    ||    field    ==    DateUtils.SEMI_MONTH)    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
360	[BUG]  [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  ==  1)  {  if(field!=  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  {  1)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  ==  1)  {  if(field!=  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  {  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field!=    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)    ==    1)    {    if(field!=  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  {  1)  {	  	non-compiled	[CE]  ')'  expected	123	None	add
361	[BUG]  [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)!=  1)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)!=  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field!=  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)!=  1)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)!=    1)    {    	non-compiled	[CE]  ';'  expected	106	None	replace
362	[BUG]  [BUGGY]          val.add(Calendar.MILLISECOND,    1);    val.add(Calendar.MILLISECOND,  1);  val.add(Calendar.MILLISECOND,  2);  val.add(Calendar.MILLISECOND,  1);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.MILLISECOND,    1);    val.add(Calendar.MILLISECOND,  1);  val.add(Calendar.MILLISECOND,  2);  val.add(Calendar.MILLISECOND,  1);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                val.add(Calendar.MILLISECOND,        1);        val.add(Calendar.MILLISECOND,    1);    val.add(Calendar.MILLISECOND,  2);  val.add(Calendar.MILLISECOND,  1);	  	non-compiled	[CE]  ';'  expected	12	None	add
363	[BUG]  [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  &&  val.get(Calendar.MONTH)  ==  1)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  &&  val.get(Calendar.MONTH)  ==  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field!=  DateUtils.SEMI_MONTH  &&  val.get(Calendar.MONTH)  ==  1)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.MONTH)    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
364	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(i)  <  =  1)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(i)  <  =  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(i)  <  =  1)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(i)    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
365	[BUG]  [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  &&  field  <  =  DateUtils.SEMI_MONTH)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  &&  field  <  =  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field!=  DateUtils.SEMI_MONTH  &&  field  <  =  DateUtils.SEMI_MONTH)  {	  if(field!=    DateUtils.SEMI_MONTH    &&    field    ==    DateUtils.SEMI_MONTH)    {    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
366	[BUG]  [BUGGY]  val.add(Calendar.HOUR_OF_DAY,  2);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  val.add(Calendar.HOUR_OF_DAY,  2);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	val.add(Calendar.HOUR_OF_DAY,  2);	          val.add(Calendar.HOUR_OF_DAY,    1);    val.add(Calendar.HOUR_OF_DAY,    2);    	non-compiled	[CE]  ';'  expected	67	None	replace
367	[BUG]  [BUGGY]  Date  date  =  val.get(i  +  1,  field);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  Date  date  =  val.get(i  +  1,  field);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	Date  date  =  val.get(i  +  1,  field);	  Date    date    =    val.get(i);    	non-compiled	[CE]  ';'  expected	60	None	replace
368	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.YEAR)>  1)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.YEAR)>  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.YEAR)>  1)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.YEAR)    ==    1)    {    	non-compiled	[CE]  ';'  expected	108	None	replace
369	[BUG]  [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.YEAR)  >=  1)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.YEAR)  >=  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field  ==  DateUtils.SEMI_MONTH  &&  val.get(Calendar.YEAR)  >=  1)  {	  if(field    ==    DateUtils.SEMI_MONTH    &&    val.get(Calendar.YEAR)    ==    1)    {    	non-compiled	[CE]  ';'  expected	108	None	replace
370	[BUG]  [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  >=  1)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  >=  1)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field!=  DateUtils.SEMI_MONTH  &&  val.get(Calendar.DATE)  >=  1)  {	  if(field!=    DateUtils.SEMI_MONTH    &&    val.get(Calendar.DATE)    ==    1)    {    	non-compiled	[CE]  ';'  expected	124	None	replace
371	[BUG]  [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  &&  roundUp  ||  field  ==  DateUtils.SEMI_MONTH)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  if(field!=  DateUtils.SEMI_MONTH  &&  roundUp  ||  field  ==  DateUtils.SEMI_MONTH)  {  [BUGGY]          if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	if(field!=  DateUtils.SEMI_MONTH  &&  roundUp  ||  field  ==  DateUtils.SEMI_MONTH)  {	  if(field!=    DateUtils.SEMI_MONTH    &&    roundUp)    {    	non-compiled	[CE]  ';'  expected	99	None	replace
372	[BUG]  [BUGGY]  Date  date  =  val.getTimeInMillis()  -  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  Date  date  =  val.getTimeInMillis()  -  1;  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	Date  date  =  val.getTimeInMillis()  -  1;	  Date    date    =    val.getTimeInMillis();    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
373	[BUG]  [BUGGY]  ((  Calendar)val).setTime(date,  field);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  ((  Calendar)val).setTime(date,  field);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	((  Calendar)val).setTime(date,  field);	          ((    Calendar)val).setTime(date);    val.add((    Calendar)val).setTime(date);    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
374	[BUG]  [BUGGY]  ((  Calendar)val).setTime(date,  roundUp);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]  ((  Calendar)val).setTime(date,  roundUp);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	((  Calendar)val).setTime(date,  roundUp);	          ((    Calendar)val).setTime(date);    val.add((    Calendar)val).setTime(date);    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
375	[BUG]  [BUGGY]          val.add(Calendar.DATE,    1);    val.add(Calendar.DATE,  2);  val.add(Calendar.DATE,  2);  val.add(Calendar.DATE,  2);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.DATE,    1);    val.add(Calendar.DATE,  2);  val.add(Calendar.DATE,  2);  val.add(Calendar.DATE,  2);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                val.add(Calendar.DATE,        1);        val.add(Calendar.DATE,    2);    val.add(Calendar.DATE,  2);  val.add(Calendar.DATE,  2);	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
376	[BUG]  [BUGGY]          val.add(Calendar.HOUR_OF_DAY,    1);    val.add(Calendar.HOUR_OF_DAY,  1);  val.add(Calendar.HOUR_OF_DAY,  2);  val.add(Calendar.HOUR_OF_DAY,  1);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.HOUR_OF_DAY,    1);    val.add(Calendar.HOUR_OF_DAY,  1);  val.add(Calendar.HOUR_OF_DAY,  2);  val.add(Calendar.HOUR_OF_DAY,  1);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                val.add(Calendar.HOUR_OF_DAY,        1);        val.add(Calendar.HOUR_OF_DAY,    1);    val.add(Calendar.HOUR_OF_DAY,  2);  val.add(Calendar.HOUR_OF_DAY,  1);	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
377	[BUG]  [BUGGY]          val.add(Calendar.MONTH,    1);    val.add(Calendar.MONTH,  2);  val.add(Calendar.MONTH,  2);  val.add(Calendar.MONTH,  2);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      val.setTime(date);  }  boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {  if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {      [BUGGY]          val.add(Calendar.MONTH,    1);    val.add(Calendar.MONTH,  2);  val.add(Calendar.MONTH,  2);  val.add(Calendar.MONTH,  2);  [BUGGY]      if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.7071067811865475	676	676	1	replace	                val.add(Calendar.MONTH,        1);        val.add(Calendar.MONTH,    2);    val.add(Calendar.MONTH,  2);  val.add(Calendar.MONTH,  2);	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
