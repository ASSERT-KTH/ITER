bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])-  offset,  offset);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])-  offset,  offset);  [BUGGY]      if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	val.set(fields[i][0],  val.get(fields[i][0])-  offset,  offset);	  val.set(fields[i][0],    val.get(fields[i][0])-    offset,    roundUp);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	22	None	replace
2	[BUG]  [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])-  offset,  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])-  offset,  1);  [BUGGY]      if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	val.set(fields[i][0],  val.get(fields[i][0])-  offset,  1);	  val.set(fields[i][0],    val.get(fields[i][0])-    offset,    roundUp);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	22	None	replace
3	[BUG]  [BUGGY]  if  (!setSet  &&  roundUp  >  0)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if  (!setSet  &&  roundUp  >  0)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if  (!setSet  &&  roundUp  >  0)  {	  if    (!offsetSet    &&    roundUp    >=    0)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
4	[BUG]  [BUGGY]  if  (!offsetSet  ||  roundUp  >=  0)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if  (!offsetSet  ||  roundUp  >=  0)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if  (!offsetSet  ||  roundUp  >=  0)  {	  if    (!offsetSet    &&    roundUp    >=    0)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
5	[BUG]  [BUGGY]  if(fields[i][0]  ==  Calendar.HOUR_OF_DAY)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if(fields[i][0]  ==  Calendar.HOUR_OF_DAY)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if(fields[i][0]  ==  Calendar.HOUR_OF_DAY)  {	  if(fields[i][0]!=    Calendar.HOUR_OF_DAY)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	36	None	replace
6	[BUG]  [BUGGY]  if(fields[i][0]!=  Calendar.HOUR_OF_DAY  ||  fields[i][0]  ==  Calendar.HOUR_OF_DAY)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if(fields[i][0]!=  Calendar.HOUR_OF_DAY  ||  fields[i][0]  ==  Calendar.HOUR_OF_DAY)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if(fields[i][0]!=  Calendar.HOUR_OF_DAY  ||  fields[i][0]  ==  Calendar.HOUR_OF_DAY)  {	  if(fields[i][0]!=    Calendar.HOUR_OF_DAY)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	36	None	replace
7	[BUG]  [BUGGY]  if(fields[i][0]  >=  Calendar.HOUR_OF_DAY)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if(fields[i][0]  >=  Calendar.HOUR_OF_DAY)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if(fields[i][0]  >=  Calendar.HOUR_OF_DAY)  {	  if(fields[i][0]!=    Calendar.HOUR_OF_DAY)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	36	None	replace
8	[BUG]  [BUGGY]  if(fields[i][0]  ==  Calendar.DECEMBER)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if(fields[i][0]  ==  Calendar.DECEMBER)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if(fields[i][0]  ==  Calendar.DECEMBER)  {	  if(fields[i][0]!=    Calendar.DECEMBER)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	41	None	replace
9	[BUG]  [BUGGY]  if(fields[i][0]!=  Calendar.DECEMBER  ||  fields[i][0]  ==  Calendar.HOUR_OF_DAY)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if(fields[i][0]!=  Calendar.DECEMBER  ||  fields[i][0]  ==  Calendar.HOUR_OF_DAY)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if(fields[i][0]!=  Calendar.DECEMBER  ||  fields[i][0]  ==  Calendar.HOUR_OF_DAY)  {	  if(fields[i][0]!=    Calendar.DECEMBER)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	41	None	replace
10	[BUG]  [BUGGY]  if(fields[i][0]  ==  Calendar.DECEMBER  ||  fields[i][0]  ==  Calendar.HOUR_OF_DAY)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if(fields[i][0]  ==  Calendar.DECEMBER  ||  fields[i][0]  ==  Calendar.HOUR_OF_DAY)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if(fields[i][0]  ==  Calendar.DECEMBER  ||  fields[i][0]  ==  Calendar.HOUR_OF_DAY)  {	  if(fields[i][0]!=    Calendar.DECEMBER)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	41	None	replace
11	[BUG]  [BUGGY]  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  1);  [BUGGY]      if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  1);	  offset    =    val.get(fields[i][0])-    min;    roundUp    =    offset    >    ((    max    -    min)/    2);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
12	[BUG]  [BUGGY]  if  (!offsetSet  &&  roundUp  ||  offset  <  fields.length)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if  (!offsetSet  &&  roundUp  ||  offset  <  fields.length)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if  (!offsetSet  &&  roundUp  ||  offset  <  fields.length)  {	  if    (!offsetSet    &&    roundUp    ||    offset    >    fields.length)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	25	None	replace
13	[BUG]  [BUGGY]  if  (!offsetSet  &&  roundUp  ||  offset  >=  fields.length)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if  (!offsetSet  &&  roundUp  ||  offset  >=  fields.length)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if  (!offsetSet  &&  roundUp  ||  offset  >=  fields.length)  {	  if    (!offsetSet    &&    roundUp    ||    offset    >    fields.length)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	25	None	replace
14	[BUG]  [BUGGY]  if  (!offsetSet  &&  roundUp  ||  offset  >  fields[i][0])  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if  (!offsetSet  &&  roundUp  ||  offset  >  fields[i][0])  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if  (!offsetSet  &&  roundUp  ||  offset  >  fields[i][0])  {	  if    (!offsetSet    &&    roundUp    ||    offset    >    fields.length)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	25	None	replace
15	[BUG]  [BUGGY]  if  (!doneSet  &&  offsetSet)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if  (!doneSet  &&  offsetSet)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if  (!doneSet  &&  offsetSet)  {	  if    (!doneSet    &&    roundUp)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
16	[BUG]  [BUGGY]  if  (!doneSet  ||  roundUp)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if  (!doneSet  ||  roundUp)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if  (!doneSet  ||  roundUp)  {	  if    (!doneSet    &&    roundUp)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
17	[BUG]  [BUGGY]  int  min  =  val.getActualMinimum(fields[i][0]  +  2);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  int  min  =  val.getActualMinimum(fields[i][0]  +  2);  [BUGGY]      if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	int  min  =  val.getActualMinimum(fields[i][0]  +  2);	  int    min    =    val.getActualMinimum(fields[i][0]    +    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
18	[BUG]  [BUGGY]  int  min  =  val.get(fields[i][0]  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  int  min  =  val.get(fields[i][0]  +  1);  [BUGGY]      if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	int  min  =  val.get(fields[i][0]  +  1);	  int    min    =    val.getActualMinimum(fields[i][0]    +    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
19	[BUG]  [BUGGY]  if  (!offsetSet  &&  roundUp  >  5)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if  (!offsetSet  &&  roundUp  >  5)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if  (!offsetSet  &&  roundUp  >  5)  {	  if    (!offsetSet    &&    roundUp    >    6)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	26	None	replace
20	[BUG]  [BUGGY]  if  (!doneSet  &&  roundUp  >  1)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if  (!doneSet  &&  roundUp  >  1)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if  (!doneSet  &&  roundUp  >  1)  {	  if    (!offsetSet    &&    roundUp    >    1)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	27	None	replace
21	[BUG]  [BUGGY]  if(fields[i][0]!=  null  ||  fieldSet.contains(fields[i][0]))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if(fields[i][0]!=  null  ||  fieldSet.contains(fields[i][0]))  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if(fields[i][0]!=  null  ||  fieldSet.contains(fields[i][0]))  {	  if(fields[i][0]!=    null)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
22	[BUG]  [BUGGY]  if(fields[i][0]!=  null  ||  fields[i][0]  ==  val.get(fields[i][0]))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if(fields[i][0]!=  null  ||  fields[i][0]  ==  val.get(fields[i][0]))  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if(fields[i][0]!=  null  ||  fields[i][0]  ==  val.get(fields[i][0]))  {	  if(fields[i][0]!=    null)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
23	[BUG]  [BUGGY]  if  (offsetSet  ||  offsetSet)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if  (offsetSet  ||  offsetSet)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if  (offsetSet  ||  offsetSet)  {	  if    (offsetSet    ||    roundUp)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
24	[BUG]  [BUGGY]  if  (fields[i][0]  ==  field.get(fields[i][0])||  offsetSet  ||  roundUp)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if  (fields[i][0]  ==  field.get(fields[i][0])||  offsetSet  ||  roundUp)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if  (fields[i][0]  ==  field.get(fields[i][0])||  offsetSet  ||  roundUp)  {	  if    (offsetSet    ||    roundUp)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
25	[BUG]  [BUGGY]  if  (fields[i][0]  ==  field.get(fields[i][0])?  offsetSet  :  roundUp)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if  (fields[i][0]  ==  field.get(fields[i][0])?  offsetSet  :  roundUp)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if  (fields[i][0]  ==  field.get(fields[i][0])?  offsetSet  :  roundUp)  {	  if    (offsetSet    ||    roundUp)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
26	[BUG]  [BUGGY]  if  (!done  &&  roundUp  ||  offsetSet)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if  (!done  &&  roundUp  ||  offsetSet)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if  (!done  &&  roundUp  ||  offsetSet)  {	  if    (!done    &&    roundUp)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	38	None	replace
27	[BUG]  [BUGGY]  if  (!done  &&  roundUp  &&  offsetSet)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if  (!done  &&  roundUp  &&  offsetSet)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if  (!done  &&  roundUp  &&  offsetSet)  {	  if    (!done    &&    roundUp)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	38	None	replace
28	[BUG]  [BUGGY]  if  (!offsetSet  &&  roundUp  >  0  &&  offset  <  fields[i][0])  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if  (!offsetSet  &&  roundUp  >  0  &&  offset  <  fields[i][0])  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if  (!offsetSet  &&  roundUp  >  0  &&  offset  <  fields[i][0])  {	  if    (!offsetSet    &&    roundUp    >    0    &&    offset    <    fields.length)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	28	None	replace
29	[BUG]  [BUGGY]  if  (!offsetSet  &&  roundUp  >  0  &&  offset  <  fields.length  -  1)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if  (!offsetSet  &&  roundUp  >  0  &&  offset  <  fields.length  -  1)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if  (!offsetSet  &&  roundUp  >  0  &&  offset  <  fields.length  -  1)  {	  if    (!offsetSet    &&    roundUp    >    0    &&    offset    <    fields.length)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	28	None	replace
30	[BUG]  [BUGGY]  if(fields[i][1]  ==  val.get(fields[i][0]))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if(fields[i][1]  ==  val.get(fields[i][0]))  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if(fields[i][1]  ==  val.get(fields[i][0]))  {	  if(fields[i][0]    ==    val.get(fields[i][0]))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
31	[BUG]  [BUGGY]  if(fields[i][0]  ==  val.get(fields[i][0])||  fieldSet  ==  0)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if(fields[i][0]  ==  val.get(fields[i][0])||  fieldSet  ==  0)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if(fields[i][0]  ==  val.get(fields[i][0])||  fieldSet  ==  0)  {	  if(fields[i][0]    ==    val.get(fields[i][0]))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
32	[BUG]  [BUGGY]  if(fields[i][0]  ==  field)  {  int  min  =  val.getActualMinimum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if(fields[i][0]  ==  field)  {  int  min  =  val.getActualMinimum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2);  }  [BUGGY]      if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if(fields[i][0]  ==  field)  {  int  min  =  val.getActualMinimum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2);  }	  if(fields[i][0]!=    field)    {    int    min    =    val.getActualMinimum(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    roundUp    =    offset    >    ((    max    -    min)/    2);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	30	None	replace
33	[BUG]  [BUGGY]  if(offset  <  min)  {  int  min  =  val.getActualMinimum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if(offset  <  min)  {  int  min  =  val.getActualMinimum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2);  }  [BUGGY]      if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if(offset  <  min)  {  int  min  =  val.getActualMinimum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2);  }	  if(offset    >=    0)    {    int    min    =    val.getActualMinimum(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    roundUp    =    offset    >    ((    max    -    min)/    2);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	34	None	replace
34	[BUG]  [BUGGY]  offset  =  val.get(fields[i][0])-  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  offset  =  val.get(fields[i][0])-  1;  [BUGGY]      if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	offset  =  val.get(fields[i][0])-  1;	  int    min    =    val.get(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
35	[BUG]  [BUGGY]  int  min  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  int  min  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  1;  [BUGGY]      if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	int  min  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  1;	  int    min    =    val.get(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
36	[BUG]  [BUGGY]  int  min  =  val.getIntValue(fields[i][0]  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  int  min  =  val.getIntValue(fields[i][0]  +  1);  [BUGGY]      if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	int  min  =  val.getIntValue(fields[i][0]  +  1);	  int    min    =    val.getIntValue(fields[i][0]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
37	[BUG]  [BUGGY]  int  min  =  val.getIntValue(fields[i][1]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  int  min  =  val.getIntValue(fields[i][1]);  [BUGGY]      if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	int  min  =  val.getIntValue(fields[i][1]);	  int    min    =    val.getIntValue(fields[i][0]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
38	[BUG]  [BUGGY]  int  min  =  val.getIntValue(fields[i][0])-  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  int  min  =  val.getIntValue(fields[i][0])-  1;  [BUGGY]      if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	int  min  =  val.getIntValue(fields[i][0])-  1;	  int    min    =    val.getIntValue(fields[i][0]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
39	[BUG]  [BUGGY]  Integer  min  =  val.getActualMinimum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  Integer  min  =  val.getActualMinimum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  [BUGGY]      if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	Integer  min  =  val.getActualMinimum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;	  if(fields[i][0]!=    field)    {    int    min    =    val.getActualMinimum(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	35	None	replace
40	[BUG]  [BUGGY]  int  min  =  val.getActualMinimum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  int  min  =  val.getActualMinimum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }  [BUGGY]      if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	int  min  =  val.getActualMinimum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }	  if(fields[i][0]!=    field)    {    int    min    =    val.getActualMinimum(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	35	None	replace
41	[BUG]  [BUGGY]  if(fields[i][0]  ==  null  ||  fieldSet.contains(fields[i][0]))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if(fields[i][0]  ==  null  ||  fieldSet.contains(fields[i][0]))  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if(fields[i][0]  ==  null  ||  fieldSet.contains(fields[i][0]))  {	  if(fields[i][0]    ==    null)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	19	None	replace
42	[BUG]  [BUGGY]  if(fields[i][0]  ==  field)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if(fields[i][0]  ==  field)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if(fields[i][0]  ==  field)  {	  if(fields[i][0]!=    field)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	33	None	replace
43	[BUG]  [BUGGY]  if(fields[i][0]  >=  field)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if(fields[i][0]  >=  field)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if(fields[i][0]  >=  field)  {	  if(fields[i][0]!=    field)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	33	None	replace
44	[BUG]  [BUGGY]  if(fields[i][0]!=  field.getTime())  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if(fields[i][0]!=  field.getTime())  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if(fields[i][0]!=  field.getTime())  {	  if(fields[i][0]!=    field)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	33	None	replace
45	[BUG]  [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])/  3);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])/  3);  [BUGGY]      if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	val.set(fields[i][0],  val.get(fields[i][0])/  3);	  val.set(fields[i][0],    val.get(fields[i][0])/    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
46	[BUG]  [BUGGY]  if  (!fields[i][0]  ||  roundUp)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if  (!fields[i][0]  ||  roundUp)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if  (!fields[i][0]  ||  roundUp)  {	  if    (!offsetSet    ||    roundUp)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	39	None	replace
47	[BUG]  [BUGGY]  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  max  -  min;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  max  -  min;  [BUGGY]      if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  max  -  min;	  int    min    =    val.getActualMinimum(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    roundUp    =    offset    >    max    -    min;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
48	[BUG]  [BUGGY]  int  min  =  val.getActualMinimum(fields[i][0]);  roundUp  =  val.get(fields[i][0])-  min;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  int  min  =  val.getActualMinimum(fields[i][0]);  roundUp  =  val.get(fields[i][0])-  min;  [BUGGY]      if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	int  min  =  val.getActualMinimum(fields[i][0]);  roundUp  =  val.get(fields[i][0])-  min;	  int    min    =    val.getActualMinimum(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    roundUp    =    offset    >    max    -    min;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
49	[BUG]  [BUGGY]  int  min  =  val.get(fields[i][0]  -  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  int  min  =  val.get(fields[i][0]  -  1);  [BUGGY]      if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	int  min  =  val.get(fields[i][0]  -  1);	  int    min    =    val.get(fields[i][0]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
50	[BUG]  [BUGGY]  int  min  =  val.get(fields[i][0])-  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  int  min  =  val.get(fields[i][0])-  1;  [BUGGY]      if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	int  min  =  val.get(fields[i][0])-  1;	  int    min    =    val.get(fields[i][0]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
51	[BUG]  [BUGGY]  if(offset!=  0  &&  fields[i][0]!=  val.get(fields[i][0])-  offset)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if(offset!=  0  &&  fields[i][0]!=  val.get(fields[i][0])-  offset)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if(offset!=  0  &&  fields[i][0]!=  val.get(fields[i][0])-  offset)  {	  if(fields[i][0]!=    val.get(fields[i][0])-    offset)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	23	None	replace
52	[BUG]  [BUGGY]  if(offset  >=  0  &&  fields[i][0]!=  val.get(fields[i][0])-  offset)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if(offset  >=  0  &&  fields[i][0]!=  val.get(fields[i][0])-  offset)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if(offset  >=  0  &&  fields[i][0]!=  val.get(fields[i][0])-  offset)  {	  if(fields[i][0]!=    val.get(fields[i][0])-    offset)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	23	None	replace
53	[BUG]  [BUGGY]  int  min  =  val.getMinimum(fields[i][0]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  int  min  =  val.getMinimum(fields[i][0]);  [BUGGY]      if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	int  min  =  val.getMinimum(fields[i][0]);	  int    min    =    val.getActualMaximum(fields[i][0]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	29	None	replace
54	[BUG]  [BUGGY]  int  min  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  int  min  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }  [BUGGY]      if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	int  min  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }	  if(fields[i][0]    ==    field)    {    int    min    =    val.getActualMaximum(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	40	None	replace
55	[BUG]  [BUGGY]  offset  =  val.get(fields[i][0])-  min  +  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  offset  =  val.get(fields[i][0])-  min  +  1;  [BUGGY]      if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	offset  =  val.get(fields[i][0])-  min  +  1;	  offset    =    val.get(fields[i][0])-    min;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
56	[BUG]  [BUGGY]  offset  =  val.get(fields[i][0])/  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  offset  =  val.get(fields[i][0])/  1;  [BUGGY]      if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	offset  =  val.get(fields[i][0])/  1;	  offset    =    val.get(fields[i][0])-    min;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
57	[BUG]  [BUGGY]  if(offset  ==  0  &&  fields[i][0]  ==  val.get(fields[i][0])-  offset)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if(offset  ==  0  &&  fields[i][0]  ==  val.get(fields[i][0])-  offset)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if(offset  ==  0  &&  fields[i][0]  ==  val.get(fields[i][0])-  offset)  {	  if(fields[i][0]    ==    val.get(fields[i][0])-    offset)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
58	[BUG]  [BUGGY]  if(fields[i][0]  ==  val.get(fields[i][0])-  1)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if(fields[i][0]  ==  val.get(fields[i][0])-  1)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if(fields[i][0]  ==  val.get(fields[i][0])-  1)  {	  if(fields[i][0]    ==    val.get(fields[i][0])-    offset)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
59	[BUG]  [BUGGY]  if  (!offsetSet  &&  roundUp  >  0  &&  offset  <  =  min)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if  (!offsetSet  &&  roundUp  >  0  &&  offset  <  =  min)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if  (!offsetSet  &&  roundUp  >  0  &&  offset  <  =  min)  {	  if    (!offsetSet    &&    roundUp    >    0    &&    offset    <    min)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	42	None	replace
60	[BUG]  [BUGGY]  if  (!offsetSet  &&  roundUp  >  0  &&  offset  <  =  max)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if  (!offsetSet  &&  roundUp  >  0  &&  offset  <  =  max)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if  (!offsetSet  &&  roundUp  >  0  &&  offset  <  =  max)  {	  if    (!offsetSet    &&    roundUp    >    0    &&    offset    <    min)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	42	None	replace
61	[BUG]  [BUGGY]  if  (!offsetSet  &&  roundUp  >  0  &&  offset  >=  min)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if  (!offsetSet  &&  roundUp  >  0  &&  offset  >=  min)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if  (!offsetSet  &&  roundUp  >  0  &&  offset  >=  min)  {	  if    (!offsetSet    &&    roundUp    >    0    &&    offset    <    min)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	42	None	replace
62	[BUG]  [BUGGY]  if  (!offsetSet  &&  roundUp  >  0  &&  offset  <  =  MAX_VALUE)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if  (!offsetSet  &&  roundUp  >  0  &&  offset  <  =  MAX_VALUE)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if  (!offsetSet  &&  roundUp  >  0  &&  offset  <  =  MAX_VALUE)  {	  if    (!offsetSet    &&    roundUp    >    0    &&    offset    <    min)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	42	None	replace
63	[BUG]  [BUGGY]  if(fields[i][0]  >=  val.get(fields[i][0]))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if(fields[i][0]  >=  val.get(fields[i][0]))  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if(fields[i][0]  >=  val.get(fields[i][0]))  {	  if(fields[i][0]!=    val.get(fields[i][0]))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
64	[BUG]  [BUGGY]  if(fields[i][0]!=  val.get(fields[i][0])&&  fieldSet.contains(fields[i][0]))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if(fields[i][0]!=  val.get(fields[i][0])&&  fieldSet.contains(fields[i][0]))  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if(fields[i][0]!=  val.get(fields[i][0])&&  fieldSet.contains(fields[i][0]))  {	  if(fields[i][0]!=    val.get(fields[i][0]))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
65	[BUG]  [BUGGY]  if  (!offsetSet  ||  roundUp  ==  0)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if  (!offsetSet  ||  roundUp  ==  0)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if  (!offsetSet  ||  roundUp  ==  0)  {	  if    (!offsetSet    &&    roundUp    ==    0)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
66	[BUG]  [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])/  2  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])/  2  +  1);  [BUGGY]      if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	val.set(fields[i][0],  val.get(fields[i][0])/  2  +  1);	  val.set(fields[i][0],    val.get(fields[i][0])/    2);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	21	None	replace
67	[BUG]  [BUGGY]  if  (!offsetSet  &&  roundUp!=  0)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if  (!offsetSet  &&  roundUp!=  0)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if  (!offsetSet  &&  roundUp!=  0)  {	  if    (!offsetSet    &&    roundUp    <    =    0)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
68	[BUG]  [BUGGY]  int  min  =  val.getIntValue(fields[i][0]);  offset  =  val.get(fields[i][0])-  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  int  min  =  val.getIntValue(fields[i][0]);  offset  =  val.get(fields[i][0])-  1;  [BUGGY]      if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	int  min  =  val.getIntValue(fields[i][0]);  offset  =  val.get(fields[i][0])-  1;	  int    min    =    val.getIntValue(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
69	[BUG]  [BUGGY]  int  min  =  val.getIntValue(fields[i][0]);  offset  =  val.get(fields[i][0])/  2;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  int  min  =  val.getIntValue(fields[i][0]);  offset  =  val.get(fields[i][0])/  2;  [BUGGY]      if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	int  min  =  val.getIntValue(fields[i][0]);  offset  =  val.get(fields[i][0])/  2;	  int    min    =    val.getIntValue(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
70	[BUG]  [BUGGY]  int  min  =  val.getIntValue(fields[i][0],  fieldSet);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  int  min  =  val.getIntValue(fields[i][0],  fieldSet);  [BUGGY]      if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	int  min  =  val.getIntValue(fields[i][0],  fieldSet);	  int    min    =    val.getIntValue(fields[i][0]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
71	[BUG]  [BUGGY]  int  min  =  val.getIntValue(fields[i][0]  -  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  int  min  =  val.getIntValue(fields[i][0]  -  1);  [BUGGY]      if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	int  min  =  val.getIntValue(fields[i][0]  -  1);	  int    min    =    val.getIntValue(fields[i][0]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
72	[BUG]  [BUGGY]  Integer  min  =  val.getActualMinimum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  Integer  min  =  val.getActualMinimum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2);  [BUGGY]      if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	Integer  min  =  val.getActualMinimum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2);	  if(fields[i][0]!=    field)    {    int    min    =    val.getActualMinimum(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    roundUp    =    offset    >    ((    max    -    min)/    2);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	30	None	replace
73	[BUG]  [BUGGY]  if(fields[i][0]  ==  field)  {  int  min  =  val.getIntValue(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if(fields[i][0]  ==  field)  {  int  min  =  val.getIntValue(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }  [BUGGY]      if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if(fields[i][0]  ==  field)  {  int  min  =  val.getIntValue(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }	  int    min    =    val.getIntValue(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
74	[BUG]  [BUGGY]  if  (!offsetSet  &&  offset  >  1)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if  (!offsetSet  &&  offset  >  1)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if  (!offsetSet  &&  offset  >  1)  {	  if    (!offsetSet    &&    roundUp    >    1)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	27	None	replace
75	[BUG]  [BUGGY]  if(fields[i][0]  >=  val.get(fields[i][0])-  offset)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if(fields[i][0]  >=  val.get(fields[i][0])-  offset)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if(fields[i][0]  >=  val.get(fields[i][0])-  offset)  {	  if(fields[i][0]    ==    val.get(fields[i][0])-    offset)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
76	[BUG]  [BUGGY]  if(fields[i][0]  ==  field)  {  int  min  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if(fields[i][0]  ==  field)  {  int  min  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }  [BUGGY]      if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if(fields[i][0]  ==  field)  {  int  min  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }	  int    min    =    val.get(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
77	[BUG]  [BUGGY]  if(fields[i][0]  >=  Calendar.DECEMBER)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if(fields[i][0]  >=  Calendar.DECEMBER)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if(fields[i][0]  >=  Calendar.DECEMBER)  {	  if(fields[i][0]!=    Calendar.DECEMBER)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	41	None	replace
78	[BUG]  [BUGGY]  if  (!setup  ||  roundUp)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if  (!setup  ||  roundUp)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if  (!setup  ||  roundUp)  {	  if    (!offsetSet    ||    roundUp)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	39	None	replace
79	[BUG]  [BUGGY]  if(fields[i][0]!=  field)  {  int  min  =  val.getActualMinimum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  max  -  min;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if(fields[i][0]!=  field)  {  int  min  =  val.getActualMinimum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  max  -  min;  }  [BUGGY]      if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if(fields[i][0]!=  field)  {  int  min  =  val.getActualMinimum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  max  -  min;  }	  int    min    =    val.getActualMinimum(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    roundUp    =    offset    >    max    -    min;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
80	[BUG]  [BUGGY]  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  max  -  min)/  2;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  max  -  min)/  2;  [BUGGY]      if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  max  -  min)/  2;	  offset    =    val.get(fields[i][0])-    min;    roundUp    =    offset    >    ((    max    -    min)/    2);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
81	[BUG]  [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])-  offset,  3);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])-  offset,  3);  [BUGGY]      if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	val.set(fields[i][0],  val.get(fields[i][0])-  offset,  3);	  val.set(fields[i][0],    val.get(fields[i][0])-    offset,    roundUp);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	22	None	replace
82	[BUG]  [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])-  offset,  12);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])-  offset,  12);  [BUGGY]      if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	val.set(fields[i][0],  val.get(fields[i][0])-  offset,  12);	  val.set(fields[i][0],    val.get(fields[i][0])-    offset,    roundUp);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	22	None	replace
83	[BUG]  [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])-  offset,  4);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])-  offset,  4);  [BUGGY]      if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	val.set(fields[i][0],  val.get(fields[i][0])-  offset,  4);	  val.set(fields[i][0],    val.get(fields[i][0])-    offset,    roundUp);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	22	None	replace
84	[BUG]  [BUGGY]  if  (!offsetSet  &&  offset  >  0)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if  (!offsetSet  &&  offset  >  0)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if  (!offsetSet  &&  offset  >  0)  {	  if    (!offsetSet    &&    roundUp    >=    0)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
85	[BUG]  [BUGGY]  if  (!offsetSet  &&  offset  >=  0)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if  (!offsetSet  &&  offset  >=  0)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if  (!offsetSet  &&  offset  >=  0)  {	  if    (!offsetSet    &&    roundUp    >=    0)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
86	[BUG]  [BUGGY]  if  (offsetSet  ||  roundUp  >=  0)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if  (offsetSet  ||  roundUp  >=  0)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if  (offsetSet  ||  roundUp  >=  0)  {	  if    (!offsetSet    &&    roundUp    >=    0)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
87	[BUG]  [BUGGY]  if  (!offsetSet  &&  roundUp  >  0  &&  offset  >=  fields.length)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if  (!offsetSet  &&  roundUp  >  0  &&  offset  >=  fields.length)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if  (!offsetSet  &&  roundUp  >  0  &&  offset  >=  fields.length)  {	  if    (!offsetSet    &&    roundUp    >    0    &&    offset    <    fields.length)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	28	None	replace
88	[BUG]  [BUGGY]  if  (!offsetSet  &&  offset  >  0  &&  offset  <  fields.length)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if  (!offsetSet  &&  offset  >  0  &&  offset  <  fields.length)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if  (!offsetSet  &&  offset  >  0  &&  offset  <  fields.length)  {	  if    (!offsetSet    &&    roundUp    >    0    &&    offset    <    fields.length)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	28	None	replace
89	[BUG]  [BUGGY]  if(fields[i][0]!=  val.get(fields[i][0])-  1)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if(fields[i][0]!=  val.get(fields[i][0])-  1)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if(fields[i][0]!=  val.get(fields[i][0])-  1)  {	  if(fields[i][0]!=    val.get(fields[i][0])-    offset)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	23	None	replace
90	[BUG]  [BUGGY]  if  (!offsetSet  &&  roundUp  >  0  &&  offset  >=  max)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if  (!offsetSet  &&  roundUp  >  0  &&  offset  >=  max)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if  (!offsetSet  &&  roundUp  >  0  &&  offset  >=  max)  {	  if    (!offsetSet    &&    roundUp    >    0    &&    offset    <    min)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	42	None	replace
91	[BUG]  [BUGGY]  if  (!offsetSet  &&  roundUp  &&  offset  >  fields.length)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if  (!offsetSet  &&  roundUp  &&  offset  >  fields.length)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if  (!offsetSet  &&  roundUp  &&  offset  >  fields.length)  {	  if    (!offsetSet    &&    roundUp    ||    offset    >    fields.length)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	25	None	replace
92	[BUG]  [BUGGY]  if  (!offsetSet  &&  roundUp  &&  offset  <  fields.length)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if  (!offsetSet  &&  roundUp  &&  offset  <  fields.length)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if  (!offsetSet  &&  roundUp  &&  offset  <  fields.length)  {	  if    (!offsetSet    &&    roundUp    ||    offset    >    fields.length)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	25	None	replace
93	[BUG]  [BUGGY]  if(fields[i][0]!=  val.get(fields[i][0])||  fieldSet  ==  0)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if(fields[i][0]!=  val.get(fields[i][0])||  fieldSet  ==  0)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if(fields[i][0]!=  val.get(fields[i][0])||  fieldSet  ==  0)  {	  if(fields[i][0]!=    val.get(fields[i][0]))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
94	[BUG]  [BUGGY]  if  (offset  <  0  ||  roundUp)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if  (offset  <  0  ||  roundUp)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if  (offset  <  0  ||  roundUp)  {	  if    (offsetSet    ||    roundUp)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
95	[BUG]  [BUGGY]  if  (offsetSet  &&  roundUp)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if  (offsetSet  &&  roundUp)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if  (offsetSet  &&  roundUp)  {	  if    (offsetSet    ||    roundUp)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
96	[BUG]  [BUGGY]  if  (offsetSet  ||  offset  <  0)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if  (offsetSet  ||  offset  <  0)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if  (offsetSet  ||  offset  <  0)  {	  if    (offsetSet    ||    roundUp)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
97	[BUG]  [BUGGY]  if  (!doneSet  &&  roundUp  >  0)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if  (!doneSet  &&  roundUp  >  0)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if  (!doneSet  &&  roundUp  >  0)  {	  if    (!doneSet    &&    roundUp)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
98	[BUG]  [BUGGY]  if  (!offsetSet  &&  offset  ==  0)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if  (!offsetSet  &&  offset  ==  0)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if  (!offsetSet  &&  offset  ==  0)  {	  if    (!offsetSet    &&    roundUp    ==    0)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
99	[BUG]  [BUGGY]  if(fields[i][0]!=  null  ||  fieldSet.containsKey(fields[i][0]))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if(fields[i][0]!=  null  ||  fieldSet.containsKey(fields[i][0]))  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if(fields[i][0]!=  null  ||  fieldSet.containsKey(fields[i][0]))  {	  if(fields[i][0]!=    null)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
100	[BUG]  [BUGGY]  offset  =  val.get(fields[i][0])/  min;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  offset  =  val.get(fields[i][0])/  min;  [BUGGY]      if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	offset  =  val.get(fields[i][0])/  min;	  offset    =    val.get(fields[i][0])-    min;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
101	[BUG]  [BUGGY]  int  min  =  val.getActualMinimum(fields[i][0]);  offset  =  val.get(fields[i][0])/  min;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  int  min  =  val.getActualMinimum(fields[i][0]);  offset  =  val.get(fields[i][0])/  min;  [BUGGY]      if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	int  min  =  val.getActualMinimum(fields[i][0]);  offset  =  val.get(fields[i][0])/  min;	  if(fields[i][0]    ==    field)    {    int    min    =    val.getActualMinimum(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	32	None	replace
102	[BUG]  [BUGGY]  if  (offsetSet  ==  0)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if  (offsetSet  ==  0)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if  (offsetSet  ==  0)  {	  if    (offset    <    0)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	20	None	replace
103	[BUG]  [BUGGY]  if  (!done  &&  offsetSet)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if  (!done  &&  offsetSet)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if  (!done  &&  offsetSet)  {	  if    (!done    &&    roundUp)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	38	None	replace
104	[BUG]  [BUGGY]  int  min  =  val.get(fields[i][0]  -  offset);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  int  min  =  val.get(fields[i][0]  -  offset);  [BUGGY]      if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	int  min  =  val.get(fields[i][0]  -  offset);	  int    min    =    val.get(fields[i][0]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
105	[BUG]  [BUGGY]  int  min  =  val.get(fields[i][0])-  1;  offset  =  val.get(fields[i][0])-  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  int  min  =  val.get(fields[i][0])-  1;  offset  =  val.get(fields[i][0])-  1;  [BUGGY]      if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	int  min  =  val.get(fields[i][0])-  1;  offset  =  val.get(fields[i][0])-  1;	  int    min    =    val.get(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
106	[BUG]  [BUGGY]  if(fields[i][0]!=  field.get(fields[i][0]))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if(fields[i][0]!=  field.get(fields[i][0]))  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if(fields[i][0]!=  field.get(fields[i][0]))  {	  if(fields[i][0]!=    field)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	33	None	replace
107	[BUG]  [BUGGY]  if  (!done  ||  roundUp)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if  (!done  ||  roundUp)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if  (!done  ||  roundUp)  {	  if    (!offsetSet    ||    roundUp)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	39	None	replace
108	[BUG]  [BUGGY]  if  (!done  &&  roundUp  >  1)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if  (!done  &&  roundUp  >  1)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if  (!done  &&  roundUp  >  1)  {	  if    (!offsetSet    &&    roundUp    >    1)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	27	None	replace
109	[BUG]  [BUGGY]  if  (!offsetSet  ||  roundUp  >  1)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if  (!offsetSet  ||  roundUp  >  1)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if  (!offsetSet  ||  roundUp  >  1)  {	  if    (!offsetSet    &&    roundUp    >    1)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	27	None	replace
110	[BUG]  [BUGGY]  if(fields[i][1]!=  val.get(fields[i][0]))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if(fields[i][1]!=  val.get(fields[i][0]))  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if(fields[i][1]!=  val.get(fields[i][0]))  {	  if(fields[i][0]!=    val.get(fields[i][0]))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
111	[BUG]  [BUGGY]  if(fields[i][0]!=  val.get(fields[i][0])&&  roundUp  ==  0)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if(fields[i][0]!=  val.get(fields[i][0])&&  roundUp  ==  0)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if(fields[i][0]!=  val.get(fields[i][0])&&  roundUp  ==  0)  {	  if(fields[i][0]!=    val.get(fields[i][0]))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
112	[BUG]  [BUGGY]  if(fields[i][0]  ==  field)  {  int  min  =  val.getActualMinimum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  max  -  min;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if(fields[i][0]  ==  field)  {  int  min  =  val.getActualMinimum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  max  -  min;  }  [BUGGY]      if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if(fields[i][0]  ==  field)  {  int  min  =  val.getActualMinimum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  max  -  min;  }	  int    min    =    val.getActualMinimum(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    roundUp    =    offset    >    max    -    min;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
113	[BUG]  [BUGGY]  if  (!done  &&  roundUp  ==  0)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if  (!done  &&  roundUp  ==  0)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if  (!done  &&  roundUp  ==  0)  {	  if    (!offsetSet    &&    roundUp    ==    0)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
114	[BUG]  [BUGGY]  if  (!offsetSet  &&  roundUp  >  0  &&  offset  <  =  fields.length)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if  (!offsetSet  &&  roundUp  >  0  &&  offset  <  =  fields.length)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if  (!offsetSet  &&  roundUp  >  0  &&  offset  <  =  fields.length)  {	  if    (!offsetSet    &&    roundUp    >    0    &&    offset    <    fields.length)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	28	None	replace
115	[BUG]  [BUGGY]  if(fields[i][0]!=  null  &&  fieldSet.contains(fields[i][0]))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if(fields[i][0]!=  null  &&  fieldSet.contains(fields[i][0]))  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if(fields[i][0]!=  null  &&  fieldSet.contains(fields[i][0]))  {	  if(fields[i][0]!=    null)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
116	[BUG]  [BUGGY]  if(val.get(fields[i][0])!=  null)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if(val.get(fields[i][0])!=  null)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if(val.get(fields[i][0])!=  null)  {	  if(fields[i][0]!=    null)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
117	[BUG]  [BUGGY]  if  (offsetSet  ||  roundUp  >  0)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if  (offsetSet  ||  roundUp  >  0)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if  (offsetSet  ||  roundUp  >  0)  {	  if    (offsetSet    ||    roundUp)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
118	[BUG]  [BUGGY]  if  (offsetSet  >  0)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if  (offsetSet  >  0)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if  (offsetSet  >  0)  {	  if    (offsetSet    ||    roundUp)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
119	[BUG]  [BUGGY]  if  (!done  &&  roundUp  >=  0)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if  (!done  &&  roundUp  >=  0)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if  (!done  &&  roundUp  >=  0)  {	  if    (!offsetSet    &&    roundUp    >=    0)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
120	[BUG]  [BUGGY]  if(fields[i][0]  ==  val.get(fields[i][0])-  roundUp)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if(fields[i][0]  ==  val.get(fields[i][0])-  roundUp)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if(fields[i][0]  ==  val.get(fields[i][0])-  roundUp)  {	  if(fields[i][0]    ==    val.get(fields[i][0])-    offset)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
121	[BUG]  [BUGGY]  if(fields[i][0]  ==  val.get(fields[i][0])-  1  ||  roundUp  >=  0)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if(fields[i][0]  ==  val.get(fields[i][0])-  1  ||  roundUp  >=  0)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if(fields[i][0]  ==  val.get(fields[i][0])-  1  ||  roundUp  >=  0)  {	  if(fields[i][0]    ==    val.get(fields[i][0])-    offset)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
122	[BUG]  [BUGGY]  int  min  =  val.getIntValue(fields[i][0]).intValue();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  int  min  =  val.getIntValue(fields[i][0]).intValue();  [BUGGY]      if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	int  min  =  val.getIntValue(fields[i][0]).intValue();	  int    min    =    val.getIntValue(fields[i][0]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
123	[BUG]  [BUGGY]  if(offset!=  0)  {  int  min  =  val.getActualMinimum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)  /  2);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if(offset!=  0)  {  int  min  =  val.getActualMinimum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)  /  2);  }  [BUGGY]      if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if(offset!=  0)  {  int  min  =  val.getActualMinimum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)  /  2);  }	  if(offsetSet)    {    int    min    =    val.getActualMinimum(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    roundUp    =    offset    >    ((    max    -    min)/    2);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	31	None	replace
124	[BUG]  [BUGGY]  if  (!offsetSet  &&  roundUp  >  0  &&  offset  <  max)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if  (!offsetSet  &&  roundUp  >  0  &&  offset  <  max)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if  (!offsetSet  &&  roundUp  >  0  &&  offset  <  max)  {	  if    (!offsetSet    &&    roundUp    >    0    &&    offset    <    min)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	42	None	replace
125	[BUG]  [BUGGY]  if(fields[i][0]!=  val.get(fields[i][0])-  roundUp)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if(fields[i][0]!=  val.get(fields[i][0])-  roundUp)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if(fields[i][0]!=  val.get(fields[i][0])-  roundUp)  {	  if(fields[i][0]!=    val.get(fields[i][0])-    offset)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	23	None	replace
126	[BUG]  [BUGGY]  if(fields[i][0]  ==  val.get(fields[i][0])&&  roundUp!=  0)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if(fields[i][0]  ==  val.get(fields[i][0])&&  roundUp!=  0)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if(fields[i][0]  ==  val.get(fields[i][0])&&  roundUp!=  0)  {	  if(fields[i][0]    ==    val.get(fields[i][0]))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
127	[BUG]  [BUGGY]  if(fields[i][0]  ==  null  ||  fields[i][0].equals(val.get(Calendar.HOUR_OF_DAY)))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if(fields[i][0]  ==  null  ||  fields[i][0].equals(val.get(Calendar.HOUR_OF_DAY)))  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if(fields[i][0]  ==  null  ||  fields[i][0].equals(val.get(Calendar.HOUR_OF_DAY)))  {	  if(fields[i][0]    ==    null)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	19	None	replace
128	[BUG]  [BUGGY]  if(fields[i][0]!=  null  ||  fields[i][0].equals(val.get(Calendar.HOUR_OF_DAY)))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if(fields[i][0]!=  null  ||  fields[i][0].equals(val.get(Calendar.HOUR_OF_DAY)))  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if(fields[i][0]!=  null  ||  fields[i][0].equals(val.get(Calendar.HOUR_OF_DAY)))  {	  if(fields[i][0]    ==    null)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	19	None	replace
129	[BUG]  [BUGGY]  if(val.get(fields[i][0])  ==  null)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  AssertionFailedError      [CONTEXT]        offset  =  val.get(Calendar.HOUR_OF_DAY);  if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }      [BUGGY]  if(val.get(fields[i][0])  ==  null)  {  [BUGGY]      int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	729	729	1	replace	if(val.get(fields[i][0])  ==  null)  {	  if(fields[i][0]    ==    null)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	19	None	replace
