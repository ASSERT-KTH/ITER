bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND,  field);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND,  field);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.SECOND,  field);	  int[][]    fields    =    val.get(Calendar.SECOND,    round);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
2	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND,  field  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND,  field  +  1);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.SECOND,  field  +  1);	  int[][]    fields    =    val.get(Calendar.SECOND,    round);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
3	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND,  field;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND,  field;  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.SECOND,  field;	  int[][]    fields    =    val.get(Calendar.SECOND,    round);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
4	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND,  match);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND,  match);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.SECOND,  match);	  int[][]    fields    =    val.get(Calendar.SECOND,    round);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
5	[BUG]  [BUGGY]  val.set(Calendar.MILLISECOND,  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  val.set(Calendar.MILLISECOND,  1);  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	val.set(Calendar.MILLISECOND,  1);	  val.set(Calendar.MILLISECOND,    0);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
6	[BUG]  [BUGGY]  if(field  ==  Calendar.MINUTE  ||  round  >=  Calendar.MILLISECOND)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.MINUTE  ||  round  >=  Calendar.MILLISECOND)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.MINUTE  ||  round  >=  Calendar.MILLISECOND)  {	  if(field    ==    Calendar.MINUTE    ||    field    >=    Calendar.MILLISECOND)    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
7	[BUG]  [BUGGY]  val.set(0,  field);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  val.set(0,  field);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	val.set(0,  field);	  val.set(0,    round);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
8	[BUG]  [BUGGY]  val.set(0L,  round);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  val.set(0L,  round);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	val.set(0L,  round);	  val.set(0,    round);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
9	[BUG]  [BUGGY]  val.set(1,  round);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  val.set(1,  round);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	val.set(1,  round);	  val.set(0,    round);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
10	[BUG]  [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  round  >=  1)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  round  >=  1)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.DECEMBER  ||  round  >=  1)  {	  if(field    ==    Calendar.DECEMBER    ||    round    >    1)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
11	[BUG]  [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  round  <  1)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  round  <  1)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.DECEMBER  ||  round  <  1)  {	  if(field    ==    Calendar.DECEMBER    ||    round    >    1)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
12	[BUG]  [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  round!=  1)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  round!=  1)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.DECEMBER  ||  round!=  1)  {	  if(field    ==    Calendar.DECEMBER    ||    round    >    1)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
13	[BUG]  [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  round  ==  1)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  round  ==  1)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.DECEMBER  ||  round  ==  1)  {	  if(field    ==    Calendar.DECEMBER    ||    round    >    1)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
14	[BUG]  [BUGGY]  if(round  ||  field  ==  Calendar.MILLISECOND)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(round  ||  field  ==  Calendar.MILLISECOND)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(round  ||  field  ==  Calendar.MILLISECOND)  {	  if(field    ==    Calendar.MILLISECOND    ||    roundUp)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
15	[BUG]  [BUGGY]  Date  date  =  val.get(Calendar.YEAR,  round);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  Date  date  =  val.get(Calendar.YEAR,  round);  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	Date  date  =  val.get(Calendar.YEAR,  round);	  Date    date    =    val.get(Calendar.YEAR);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
16	[BUG]  [BUGGY]  Date  date  =  val.get(Calendar.YEAR  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  Date  date  =  val.get(Calendar.YEAR  +  1);  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	Date  date  =  val.get(Calendar.YEAR  +  1);	  Date    date    =    val.get(Calendar.YEAR);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
17	[BUG]  [BUGGY]  Date  date  =  val.get(Calendar.DAY_OF_MONTH);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  Date  date  =  val.get(Calendar.DAY_OF_MONTH);  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	Date  date  =  val.get(Calendar.DAY_OF_MONTH);	  Date    date    =    val.get(Calendar.YEAR);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
18	[BUG]  [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  >  1)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  >  1)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.MILLISECOND  ||  round  >  1)  {	  if(field    ==    Calendar.MILLISECOND    ||    round    +    1)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
19	[BUG]  [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  <  =  1)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  <  =  1)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.MILLISECOND  ||  round  <  =  1)  {	  if(field    ==    Calendar.MILLISECOND    ||    round    +    1)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
20	[BUG]  [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  <  1)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  <  1)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.MILLISECOND  ||  round  <  1)  {	  if(field    ==    Calendar.MILLISECOND    ||    round    +    1)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
21	[BUG]  [BUGGY]  if(field  ==  Calendar.YEAR  ||  round  ==  Calendar.DECEMBER)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.YEAR  ||  round  ==  Calendar.DECEMBER)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.YEAR  ||  round  ==  Calendar.DECEMBER)  {	  if(field    ==    Calendar.YEAR    ||    field    ==    Calendar.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
22	[BUG]  [BUGGY]  if(round  ||  field  ==  Calendar.YEAR  ||  field  ==  Calendar.DECEMBER)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(round  ||  field  ==  Calendar.YEAR  ||  field  ==  Calendar.DECEMBER)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(round  ||  field  ==  Calendar.YEAR  ||  field  ==  Calendar.DECEMBER)  {	  if(field    ==    Calendar.YEAR    ||    field    ==    Calendar.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
23	[BUG]  [BUGGY]  if(field  ==  Calendar.YEAR  ||  round  >=  Calendar.DECEMBER)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.YEAR  ||  round  >=  Calendar.DECEMBER)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.YEAR  ||  round  >=  Calendar.DECEMBER)  {	  if(field    ==    Calendar.YEAR    ||    field    ==    Calendar.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
24	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.MILLISECOND,  round  +  1);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int  field  =  val.get(Calendar.MILLISECOND,  round  +  1);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.MILLISECOND,  round  +  1);	  int    field    =    val.get(Calendar.MILLISECOND    +    1);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
25	[BUG]  [BUGGY]  if(field  ==  Calendar.MINUTE  ||  round!=  Calendar.MILLISECOND)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.MINUTE  ||  round!=  Calendar.MILLISECOND)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.MINUTE  ||  round!=  Calendar.MILLISECOND)  {	  if(field    ==    Calendar.MINUTE    ||    round    ==    Calendar.MILLISECOND)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
26	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.SECOND)+  2;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int  field  =  val.get(Calendar.SECOND)+  2;  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.SECOND)+  2;	  int    field    =    val.get(Calendar.SECOND)+    1;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
27	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.SECOND)+  3;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int  field  =  val.get(Calendar.SECOND)+  3;  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.SECOND)+  3;	  int    field    =    val.get(Calendar.SECOND)+    1;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
28	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.SECOND)/  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int  field  =  val.get(Calendar.SECOND)/  1;  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.SECOND)/  1;	  int    field    =    val.get(Calendar.SECOND)+    1;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
29	[BUG]  [BUGGY]  Date  date  =  val.get(Calendar.MILLISECOND,  round);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  Date  date  =  val.get(Calendar.MILLISECOND,  round);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	Date  date  =  val.get(Calendar.MILLISECOND,  round);	  Date    date    =    val.get(Calendar.MILLISECOND);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
30	[BUG]  [BUGGY]  if(val!=  Calendar.MILLISECOND  ||  round  &&  field.get(Calendar.HOUR_OF_DAY)!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(val!=  Calendar.MILLISECOND  ||  round  &&  field.get(Calendar.HOUR_OF_DAY)!=  null)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(val!=  Calendar.MILLISECOND  ||  round  &&  field.get(Calendar.HOUR_OF_DAY)!=  null)  {	  if(field!=    Calendar.MILLISECOND    ||    round    &&    val.get(Calendar.HOUR_OF_DAY)!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
31	[BUG]  [BUGGY]  if(field!=  Calendar.MILLISECOND  &&  round  &&  val.get(Calendar.HOUR_OF_DAY)!=  null)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field!=  Calendar.MILLISECOND  &&  round  &&  val.get(Calendar.HOUR_OF_DAY)!=  null)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field!=  Calendar.MILLISECOND  &&  round  &&  val.get(Calendar.HOUR_OF_DAY)!=  null)  {	  if(field!=    Calendar.MILLISECOND    ||    round    &&    val.get(Calendar.HOUR_OF_DAY)!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
32	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.MONTH,  round);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int[][]  fields  =  val.get(Calendar.MONTH,  round);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.MONTH,  round);	  int[][]    fields    =    val.get(Calendar.MONTH);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
33	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.MONTH)+  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int[][]  fields  =  val.get(Calendar.MONTH)+  1;  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.MONTH)+  1;	  int[][]    fields    =    val.get(Calendar.MONTH);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
34	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.MONTH)-  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int[][]  fields  =  val.get(Calendar.MONTH)-  1;  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.MONTH)-  1;	  int[][]    fields    =    val.get(Calendar.MONTH);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
35	[BUG]  [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  >=  Calendar.YEAR)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  >=  Calendar.YEAR)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.MILLISECOND  ||  round  >=  Calendar.YEAR)  {	  if(field!=    Calendar.MILLISECOND    ||    round    >    Calendar.YEAR)    {    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
36	[BUG]  [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  >  Calendar.YEAR)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  >  Calendar.YEAR)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.MILLISECOND  ||  round  >  Calendar.YEAR)  {	  if(field!=    Calendar.MILLISECOND    ||    round    >    Calendar.YEAR)    {    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
37	[BUG]  [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  <  =  Calendar.YEAR)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  <  =  Calendar.YEAR)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.MILLISECOND  ||  round  <  =  Calendar.YEAR)  {	  if(field!=    Calendar.MILLISECOND    ||    round    >    Calendar.YEAR)    {    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
38	[BUG]  [BUGGY]  if(field!=  Calendar.MILLISECOND  ||  round  ==  Calendar.YEAR)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field!=  Calendar.MILLISECOND  ||  round  ==  Calendar.YEAR)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field!=  Calendar.MILLISECOND  ||  round  ==  Calendar.YEAR)  {	  if(field!=    Calendar.MILLISECOND    ||    round    >    Calendar.YEAR)    {    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
39	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.MONTH)+  2;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int  field  =  val.get(Calendar.MONTH)+  2;  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.MONTH)+  2;	  int    field    =    val.get(Calendar.MONTH)+    1;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
40	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.MONTH)+  3;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int  field  =  val.get(Calendar.MONTH)+  3;  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.MONTH)+  3;	  int    field    =    val.get(Calendar.MONTH)+    1;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
41	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.MONTH)/  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int  field  =  val.get(Calendar.MONTH)/  1;  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.MONTH)/  1;	  int    field    =    val.get(Calendar.MONTH)+    1;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
42	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND,  round  +  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND,  round  +  1);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.SECOND,  round  +  1);	  int[][]    fields    =    val.get(Calendar.SECOND    +    1);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
43	[BUG]  [BUGGY]  if(field  ==  Calendar.MINUTE  ||  round  <  =  Calendar.MILLISECOND)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.MINUTE  ||  round  <  =  Calendar.MILLISECOND)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.MINUTE  ||  round  <  =  Calendar.MILLISECOND)  {	  if(field    ==    Calendar.MINUTE    ||    field    <    =    Calendar.MILLISECOND)    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
44	[BUG]  [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  field  ==  Calendar.HOUR_OF_DAY)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  field  ==  Calendar.HOUR_OF_DAY)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.MILLISECOND  ||  field  ==  Calendar.HOUR_OF_DAY)  {	  if(field!=    Calendar.MILLISECOND    ||    field    ==    Calendar.HOUR_OF_DAY)    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
45	[BUG]  [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  ==  Calendar.HOUR_OF_DAY)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  ==  Calendar.HOUR_OF_DAY)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.MILLISECOND  ||  round  ==  Calendar.HOUR_OF_DAY)  {	  if(field!=    Calendar.MILLISECOND    ||    field    ==    Calendar.HOUR_OF_DAY)    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
46	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.MILLISECOND,  round  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int[][]  fields  =  val.get(Calendar.MILLISECOND,  round  +  1);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.MILLISECOND,  round  +  1);	  int[][]    fields    =    val.get(Calendar.MILLISECOND    +    1);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
47	[BUG]  [BUGGY]  if(field  ||  round  ==  Calendar.MILLISECOND  ||  round  >  Calendar.HOUR_OF_DAY)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ||  round  ==  Calendar.MILLISECOND  ||  round  >  Calendar.HOUR_OF_DAY)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ||  round  ==  Calendar.MILLISECOND  ||  round  >  Calendar.HOUR_OF_DAY)  {	  if(round    ||    field    ==    Calendar.MILLISECOND    ||    round    >    Calendar.HOUR_OF_DAY)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
48	[BUG]  [BUGGY]  if(field  ||  round  ==  Calendar.MILLISECOND  ||  round  >=  Calendar.HOUR_OF_DAY)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ||  round  ==  Calendar.MILLISECOND  ||  round  >=  Calendar.HOUR_OF_DAY)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ||  round  ==  Calendar.MILLISECOND  ||  round  >=  Calendar.HOUR_OF_DAY)  {	  if(round    ||    field    ==    Calendar.MILLISECOND    ||    round    >    Calendar.HOUR_OF_DAY)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
49	[BUG]  [BUGGY]  if(field  ||  round  ==  Calendar.MILLISECOND  ||  round  <  Calendar.HOUR_OF_DAY)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ||  round  ==  Calendar.MILLISECOND  ||  round  <  Calendar.HOUR_OF_DAY)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ||  round  ==  Calendar.MILLISECOND  ||  round  <  Calendar.HOUR_OF_DAY)  {	  if(round    ||    field    ==    Calendar.MILLISECOND    ||    round    >    Calendar.HOUR_OF_DAY)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
50	[BUG]  [BUGGY]  if(val.get(Calendar.MILLISECOND)||  round  ==  Calendar.HOUR_OF_DAY)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(val.get(Calendar.MILLISECOND)||  round  ==  Calendar.HOUR_OF_DAY)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(val.get(Calendar.MILLISECOND)||  round  ==  Calendar.HOUR_OF_DAY)  {	  if(field    ==    Calendar.MILLISECOND    ||    round    >=    Calendar.HOUR_OF_DAY)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
51	[BUG]  [BUGGY]  if(val.get(Calendar.YEAR)>  310000000)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(val.get(Calendar.YEAR)>  310000000)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(val.get(Calendar.YEAR)>  310000000)  {	  if(val.get(Calendar.YEAR)>    280000000)    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
52	[BUG]  [BUGGY]  if(val.get(Calendar.YEAR)>  250000000)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(val.get(Calendar.YEAR)>  250000000)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(val.get(Calendar.YEAR)>  250000000)  {	  if(val.get(Calendar.YEAR)>    280000000)    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
53	[BUG]  [BUGGY]  if(val.get(Calendar.YEAR)>  290000000)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(val.get(Calendar.YEAR)>  290000000)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(val.get(Calendar.YEAR)>  290000000)  {	  if(val.get(Calendar.YEAR)>    280000000)    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
54	[BUG]  [BUGGY]  if(field!=  Calendar.YEAR  ||  round  ==  Calendar.MILLISECOND)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field!=  Calendar.YEAR  ||  round  ==  Calendar.MILLISECOND)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field!=  Calendar.YEAR  ||  round  ==  Calendar.MILLISECOND)  {	  if(field!=    Calendar.YEAR    ||    field    ==    Calendar.MILLISECOND)    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
55	[BUG]  [BUGGY]  if(val.get(Calendar.YEAR)  ==  field  ||  round  ==  Calendar.MILLISECOND)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(val.get(Calendar.YEAR)  ==  field  ||  round  ==  Calendar.MILLISECOND)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(val.get(Calendar.YEAR)  ==  field  ||  round  ==  Calendar.MILLISECOND)  {	  if(field    ==    Calendar.YEAR    ||    round    ==    Calendar.MILLISECOND)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
56	[BUG]  [BUGGY]  if(field  ==  Calendar.YEAR  ||  round  ==  Calendar.MONTH)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.YEAR  ||  round  ==  Calendar.MONTH)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.YEAR  ||  round  ==  Calendar.MONTH)  {	  if(field    ==    Calendar.YEAR    ||    round    ==    Calendar.MILLISECOND)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
57	[BUG]  [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  ||  val.get(Calendar.SECOND)>  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  ||  val.get(Calendar.SECOND)>  0)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.MILLISECOND  ||  round  ||  val.get(Calendar.SECOND)>  0)  {	  if(field!=    Calendar.MILLISECOND    ||    round    ||    val.get(Calendar.SECOND)>    0)    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
58	[BUG]  [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  ||  val.get(Calendar.SECOND)>  1)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  ||  val.get(Calendar.SECOND)>  1)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.MILLISECOND  ||  round  ||  val.get(Calendar.SECOND)>  1)  {	  if(field!=    Calendar.MILLISECOND    ||    round    ||    val.get(Calendar.SECOND)>    0)    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
59	[BUG]  [BUGGY]  if(val!=  Calendar.MILLISECOND  ||  round  ||  val.get(Calendar.SECOND)>  0)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(val!=  Calendar.MILLISECOND  ||  round  ||  val.get(Calendar.SECOND)>  0)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(val!=  Calendar.MILLISECOND  ||  round  ||  val.get(Calendar.SECOND)>  0)  {	  if(field!=    Calendar.MILLISECOND    ||    round    ||    val.get(Calendar.SECOND)>    0)    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
60	[BUG]  [BUGGY]  if(val  ==  Calendar.MILLISECOND  ||  round  ||  val.get(Calendar.SECOND)>  0)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(val  ==  Calendar.MILLISECOND  ||  round  ||  val.get(Calendar.SECOND)>  0)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(val  ==  Calendar.MILLISECOND  ||  round  ||  val.get(Calendar.SECOND)>  0)  {	  if(field!=    Calendar.MILLISECOND    ||    round    ||    val.get(Calendar.SECOND)>    0)    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
61	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR,  field,  round);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR,  field,  round);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.YEAR,  field,  round);	  int[][]    fields    =    val.get(Calendar.YEAR,    field);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
62	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR,  field  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR,  field  +  1);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.YEAR,  field  +  1);	  int[][]    fields    =    val.get(Calendar.YEAR,    field);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
63	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.MONTH,  field);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int[][]  fields  =  val.get(Calendar.MONTH,  field);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.MONTH,  field);	  int[][]    fields    =    val.get(Calendar.YEAR,    field);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
64	[BUG]  [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  round  >=  Calendar.DECEMBER)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  round  >=  Calendar.DECEMBER)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.DECEMBER  ||  round  >=  Calendar.DECEMBER)  {	  if(field    ==    Calendar.DECEMBER    ||    round    >    Calendar.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
65	[BUG]  [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  round  <  =  Calendar.DECEMBER)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  round  <  =  Calendar.DECEMBER)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.DECEMBER  ||  round  <  =  Calendar.DECEMBER)  {	  if(field    ==    Calendar.DECEMBER    ||    round    >    Calendar.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
66	[BUG]  [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  round!=  Calendar.DECEMBER)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  round!=  Calendar.DECEMBER)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.DECEMBER  ||  round!=  Calendar.DECEMBER)  {	  if(field    ==    Calendar.DECEMBER    ||    round    >    Calendar.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
67	[BUG]  [BUGGY]  if(val  ==  Calendar.MILLISECOND  ||  round  &&  field.get(Calendar.HOUR_OF_DAY)!=  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(val  ==  Calendar.MILLISECOND  ||  round  &&  field.get(Calendar.HOUR_OF_DAY)!=  null)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(val  ==  Calendar.MILLISECOND  ||  round  &&  field.get(Calendar.HOUR_OF_DAY)!=  null)  {	  if(field    ==    Calendar.MILLISECOND    ||    round    &&    val.get(Calendar.HOUR_OF_DAY)!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
68	[BUG]  [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  field  ||  val.get(Calendar.HOUR_OF_DAY)!=  null)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  field  ||  val.get(Calendar.HOUR_OF_DAY)!=  null)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.MILLISECOND  ||  field  ||  val.get(Calendar.HOUR_OF_DAY)!=  null)  {	  if(field    ==    Calendar.MILLISECOND    ||    round    &&    val.get(Calendar.HOUR_OF_DAY)!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
69	[BUG]  [BUGGY]  if(field  ==  Calendar.MILLISECOND  &&  round  &&  val.get(Calendar.HOUR_OF_DAY)!=  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.MILLISECOND  &&  round  &&  val.get(Calendar.HOUR_OF_DAY)!=  null)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.MILLISECOND  &&  round  &&  val.get(Calendar.HOUR_OF_DAY)!=  null)  {	  if(field    ==    Calendar.MILLISECOND    ||    round    &&    val.get(Calendar.HOUR_OF_DAY)!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
70	[BUG]  [BUGGY]  if(field  ||  round  ==  Calendar.MINUTE  ||  field  ==  Calendar.MILLISECOND)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ||  round  ==  Calendar.MINUTE  ||  field  ==  Calendar.MILLISECOND)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ||  round  ==  Calendar.MINUTE  ||  field  ==  Calendar.MILLISECOND)  {	  if(round    ||    field    ==    Calendar.MINUTE    ||    field    ==    Calendar.MILLISECOND)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
71	[BUG]  [BUGGY]  if(field  ||  round  ||  field  ==  Calendar.MINUTE  ||  field  ==  Calendar.MILLISECOND)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ||  round  ||  field  ==  Calendar.MINUTE  ||  field  ==  Calendar.MILLISECOND)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ||  round  ||  field  ==  Calendar.MINUTE  ||  field  ==  Calendar.MILLISECOND)  {	  if(round    ||    field    ==    Calendar.MINUTE    ||    field    ==    Calendar.MILLISECOND)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
72	[BUG]  [BUGGY]  if(field  ||  round  {  Calendar.MINUTE  ||  field  ==  Calendar.MILLISECOND)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ||  round  {  Calendar.MINUTE  ||  field  ==  Calendar.MILLISECOND)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ||  round  {  Calendar.MINUTE  ||  field  ==  Calendar.MILLISECOND)  {	  if(round    ||    field    ==    Calendar.MINUTE    ||    field    ==    Calendar.MILLISECOND)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
73	[BUG]  [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  round  >=  Calendar.HOUR_OF_DAY)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  round  >=  Calendar.HOUR_OF_DAY)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.DECEMBER  ||  round  >=  Calendar.HOUR_OF_DAY)  {	  if(field    ==    Calendar.DECEMBER    ||    round    >    Calendar.HOUR_OF_DAY)    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
74	[BUG]  [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  round  <  =  Calendar.HOUR_OF_DAY)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  round  <  =  Calendar.HOUR_OF_DAY)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.DECEMBER  ||  round  <  =  Calendar.HOUR_OF_DAY)  {	  if(field    ==    Calendar.DECEMBER    ||    round    >    Calendar.HOUR_OF_DAY)    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
75	[BUG]  [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  round!=  Calendar.HOUR_OF_DAY)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  round!=  Calendar.HOUR_OF_DAY)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.DECEMBER  ||  round!=  Calendar.HOUR_OF_DAY)  {	  if(field    ==    Calendar.DECEMBER    ||    round    >    Calendar.HOUR_OF_DAY)    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
76	[BUG]  [BUGGY]  if(val  ==  Calendar.MILLISECOND  ||  round  ||  val.get(Calendar.YEAR)>  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(val  ==  Calendar.MILLISECOND  ||  round  ||  val.get(Calendar.YEAR)>  0)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(val  ==  Calendar.MILLISECOND  ||  round  ||  val.get(Calendar.YEAR)>  0)  {	  if(field    ==    Calendar.MILLISECOND    ||    round    ||    val.get(Calendar.YEAR)>    0)    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
77	[BUG]  [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  ||  val.get(Calendar.YEAR)>  1)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  ||  val.get(Calendar.YEAR)>  1)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.MILLISECOND  ||  round  ||  val.get(Calendar.YEAR)>  1)  {	  if(field    ==    Calendar.MILLISECOND    ||    round    ||    val.get(Calendar.YEAR)>    0)    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
78	[BUG]  [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  ||  val.get(Calendar.YEAR)>  280000000)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  ||  val.get(Calendar.YEAR)>  280000000)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.MILLISECOND  ||  round  ||  val.get(Calendar.YEAR)>  280000000)  {	  if(field    ==    Calendar.MILLISECOND    ||    round    ||    val.get(Calendar.YEAR)>    0)    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
79	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.MILLISECOND)/  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int  field  =  val.get(Calendar.MILLISECOND)/  1;  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.MILLISECOND)/  1;	  int    field    =    val.get(Calendar.MILLISECOND)-    1;    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
80	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.MILLISECOND,  round)-  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int  field  =  val.get(Calendar.MILLISECOND,  round)-  1;  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.MILLISECOND,  round)-  1;	  int    field    =    val.get(Calendar.MILLISECOND)-    1;    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
81	[BUG]  [BUGGY]  if(field  ==  Calendar.YEAR  ||  round  <  =  Calendar.MILLISECOND)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.YEAR  ||  round  <  =  Calendar.MILLISECOND)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.YEAR  ||  round  <  =  Calendar.MILLISECOND)  {	  if(field    ==    Calendar.YEAR    ||    round    >    Calendar.MILLISECOND)    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
82	[BUG]  [BUGGY]  if(field  ==  Calendar.YEAR  ||  round!=  Calendar.MILLISECOND)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.YEAR  ||  round!=  Calendar.MILLISECOND)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.YEAR  ||  round!=  Calendar.MILLISECOND)  {	  if(field    ==    Calendar.YEAR    ||    round    >    Calendar.MILLISECOND)    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
83	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.MILLISECOND)+  2;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int[][]  fields  =  val.get(Calendar.MILLISECOND)+  2;  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.MILLISECOND)+  2;	  int[][]    fields    =    val.get(Calendar.MILLISECOND)+    1;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
84	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.MILLISECOND)+  3;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int[][]  fields  =  val.get(Calendar.MILLISECOND)+  3;  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.MILLISECOND)+  3;	  int[][]    fields    =    val.get(Calendar.MILLISECOND)+    1;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
85	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.MILLISECOND)+  1  +  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int[][]  fields  =  val.get(Calendar.MILLISECOND)+  1  +  1;  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.MILLISECOND)+  1  +  1;	  int[][]    fields    =    val.get(Calendar.MILLISECOND)+    1;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
86	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.YEAR)+  2;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int  field  =  val.get(Calendar.YEAR)+  2;  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.YEAR)+  2;	  int    field    =    val.get(Calendar.YEAR)+    1;    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
87	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.YEAR)+  3;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int  field  =  val.get(Calendar.YEAR)+  3;  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.YEAR)+  3;	  int    field    =    val.get(Calendar.YEAR)+    1;    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
88	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.YEAR)+  280000000;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int  field  =  val.get(Calendar.YEAR)+  280000000;  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.YEAR)+  280000000;	  int    field    =    val.get(Calendar.YEAR)+    1;    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
89	[BUG]  [BUGGY]  if(field  ==  Calendar.MONTH  ||  round)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.MONTH  ||  round)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.MONTH  ||  round)  {	  if(field    ==    Calendar.MONTH)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
90	[BUG]  [BUGGY]  if(round  ||  field  ==  Calendar.MONTH)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(round  ||  field  ==  Calendar.MONTH)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(round  ||  field  ==  Calendar.MONTH)  {	  if(field    ==    Calendar.MONTH)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
91	[BUG]  [BUGGY]  if(val.get(Calendar.MONTH)>  field)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(val.get(Calendar.MONTH)>  field)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(val.get(Calendar.MONTH)>  field)  {	  if(field    ==    Calendar.MONTH)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
92	[BUG]  [BUGGY]  if(field  ||  round  ==  Calendar.DECEMBER)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ||  round  ==  Calendar.DECEMBER)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ||  round  ==  Calendar.DECEMBER)  {	  if(round    ||    field    ==    Calendar.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
93	[BUG]  [BUGGY]  if(val.get(Calendar.DECEMBER)  ==  round  ||  field  ==  Calendar.DECEMBER)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(val.get(Calendar.DECEMBER)  ==  round  ||  field  ==  Calendar.DECEMBER)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(val.get(Calendar.DECEMBER)  ==  round  ||  field  ==  Calendar.DECEMBER)  {	  if(round    ||    field    ==    Calendar.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
94	[BUG]  [BUGGY]  if(val.get(Calendar.DECEMBER)  ==  field  ||  round  ==  Calendar.DECEMBER)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(val.get(Calendar.DECEMBER)  ==  field  ||  round  ==  Calendar.DECEMBER)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(val.get(Calendar.DECEMBER)  ==  field  ||  round  ==  Calendar.DECEMBER)  {	  if(round    ||    field    ==    Calendar.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
95	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.DAY_OF_MONTH,  round);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int  field  =  val.get(Calendar.DAY_OF_MONTH,  round);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.DAY_OF_MONTH,  round);	  int    field    =    val.get(Calendar.DAY_OF_MONTH);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
96	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.DAY_OF_MONTH)+  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int  field  =  val.get(Calendar.DAY_OF_MONTH)+  1;  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.DAY_OF_MONTH)+  1;	  int    field    =    val.get(Calendar.DAY_OF_MONTH);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
97	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.DAY_OF_MONTH)-  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int  field  =  val.get(Calendar.DAY_OF_MONTH)-  1;  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.DAY_OF_MONTH)-  1;	  int    field    =    val.get(Calendar.DAY_OF_MONTH);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
98	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.DAY_OF_MONTH  +  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int  field  =  val.get(Calendar.DAY_OF_MONTH  +  1);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.DAY_OF_MONTH  +  1);	  int    field    =    val.get(Calendar.DAY_OF_MONTH);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
99	[BUG]  [BUGGY]  if(field  ==  Calendar.HOUR_OF_DAY  ||  round)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.HOUR_OF_DAY  ||  round)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.HOUR_OF_DAY  ||  round)  {	  if(field    ==    Calendar.HOUR_OF_DAY)    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
100	[BUG]  [BUGGY]  if(round  ||  field  ==  Calendar.HOUR_OF_DAY)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(round  ||  field  ==  Calendar.HOUR_OF_DAY)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(round  ||  field  ==  Calendar.HOUR_OF_DAY)  {	  if(field    ==    Calendar.HOUR_OF_DAY)    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
101	[BUG]  [BUGGY]  if(val.get(Calendar.HOUR_OF_DAY)  ==  field)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(val.get(Calendar.HOUR_OF_DAY)  ==  field)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(val.get(Calendar.HOUR_OF_DAY)  ==  field)  {	  if(field    ==    Calendar.HOUR_OF_DAY)    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
102	[BUG]  [BUGGY]  if(field  ==  Calendar.HOUR_OF_DAY  ||  round  ==  Calendar.YEAR)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.HOUR_OF_DAY  ||  round  ==  Calendar.YEAR)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.HOUR_OF_DAY  ||  round  ==  Calendar.YEAR)  {	  if(field    ==    Calendar.HOUR_OF_DAY    ||    field    ==    Calendar.YEAR)    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
103	[BUG]  [BUGGY]  if(field  ==  Calendar.HOUR_OF_DAY  ||  round  >  Calendar.YEAR)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.HOUR_OF_DAY  ||  round  >  Calendar.YEAR)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.HOUR_OF_DAY  ||  round  >  Calendar.YEAR)  {	  if(field    ==    Calendar.HOUR_OF_DAY    ||    field    ==    Calendar.YEAR)    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
104	[BUG]  [BUGGY]  if(field  ==  Calendar.HOUR_OF_DAY  ||  field  ==  Calendar.MONTH)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.HOUR_OF_DAY  ||  field  ==  Calendar.MONTH)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.HOUR_OF_DAY  ||  field  ==  Calendar.MONTH)  {	  if(field    ==    Calendar.HOUR_OF_DAY    ||    field    ==    Calendar.YEAR)    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
105	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND)/  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND)/  1;  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.SECOND)/  1;	  int[][]    fields    =    val.get(Calendar.SECOND)-    1;    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
106	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND)-  2;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND)-  2;  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.SECOND)-  2;	  int[][]    fields    =    val.get(Calendar.SECOND)-    1;    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
107	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.SECOND  +  1,  round);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int  field  =  val.get(Calendar.SECOND  +  1,  round);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.SECOND  +  1,  round);	  int    field    =    val.get(Calendar.SECOND    +    1);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
108	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND)+  2;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND)+  2;  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.SECOND)+  2;	  int[][]    fields    =    val.get(Calendar.SECOND)+    1;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
109	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND)+  3;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND)+  3;  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.SECOND)+  3;	  int[][]    fields    =    val.get(Calendar.SECOND)+    1;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
110	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR,  round  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR,  round  +  1);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.YEAR,  round  +  1);	  int[][]    fields    =    val.get(Calendar.YEAR    +    1);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
111	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR  +  2);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR  +  2);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.YEAR  +  2);	  int[][]    fields    =    val.get(Calendar.YEAR    +    1);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
112	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.MILLISECOND,  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int  field  =  val.get(Calendar.MILLISECOND,  1);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.MILLISECOND,  1);	  int    field    =    val.get(Calendar.MILLISECOND,    round);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
113	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.MILLISECOND,  0,  round);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int  field  =  val.get(Calendar.MILLISECOND,  0,  round);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.MILLISECOND,  0,  round);	  int    field    =    val.get(Calendar.MILLISECOND,    round);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
114	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.MILLISECOND,  round  -  1);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int  field  =  val.get(Calendar.MILLISECOND,  round  -  1);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.MILLISECOND,  round  -  1);	  int    field    =    val.get(Calendar.MILLISECOND,    round);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
115	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR,  0,  round);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR,  0,  round);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.YEAR,  0,  round);	  int[][]    fields    =    val.get(Calendar.YEAR,    round);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
116	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR,  FieldUtils.MILLISECOND);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR,  FieldUtils.MILLISECOND);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.YEAR,  FieldUtils.MILLISECOND);	  int[][]    fields    =    val.get(Calendar.YEAR,    round);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
117	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.YEAR,  round  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int  field  =  val.get(Calendar.YEAR,  round  +  1);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.YEAR,  round  +  1);	  int    field    =    val.get(Calendar.YEAR    +    1);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
118	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.YEAR  +  1,  round);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int  field  =  val.get(Calendar.YEAR  +  1,  round);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.YEAR  +  1,  round);	  int    field    =    val.get(Calendar.YEAR    +    1);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
119	[BUG]  [BUGGY]  if(round  ||  field  ==  Calendar.MILLISECOND  ||  round  <  Calendar.HOUR_OF_DAY)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(round  ||  field  ==  Calendar.MILLISECOND  ||  round  <  Calendar.HOUR_OF_DAY)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(round  ||  field  ==  Calendar.MILLISECOND  ||  round  <  Calendar.HOUR_OF_DAY)  {	  if(field    ==    Calendar.MILLISECOND    ||    round    <    Calendar.HOUR_OF_DAY)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
120	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.MONTH)-  2;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int  field  =  val.get(Calendar.MONTH)-  2;  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.MONTH)-  2;	  int    field    =    val.get(Calendar.MONTH)-    1;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
121	[BUG]  [BUGGY]  if(field  ||  round  ==  Calendar.YEAR)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ||  round  ==  Calendar.YEAR)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ||  round  ==  Calendar.YEAR)  {	  if(round    ||    field    ==    Calendar.YEAR)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
122	[BUG]  [BUGGY]  if(val.get(Calendar.YEAR)  ==  round  ||  field  ==  Calendar.YEAR)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(val.get(Calendar.YEAR)  ==  round  ||  field  ==  Calendar.YEAR)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(val.get(Calendar.YEAR)  ==  round  ||  field  ==  Calendar.YEAR)  {	  if(round    ||    field    ==    Calendar.YEAR)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
123	[BUG]  [BUGGY]  if(val.get(Calendar.YEAR)>  roundUp  ||  field  ==  Calendar.YEAR)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(val.get(Calendar.YEAR)>  roundUp  ||  field  ==  Calendar.YEAR)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(val.get(Calendar.YEAR)>  roundUp  ||  field  ==  Calendar.YEAR)  {	  if(round    ||    field    ==    Calendar.YEAR)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
124	[BUG]  [BUGGY]  if(field  ||  round!=  Calendar.YEAR)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ||  round!=  Calendar.YEAR)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ||  round!=  Calendar.YEAR)  {	  if(round    ||    field    ==    Calendar.YEAR)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
125	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR)+  2;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR)+  2;  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.YEAR)+  2;	  int[][]    fields    =    val.get(Calendar.YEAR)+    1;    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
126	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR)+  3;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR)+  3;  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.YEAR)+  3;	  int[][]    fields    =    val.get(Calendar.YEAR)+    1;    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
127	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR)+  280000000;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR)+  280000000;  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.YEAR)+  280000000;	  int[][]    fields    =    val.get(Calendar.YEAR)+    1;    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
128	[BUG]  [BUGGY]  val.set(field,  Calendar.MILLISECOND);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  val.set(field,  Calendar.MILLISECOND);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	val.set(field,  Calendar.MILLISECOND);	  val.set(Calendar.MILLISECOND,    field);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
129	[BUG]  [BUGGY]  if(field  ==  Calendar.DAY_OF_MONTH  ||  round)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.DAY_OF_MONTH  ||  round)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.DAY_OF_MONTH  ||  round)  {	  if(field    ==    Calendar.DAY_OF_MONTH)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
130	[BUG]  [BUGGY]  if(round  ||  field  ==  Calendar.DAY_OF_MONTH)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(round  ||  field  ==  Calendar.DAY_OF_MONTH)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(round  ||  field  ==  Calendar.DAY_OF_MONTH)  {	  if(field    ==    Calendar.DAY_OF_MONTH)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
131	[BUG]  [BUGGY]  if(val.get(Calendar.DAY_OF_MONTH)  ==  round)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(val.get(Calendar.DAY_OF_MONTH)  ==  round)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(val.get(Calendar.DAY_OF_MONTH)  ==  round)  {	  if(field    ==    Calendar.DAY_OF_MONTH)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
132	[BUG]  [BUGGY]  val.set(this.field,  this.field);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  val.set(this.field,  this.field);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	val.set(this.field,  this.field);	  val.set(Calendar.MILLISECOND,    this.field);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
133	[BUG]  [BUGGY]  val.set(field,  round,  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  val.set(field,  round,  1);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	val.set(field,  round,  1);	  val.set(field,    round);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
134	[BUG]  [BUGGY]  val.set(field,  field,  round);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  val.set(field,  field,  round);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	val.set(field,  field,  round);	  val.set(field,    round);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
135	[BUG]  [BUGGY]  val.set(field,  round  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  val.set(field,  round  +  1);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	val.set(field,  round  +  1);	  val.set(field,    round);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
136	[BUG]  [BUGGY]  val.set(field,  round,  date);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  val.set(field,  round,  date);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	val.set(field,  round,  date);	  val.set(field,    round);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
137	[BUG]  [BUGGY]  if(field  ==  Calendar.YEAR  ||  roundUp)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.YEAR  ||  roundUp)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.YEAR  ||  roundUp)  {	  if(field!=    Calendar.YEAR    ||    round)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
138	[BUG]  [BUGGY]  if(field  ==  Calendar.YEAR  ||  round  ||  val.get(Calendar.MONTH)>  280000000)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.YEAR  ||  round  ||  val.get(Calendar.MONTH)>  280000000)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.YEAR  ||  round  ||  val.get(Calendar.MONTH)>  280000000)  {	  if(field!=    Calendar.YEAR    ||    round)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
139	[BUG]  [BUGGY]  val.set(Calendar.MILLISECOND,  field  -  1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  val.set(Calendar.MILLISECOND,  field  -  1);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	val.set(Calendar.MILLISECOND,  field  -  1);	  val.set(Calendar.MILLISECOND,    round    -    1);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
140	[BUG]  [BUGGY]  val.set(Calendar.MILLISECOND,  round  -  1,  field);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  val.set(Calendar.MILLISECOND,  round  -  1,  field);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	val.set(Calendar.MILLISECOND,  round  -  1,  field);	  val.set(Calendar.MILLISECOND,    round    -    1);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
141	[BUG]  [BUGGY]  if(round  ||  field  ==  Calendar.MILLISECOND  ||  round  <  =  Calendar.HOUR_OF_DAY)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(round  ||  field  ==  Calendar.MILLISECOND  ||  round  <  =  Calendar.HOUR_OF_DAY)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(round  ||  field  ==  Calendar.MILLISECOND  ||  round  <  =  Calendar.HOUR_OF_DAY)  {	  if(field    ==    Calendar.MILLISECOND    ||    round    <    =    Calendar.HOUR_OF_DAY)    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
142	[BUG]  [BUGGY]  Date  date  =  val.get(Calendar.DATE,  round);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  Date  date  =  val.get(Calendar.DATE,  round);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	Date  date  =  val.get(Calendar.DATE,  round);	  Date    date    =    val.get(Calendar.DATE);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
143	[BUG]  [BUGGY]  Date  date  =  val.get(Calendar.DATE),  round);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  Date  date  =  val.get(Calendar.DATE),  round);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	Date  date  =  val.get(Calendar.DATE),  round);	  Date    date    =    val.get(Calendar.DATE);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
144	[BUG]  [BUGGY]  if(val  ==  Calendar.MILLISECOND  ||  round  ||  val.get(Calendar.DAY_OF_MONTH)!=  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(val  ==  Calendar.MILLISECOND  ||  round  ||  val.get(Calendar.DAY_OF_MONTH)!=  null)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(val  ==  Calendar.MILLISECOND  ||  round  ||  val.get(Calendar.DAY_OF_MONTH)!=  null)  {	  if(field    ==    Calendar.MILLISECOND    ||    round    ||    val.get(Calendar.DAY_OF_MONTH)!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
145	[BUG]  [BUGGY]  if(val  ==  Calendar.MILLISECOND  ||  round  ||  field.get(Calendar.DAY_OF_MONTH)!=  null)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(val  ==  Calendar.MILLISECOND  ||  round  ||  field.get(Calendar.DAY_OF_MONTH)!=  null)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(val  ==  Calendar.MILLISECOND  ||  round  ||  field.get(Calendar.DAY_OF_MONTH)!=  null)  {	  if(field    ==    Calendar.MILLISECOND    ||    round    ||    val.get(Calendar.DAY_OF_MONTH)!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
146	[BUG]  [BUGGY]  if(round  ||  field  ==  Calendar.MILLISECOND  ||  val.get(Calendar.DAY_OF_MONTH)!=  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(round  ||  field  ==  Calendar.MILLISECOND  ||  val.get(Calendar.DAY_OF_MONTH)!=  null)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(round  ||  field  ==  Calendar.MILLISECOND  ||  val.get(Calendar.DAY_OF_MONTH)!=  null)  {	  if(field    ==    Calendar.MILLISECOND    ||    round    ||    val.get(Calendar.DAY_OF_MONTH)!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
147	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.MONTH)/  2  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int  field  =  val.get(Calendar.MONTH)/  2  +  1;  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.MONTH)/  2  +  1;	  int    field    =    val.get(Calendar.MONTH)/    2;    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
148	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.MONTH)/  3;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int  field  =  val.get(Calendar.MONTH)/  3;  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.MONTH)/  3;	  int    field    =    val.get(Calendar.MONTH)/    2;    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
149	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.MONTH)/  4;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int  field  =  val.get(Calendar.MONTH)/  4;  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.MONTH)/  4;	  int    field    =    val.get(Calendar.MONTH)/    2;    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
150	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.YEAR,  1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int  field  =  val.get(Calendar.YEAR,  1);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.YEAR,  1);	  int    field    =    val.get(Calendar.YEAR,    round);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
151	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.YEAR,  0,  round);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int  field  =  val.get(Calendar.YEAR,  0,  round);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.YEAR,  0,  round);	  int    field    =    val.get(Calendar.YEAR,    round);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
152	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.YEAR,  10);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int  field  =  val.get(Calendar.YEAR,  10);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.YEAR,  10);	  int    field    =    val.get(Calendar.YEAR,    round);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
153	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.YEAR,  25);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int  field  =  val.get(Calendar.YEAR,  25);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.YEAR,  25);	  int    field    =    val.get(Calendar.YEAR,    round);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
154	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.MILLISECOND,  field);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int[][]  fields  =  val.get(Calendar.MILLISECOND,  field);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.MILLISECOND,  field);	  int[][]    fields    =    val.get(Calendar.MILLISECOND,    round);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
155	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.MILLISECOND,  field  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int[][]  fields  =  val.get(Calendar.MILLISECOND,  field  +  1);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.MILLISECOND,  field  +  1);	  int[][]    fields    =    val.get(Calendar.MILLISECOND,    round);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
156	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.MILLISECOND,  field,  round);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int[][]  fields  =  val.get(Calendar.MILLISECOND,  field,  round);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.MILLISECOND,  field,  round);	  int[][]    fields    =    val.get(Calendar.MILLISECOND,    round);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
157	[BUG]  [BUGGY]  if(val.get(Calendar.YEAR)  ==  field  ||  round)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(val.get(Calendar.YEAR)  ==  field  ||  round)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(val.get(Calendar.YEAR)  ==  field  ||  round)  {	  if(field    ==    Calendar.YEAR    ||    round)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
158	[BUG]  [BUGGY]  if(round  ==  Calendar.YEAR  ||  field  ==  Calendar.DECEMBER)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(round  ==  Calendar.YEAR  ||  field  ==  Calendar.DECEMBER)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(round  ==  Calendar.YEAR  ||  field  ==  Calendar.DECEMBER)  {	  if(field    ==    Calendar.YEAR    ||    round)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
159	[BUG]  [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  roundUp)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  roundUp)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.DECEMBER  ||  roundUp)  {	  if(field    ==    Calendar.DECEMBER    ||    round)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
160	[BUG]  [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  round  +  1)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  round  +  1)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.DECEMBER  ||  round  +  1)  {	  if(field    ==    Calendar.DECEMBER    ||    round)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
161	[BUG]  [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  round  ||  val.get(Calendar.HOUR_OF_DAY)!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  round  ||  val.get(Calendar.HOUR_OF_DAY)!=  null)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.DECEMBER  ||  round  ||  val.get(Calendar.HOUR_OF_DAY)!=  null)  {	  if(field    ==    Calendar.DECEMBER    ||    round)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
162	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.MILLISECOND)+  2;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int  field  =  val.get(Calendar.MILLISECOND)+  2;  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.MILLISECOND)+  2;	  int    field    =    val.get(Calendar.MILLISECOND)+    1;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
163	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.MILLISECOND)+  3;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int  field  =  val.get(Calendar.MILLISECOND)+  3;  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.MILLISECOND)+  3;	  int    field    =    val.get(Calendar.MILLISECOND)+    1;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
164	[BUG]  [BUGGY]  if(field!=  Calendar.MILLISECOND  ||  round  ==  1)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field!=  Calendar.MILLISECOND  ||  round  ==  1)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field!=  Calendar.MILLISECOND  ||  round  ==  1)  {	  if(field!=    Calendar.MILLISECOND    &&    round)    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
165	[BUG]  [BUGGY]  if(field!=  Calendar.MILLISECOND  ||  round  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field!=  Calendar.MILLISECOND  ||  round  ==  0)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field!=  Calendar.MILLISECOND  ||  round  ==  0)  {	  if(field!=    Calendar.MILLISECOND    &&    round)    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
166	[BUG]  [BUGGY]  Date  date  =  val.getDate();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  Date  date  =  val.getDate();  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	Date  date  =  val.getDate();	  Date    date    =    val.getTime()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
167	[BUG]  [BUGGY]  Date  date  =  val.get(Calendar.DATE)+  2;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  Date  date  =  val.get(Calendar.DATE)+  2;  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	Date  date  =  val.get(Calendar.DATE)+  2;	  Date    date    =    val.get(Calendar.DATE)+    1;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
168	[BUG]  [BUGGY]  Date  date  =  val.get(Calendar.DATE)+  3;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  Date  date  =  val.get(Calendar.DATE)+  3;  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	Date  date  =  val.get(Calendar.DATE)+  3;	  Date    date    =    val.get(Calendar.DATE)+    1;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
169	[BUG]  [BUGGY]  Date  date  =  val.get(Calendar.DATE)/  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  Date  date  =  val.get(Calendar.DATE)/  1;  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	Date  date  =  val.get(Calendar.DATE)/  1;	  Date    date    =    val.get(Calendar.DATE)+    1;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
170	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.SECOND,  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int  field  =  val.get(Calendar.SECOND,  1);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.SECOND,  1);	  int    field    =    val.get(Calendar.SECOND,    round);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
171	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.SECOND,  round  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int  field  =  val.get(Calendar.SECOND,  round  +  1);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.SECOND,  round  +  1);	  int    field    =    val.get(Calendar.SECOND,    round);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
172	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.SECOND,  0,  round);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int  field  =  val.get(Calendar.SECOND,  0,  round);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.SECOND,  0,  round);	  int    field    =    val.get(Calendar.SECOND,    round);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
173	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.SECOND,  field);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int  field  =  val.get(Calendar.SECOND,  field);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.SECOND,  field);	  int    field    =    val.get(Calendar.SECOND,    round);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
174	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.MONTH,  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int  field  =  val.get(Calendar.MONTH,  1);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.MONTH,  1);	  int    field    =    val.get(Calendar.MONTH,    round);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
175	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.MONTH,  0,  round);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int  field  =  val.get(Calendar.MONTH,  0,  round);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.MONTH,  0,  round);	  int    field    =    val.get(Calendar.MONTH,    round);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
176	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.MONTH,  31);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int  field  =  val.get(Calendar.MONTH,  31);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.MONTH,  31);	  int    field    =    val.get(Calendar.MONTH,    round);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
177	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.MONTH,  3);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int  field  =  val.get(Calendar.MONTH,  3);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.MONTH,  3);	  int    field    =    val.get(Calendar.MONTH,    round);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
178	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.SECOND)-  2;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int  field  =  val.get(Calendar.SECOND)-  2;  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.SECOND)-  2;	  int    field    =    val.get(Calendar.SECOND)-    1;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
179	[BUG]  [BUGGY]  val.set(Calendar.YEAR,  field,  round);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  val.set(Calendar.YEAR,  field,  round);  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	val.set(Calendar.YEAR,  field,  round);	  val.set(Calendar.YEAR,    field);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
180	[BUG]  [BUGGY]  val.set(Calendar.YEAR,  round);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  val.set(Calendar.YEAR,  round);  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	val.set(Calendar.YEAR,  round);	  val.set(Calendar.YEAR,    field);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
181	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.HOUR_OF_DAY,  round);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int[][]  fields  =  val.get(Calendar.HOUR_OF_DAY,  round);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.HOUR_OF_DAY,  round);	  int[][]    fields    =    val.get(Calendar.HOUR_OF_DAY);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
182	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.HOUR_OF_DAY)+  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int[][]  fields  =  val.get(Calendar.HOUR_OF_DAY)+  1;  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.HOUR_OF_DAY)+  1;	  int[][]    fields    =    val.get(Calendar.HOUR_OF_DAY);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
183	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.HOUR_OF_DAY  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int[][]  fields  =  val.get(Calendar.HOUR_OF_DAY  +  1);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.HOUR_OF_DAY  +  1);	  int[][]    fields    =    val.get(Calendar.HOUR_OF_DAY);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
184	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.HOUR_OF_DAY,  field);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int[][]  fields  =  val.get(Calendar.HOUR_OF_DAY,  field);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.HOUR_OF_DAY,  field);	  int[][]    fields    =    val.get(Calendar.HOUR_OF_DAY);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
185	[BUG]  [BUGGY]  if(field  ==  Calendar.YEAR  ||  round  ||  field!=  Calendar.MILLISECOND)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.YEAR  ||  round  ||  field!=  Calendar.MILLISECOND)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.YEAR  ||  round  ||  field!=  Calendar.MILLISECOND)  {	  if(field    ==    Calendar.YEAR    ||    round    ||    field    ==    Calendar.MILLISECOND)    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
186	[BUG]  [BUGGY]  if(field  ==  Calendar.YEAR  ||  field  ==  Calendar.MILLISECOND  ||  round  ==  Calendar.HOUR_OF_DAY)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.YEAR  ||  field  ==  Calendar.MILLISECOND  ||  round  ==  Calendar.HOUR_OF_DAY)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.YEAR  ||  field  ==  Calendar.MILLISECOND  ||  round  ==  Calendar.HOUR_OF_DAY)  {	  if(field    ==    Calendar.YEAR    ||    round    ||    field    ==    Calendar.MILLISECOND)    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
187	[BUG]  [BUGGY]  if(val  ==  Calendar.MILLISECOND  ||  round  ||  val.get(Calendar.HOUR_OF_DAY)!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(val  ==  Calendar.MILLISECOND  ||  round  ||  val.get(Calendar.HOUR_OF_DAY)!=  null)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(val  ==  Calendar.MILLISECOND  ||  round  ||  val.get(Calendar.HOUR_OF_DAY)!=  null)  {	  if(field    ==    Calendar.MILLISECOND    ||    round    ||    val.get(Calendar.HOUR_OF_DAY)!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
188	[BUG]  [BUGGY]  if(val  ==  Calendar.MILLISECOND  ||  round  ||  field.get(Calendar.HOUR_OF_DAY)!=  null)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(val  ==  Calendar.MILLISECOND  ||  round  ||  field.get(Calendar.HOUR_OF_DAY)!=  null)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(val  ==  Calendar.MILLISECOND  ||  round  ||  field.get(Calendar.HOUR_OF_DAY)!=  null)  {	  if(field    ==    Calendar.MILLISECOND    ||    round    ||    val.get(Calendar.HOUR_OF_DAY)!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
189	[BUG]  [BUGGY]  Date  date  =  val.get(Calendar.DATE)-  1  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  Date  date  =  val.get(Calendar.DATE)-  1  +  1;  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	Date  date  =  val.get(Calendar.DATE)-  1  +  1;	  Date    date    =    val.get(Calendar.DATE)-    1;    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
190	[BUG]  [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  round  >=  Calendar.MILLISECOND)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  round  >=  Calendar.MILLISECOND)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.DECEMBER  ||  round  >=  Calendar.MILLISECOND)  {	  if(field    ==    Calendar.DECEMBER    ||    round    >    Calendar.MILLISECOND)    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
191	[BUG]  [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  round  <  =  Calendar.MILLISECOND)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  round  <  =  Calendar.MILLISECOND)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.DECEMBER  ||  round  <  =  Calendar.MILLISECOND)  {	  if(field    ==    Calendar.DECEMBER    ||    round    >    Calendar.MILLISECOND)    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
192	[BUG]  [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  round!=  Calendar.MILLISECOND)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  round!=  Calendar.MILLISECOND)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.DECEMBER  ||  round!=  Calendar.MILLISECOND)  {	  if(field    ==    Calendar.DECEMBER    ||    round    >    Calendar.MILLISECOND)    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
193	[BUG]  [BUGGY]  if(field  ==  Calendar.MINUTE  ||  field  ==  Calendar.MILLISECOND  ||  roundUp)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.MINUTE  ||  field  ==  Calendar.MILLISECOND  ||  roundUp)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.MINUTE  ||  field  ==  Calendar.MILLISECOND  ||  roundUp)  {	  if(field    ==    Calendar.MINUTE    ||    field    ==    Calendar.MILLISECOND    ||    round)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
194	[BUG]  [BUGGY]  if(field  ==  Calendar.MINUTE  ||  field  ==  Calendar.MILLISECOND  ||  round  +  1)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.MINUTE  ||  field  ==  Calendar.MILLISECOND  ||  round  +  1)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.MINUTE  ||  field  ==  Calendar.MILLISECOND  ||  round  +  1)  {	  if(field    ==    Calendar.MINUTE    ||    field    ==    Calendar.MILLISECOND    ||    round)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
195	[BUG]  [BUGGY]  if(field  ==  Calendar.MINUTE  ||  field  ==  Calendar.MILLISECOND  ||  round  >  MILLISECOND)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.MINUTE  ||  field  ==  Calendar.MILLISECOND  ||  round  >  MILLISECOND)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.MINUTE  ||  field  ==  Calendar.MILLISECOND  ||  round  >  MILLISECOND)  {	  if(field    ==    Calendar.MINUTE    ||    field    ==    Calendar.MILLISECOND    ||    round)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
196	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.MONTH,  2);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int  field  =  val.get(Calendar.MONTH,  2);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.MONTH,  2);	  int    field    =    val.get(Calendar.MONTH,    round);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
197	[BUG]  [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  field  ||  val.get(Calendar.DAY_OF_MONTH)!=  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  field  ||  val.get(Calendar.DAY_OF_MONTH)!=  null)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.MILLISECOND  ||  field  ||  val.get(Calendar.DAY_OF_MONTH)!=  null)  {	  if(field    ==    Calendar.MILLISECOND    ||    round    ||    val.get(Calendar.DAY_OF_MONTH)!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
198	[BUG]  [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  &&  val.get(Calendar.DAY_OF_MONTH)!=  null)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  &&  val.get(Calendar.DAY_OF_MONTH)!=  null)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.MILLISECOND  ||  round  &&  val.get(Calendar.DAY_OF_MONTH)!=  null)  {	  if(field    ==    Calendar.MILLISECOND    ||    round    ||    val.get(Calendar.DAY_OF_MONTH)!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
199	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND  +  1,  round);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND  +  1,  round);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.SECOND  +  1,  round);	  int[][]    fields    =    val.get(Calendar.SECOND,    round);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
200	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND)+  1,  round);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND)+  1,  round);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.SECOND)+  1,  round);	  int[][]    fields    =    val.get(Calendar.SECOND,    round);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
201	[BUG]  [BUGGY]  if(field!=  Calendar.MILLISECOND  ||  round  >=  Calendar.HOUR_OF_DAY)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field!=  Calendar.MILLISECOND  ||  round  >=  Calendar.HOUR_OF_DAY)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field!=  Calendar.MILLISECOND  ||  round  >=  Calendar.HOUR_OF_DAY)  {	  if(field!=    Calendar.MILLISECOND    ||    round    ==    Calendar.HOUR_OF_DAY)    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
202	[BUG]  [BUGGY]  if(field  ==  Calendar.MILLISECOND  &&  round)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.MILLISECOND  &&  round)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.MILLISECOND  &&  round)  {	  if(field!=    Calendar.MILLISECOND    &&    round)    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
203	[BUG]  [BUGGY]  if(field!=  Calendar.MILLISECOND  &&  roundUp)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field!=  Calendar.MILLISECOND  &&  roundUp)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field!=  Calendar.MILLISECOND  &&  roundUp)  {	  if(field!=    Calendar.MILLISECOND    &&    round)    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
204	[BUG]  [BUGGY]  val.set(this.field,  this.millisecs);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  val.set(this.field,  this.millisecs);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	val.set(this.field,  this.millisecs);	  val.set(Calendar.MILLISECOND,    this.field);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
205	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.YEAR  -  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int  field  =  val.get(Calendar.YEAR  -  1);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.YEAR  -  1);	  int    field    =    val.get(Calendar.YEAR    +    1);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
206	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.YEAR  +  3);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int  field  =  val.get(Calendar.YEAR  +  3);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.YEAR  +  3);	  int    field    =    val.get(Calendar.YEAR    +    1);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
207	[BUG]  [BUGGY]  val.set(field,  Calendar.YEAR);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  val.set(field,  Calendar.YEAR);  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	val.set(field,  Calendar.YEAR);	  val.set(Calendar.YEAR,    field);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
208	[BUG]  [BUGGY]  val.set(Calendar.YEAR,  field  +  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  val.set(Calendar.YEAR,  field  +  1);  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	val.set(Calendar.YEAR,  field  +  1);	  val.set(Calendar.YEAR,    field);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
209	[BUG]  [BUGGY]  if(field  ==  Calendar.YEAR  ||  field  >  Calendar.MILLISECOND)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.YEAR  ||  field  >  Calendar.MILLISECOND)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.YEAR  ||  field  >  Calendar.MILLISECOND)  {	  if(field    ==    Calendar.YEAR    ||    field    >=    Calendar.MILLISECOND)    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
210	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.MILLISECOND,  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int[][]  fields  =  val.get(Calendar.MILLISECOND,  1);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.MILLISECOND,  1);	  int[][]    fields    =    val.get(Calendar.MILLISECOND,    round);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
211	[BUG]  [BUGGY]  if(field  ==  Calendar.HOUR_OF_DAY  ||  field  ==  Calendar.DECEMBER)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.HOUR_OF_DAY  ||  field  ==  Calendar.DECEMBER)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.HOUR_OF_DAY  ||  field  ==  Calendar.DECEMBER)  {	  if(field    ==    Calendar.HOUR_OF_DAY)    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
212	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.YEAR,  280000000);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int  field  =  val.get(Calendar.YEAR,  280000000);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.YEAR,  280000000);	  int    field    =    val.get(Calendar.YEAR,    round);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
213	[BUG]  [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  field  ||  val.get(Calendar.YEAR)>  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  field  ||  val.get(Calendar.YEAR)>  0)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.MILLISECOND  ||  field  ||  val.get(Calendar.YEAR)>  0)  {	  if(field    ==    Calendar.MILLISECOND    ||    round    ||    val.get(Calendar.YEAR)>    0)    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
214	[BUG]  [BUGGY]  if(field  ||  roundUp  ||  field  ==  Calendar.MINUTE  ||  field  ==  Calendar.MILLISECOND)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ||  roundUp  ||  field  ==  Calendar.MINUTE  ||  field  ==  Calendar.MILLISECOND)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ||  roundUp  ||  field  ==  Calendar.MINUTE  ||  field  ==  Calendar.MILLISECOND)  {	  if(round    ||    field    ==    Calendar.MINUTE    ||    field    ==    Calendar.MILLISECOND)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
215	[BUG]  [BUGGY]  if(field  >=  Calendar.MINUTE  ||  field  ==  Calendar.MILLISECOND)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  >=  Calendar.MINUTE  ||  field  ==  Calendar.MILLISECOND)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  >=  Calendar.MINUTE  ||  field  ==  Calendar.MILLISECOND)  {	  if(round    ||    field    ==    Calendar.MINUTE    ||    field    ==    Calendar.MILLISECOND)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
216	[BUG]  [BUGGY]  if(field  ==  Calendar.DECEMBER  &&  round  >  1)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.DECEMBER  &&  round  >  1)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.DECEMBER  &&  round  >  1)  {	  if(field    ==    Calendar.DECEMBER    ||    round    >    1)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
217	[BUG]  [BUGGY]  if(field  >=  Calendar.YEAR  ||  field  ==  Calendar.MILLISECOND)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  >=  Calendar.YEAR  ||  field  ==  Calendar.MILLISECOND)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  >=  Calendar.YEAR  ||  field  ==  Calendar.MILLISECOND)  {	  if(field!=    Calendar.YEAR    ||    field    ==    Calendar.MILLISECOND)    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
218	[BUG]  [BUGGY]  if(field!=  Calendar.MILLISECOND  &&  val.get(Calendar.HOUR_OF_DAY)!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field!=  Calendar.MILLISECOND  &&  val.get(Calendar.HOUR_OF_DAY)!=  null)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field!=  Calendar.MILLISECOND  &&  val.get(Calendar.HOUR_OF_DAY)!=  null)  {	  if(field!=    Calendar.MILLISECOND    ||    round    &&    val.get(Calendar.HOUR_OF_DAY)!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
219	[BUG]  [BUGGY]  if(field!=  Calendar.MILLISECOND  ||  field  ||  val.get(Calendar.HOUR_OF_DAY)!=  null)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field!=  Calendar.MILLISECOND  ||  field  ||  val.get(Calendar.HOUR_OF_DAY)!=  null)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field!=  Calendar.MILLISECOND  ||  field  ||  val.get(Calendar.HOUR_OF_DAY)!=  null)  {	  if(field!=    Calendar.MILLISECOND    ||    round    &&    val.get(Calendar.HOUR_OF_DAY)!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
220	[BUG]  [BUGGY]  if(field  ==  Calendar.MINUTE  ||  field  >  Calendar.MILLISECOND)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.MINUTE  ||  field  >  Calendar.MILLISECOND)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.MINUTE  ||  field  >  Calendar.MILLISECOND)  {	  if(field    ==    Calendar.MINUTE    ||    field    >=    Calendar.MILLISECOND)    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
221	[BUG]  [BUGGY]  val.set(field,  0);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  val.set(field,  0);  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	val.set(field,  0);	  val.set(Calendar.MILLISECOND,    0);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
222	[BUG]  [BUGGY]  if(field!=  Calendar.MILLISECOND  ||  round  ||  val.get(Calendar.SECOND)>  1)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field!=  Calendar.MILLISECOND  ||  round  ||  val.get(Calendar.SECOND)>  1)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field!=  Calendar.MILLISECOND  ||  round  ||  val.get(Calendar.SECOND)>  1)  {	  if(field!=    Calendar.MILLISECOND    ||    round    ||    val.get(Calendar.SECOND)>    0)    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
223	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR,  1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR,  1);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.YEAR,  1);	  int[][]    fields    =    val.get(Calendar.YEAR,    round);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
224	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR,  FieldUtils.safeNegate(field));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR,  FieldUtils.safeNegate(field));  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.YEAR,  FieldUtils.safeNegate(field));	  int[][]    fields    =    val.get(Calendar.YEAR,    round);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
225	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR,  FieldUtils.safeMultiply(field));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR,  FieldUtils.safeMultiply(field));  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.YEAR,  FieldUtils.safeMultiply(field));	  int[][]    fields    =    val.get(Calendar.YEAR,    round);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
226	[BUG]  [BUGGY]  if(val.get(Calendar.YEAR)>  280000000  ||  round)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(val.get(Calendar.YEAR)>  280000000  ||  round)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(val.get(Calendar.YEAR)>  280000000  ||  round)  {	  if(val.get(Calendar.YEAR)>    280000000)    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
227	[BUG]  [BUGGY]  if(field  ==  Calendar.MINUTE  ||  field  ==  Calendar.MILLISECOND  ||  round  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.MINUTE  ||  field  ==  Calendar.MILLISECOND  ||  round  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.MINUTE  ||  field  ==  Calendar.MILLISECOND  ||  round  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(field    ==    Calendar.MINUTE    ||    field    ==    Calendar.MILLISECOND    ||    round)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
228	[BUG]  [BUGGY]  Date  date  =  val.get(Calendar.DATE)+  1  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  Date  date  =  val.get(Calendar.DATE)+  1  +  1;  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	Date  date  =  val.get(Calendar.DATE)+  1  +  1;	  Date    date    =    val.get(Calendar.DATE)+    1;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
229	[BUG]  [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  ||  val.get(Calendar.HOUR_OF_DAY)!=  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  ||  val.get(Calendar.HOUR_OF_DAY)!=  0)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.MILLISECOND  ||  round  ||  val.get(Calendar.HOUR_OF_DAY)!=  0)  {	  if(field    ==    Calendar.MILLISECOND    ||    roundUp)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
230	[BUG]  [BUGGY]  if(field  ==  Calendar.YEAR  ||  field  ==  Calendar.MILLISECOND  ||  round  >  Calendar.HOUR_OF_DAY)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.YEAR  ||  field  ==  Calendar.MILLISECOND  ||  round  >  Calendar.HOUR_OF_DAY)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.YEAR  ||  field  ==  Calendar.MILLISECOND  ||  round  >  Calendar.HOUR_OF_DAY)  {	  if(field    ==    Calendar.YEAR    ||    round    ||    field    ==    Calendar.MILLISECOND)    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
231	[BUG]  [BUGGY]  if(field  <  Calendar.MILLISECOND  ||  round)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  <  Calendar.MILLISECOND  ||  round)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  <  Calendar.MILLISECOND  ||  round)  {	  if(field    >=    Calendar.MILLISECOND    ||    round)    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
232	[BUG]  [BUGGY]  if(field!=  Calendar.YEAR  ||  field  ==  Calendar.DECEMBER)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field!=  Calendar.YEAR  ||  field  ==  Calendar.DECEMBER)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field!=  Calendar.YEAR  ||  field  ==  Calendar.DECEMBER)  {	  if(field    ==    Calendar.YEAR    ||    field    ==    Calendar.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
233	[BUG]  [BUGGY]  if(field  ==  Calendar.YEAR  ||  field!=  Calendar.DECEMBER)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.YEAR  ||  field!=  Calendar.DECEMBER)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.YEAR  ||  field!=  Calendar.DECEMBER)  {	  if(field    ==    Calendar.YEAR    ||    field    ==    Calendar.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
234	[BUG]  [BUGGY]  if(field  ==  Calendar.YEAR  ||  field  >=  Calendar.DECEMBER)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.YEAR  ||  field  >=  Calendar.DECEMBER)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.YEAR  ||  field  >=  Calendar.DECEMBER)  {	  if(field    ==    Calendar.YEAR    ||    field    ==    Calendar.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
235	[BUG]  [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  round  &&  val.get(Calendar.HOUR_OF_DAY)!=  null)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  round  &&  val.get(Calendar.HOUR_OF_DAY)!=  null)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.DECEMBER  ||  round  &&  val.get(Calendar.HOUR_OF_DAY)!=  null)  {	  if(field    ==    Calendar.DECEMBER    ||    round)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
236	[BUG]  [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  round  &&  val.get(Calendar.YEAR)>  280000000)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  round  &&  val.get(Calendar.YEAR)>  280000000)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.DECEMBER  ||  round  &&  val.get(Calendar.YEAR)>  280000000)  {	  if(field    ==    Calendar.DECEMBER    ||    round)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
237	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR  -  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR  -  1);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.YEAR  -  1);	  int[][]    fields    =    val.get(Calendar.YEAR    +    1);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
238	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR  +  3);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR  +  3);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.YEAR  +  3);	  int[][]    fields    =    val.get(Calendar.YEAR    +    1);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
239	[BUG]  [BUGGY]  if(field  ==  Calendar.YEAR  ||  field  ==  Calendar.MONTH)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.YEAR  ||  field  ==  Calendar.MONTH)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.YEAR  ||  field  ==  Calendar.MONTH)  {	  if(field    ==    Calendar.MONTH)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
240	[BUG]  [BUGGY]  Date  date  =  val.get(Calendar.MILLISECOND  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  Date  date  =  val.get(Calendar.MILLISECOND  +  1);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	Date  date  =  val.get(Calendar.MILLISECOND  +  1);	  Date    date    =    val.get(Calendar.MILLISECOND);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
241	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.MILLISECOND)-  1  +  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int  field  =  val.get(Calendar.MILLISECOND)-  1  +  1;  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.MILLISECOND)-  1  +  1;	  int    field    =    val.get(Calendar.MILLISECOND)-    1;    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
242	[BUG]  [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  round  ==  Calendar.DECEMBER)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  round  ==  Calendar.DECEMBER)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.DECEMBER  ||  round  ==  Calendar.DECEMBER)  {	  if(field    ==    Calendar.DECEMBER    ||    round    >    Calendar.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
243	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.MONTH  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int[][]  fields  =  val.get(Calendar.MONTH  +  1);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.MONTH  +  1);	  int[][]    fields    =    val.get(Calendar.MONTH);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
244	[BUG]  [BUGGY]  Date  date  =  val.get(Calendar.YEAR,  field);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  Date  date  =  val.get(Calendar.YEAR,  field);  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	Date  date  =  val.get(Calendar.YEAR,  field);	  Date    date    =    val.get(Calendar.YEAR);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
245	[BUG]  [BUGGY]  val.set(field,  round  -  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  val.set(field,  round  -  1);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	val.set(field,  round  -  1);	  val.set(field,    round);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
246	[BUG]  [BUGGY]  val.set(field,  new  Date(round));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  val.set(field,  new  Date(round));  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	val.set(field,  new  Date(round));	  val.set(field,    round);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
247	[BUG]  [BUGGY]  if(field  ==  Calendar.YEAR  ||  round  ||  val.get(Calendar.HOUR_OF_DAY)!=  null)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.YEAR  ||  round  ||  val.get(Calendar.HOUR_OF_DAY)!=  null)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.YEAR  ||  round  ||  val.get(Calendar.HOUR_OF_DAY)!=  null)  {	  if(field    ==    Calendar.YEAR    ||    round)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
248	[BUG]  [BUGGY]  if(field  ==  Calendar.YEAR  ||  round  ||  val.get(Calendar.DAY_OF_MONTH)>  280000000)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.YEAR  ||  round  ||  val.get(Calendar.DAY_OF_MONTH)>  280000000)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.YEAR  ||  round  ||  val.get(Calendar.DAY_OF_MONTH)>  280000000)  {	  if(field    ==    Calendar.YEAR    ||    round)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
249	[BUG]  [BUGGY]  if(field!=  Calendar.MILLISECOND  ||  round  >=  Calendar.YEAR)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field!=  Calendar.MILLISECOND  ||  round  >=  Calendar.YEAR)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field!=  Calendar.MILLISECOND  ||  round  >=  Calendar.YEAR)  {	  if(field!=    Calendar.MILLISECOND    ||    round    >    Calendar.YEAR)    {    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
250	[BUG]  [BUGGY]  if(field  ==  Calendar.HOUR_OF_DAY  ||  field  ==  Calendar.DAY_OF_MONTH)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.HOUR_OF_DAY  ||  field  ==  Calendar.DAY_OF_MONTH)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.HOUR_OF_DAY  ||  field  ==  Calendar.DAY_OF_MONTH)  {	  if(field    ==    Calendar.DAY_OF_MONTH)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
251	[BUG]  [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  >  280000000)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  >  280000000)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.MILLISECOND  ||  round  >  280000000)  {	  if(field    ==    Calendar.MILLISECOND    ||    round    +    1)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
252	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.MILLISECOND,  3);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int  field  =  val.get(Calendar.MILLISECOND,  3);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.MILLISECOND,  3);	  int    field    =    val.get(Calendar.MILLISECOND,    round);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
253	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.MILLISECOND,  4);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int  field  =  val.get(Calendar.MILLISECOND,  4);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.MILLISECOND,  4);	  int    field    =    val.get(Calendar.MILLISECOND,    round);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
254	[BUG]  [BUGGY]  if(field  >=  Calendar.YEAR  ||  round)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  >=  Calendar.YEAR  ||  round)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  >=  Calendar.YEAR  ||  round)  {	  if(field!=    Calendar.YEAR    ||    round)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
255	[BUG]  [BUGGY]  if(field!=  Calendar.YEAR  ||  round  ||  val.get(Calendar.MONTH)>  280000000)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field!=  Calendar.YEAR  ||  round  ||  val.get(Calendar.MONTH)>  280000000)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field!=  Calendar.YEAR  ||  round  ||  val.get(Calendar.MONTH)>  280000000)  {	  if(field!=    Calendar.YEAR    ||    round)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
256	[BUG]  [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  ||  val.get(Calendar.HOUR_OF_DAY)  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  ||  val.get(Calendar.HOUR_OF_DAY)  ==  null)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.MILLISECOND  ||  round  ||  val.get(Calendar.HOUR_OF_DAY)  ==  null)  {	  if(field    ==    Calendar.MILLISECOND    ||    round    ||    val.get(Calendar.HOUR_OF_DAY)!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
257	[BUG]  [BUGGY]  if(val  ==  Calendar.MILLISECOND  ||  round  &&  val.get(Calendar.HOUR_OF_DAY)!=  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(val  ==  Calendar.MILLISECOND  ||  round  &&  val.get(Calendar.HOUR_OF_DAY)!=  null)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(val  ==  Calendar.MILLISECOND  ||  round  &&  val.get(Calendar.HOUR_OF_DAY)!=  null)  {	  if(field    ==    Calendar.MILLISECOND    ||    round    &&    val.get(Calendar.HOUR_OF_DAY)!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
258	[BUG]  [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  &&  val.get(Calendar.HOUR_OF_DAY)  ==  null)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  &&  val.get(Calendar.HOUR_OF_DAY)  ==  null)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.MILLISECOND  ||  round  &&  val.get(Calendar.HOUR_OF_DAY)  ==  null)  {	  if(field    ==    Calendar.MILLISECOND    ||    round    &&    val.get(Calendar.HOUR_OF_DAY)!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
259	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.MILLISECOND  -  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int[][]  fields  =  val.get(Calendar.MILLISECOND  -  1);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.MILLISECOND  -  1);	  int[][]    fields    =    val.get(Calendar.MILLISECOND    +    1);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
260	[BUG]  [BUGGY]  if(field  ==  Calendar.MINUTE  ||  field  ==  Calendar.MILLISECOND  ||  field  ==  Calendar.HOUR_OF_DAY)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.MINUTE  ||  field  ==  Calendar.MILLISECOND  ||  field  ==  Calendar.HOUR_OF_DAY)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.MINUTE  ||  field  ==  Calendar.MILLISECOND  ||  field  ==  Calendar.HOUR_OF_DAY)  {	  if(field!=    Calendar.MILLISECOND    ||    field    ==    Calendar.HOUR_OF_DAY)    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
261	[BUG]  [BUGGY]  if(field  >=  Calendar.MILLISECOND  ||  field  ==  Calendar.HOUR_OF_DAY)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  >=  Calendar.MILLISECOND  ||  field  ==  Calendar.HOUR_OF_DAY)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  >=  Calendar.MILLISECOND  ||  field  ==  Calendar.HOUR_OF_DAY)  {	  if(field!=    Calendar.MILLISECOND    ||    field    ==    Calendar.HOUR_OF_DAY)    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
262	[BUG]  [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  round  ||  field  ==  Calendar.DECEMBER)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  round  ||  field  ==  Calendar.DECEMBER)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.DECEMBER  ||  round  ||  field  ==  Calendar.DECEMBER)  {	  if(round    ||    field    ==    Calendar.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
263	[BUG]  [BUGGY]  if(field  ||  round!=  Calendar.DECEMBER)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ||  round!=  Calendar.DECEMBER)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ||  round!=  Calendar.DECEMBER)  {	  if(round    ||    field    ==    Calendar.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
264	[BUG]  [BUGGY]  if(field  ==  Calendar.HOUR  ||  field  ==  Calendar.YEAR)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.HOUR  ||  field  ==  Calendar.YEAR)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.HOUR  ||  field  ==  Calendar.YEAR)  {	  if(field    ==    Calendar.HOUR_OF_DAY    ||    field    ==    Calendar.YEAR)    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
265	[BUG]  [BUGGY]  if(field  ==  Calendar.HOUR_OF_DAY  ||  field  >=  Calendar.YEAR)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.HOUR_OF_DAY  ||  field  >=  Calendar.YEAR)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.HOUR_OF_DAY  ||  field  >=  Calendar.YEAR)  {	  if(field    ==    Calendar.HOUR_OF_DAY    ||    field    ==    Calendar.YEAR)    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
266	[BUG]  [BUGGY]  if(field  ==  Calendar.YEAR  ||  round  ==  Calendar.HOUR_OF_DAY)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.YEAR  ||  round  ==  Calendar.HOUR_OF_DAY)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.YEAR  ||  round  ==  Calendar.HOUR_OF_DAY)  {	  if(round    ||    field    ==    Calendar.YEAR)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
267	[BUG]  [BUGGY]  if(field  ||  round  >  Calendar.MILLISECOND  ||  round  >  Calendar.HOUR_OF_DAY)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ||  round  >  Calendar.MILLISECOND  ||  round  >  Calendar.HOUR_OF_DAY)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ||  round  >  Calendar.MILLISECOND  ||  round  >  Calendar.HOUR_OF_DAY)  {	  if(round    ||    field    ==    Calendar.MILLISECOND    ||    round    >    Calendar.HOUR_OF_DAY)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
268	[BUG]  [BUGGY]  if(val.get(Calendar.YEAR)  <  280000000)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(val.get(Calendar.YEAR)  <  280000000)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(val.get(Calendar.YEAR)  <  280000000)  {	  if(val.get(Calendar.YEAR)>    280000000)    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
269	[BUG]  [BUGGY]  if(field  ==  Calendar.DECEMBER  &&  round  >  Calendar.HOUR_OF_DAY)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.DECEMBER  &&  round  >  Calendar.HOUR_OF_DAY)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.DECEMBER  &&  round  >  Calendar.HOUR_OF_DAY)  {	  if(field    ==    Calendar.DECEMBER    ||    round    >    Calendar.HOUR_OF_DAY)    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
270	[BUG]  [BUGGY]  val.set(0,  round  -  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  val.set(0,  round  -  1);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	val.set(0,  round  -  1);	  val.set(0,    round);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
271	[BUG]  [BUGGY]  if(field!=  Calendar.MILLISECOND  &&  round  ||  val.get(Calendar.SECOND)>  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field!=  Calendar.MILLISECOND  &&  round  ||  val.get(Calendar.SECOND)>  0)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field!=  Calendar.MILLISECOND  &&  round  ||  val.get(Calendar.SECOND)>  0)  {	  if(field!=    Calendar.MILLISECOND    ||    round    ||    val.get(Calendar.SECOND)>    0)    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
272	[BUG]  [BUGGY]  if(field  <  Calendar.MILLISECOND  ||  round  >  Calendar.HOUR_OF_DAY)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  <  Calendar.MILLISECOND  ||  round  >  Calendar.HOUR_OF_DAY)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  <  Calendar.MILLISECOND  ||  round  >  Calendar.HOUR_OF_DAY)  {	  if(field    ==    Calendar.MILLISECOND    ||    round    <    Calendar.HOUR_OF_DAY)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
273	[BUG]  [BUGGY]  if(field  ==  Calendar.DECEMBER  &&  round)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.DECEMBER  &&  round)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.DECEMBER  &&  round)  {	  if(field    ==    Calendar.DECEMBER    ||    round)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
274	[BUG]  [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  round  ||  val.get(Calendar.MONTH)>  280000000)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  round  ||  val.get(Calendar.MONTH)>  280000000)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.DECEMBER  ||  round  ||  val.get(Calendar.MONTH)>  280000000)  {	  if(field    ==    Calendar.DECEMBER    ||    round)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
275	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND,  round  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND,  round  -  1);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.SECOND,  round  -  1);	  int[][]    fields    =    val.get(Calendar.SECOND,    round);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
276	[BUG]  [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  >  MILLISECOND)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  >  MILLISECOND)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.MILLISECOND  ||  round  >  MILLISECOND)  {	  if(field    ==    Calendar.MILLISECOND    ||    round    +    1)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
277	[BUG]  [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  ||  val.get(Calendar.DAY_OF_MONTH)  ==  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  ||  val.get(Calendar.DAY_OF_MONTH)  ==  null)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.MILLISECOND  ||  round  ||  val.get(Calendar.DAY_OF_MONTH)  ==  null)  {	  if(field    ==    Calendar.MILLISECOND    ||    round    ||    val.get(Calendar.DAY_OF_MONTH)!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
278	[BUG]  [BUGGY]  if(field  ==  Calendar.DAY_OF_MONTH  ||  round  >  Calendar.MILLISECOND)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.DAY_OF_MONTH  ||  round  >  Calendar.MILLISECOND)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.DAY_OF_MONTH  ||  round  >  Calendar.MILLISECOND)  {	  if(field    ==    Calendar.DAY_OF_MONTH)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
279	[BUG]  [BUGGY]  if(field!=  Calendar.DAY_OF_MONTH)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field!=  Calendar.DAY_OF_MONTH)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field!=  Calendar.DAY_OF_MONTH)  {	  if(field    ==    Calendar.DAY_OF_MONTH)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
280	[BUG]  [BUGGY]  Date  date  =  val.get(Calendar.DATE)-  3;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  Date  date  =  val.get(Calendar.DATE)-  3;  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	Date  date  =  val.get(Calendar.DATE)-  3;	  Date    date    =    val.get(Calendar.DATE)-    1;    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
281	[BUG]  [BUGGY]  Date  date  =  val.get(Calendar.DATE)-  2;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  Date  date  =  val.get(Calendar.DATE)-  2;  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	Date  date  =  val.get(Calendar.DATE)-  2;	  Date    date    =    val.get(Calendar.DATE)-    1;    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
282	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.YEAR)/  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int  field  =  val.get(Calendar.YEAR)/  1;  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.YEAR)/  1;	  int    field    =    val.get(Calendar.YEAR)+    1;    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
283	[BUG]  [BUGGY]  if(field!=  Calendar.MILLISECOND  &&  round  ==  Calendar.HOUR_OF_DAY)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field!=  Calendar.MILLISECOND  &&  round  ==  Calendar.HOUR_OF_DAY)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field!=  Calendar.MILLISECOND  &&  round  ==  Calendar.HOUR_OF_DAY)  {	  if(field!=    Calendar.MILLISECOND    ||    round    ==    Calendar.HOUR_OF_DAY)    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
284	[BUG]  [BUGGY]  if(field!=  Calendar.YEAR  &&  round)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field!=  Calendar.YEAR  &&  round)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field!=  Calendar.YEAR  &&  round)  {	  if(field!=    Calendar.YEAR    ||    round)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
285	[BUG]  [BUGGY]  if(field  ==  Calendar.MINUTE  ||  round  ||  field  ==  Calendar.MILLISECOND)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.MINUTE  ||  round  ||  field  ==  Calendar.MILLISECOND)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.MINUTE  ||  round  ||  field  ==  Calendar.MILLISECOND)  {	  if(round    ||    field    ==    Calendar.MINUTE    ||    field    ==    Calendar.MILLISECOND)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
286	[BUG]  [BUGGY]  val.set(Calendar.MILLISECOND,  this.field,  round);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  val.set(Calendar.MILLISECOND,  this.field,  round);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	val.set(Calendar.MILLISECOND,  this.field,  round);	  val.set(Calendar.MILLISECOND,    this.field);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
287	[BUG]  [BUGGY]  if(val.get(Calendar.MILLISECOND)!=  Calendar.MILLISECOND  ||  round  &&  val.get(Calendar.HOUR_OF_DAY)!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(val.get(Calendar.MILLISECOND)!=  Calendar.MILLISECOND  ||  round  &&  val.get(Calendar.HOUR_OF_DAY)!=  null)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(val.get(Calendar.MILLISECOND)!=  Calendar.MILLISECOND  ||  round  &&  val.get(Calendar.HOUR_OF_DAY)!=  null)  {	  if(field!=    Calendar.MILLISECOND    ||    round    &&    val.get(Calendar.HOUR_OF_DAY)!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
288	[BUG]  [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  round  ==  Calendar.MILLISECOND)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  round  ==  Calendar.MILLISECOND)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.DECEMBER  ||  round  ==  Calendar.MILLISECOND)  {	  if(field    ==    Calendar.DECEMBER    ||    round    >    Calendar.MILLISECOND)    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
289	[BUG]  [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  field  ==  Calendar.YEAR)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  field  ==  Calendar.YEAR)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.DECEMBER  ||  field  ==  Calendar.YEAR)  {	  if(field    ==    Calendar.YEAR    ||    field    ==    Calendar.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
290	[BUG]  [BUGGY]  if(field  ==  Calendar.YEAR  ||  round  >  Calendar.DECEMBER)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.YEAR  ||  round  >  Calendar.DECEMBER)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.YEAR  ||  round  >  Calendar.DECEMBER)  {	  if(field    ==    Calendar.YEAR    ||    field    ==    Calendar.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
291	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR,  this.field);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR,  this.field);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.YEAR,  this.field);	  int[][]    fields    =    val.get(Calendar.YEAR,    round);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
292	[BUG]  [BUGGY]  if(field  ==  Calendar.HOUR_OF_DAY  ||  round  >  Calendar.DECEMBER)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.HOUR_OF_DAY  ||  round  >  Calendar.DECEMBER)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.HOUR_OF_DAY  ||  round  >  Calendar.DECEMBER)  {	  if(field    ==    Calendar.HOUR_OF_DAY)    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
293	[BUG]  [BUGGY]  if(field  ==  Calendar.HOUR_OF_DAY  ||  round  >  Calendar.MILLISECOND)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.HOUR_OF_DAY  ||  round  >  Calendar.MILLISECOND)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.HOUR_OF_DAY  ||  round  >  Calendar.MILLISECOND)  {	  if(field    ==    Calendar.HOUR_OF_DAY)    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
294	[BUG]  [BUGGY]  if(field  >  Calendar.MILLISECOND  ||  round)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  >  Calendar.MILLISECOND  ||  round)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  >  Calendar.MILLISECOND  ||  round)  {	  if(field    >=    Calendar.MILLISECOND    ||    round)    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
295	[BUG]  [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  ||  field  ==  Calendar.HOUR_OF_DAY)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  ||  field  ==  Calendar.HOUR_OF_DAY)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.MILLISECOND  ||  round  ||  field  ==  Calendar.HOUR_OF_DAY)  {	  if(field    ==    Calendar.MILLISECOND    ||    roundUp)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
296	[BUG]  [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  ||  set)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  ||  set)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.MILLISECOND  ||  round  ||  set)  {	  if(field    ==    Calendar.MILLISECOND    ||    roundUp)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
297	[BUG]  [BUGGY]  if(field  ==  Calendar.SEMI_MONTH)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.SEMI_MONTH)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.SEMI_MONTH)  {	  if(field    ==    Calendar.MONTH)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
298	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR)/  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR)/  1;  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.YEAR)/  1;	  int[][]    fields    =    val.get(Calendar.YEAR)+    1;    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
299	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.MILLISECOND)/  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int[][]  fields  =  val.get(Calendar.MILLISECOND)/  1;  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.MILLISECOND)/  1;	  int[][]    fields    =    val.get(Calendar.MILLISECOND)+    1;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
300	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.MILLISECOND)-  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int[][]  fields  =  val.get(Calendar.MILLISECOND)-  1;  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.MILLISECOND)-  1;	  int[][]    fields    =    val.get(Calendar.MILLISECOND)+    1;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
301	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.MONTH,  round  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int  field  =  val.get(Calendar.MONTH,  round  -  1);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.MONTH,  round  -  1);	  int    field    =    val.get(Calendar.MONTH,    round);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
302	[BUG]  [BUGGY]  Date  date  =  val.getTimeInMillis();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  Date  date  =  val.getTimeInMillis();  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	Date  date  =  val.getTimeInMillis();	  Date    date    =    val.getTime()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
303	[BUG]  [BUGGY]  Date  date  =  val.getSecond();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  Date  date  =  val.getSecond();  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	Date  date  =  val.getSecond();	  Date    date    =    val.getTime()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
304	[BUG]  [BUGGY]  val.set(field,  round,  false);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  val.set(field,  round,  false);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	val.set(field,  round,  false);	  val.set(field,    round);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
305	[BUG]  [BUGGY]  if(field  ==  Calendar.YEAR  ||  round  ==  1)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.YEAR  ||  round  ==  1)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.YEAR  ||  round  ==  1)  {	  if(round    ||    field    ==    Calendar.YEAR)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
306	[BUG]  [BUGGY]  if(field  ==  Calendar.YEAR  ||  round  ==  Calendar.SEMI_MONTH)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.YEAR  ||  round  ==  Calendar.SEMI_MONTH)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.YEAR  ||  round  ==  Calendar.SEMI_MONTH)  {	  if(round    ||    field    ==    Calendar.YEAR)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
307	[BUG]  [BUGGY]  Date  date  =  val.get(Calendar.MILLISECOND)+  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  Date  date  =  val.get(Calendar.MILLISECOND)+  1;  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	Date  date  =  val.get(Calendar.MILLISECOND)+  1;	  Date    date    =    val.get(Calendar.MILLISECOND);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
308	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.YEAR,  round  -  1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int  field  =  val.get(Calendar.YEAR,  round  -  1);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.YEAR,  round  -  1);	  int    field    =    val.get(Calendar.YEAR,    round);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
309	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.YEAR,  this.field);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int  field  =  val.get(Calendar.YEAR,  this.field);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.YEAR,  this.field);	  int    field    =    val.get(Calendar.YEAR,    round);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
310	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.MILLISECOND,  round  -  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int[][]  fields  =  val.get(Calendar.MILLISECOND,  round  -  1);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.MILLISECOND,  round  -  1);	  int[][]    fields    =    val.get(Calendar.MILLISECOND,    round);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
311	[BUG]  [BUGGY]  if(field  ==  Calendar.YEAR  ||  round  ||  val.get(Calendar.HOUR_OF_DAY)  <  1)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.YEAR  ||  round  ||  val.get(Calendar.HOUR_OF_DAY)  <  1)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.YEAR  ||  round  ||  val.get(Calendar.HOUR_OF_DAY)  <  1)  {	  if(field    ==    Calendar.YEAR    ||    round)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
312	[BUG]  [BUGGY]  val.set(Calendar.MILLISECOND,  round  +  1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  val.set(Calendar.MILLISECOND,  round  +  1);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	val.set(Calendar.MILLISECOND,  round  +  1);	  val.set(Calendar.MILLISECOND,    field);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
313	[BUG]  [BUGGY]  val.set(Calendar.MILLISECOND,  round?  1  :  0);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  val.set(Calendar.MILLISECOND,  round?  1  :  0);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	val.set(Calendar.MILLISECOND,  round?  1  :  0);	  val.set(Calendar.MILLISECOND,    field);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
314	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.SECOND,  round  -  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  int  field  =  val.get(Calendar.SECOND,  round  -  1);  [BUGGY]      if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.SECOND,  round  -  1);	  int    field    =    val.get(Calendar.SECOND,    round);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
315	[BUG]  [BUGGY]  if(field  ==  Calendar.YEAR  ||  round  ||  round  >  Calendar.MILLISECOND)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.YEAR  ||  round  ||  round  >  Calendar.MILLISECOND)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.YEAR  ||  round  ||  round  >  Calendar.MILLISECOND)  {	  if(field    ==    Calendar.YEAR    ||    round    ||    field    ==    Calendar.MILLISECOND)    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
316	[BUG]  [BUGGY]  if(field  ==  Calendar.YEAR  ||  round  ||  round  <  =  Calendar.MILLISECOND)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.YEAR  ||  round  ||  round  <  =  Calendar.MILLISECOND)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.YEAR  ||  round  ||  round  <  =  Calendar.MILLISECOND)  {	  if(field    ==    Calendar.YEAR    ||    round    ||    field    ==    Calendar.MILLISECOND)    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
317	[BUG]  [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  round  ==  Field.SEMI_MONTH)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  round  ==  Field.SEMI_MONTH)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.DECEMBER  ||  round  ==  Field.SEMI_MONTH)  {	  if(round    ||    field    ==    Calendar.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
318	[BUG]  [BUGGY]  if(val.get(Calendar.MILLISECOND)>  MILLISECOND  ||  round  ||  val.get(Calendar.YEAR)>  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(val.get(Calendar.MILLISECOND)>  MILLISECOND  ||  round  ||  val.get(Calendar.YEAR)>  0)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(val.get(Calendar.MILLISECOND)>  MILLISECOND  ||  round  ||  val.get(Calendar.YEAR)>  0)  {	  if(field    ==    Calendar.MILLISECOND    ||    round    ||    val.get(Calendar.YEAR)>    0)    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
319	[BUG]  [BUGGY]  if(field!=  Calendar.MILLISECOND  &&  field  ==  Calendar.HOUR_OF_DAY)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }      [BUGGY]  if(field!=  Calendar.MILLISECOND  &&  field  ==  Calendar.HOUR_OF_DAY)  {  [BUGGY]      return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field!=  Calendar.MILLISECOND  &&  field  ==  Calendar.HOUR_OF_DAY)  {	  if(field!=    Calendar.MILLISECOND    ||    field    ==    Calendar.HOUR_OF_DAY)    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
