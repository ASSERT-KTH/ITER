bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Date  date  =  val.get(Calendar.DATE);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  Date  date  =  val.get(Calendar.DATE);  [BUGGY]    if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	Date  date  =  val.get(Calendar.DATE);	      Date    date    =    val.getTime();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
2	[BUG]  [BUGGY]  Date  date  =  val.get(Calendar.DATE)+  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  Date  date  =  val.get(Calendar.DATE)+  1;  [BUGGY]    if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	Date  date  =  val.get(Calendar.DATE)+  1;	      Date    date    =    val.getTime();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
3	[BUG]  [BUGGY]  Date  date  =  val.get(Calendar.MILLISECOND);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  Date  date  =  val.get(Calendar.MILLISECOND);  [BUGGY]    if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	Date  date  =  val.get(Calendar.MILLISECOND);	      Date    date    =    val.getTime();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
4	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.MONTH)+  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  int  field  =  val.get(Calendar.MONTH)+  1;  [BUGGY]    if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.MONTH)+  1;	      int    field    =    val.get(Calendar.MONTH);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
5	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.MONTH,  round);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  int  field  =  val.get(Calendar.MONTH,  round);  [BUGGY]    if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.MONTH,  round);	      int    field    =    val.get(Calendar.MONTH);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
6	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.MONTH)-  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  int  field  =  val.get(Calendar.MONTH)-  1;  [BUGGY]    if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.MONTH)-  1;	      int    field    =    val.get(Calendar.MONTH);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
7	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.MONTH  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  int  field  =  val.get(Calendar.MONTH  +  1);  [BUGGY]    if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.MONTH  +  1);	      int    field    =    val.get(Calendar.MONTH);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
8	[BUG]  [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  roundUp)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  roundUp)  {  [BUGGY]    return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.MILLISECOND  ||  roundUp)  {	  if(field!=    Calendar.MILLISECOND    ||    round)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
9	[BUG]  [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  ||  val.get(Calendar.HOUR_OF_DAY)!=  null)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  ||  val.get(Calendar.HOUR_OF_DAY)!=  null)  {  [BUGGY]    return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.MILLISECOND  ||  round  ||  val.get(Calendar.HOUR_OF_DAY)!=  null)  {	  if(field!=    Calendar.MILLISECOND    ||    round)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
10	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.SECOND)+  1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  int  field  =  val.get(Calendar.SECOND)+  1;  [BUGGY]    if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.SECOND)+  1;	      int    field    =    val.get(Calendar.SECOND);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
11	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.SECOND,  round);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  int  field  =  val.get(Calendar.SECOND,  round);  [BUGGY]    if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.SECOND,  round);	      int    field    =    val.get(Calendar.SECOND);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
12	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.SECOND  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  int  field  =  val.get(Calendar.SECOND  +  1);  [BUGGY]    if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.SECOND  +  1);	      int    field    =    val.get(Calendar.SECOND);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
13	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.SECOND)-  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  int  field  =  val.get(Calendar.SECOND)-  1;  [BUGGY]    if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.SECOND)-  1;	      int    field    =    val.get(Calendar.SECOND);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
14	[BUG]  [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  >=  Calendar.HOUR_OF_DAY)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  >=  Calendar.HOUR_OF_DAY)  {  [BUGGY]    return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.MILLISECOND  ||  round  >=  Calendar.HOUR_OF_DAY)  {	  if(field    ==    Calendar.MILLISECOND    ||    round    >    Calendar.HOUR_OF_DAY)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
15	[BUG]  [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  <  Calendar.HOUR_OF_DAY)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  <  Calendar.HOUR_OF_DAY)  {  [BUGGY]    return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.MILLISECOND  ||  round  <  Calendar.HOUR_OF_DAY)  {	  if(field    ==    Calendar.MILLISECOND    ||    round    >    Calendar.HOUR_OF_DAY)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
16	[BUG]  [BUGGY]  if(round  ||  field  ==  Calendar.MILLISECOND  ||  round  >  Calendar.HOUR_OF_DAY)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  if(round  ||  field  ==  Calendar.MILLISECOND  ||  round  >  Calendar.HOUR_OF_DAY)  {  [BUGGY]    return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(round  ||  field  ==  Calendar.MILLISECOND  ||  round  >  Calendar.HOUR_OF_DAY)  {	  if(field    ==    Calendar.MILLISECOND    ||    round    >    Calendar.HOUR_OF_DAY)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
17	[BUG]  [BUGGY]  Date  date  =  val.get(Calendar.YEAR);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  Date  date  =  val.get(Calendar.YEAR);  [BUGGY]    return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	Date  date  =  val.get(Calendar.YEAR);	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
18	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.MILLISECOND,  round);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  int[][]  fields  =  val.get(Calendar.MILLISECOND,  round);  [BUGGY]    if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.MILLISECOND,  round);	      int[][]    fields    =    val.get(Calendar.MILLISECOND);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
19	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.MILLISECOND)+  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  int[][]  fields  =  val.get(Calendar.MILLISECOND)+  1;  [BUGGY]    if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.MILLISECOND)+  1;	      int[][]    fields    =    val.get(Calendar.MILLISECOND);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
20	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.MILLISECOND  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  int[][]  fields  =  val.get(Calendar.MILLISECOND  +  1);  [BUGGY]    if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.MILLISECOND  +  1);	      int[][]    fields    =    val.get(Calendar.MILLISECOND);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
21	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND,  round);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND,  round);  [BUGGY]    if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.SECOND,  round);	      int[][]    fields    =    val.get(Calendar.SECOND);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
22	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND)+  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND)+  1;  [BUGGY]    if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.SECOND)+  1;	      int[][]    fields    =    val.get(Calendar.SECOND);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
23	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND  +  1);  [BUGGY]    if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.SECOND  +  1);	      int[][]    fields    =    val.get(Calendar.SECOND);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
24	[BUG]  [BUGGY]  if(field  ==  Calendar.YEAR  ||  round)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  if(field  ==  Calendar.YEAR  ||  round)  {  [BUGGY]    return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.YEAR  ||  round)  {	  if(field    ==    Calendar.YEAR)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
25	[BUG]  [BUGGY]  if(round  ||  field  ==  Calendar.YEAR)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  if(round  ||  field  ==  Calendar.YEAR)  {  [BUGGY]    return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(round  ||  field  ==  Calendar.YEAR)  {	  if(field    ==    Calendar.YEAR)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
26	[BUG]  [BUGGY]  if(field  ==  Calendar.DAY_OF_MONTH)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  if(field  ==  Calendar.DAY_OF_MONTH)  {  [BUGGY]    return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.DAY_OF_MONTH)  {	  if(field    ==    Calendar.YEAR)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
27	[BUG]  [BUGGY]  if(val.get(Calendar.YEAR)>  280000000)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  if(val.get(Calendar.YEAR)>  280000000)  {  [BUGGY]    return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(val.get(Calendar.YEAR)>  280000000)  {	  if(field    ==    Calendar.YEAR)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
28	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.YEAR,  round);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  int  field  =  val.get(Calendar.YEAR,  round);  [BUGGY]    if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.YEAR,  round);	      int    field    =    val.get(Calendar.YEAR);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
29	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.YEAR  +  1);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  int  field  =  val.get(Calendar.YEAR  +  1);  [BUGGY]    if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.YEAR  +  1);	      int    field    =    val.get(Calendar.YEAR);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
30	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.DAY_OF_MONTH);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  int  field  =  val.get(Calendar.DAY_OF_MONTH);  [BUGGY]    if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.DAY_OF_MONTH);	      int    field    =    val.get(Calendar.YEAR);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
31	[BUG]  [BUGGY]  if(field  ==  Calendar.MINUTE  ||  round  ==  Calendar.MILLISECOND)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  if(field  ==  Calendar.MINUTE  ||  round  ==  Calendar.MILLISECOND)  {  [BUGGY]    return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.MINUTE  ||  round  ==  Calendar.MILLISECOND)  {	  if(field    ==    Calendar.MINUTE    ||    field    ==    Calendar.MILLISECOND)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
32	[BUG]  [BUGGY]  if(round  ||  field  ==  Calendar.MINUTE  ||  field  ==  Calendar.MILLISECOND)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  if(round  ||  field  ==  Calendar.MINUTE  ||  field  ==  Calendar.MILLISECOND)  {  [BUGGY]    return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(round  ||  field  ==  Calendar.MINUTE  ||  field  ==  Calendar.MILLISECOND)  {	  if(field    ==    Calendar.MINUTE    ||    field    ==    Calendar.MILLISECOND)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
33	[BUG]  [BUGGY]  if(field!=  Calendar.MINUTE  ||  field  ==  Calendar.MILLISECOND)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  if(field!=  Calendar.MINUTE  ||  field  ==  Calendar.MILLISECOND)  {  [BUGGY]    return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field!=  Calendar.MINUTE  ||  field  ==  Calendar.MILLISECOND)  {	  if(field    ==    Calendar.MINUTE    ||    field    ==    Calendar.MILLISECOND)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
34	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR,  round);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR,  round);  [BUGGY]    if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.YEAR,  round);	      int[][]    fields    =    val.get(Calendar.YEAR);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
35	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR  +  1);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR  +  1);  [BUGGY]    if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.YEAR  +  1);	      int[][]    fields    =    val.get(Calendar.YEAR);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
36	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.HOUR_OF_DAY);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  int[][]  fields  =  val.get(Calendar.HOUR_OF_DAY);  [BUGGY]    if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.HOUR_OF_DAY);	      int[][]    fields    =    val.get(Calendar.YEAR);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
37	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.MONTH);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  int[][]  fields  =  val.get(Calendar.MONTH);  [BUGGY]    if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.MONTH);	      int[][]    fields    =    val.get(Calendar.YEAR);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
38	[BUG]  [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round!=  Calendar.HOUR_OF_DAY)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round!=  Calendar.HOUR_OF_DAY)  {  [BUGGY]    return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.MILLISECOND  ||  round!=  Calendar.HOUR_OF_DAY)  {	  if(field!=    Calendar.MILLISECOND)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
39	[BUG]  [BUGGY]  if(field!=  Calendar.MILLISECOND  ||  round  ==  Calendar.HOUR_OF_DAY)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  if(field!=  Calendar.MILLISECOND  ||  round  ==  Calendar.HOUR_OF_DAY)  {  [BUGGY]    return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field!=  Calendar.MILLISECOND  ||  round  ==  Calendar.HOUR_OF_DAY)  {	  if(field!=    Calendar.MILLISECOND)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
40	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.MILLISECOND,  round);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  int  field  =  val.get(Calendar.MILLISECOND,  round);  [BUGGY]    if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.MILLISECOND,  round);	      int    field    =    val.get(Calendar.MILLISECOND);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
41	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.MILLISECOND)+  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  int  field  =  val.get(Calendar.MILLISECOND)+  1;  [BUGGY]    if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.MILLISECOND)+  1;	      int    field    =    val.get(Calendar.MILLISECOND);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
42	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.MILLISECOND  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  int  field  =  val.get(Calendar.MILLISECOND  +  1);  [BUGGY]    if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.MILLISECOND  +  1);	      int    field    =    val.get(Calendar.MILLISECOND);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
43	[BUG]  [BUGGY]  val.set(Calendar.MILLISECOND,  field);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  val.set(Calendar.MILLISECOND,  field);  [BUGGY]    if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	val.set(Calendar.MILLISECOND,  field);	      val.set(Calendar.MILLISECOND,    round);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
44	[BUG]  [BUGGY]  val.set(0,  round);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  val.set(0,  round);  [BUGGY]    if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	val.set(0,  round);	      val.set(Calendar.MILLISECOND,    round);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
45	[BUG]  [BUGGY]  val.set(field,  round);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  val.set(field,  round);  [BUGGY]    if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	val.set(field,  round);	      val.set(Calendar.MILLISECOND,    round);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
46	[BUG]  [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  round)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  round)  {  [BUGGY]    return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.DECEMBER  ||  round)  {	  if(field    ==    Calendar.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
47	[BUG]  [BUGGY]  if(round  ||  field  ==  Calendar.DECEMBER)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  if(round  ||  field  ==  Calendar.DECEMBER)  {  [BUGGY]    return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(round  ||  field  ==  Calendar.DECEMBER)  {	  if(field    ==    Calendar.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
48	[BUG]  [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  round  >  1)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  round  >  1)  {  [BUGGY]    return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.DECEMBER  ||  round  >  1)  {	  if(field    ==    Calendar.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
49	[BUG]  [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  ||  val.get(Calendar.DAY_OF_MONTH)!=  null)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  ||  val.get(Calendar.DAY_OF_MONTH)!=  null)  {  [BUGGY]    return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.MILLISECOND  ||  round  ||  val.get(Calendar.DAY_OF_MONTH)!=  null)  {	  if(field    ==    Calendar.MILLISECOND    ||    round)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
50	[BUG]  [BUGGY]  if(field  ==  Calendar.YEAR  ||  round  ==  Calendar.MILLISECOND)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  if(field  ==  Calendar.YEAR  ||  round  ==  Calendar.MILLISECOND)  {  [BUGGY]    return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.YEAR  ||  round  ==  Calendar.MILLISECOND)  {	  if(field    ==    Calendar.YEAR    ||    field    ==    Calendar.MILLISECOND)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
51	[BUG]  [BUGGY]  if(field  ==  Calendar.YEAR  ||  round  >  Calendar.MILLISECOND)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  if(field  ==  Calendar.YEAR  ||  round  >  Calendar.MILLISECOND)  {  [BUGGY]    return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.YEAR  ||  round  >  Calendar.MILLISECOND)  {	  if(field    ==    Calendar.YEAR    ||    field    ==    Calendar.MILLISECOND)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
52	[BUG]  [BUGGY]  if(field  ==  Calendar.YEAR  ||  round  >=  Calendar.MILLISECOND)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  if(field  ==  Calendar.YEAR  ||  round  >=  Calendar.MILLISECOND)  {  [BUGGY]    return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.YEAR  ||  round  >=  Calendar.MILLISECOND)  {	  if(field    ==    Calendar.YEAR    ||    field    ==    Calendar.MILLISECOND)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
53	[BUG]  [BUGGY]  val.set(Calendar.MILLISECOND,  0);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  val.set(Calendar.MILLISECOND,  0);  [BUGGY]    return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	val.set(Calendar.MILLISECOND,  0);	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
54	[BUG]  [BUGGY]  val.set(Calendar.YEAR,  field);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  val.set(Calendar.YEAR,  field);  [BUGGY]    return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	val.set(Calendar.YEAR,  field);	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
55	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.MILLISECOND  -  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  int  field  =  val.get(Calendar.MILLISECOND  -  1);  [BUGGY]    if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.MILLISECOND  -  1);	      int    field    =    val.get(Calendar.MILLISECOND);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
56	[BUG]  [BUGGY]  if(field  >=  Calendar.MILLISECOND  ||  round)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  if(field  >=  Calendar.MILLISECOND  ||  round)  {  [BUGGY]    return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  >=  Calendar.MILLISECOND  ||  round)  {	  if(field!=    Calendar.MILLISECOND    ||    round)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
57	[BUG]  [BUGGY]  if(field!=  Calendar.MILLISECOND  ||  round  &&  val.get(Calendar.HOUR_OF_DAY)!=  null)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  if(field!=  Calendar.MILLISECOND  ||  round  &&  val.get(Calendar.HOUR_OF_DAY)!=  null)  {  [BUGGY]    return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field!=  Calendar.MILLISECOND  ||  round  &&  val.get(Calendar.HOUR_OF_DAY)!=  null)  {	  if(field!=    Calendar.MILLISECOND    ||    round)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
58	[BUG]  [BUGGY]  if(field  ==  Calendar.YEAR  ||  field!=  Calendar.MILLISECOND)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  if(field  ==  Calendar.YEAR  ||  field!=  Calendar.MILLISECOND)  {  [BUGGY]    return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.YEAR  ||  field!=  Calendar.MILLISECOND)  {	  if(field    ==    Calendar.YEAR    ||    field    ==    Calendar.MILLISECOND)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
59	[BUG]  [BUGGY]  if(field  ==  Calendar.YEAR  ||  field  >=  Calendar.MILLISECOND)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  if(field  ==  Calendar.YEAR  ||  field  >=  Calendar.MILLISECOND)  {  [BUGGY]    return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.YEAR  ||  field  >=  Calendar.MILLISECOND)  {	  if(field    ==    Calendar.YEAR    ||    field    ==    Calendar.MILLISECOND)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
60	[BUG]  [BUGGY]  if(field!=  Calendar.YEAR  ||  field  ==  Calendar.MILLISECOND)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  if(field!=  Calendar.YEAR  ||  field  ==  Calendar.MILLISECOND)  {  [BUGGY]    return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field!=  Calendar.YEAR  ||  field  ==  Calendar.MILLISECOND)  {	  if(field    ==    Calendar.YEAR    ||    field    ==    Calendar.MILLISECOND)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
61	[BUG]  [BUGGY]  val.set(Calendar.MILLISECOND,  round  -  1);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  val.set(Calendar.MILLISECOND,  round  -  1);  [BUGGY]    if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	val.set(Calendar.MILLISECOND,  round  -  1);	      val.set(Calendar.MILLISECOND,    round);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
62	[BUG]  [BUGGY]  if(field  ==  Calendar.YEAR  ||  field  ==  Calendar.DECEMBER)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  if(field  ==  Calendar.YEAR  ||  field  ==  Calendar.DECEMBER)  {  [BUGGY]    return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.YEAR  ||  field  ==  Calendar.DECEMBER)  {	  if(field    ==    Calendar.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
63	[BUG]  [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  round  >  Calendar.DECEMBER)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  round  >  Calendar.DECEMBER)  {  [BUGGY]    return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.DECEMBER  ||  round  >  Calendar.DECEMBER)  {	  if(field    ==    Calendar.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
64	[BUG]  [BUGGY]  if(field  ==  Calendar.MINUTE  ||  field  >=  Calendar.MILLISECOND)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  if(field  ==  Calendar.MINUTE  ||  field  >=  Calendar.MILLISECOND)  {  [BUGGY]    return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.MINUTE  ||  field  >=  Calendar.MILLISECOND)  {	  if(field    ==    Calendar.MINUTE    ||    field    ==    Calendar.MILLISECOND)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
65	[BUG]  [BUGGY]  if(field  ==  Calendar.MINUTE  ||  field!=  Calendar.MILLISECOND)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  if(field  ==  Calendar.MINUTE  ||  field!=  Calendar.MILLISECOND)  {  [BUGGY]    return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.MINUTE  ||  field!=  Calendar.MILLISECOND)  {	  if(field    ==    Calendar.MINUTE    ||    field    ==    Calendar.MILLISECOND)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
66	[BUG]  [BUGGY]  if(field  ==  Calendar.MINUTE  ||  field  <  =  Calendar.MILLISECOND)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  if(field  ==  Calendar.MINUTE  ||  field  <  =  Calendar.MILLISECOND)  {  [BUGGY]    return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.MINUTE  ||  field  <  =  Calendar.MILLISECOND)  {	  if(field    ==    Calendar.MINUTE    ||    field    ==    Calendar.MILLISECOND)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
67	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.YEAR)+  1;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  int  field  =  val.get(Calendar.YEAR)+  1;  [BUGGY]    if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.YEAR)+  1;	      int    field    =    val.get(Calendar.YEAR);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
68	[BUG]  [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  &&  val.get(Calendar.HOUR_OF_DAY)!=  null)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  &&  val.get(Calendar.HOUR_OF_DAY)!=  null)  {  [BUGGY]    return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.MILLISECOND  ||  round  &&  val.get(Calendar.HOUR_OF_DAY)!=  null)  {	  if(field    ==    Calendar.MILLISECOND    ||    round)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
69	[BUG]  [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  +  1)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  +  1)  {  [BUGGY]    return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.MILLISECOND  ||  round  +  1)  {	  if(field    ==    Calendar.MILLISECOND    ||    round)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
70	[BUG]  [BUGGY]  Date  date  =  val.getTime()  +  1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  Date  date  =  val.getTime()  +  1;  [BUGGY]    if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	Date  date  =  val.getTime()  +  1;	      Date    date    =    val.getTime();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
71	[BUG]  [BUGGY]  if(field!=  Calendar.YEAR  ||  round)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  if(field!=  Calendar.YEAR  ||  round)  {  [BUGGY]    return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field!=  Calendar.YEAR  ||  round)  {	  if(field    ==    Calendar.YEAR)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
72	[BUG]  [BUGGY]  if(field  ==  Calendar.MONTH)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  if(field  ==  Calendar.MONTH)  {  [BUGGY]    return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.MONTH)  {	  if(field    ==    Calendar.YEAR)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
73	[BUG]  [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  <  =  Calendar.HOUR_OF_DAY)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  <  =  Calendar.HOUR_OF_DAY)  {  [BUGGY]    return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.MILLISECOND  ||  round  <  =  Calendar.HOUR_OF_DAY)  {	  if(field    ==    Calendar.MILLISECOND    ||    round    >    Calendar.HOUR_OF_DAY)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
74	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND)-  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND)-  1;  [BUGGY]    if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.SECOND)-  1;	      int[][]    fields    =    val.get(Calendar.SECOND);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
75	[BUG]  [BUGGY]  if(field!=  Calendar.MILLISECOND  ||  round  >  Calendar.HOUR_OF_DAY)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  if(field!=  Calendar.MILLISECOND  ||  round  >  Calendar.HOUR_OF_DAY)  {  [BUGGY]    return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field!=  Calendar.MILLISECOND  ||  round  >  Calendar.HOUR_OF_DAY)  {	  if(field!=    Calendar.MILLISECOND)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
76	[BUG]  [BUGGY]  if(field!=  Calendar.MILLISECOND  ||  field  ==  Calendar.HOUR_OF_DAY)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  if(field!=  Calendar.MILLISECOND  ||  field  ==  Calendar.HOUR_OF_DAY)  {  [BUGGY]    return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field!=  Calendar.MILLISECOND  ||  field  ==  Calendar.HOUR_OF_DAY)  {	  if(field!=    Calendar.MILLISECOND)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
77	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR,  field);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR,  field);  [BUGGY]    if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.YEAR,  field);	      int[][]    fields    =    val.get(Calendar.YEAR);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
78	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.MONTH  -  1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  int  field  =  val.get(Calendar.MONTH  -  1);  [BUGGY]    if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.MONTH  -  1);	      int    field    =    val.get(Calendar.MONTH);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
79	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.MONTH)/  2;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  int  field  =  val.get(Calendar.MONTH)/  2;  [BUGGY]    if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.MONTH)/  2;	      int    field    =    val.get(Calendar.MONTH);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
80	[BUG]  [BUGGY]  if(field!=  Calendar.MILLISECOND  &&  round)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  if(field!=  Calendar.MILLISECOND  &&  round)  {  [BUGGY]    return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field!=  Calendar.MILLISECOND  &&  round)  {	  if(field!=    Calendar.MILLISECOND    ||    round)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
81	[BUG]  [BUGGY]  if(field!=  Calendar.MILLISECOND  ||  round  ||  val.get(Calendar.SECOND)>  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  if(field!=  Calendar.MILLISECOND  ||  round  ||  val.get(Calendar.SECOND)>  0)  {  [BUGGY]    return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field!=  Calendar.MILLISECOND  ||  round  ||  val.get(Calendar.SECOND)>  0)  {	  if(field!=    Calendar.MILLISECOND    ||    round)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
82	[BUG]  [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  ||  val.get(Calendar.YEAR)>  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  ||  val.get(Calendar.YEAR)>  0)  {  [BUGGY]    return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.MILLISECOND  ||  round  ||  val.get(Calendar.YEAR)>  0)  {	  if(field    ==    Calendar.MILLISECOND    ||    round)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
83	[BUG]  [BUGGY]  if(field  ==  Calendar.MINUTE  ||  field  ==  Calendar.MILLISECOND  ||  round)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  if(field  ==  Calendar.MINUTE  ||  field  ==  Calendar.MILLISECOND  ||  round)  {  [BUGGY]    return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.MINUTE  ||  field  ==  Calendar.MILLISECOND  ||  round)  {	  if(field    ==    Calendar.MINUTE    ||    field    ==    Calendar.MILLISECOND)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
84	[BUG]  [BUGGY]  if(field  ==  Calendar.MINUTE  ||  round  >  Calendar.MILLISECOND)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  if(field  ==  Calendar.MINUTE  ||  round  >  Calendar.MILLISECOND)  {  [BUGGY]    return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.MINUTE  ||  round  >  Calendar.MILLISECOND)  {	  if(field    ==    Calendar.MINUTE    ||    field    ==    Calendar.MILLISECOND)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
85	[BUG]  [BUGGY]  if(field  ==  Calendar.YEAR  ||  round  ||  field  ==  Calendar.MILLISECOND)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  if(field  ==  Calendar.YEAR  ||  round  ||  field  ==  Calendar.MILLISECOND)  {  [BUGGY]    return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.YEAR  ||  round  ||  field  ==  Calendar.MILLISECOND)  {	  if(field    ==    Calendar.YEAR    ||    field    ==    Calendar.MILLISECOND)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
86	[BUG]  [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  >>  Calendar.HOUR_OF_DAY)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  if(field  ==  Calendar.MILLISECOND  ||  round  >>  Calendar.HOUR_OF_DAY)  {  [BUGGY]    return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.MILLISECOND  ||  round  >>  Calendar.HOUR_OF_DAY)  {	  if(field    ==    Calendar.MILLISECOND    ||    round    >    Calendar.HOUR_OF_DAY)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
87	[BUG]  [BUGGY]  int  field  =  val.get(Calendar.MILLISECOND)-  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  int  field  =  val.get(Calendar.MILLISECOND)-  1;  [BUGGY]    if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int  field  =  val.get(Calendar.MILLISECOND)-  1;	      int    field    =    val.get(Calendar.MILLISECOND);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
88	[BUG]  [BUGGY]  val.set(Calendar.MILLISECOND,  this.field);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  val.set(Calendar.MILLISECOND,  this.field);  [BUGGY]    if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	val.set(Calendar.MILLISECOND,  this.field);	      val.set(Calendar.MILLISECOND,    round);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
89	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR)+  1;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR)+  1;  [BUGGY]    if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	int[][]  fields  =  val.get(Calendar.YEAR)+  1;	      int[][]    fields    =    val.get(Calendar.YEAR);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
90	[BUG]  [BUGGY]  Date  date  =  val.get(Calendar.DATE)-  1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  Date  date  =  val.get(Calendar.DATE)-  1;  [BUGGY]    if  (field  ==  Calendar.MILLISECOND)  {  return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	Date  date  =  val.get(Calendar.DATE)-  1;	      Date    date    =    val.getTime();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
91	[BUG]  [BUGGY]  if(field  ==  Calendar.HOUR_OF_DAY  ||  field  ==  Calendar.YEAR)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  if(field  ==  Calendar.HOUR_OF_DAY  ||  field  ==  Calendar.YEAR)  {  [BUGGY]    return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.HOUR_OF_DAY  ||  field  ==  Calendar.YEAR)  {	  if(field    ==    Calendar.YEAR)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
92	[BUG]  [BUGGY]  if(field  ==  Calendar.HOUR_OF_DAY)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  if(field  ==  Calendar.HOUR_OF_DAY)  {  [BUGGY]    return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.HOUR_OF_DAY)  {	  if(field    ==    Calendar.YEAR)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
93	[BUG]  [BUGGY]  if(field!=  Calendar.MILLISECOND  ||  round  >  Calendar.YEAR)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  if(field!=  Calendar.MILLISECOND  ||  round  >  Calendar.YEAR)  {  [BUGGY]    return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field!=  Calendar.MILLISECOND  ||  round  >  Calendar.YEAR)  {	  if(field!=    Calendar.MILLISECOND)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
94	[BUG]  [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  round  >  Calendar.HOUR_OF_DAY)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  round  >  Calendar.HOUR_OF_DAY)  {  [BUGGY]    return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.DECEMBER  ||  round  >  Calendar.HOUR_OF_DAY)  {	  if(field    ==    Calendar.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
95	[BUG]  [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  round  >  Calendar.MILLISECOND)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }    [BUGGY]  if(field  ==  Calendar.DECEMBER  ||  round  >  Calendar.MILLISECOND)  {  [BUGGY]    return;  }        Date  date  =  val.getTime();  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	625	625	1	replace	if(field  ==  Calendar.DECEMBER  ||  round  >  Calendar.MILLISECOND)  {	  if(field    ==    Calendar.DECEMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
