bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0]  -  min,  offsetSet  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0]  -  min,  offsetSet  +  1);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getActualMaximum(fields[i][0]  -  min,  offsetSet  +  1);	  int    max    =    val.getActualMaximum(fields[i][0]    -    min,    offsetSet);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
2	[BUG]  [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0]  -  min,  offsetSet,  roundUp);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0]  -  min,  offsetSet,  roundUp);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getActualMaximum(fields[i][0]  -  min,  offsetSet,  roundUp);	  int    max    =    val.getActualMaximum(fields[i][0]    -    min,    offsetSet);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
3	[BUG]  [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0]  -  min,  offset  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0]  -  min,  offset  +  1);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getActualMaximum(fields[i][0]  -  min,  offset  +  1);	  int    max    =    val.getActualMaximum(fields[i][0]    -    min    +    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	35	None	replace
4	[BUG]  [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0]  -  min,  roundUp  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0]  -  min,  roundUp  +  1);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getActualMaximum(fields[i][0]  -  min,  roundUp  +  1);	  int    max    =    val.getActualMaximum(fields[i][0]    -    min    +    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	35	None	replace
5	[BUG]  [BUGGY]  int  max  =  val.getMaximum(fields[i][0]  +  min,  offsetSet);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getMaximum(fields[i][0]  +  min,  offsetSet);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getMaximum(fields[i][0]  +  min,  offsetSet);	  int    max    =    val.getActualMaximum(fields[i][0]    +    min,    offsetSet);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
6	[BUG]  [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0]  +  min,  fieldSet);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0]  +  min,  fieldSet);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getActualMaximum(fields[i][0]  +  min,  fieldSet);	  int    max    =    val.getActualMaximum(fields[i][0]    +    min,    offsetSet);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
7	[BUG]  [BUGGY]  int  max  =  val.getMaximum(fields[i][0]  +  min,  roundUp);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getMaximum(fields[i][0]  +  min,  roundUp);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getMaximum(fields[i][0]  +  min,  roundUp);	  int    max    =    val.getMaximum(fields[i][0]    +    min);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
8	[BUG]  [BUGGY]  int  max  =  val.getMaximum(fields[i][0]  +  min,  offset);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getMaximum(fields[i][0]  +  min,  offset);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getMaximum(fields[i][0]  +  min,  offset);	  int    max    =    val.getMaximum(fields[i][0]    +    min);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
9	[BUG]  [BUGGY]  Integer  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  Integer  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  [BUGGY]      int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	Integer  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;	  if(fields[i][0]    ==    field)    {    int    max    =    val.getActualMaximum(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	30	None	replace
10	[BUG]  [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }  [BUGGY]      int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }	  if(fields[i][0]    ==    field)    {    int    max    =    val.getActualMaximum(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	30	None	replace
11	[BUG]  [BUGGY]  int  min  =  val.getIntValue(fields[i][0]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  min  =  val.getIntValue(fields[i][0]);  [BUGGY]      int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  min  =  val.getIntValue(fields[i][0]);	  int    min    =    val.getActualMaximum(fields[i][0]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
12	[BUG]  [BUGGY]  int  max  =  val.get(fields[i][0])/  min;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.get(fields[i][0])/  min;  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.get(fields[i][0])/  min;	  int    max    =    val.get(fields[i][0])-    min;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
13	[BUG]  [BUGGY]  int  max  =  val.get(fields[i][0])-  min  +  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.get(fields[i][0])-  min  +  1;  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.get(fields[i][0])-  min  +  1;	  int    max    =    val.get(fields[i][0])-    min;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
14	[BUG]  [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0],  min,  2);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0],  min,  2);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getActualMaximum(fields[i][0],  min,  2);	  int    max    =    val.getActualMaximum(fields[i][0],    min,    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	24	None	replace
15	[BUG]  [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0],  min,  3);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0],  min,  3);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getActualMaximum(fields[i][0],  min,  3);	  int    max    =    val.getActualMaximum(fields[i][0],    min,    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	24	None	replace
16	[BUG]  [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0],  field,  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0],  field,  1);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getActualMaximum(fields[i][0],  field,  1);	  int    max    =    val.getActualMaximum(fields[i][0],    min,    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	24	None	replace
17	[BUG]  [BUGGY]  int  max  =  val.get(fields[i][0]  -  min,  roundUp);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.get(fields[i][0]  -  min,  roundUp);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.get(fields[i][0]  -  min,  roundUp);	  int    max    =    val.get(fields[i][0]    -    min);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
18	[BUG]  [BUGGY]  int  max  =  val.get(fields[i][0]  -  min,  offset);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.get(fields[i][0]  -  min,  offset);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.get(fields[i][0]  -  min,  offset);	  int    max    =    val.get(fields[i][0]    -    min);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
19	[BUG]  [BUGGY]  int  max  =  val.get(fields[i][0]  -  min,  offsetSet);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.get(fields[i][0]  -  min,  offsetSet);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.get(fields[i][0]  -  min,  offsetSet);	  int    max    =    val.get(fields[i][0]    -    min);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
20	[BUG]  [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0],  min  +  2);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0],  min  +  2);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getActualMaximum(fields[i][0],  min  +  2);	  int    max    =    val.getActualMaximum(fields[i][0],    min    +    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	22	None	replace
21	[BUG]  [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0],  min,  offset  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0],  min,  offset  +  1);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getActualMaximum(fields[i][0],  min,  offset  +  1);	  int    max    =    val.getActualMaximum(fields[i][0],    min    +    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	22	None	replace
22	[BUG]  [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0],  min  +  3);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0],  min  +  3);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getActualMaximum(fields[i][0],  min  +  3);	  int    max    =    val.getActualMaximum(fields[i][0],    min    +    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	22	None	replace
23	[BUG]  [BUGGY]  int  max  =  val.getMaximum(fields[i][0])-  min  +  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getMaximum(fields[i][0])-  min  +  1;  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getMaximum(fields[i][0])-  min  +  1;	  int    max    =    val.getMaximum(fields[i][0])-    min;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	37	None	replace
24	[BUG]  [BUGGY]  int  max  =  val.getMaximum(fields[i][0])/  min;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getMaximum(fields[i][0])/  min;  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getMaximum(fields[i][0])/  min;	  int    max    =    val.getMaximum(fields[i][0])-    min;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	37	None	replace
25	[BUG]  [BUGGY]  int  max  =  val.getMaximum(fields[i][0])/  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getMaximum(fields[i][0])/  1;  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getMaximum(fields[i][0])/  1;	  int    max    =    val.getMaximum(fields[i][0])-    min;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	37	None	replace
26	[BUG]  [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0])-  min  +  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0])-  min  +  1;  [BUGGY]      int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getActualMaximum(fields[i][0])-  min  +  1;	  int    max    =    val.getActualMaximum(fields[i][0])-    min;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	36	None	replace
27	[BUG]  [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0])/  min;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0])/  min;  [BUGGY]      int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getActualMaximum(fields[i][0])/  min;	  int    max    =    val.getActualMaximum(fields[i][0])-    min;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	36	None	replace
28	[BUG]  [BUGGY]  int  max  =  val.getMinimum(fields[i][0]  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getMinimum(fields[i][0]  +  1);  [BUGGY]      int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getMinimum(fields[i][0]  +  1);	  int    max    =    val.getMinimum(fields[i][0]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	20	None	replace
29	[BUG]  [BUGGY]  int  max  =  val.getMinimum(fields[i][0]  +  min);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getMinimum(fields[i][0]  +  min);  [BUGGY]      int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getMinimum(fields[i][0]  +  min);	  int    max    =    val.getMinimum(fields[i][0]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	20	None	replace
30	[BUG]  [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0],  min,  offsetSet  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0],  min,  offsetSet  +  1);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getActualMaximum(fields[i][0],  min,  offsetSet  +  1);	  int    max    =    val.getActualMaximum(fields[i][0],    min,    offsetSet);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	23	None	replace
31	[BUG]  [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0],  min,  offsetSet,  roundUp);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0],  min,  offsetSet,  roundUp);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getActualMaximum(fields[i][0],  min,  offsetSet,  roundUp);	  int    max    =    val.getActualMaximum(fields[i][0],    min,    offsetSet);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	23	None	replace
32	[BUG]  [BUGGY]  int  max  =  val.getActualMinimum(fields[i][0]  +  min,  offsetSet);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getActualMinimum(fields[i][0]  +  min,  offsetSet);  [BUGGY]      int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getActualMinimum(fields[i][0]  +  min,  offsetSet);	  int    max    =    val.getActualMinimum(fields[i][0]    +    min);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	34	None	replace
33	[BUG]  [BUGGY]  int  max  =  val.getActualMinimum(fields[i][0]  +  min,  roundUp);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getActualMinimum(fields[i][0]  +  min,  roundUp);  [BUGGY]      int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getActualMinimum(fields[i][0]  +  min,  roundUp);	  int    max    =    val.getActualMinimum(fields[i][0]    +    min);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	34	None	replace
34	[BUG]  [BUGGY]  offset  =  val.get(fields[i][0]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  offset  =  val.get(fields[i][0]);  [BUGGY]      int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	offset  =  val.get(fields[i][0]);	  if(offsetSet)    {    int    max    =    val.getActualMaximum(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	41	None	replace
35	[BUG]  [BUGGY]  int  min  =  val.get(fields[i][0])/  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  min  =  val.get(fields[i][0])/  1;  [BUGGY]      int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  min  =  val.get(fields[i][0])/  1;	  int    min    =    val.get(fields[i][0])-    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	38	None	replace
36	[BUG]  [BUGGY]  int  min  =  val.getActualMinimum(fields[i][0])-  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  min  =  val.getActualMinimum(fields[i][0])-  1;  [BUGGY]      int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  min  =  val.getActualMinimum(fields[i][0])-  1;	  int    min    =    val.get(fields[i][0])-    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	38	None	replace
37	[BUG]  [BUGGY]  int  min  =  val.get(fields[i][0])-  offset;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  min  =  val.get(fields[i][0])-  offset;  [BUGGY]      int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  min  =  val.get(fields[i][0])-  offset;	  int    min    =    val.get(fields[i][0])-    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	38	None	replace
38	[BUG]  [BUGGY]  offset  =  val.get(fields[i][0])/  min;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  offset  =  val.get(fields[i][0])/  min;  [BUGGY]      int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	offset  =  val.get(fields[i][0])/  min;	  offset    =    val.get(fields[i][0])-    min;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
39	[BUG]  [BUGGY]  offset  =  val.get(fields[i][0])-  min  +  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  offset  =  val.get(fields[i][0])-  min  +  1;  [BUGGY]      int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	offset  =  val.get(fields[i][0])-  min  +  1;	  offset    =    val.get(fields[i][0])-    min;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
40	[BUG]  [BUGGY]  offset  =  val.get(fields[i][0])/  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  offset  =  val.get(fields[i][0])/  1;  [BUGGY]      int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	offset  =  val.get(fields[i][0])/  1;	  offset    =    val.get(fields[i][0])-    min;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
41	[BUG]  [BUGGY]  int  min  =  val.getActualMinimum(fields[i][0]  +  2);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  min  =  val.getActualMinimum(fields[i][0]  +  2);  [BUGGY]      int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  min  =  val.getActualMinimum(fields[i][0]  +  2);	  int    min    =    val.getActualMinimum(fields[i][0]    +    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
42	[BUG]  [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0],  roundUp);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0],  roundUp);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getActualMaximum(fields[i][0],  roundUp);	  int    max    =    val.getActualMaximum(fields[i][0]    -    min,    roundUp);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
43	[BUG]  [BUGGY]  Integer  max  =  val.getActualMinimum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  Integer  max  =  val.getActualMinimum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  [BUGGY]      int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	Integer  max  =  val.getActualMinimum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;	  if(fields[i][0]    ==    field)    {    int    max    =    val.getActualMinimum(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	26	None	replace
44	[BUG]  [BUGGY]  int  max  =  val.getActualMinimum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getActualMinimum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }  [BUGGY]      int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getActualMinimum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }	  if(fields[i][0]    ==    field)    {    int    max    =    val.getActualMinimum(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	26	None	replace
45	[BUG]  [BUGGY]  int  max  =  val.get(fields[i][0]).getActualMaximum(fields[i][1]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.get(fields[i][0]).getActualMaximum(fields[i][1]);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.get(fields[i][0]).getActualMaximum(fields[i][1]);	  int    max    =    val.get(fields[i][0]).getActualMaximum(fields[i][0]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	40	None	replace
46	[BUG]  [BUGGY]  int  max  =  val.get(fields[i][0]).getMaximum(fields[i][0]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.get(fields[i][0]).getMaximum(fields[i][0]);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.get(fields[i][0]).getMaximum(fields[i][0]);	  int    max    =    val.get(fields[i][0]).getActualMaximum(fields[i][0]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	40	None	replace
47	[BUG]  [BUGGY]  int  max  =  val.get(fields[i][0]).getMaximum(fields[i][1]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.get(fields[i][0]).getMaximum(fields[i][1]);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.get(fields[i][0]).getMaximum(fields[i][1]);	  int    max    =    val.get(fields[i][0]).getActualMaximum(fields[i][0]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	40	None	replace
48	[BUG]  [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])/  2;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])/  2;  [BUGGY]      int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])/  2;	  int    max    =    val.getActualMaximum(fields[i][0]);    offset    =    val.get(fields[i][0])/    min;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
49	[BUG]  [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])/  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])/  1;  [BUGGY]      int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])/  1;	  int    max    =    val.getActualMaximum(fields[i][0]);    offset    =    val.get(fields[i][0])/    min;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
50	[BUG]  [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])/  3;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                            AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])/  3;  [BUGGY]      int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])/  3;	  int    max    =    val.getActualMaximum(fields[i][0]);    offset    =    val.get(fields[i][0])/    min;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
51	[BUG]  [BUGGY]  int  max  =  val.getMaximum(fields[i][0]  -  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getMaximum(fields[i][0]  -  1);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getMaximum(fields[i][0]  -  1);	  int    max    =    val.getMaximum(fields[i][0]    +    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
52	[BUG]  [BUGGY]  int  max  =  val.get(fields[i][0]  +  min,  roundUp);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.get(fields[i][0]  +  min,  roundUp);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.get(fields[i][0]  +  min,  roundUp);	  int    max    =    val.get(fields[i][0]    +    min);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
53	[BUG]  [BUGGY]  int  max  =  val.get(fields[i][0]  +  min,  offset);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.get(fields[i][0]  +  min,  offset);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.get(fields[i][0]  +  min,  offset);	  int    max    =    val.get(fields[i][0]    +    min);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
54	[BUG]  [BUGGY]  int  max  =  val.get(fields[i][0]  +  min,  offsetSet);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.get(fields[i][0]  +  min,  offsetSet);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.get(fields[i][0]  +  min,  offsetSet);	  int    max    =    val.get(fields[i][0]    +    min);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
55	[BUG]  [BUGGY]  int  max  =  val.getIntValue(fields[i][0]);  offset  =  val.get(fields[i][0])/  min;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getIntValue(fields[i][0]);  offset  =  val.get(fields[i][0])/  min;  [BUGGY]      int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getIntValue(fields[i][0]);  offset  =  val.get(fields[i][0])/  min;	  int    max    =    val.getIntValue(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
56	[BUG]  [BUGGY]  if(offsetSet)  {  int  max  =  val.getIntValue(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  if(offsetSet)  {  int  max  =  val.getIntValue(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }  [BUGGY]      int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	if(offsetSet)  {  int  max  =  val.getIntValue(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }	  int    max    =    val.getIntValue(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
57	[BUG]  [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0],  3);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0],  3);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getActualMaximum(fields[i][0],  3);	  int    max    =    val.getActualMaximum(fields[i][0],    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	39	None	replace
58	[BUG]  [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0],  2);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0],  2);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getActualMaximum(fields[i][0],  2);	  int    max    =    val.getActualMaximum(fields[i][0],    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	39	None	replace
59	[BUG]  [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0],  field,  roundUp);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0],  field,  roundUp);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getActualMaximum(fields[i][0],  field,  roundUp);	  int    max    =    val.getActualMaximum(fields[i][0],    min,    roundUp);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	21	None	replace
60	[BUG]  [BUGGY]  int  min  =  val.getMinimum(fields[i][0]  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  min  =  val.getMinimum(fields[i][0]  +  1);  [BUGGY]      int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  min  =  val.getMinimum(fields[i][0]  +  1);	  int    min    =    val.getMinimum(fields[i][0]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
61	[BUG]  [BUGGY]  int  min  =  val.getMaximum(fields[i][0]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  min  =  val.getMaximum(fields[i][0]);  [BUGGY]      int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  min  =  val.getMaximum(fields[i][0]);	  int    min    =    val.getMinimum(fields[i][0]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
62	[BUG]  [BUGGY]  int  min  =  val.getMinimum(fields[i][1]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  min  =  val.getMinimum(fields[i][1]);  [BUGGY]      int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  min  =  val.getMinimum(fields[i][1]);	  int    min    =    val.getMinimum(fields[i][0]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
63	[BUG]  [BUGGY]  int  max  =  val.getMaximum(fields[i][0]  -  min,  roundUp);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getMaximum(fields[i][0]  -  min,  roundUp);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getMaximum(fields[i][0]  -  min,  roundUp);	  int    max    =    val.getActualMaximum(fields[i][0]    -    min,    offset);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
64	[BUG]  [BUGGY]  int  max  =  val.getMaximum(fields[i][1]  +  min);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getMaximum(fields[i][1]  +  min);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getMaximum(fields[i][1]  +  min);	  int    max    =    val.getMaximum(fields[i][1]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	33	None	replace
65	[BUG]  [BUGGY]  int  max  =  val.getMaximum(fields[i][1]  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getMaximum(fields[i][1]  +  1);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getMaximum(fields[i][1]  +  1);	  int    max    =    val.getMaximum(fields[i][1]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	33	None	replace
66	[BUG]  [BUGGY]  int  max  =  val.getMaximum(fields[i][0]  -  min,  offset);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getMaximum(fields[i][0]  -  min,  offset);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getMaximum(fields[i][0]  -  min,  offset);	  int    max    =    val.getMaximum(fields[i][0]    -    min);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
67	[BUG]  [BUGGY]  int  max  =  val.getMaximum(fields[i][0]  -  min,  offsetSet);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getMaximum(fields[i][0]  -  min,  offsetSet);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getMaximum(fields[i][0]  -  min,  offsetSet);	  int    max    =    val.getMaximum(fields[i][0]    -    min);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
68	[BUG]  [BUGGY]  int  max  =  val.get(fields[i][0],  field);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.get(fields[i][0],  field);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.get(fields[i][0],  field);	  int    max    =    val.getActualMaximum(fields[i][0],    field);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	27	None	replace
69	[BUG]  [BUGGY]  int  max  =  val.getMinimum(fields[i][0],  field);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getMinimum(fields[i][0],  field);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getMinimum(fields[i][0],  field);	  int    max    =    val.getActualMaximum(fields[i][0],    field);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	27	None	replace
70	[BUG]  [BUGGY]  int  max  =  val.getMaximum(fields[i][0],  min  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getMaximum(fields[i][0],  min  +  1);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getMaximum(fields[i][0],  min  +  1);	  int    max    =    val.getMaximum(fields[i][0],    min);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	32	None	replace
71	[BUG]  [BUGGY]  int  max  =  val.getMaximum(fields[i][0],  min,  roundUp);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getMaximum(fields[i][0],  min,  roundUp);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getMaximum(fields[i][0],  min,  roundUp);	  int    max    =    val.getMaximum(fields[i][0],    min);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	32	None	replace
72	[BUG]  [BUGGY]  int  max  =  val.getMaximum(fields[i][0],  min,  offsetSet);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getMaximum(fields[i][0],  min,  offsetSet);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getMaximum(fields[i][0],  min,  offsetSet);	  int    max    =    val.getMaximum(fields[i][0],    min);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	32	None	replace
73	[BUG]  [BUGGY]  int  max  =  val.getMaximum(fields[i][0],  min,  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getMaximum(fields[i][0],  min,  1);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getMaximum(fields[i][0],  min,  1);	  int    max    =    val.getMaximum(fields[i][0],    min);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	32	None	replace
74	[BUG]  [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0]  +  min,  offset  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0]  +  min,  offset  +  1);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getActualMaximum(fields[i][0]  +  min,  offset  +  1);	  int    max    =    val.getActualMaximum(fields[i][0]    +    min,    offset);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	19	None	replace
75	[BUG]  [BUGGY]  int  max  =  val.getMaximum(fields[i][0]  -  min  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getMaximum(fields[i][0]  -  min  +  1);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getMaximum(fields[i][0]  -  min  +  1);	  int    max    =    val.getMaximum(fields[i][0]    -    min);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
76	[BUG]  [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0],  field  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0],  field  +  1);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getActualMaximum(fields[i][0],  field  +  1);	  int    max    =    val.getActualMaximum(fields[i][0],    min    +    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	22	None	replace
77	[BUG]  [BUGGY]  if(fields[i][0]  ==  min)  {  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  if(fields[i][0]  ==  min)  {  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }  [BUGGY]      int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	if(fields[i][0]  ==  min)  {  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }	  if(fields[i][0]    ==    field)    {    int    max    =    val.getActualMaximum(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	30	None	replace
78	[BUG]  [BUGGY]  if(fields[i][0]  >=  min)  {  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  if(fields[i][0]  >=  min)  {  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }  [BUGGY]      int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	if(fields[i][0]  >=  min)  {  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }	  if(fields[i][0]    ==    field)    {    int    max    =    val.getActualMaximum(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	30	None	replace
79	[BUG]  [BUGGY]  int  max  =  val.getMaximum(fields[i][1]  -  min);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getMaximum(fields[i][1]  -  min);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getMaximum(fields[i][1]  -  min);	  int    max    =    val.getMaximum(fields[i][1]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	33	None	replace
80	[BUG]  [BUGGY]  offset  =  val.get(fields[i][0])-  min  +  2;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  offset  =  val.get(fields[i][0])-  min  +  2;  [BUGGY]      int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	offset  =  val.get(fields[i][0])-  min  +  2;	  offset    =    val.get(fields[i][0])-    min;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
81	[BUG]  [BUGGY]  int  min  =  val.getMinimum(fields[i][0],  fieldSet);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  min  =  val.getMinimum(fields[i][0],  fieldSet);  [BUGGY]      int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  min  =  val.getMinimum(fields[i][0],  fieldSet);	  int    min    =    val.getMinimum(fields[i][0]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
82	[BUG]  [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0]  /  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0]  /  1);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getActualMaximum(fields[i][0]  /  1);	  int    max    =    val.getActualMaximum(fields[i][0]    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	29	None	replace
83	[BUG]  [BUGGY]  int  max  =  val.getMaximum(fields[i][0],  min,  offset);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getMaximum(fields[i][0],  min,  offset);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getMaximum(fields[i][0],  min,  offset);	  int    max    =    val.getMaximum(fields[i][0],    min);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	32	None	replace
84	[BUG]  [BUGGY]  int  max  =  val.get(fields[i][0]).getActualMaximum(fields[i][0]  +  min);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.get(fields[i][0]).getActualMaximum(fields[i][0]  +  min);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.get(fields[i][0]).getActualMaximum(fields[i][0]  +  min);	  int    max    =    val.get(fields[i][0]).getActualMaximum(fields[i][0]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	40	None	replace
85	[BUG]  [BUGGY]  int  max  =  val.get(fields[i][0]).getActualMaximum(fields[i][0]  -  min);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.get(fields[i][0]).getActualMaximum(fields[i][0]  -  min);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.get(fields[i][0]).getActualMaximum(fields[i][0]  -  min);	  int    max    =    val.get(fields[i][0]).getActualMaximum(fields[i][0]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	40	None	replace
86	[BUG]  [BUGGY]  if(!offsetSet)  {  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  if(!offsetSet)  {  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }  [BUGGY]      int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	if(!offsetSet)  {  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }	  if(offsetSet)    {    int    max    =    val.getActualMaximum(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	41	None	replace
87	[BUG]  [BUGGY]  if(fields[i][0]  ==  min)  {  int  max  =  val.getActualMinimum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  if(fields[i][0]  ==  min)  {  int  max  =  val.getActualMinimum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }  [BUGGY]      int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	if(fields[i][0]  ==  min)  {  int  max  =  val.getActualMinimum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }	  if(fields[i][0]    ==    field)    {    int    max    =    val.getActualMinimum(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	26	None	replace
88	[BUG]  [BUGGY]  int  max  =  val.getIntValue(fields[i][0]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getIntValue(fields[i][0]);  [BUGGY]      int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getIntValue(fields[i][0]);	  int    max    =    val.getIntValue(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
89	[BUG]  [BUGGY]  if(fields[i][0]  ==  field)  {  int  max  =  val.getIntValue(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  if(fields[i][0]  ==  field)  {  int  max  =  val.getIntValue(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }  [BUGGY]      int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	if(fields[i][0]  ==  field)  {  int  max  =  val.getIntValue(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }	  int    max    =    val.getIntValue(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
90	[BUG]  [BUGGY]  int  max  =  val.getIntValue(fields[i][0]  +  1);  offset  =  val.get(fields[i][0])-  min;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getIntValue(fields[i][0]  +  1);  offset  =  val.get(fields[i][0])-  min;  [BUGGY]      int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getIntValue(fields[i][0]  +  1);  offset  =  val.get(fields[i][0])-  min;	  int    max    =    val.getIntValue(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
91	[BUG]  [BUGGY]  int  max  =  val.getActualMinimum(fields[i][0]  +  min,  offset);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getActualMinimum(fields[i][0]  +  min,  offset);  [BUGGY]      int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getActualMinimum(fields[i][0]  +  min,  offset);	  int    max    =    val.getActualMinimum(fields[i][0]    +    min);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	34	None	replace
92	[BUG]  [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0],  min,  offsetset);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0],  min,  offsetset);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getActualMaximum(fields[i][0],  min,  offsetset);	  int    max    =    val.getActualMaximum(fields[i][0],    min,    roundUp);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	21	None	replace
93	[BUG]  [BUGGY]  int  max  =  val.getMaximum(fields[i][0])-  min  +  2;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getMaximum(fields[i][0])-  min  +  2;  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getMaximum(fields[i][0])-  min  +  2;	  int    max    =    val.getMaximum(fields[i][0])-    min;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	37	None	replace
94	[BUG]  [BUGGY]  int  max  =  val.getActualMaximum(fields[i][1]  +  min);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getActualMaximum(fields[i][1]  +  min);  [BUGGY]      int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getActualMaximum(fields[i][1]  +  min);	  int    max    =    val.getActualMaximum(fields[i][1]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	31	None	replace
95	[BUG]  [BUGGY]  int  max  =  val.get(fields[i][1]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.get(fields[i][1]);  [BUGGY]      int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.get(fields[i][1]);	  int    max    =    val.getActualMaximum(fields[i][1]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	31	None	replace
96	[BUG]  [BUGGY]  offset  =  val.getActualMinimum(fields[i][0]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  offset  =  val.getActualMinimum(fields[i][0]);  [BUGGY]      int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	offset  =  val.getActualMinimum(fields[i][0]);	  if(offsetSet)    {    int    max    =    val.getActualMinimum(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	25	None	replace
97	[BUG]  [BUGGY]  int  max  =  val.getActualMaximum(fields[i][1],  field);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getActualMaximum(fields[i][1],  field);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getActualMaximum(fields[i][1],  field);	  int    max    =    val.getActualMaximum(fields[i][0],    field);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	27	None	replace
98	[BUG]  [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0],  1  +  min);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0],  1  +  min);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getActualMaximum(fields[i][0],  1  +  min);	  int    max    =    val.getActualMaximum(fields[i][0],    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	39	None	replace
99	[BUG]  [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0],  field,  offsetSet);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0],  field,  offsetSet);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getActualMaximum(fields[i][0],  field,  offsetSet);	  int    max    =    val.getActualMaximum(fields[i][0],    min,    offsetSet);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	23	None	replace
100	[BUG]  [BUGGY]  int  max  =  val.getActualMinimum(fields[i][0]  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getActualMinimum(fields[i][0]  +  1);  [BUGGY]      int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getActualMinimum(fields[i][0]  +  1);	  int    max    =    val.getActualMinimum(fields[i][0]    +    min);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	34	None	replace
101	[BUG]  [BUGGY]  int  min  =  val.getMinimum(fields[i][0])-  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  min  =  val.getMinimum(fields[i][0])-  1;  [BUGGY]      int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  min  =  val.getMinimum(fields[i][0])-  1;	  int    min    =    val.getMinimum(fields[i][0]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
102	[BUG]  [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0],  field,  offset);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0],  field,  offset);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getActualMaximum(fields[i][0],  field,  offset);	  int    max    =    val.getActualMaximum(fields[i][0]    +    min,    offset);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	19	None	replace
103	[BUG]  [BUGGY]  if(offset  >=  0)  {  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  if(offset  >=  0)  {  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }  [BUGGY]      int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	if(offset  >=  0)  {  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }	  if(offsetSet)    {    int    max    =    val.getActualMaximum(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	41	None	replace
104	[BUG]  [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0],  offsetSet);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0],  offsetSet);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getActualMaximum(fields[i][0],  offsetSet);	  int    max    =    val.getActualMaximum(fields[i][0]    +    min,    offsetSet);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
105	[BUG]  [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0],  round,  offsetSet);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0],  round,  offsetSet);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getActualMaximum(fields[i][0],  round,  offsetSet);	  int    max    =    val.getActualMaximum(fields[i][0],    min,    offsetSet);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	23	None	replace
106	[BUG]  [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0],  roundUp,  offsetSet);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0],  roundUp,  offsetSet);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getActualMaximum(fields[i][0],  roundUp,  offsetSet);	  int    max    =    val.getActualMaximum(fields[i][0],    min,    offsetSet);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	23	None	replace
107	[BUG]  [BUGGY]  int  max  =  val.getIntValue(fields[i][0])-  min;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getIntValue(fields[i][0])-  min;  [BUGGY]      int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getIntValue(fields[i][0])-  min;	  int    max    =    val.getIntValue(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
108	[BUG]  [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0],  offset,  roundUp);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0],  offset,  roundUp);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getActualMaximum(fields[i][0],  offset,  roundUp);	  int    max    =    val.getActualMaximum(fields[i][0],    min,    roundUp);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	21	None	replace
109	[BUG]  [BUGGY]  int  max  =  val.getMaximum(fields[i][0]  *  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getMaximum(fields[i][0]  *  1);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getMaximum(fields[i][0]  *  1);	  int    max    =    val.getMaximum(fields[i][0]    +    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
110	[BUG]  [BUGGY]  int  max  =  val.get(fields[i][0]).getActualMaximum(fields[i][0]  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.get(fields[i][0]).getActualMaximum(fields[i][0]  +  1);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.get(fields[i][0]).getActualMaximum(fields[i][0]  +  1);	  int    max    =    val.get(fields[i][0]).getActualMaximum(fields[i][0]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	40	None	replace
111	[BUG]  [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0],  val.get(fields[i][0])-  min,  offset);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0],  val.get(fields[i][0])-  min,  offset);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getActualMaximum(fields[i][0],  val.get(fields[i][0])-  min,  offset);	  int    max    =    val.getActualMaximum(fields[i][0]    -    min,    offset);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
112	[BUG]  [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0]  -  min,  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0]  -  min,  1);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getActualMaximum(fields[i][0]  -  min,  1);	  int    max    =    val.getActualMaximum(fields[i][0]    -    min,    offset);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
113	[BUG]  [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0],  roundUp  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0],  roundUp  +  1);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getActualMaximum(fields[i][0],  roundUp  +  1);	  int    max    =    val.getActualMaximum(fields[i][0],    min    +    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	22	None	replace
114	[BUG]  [BUGGY]  int  max  =  val.getMaximum(fields[i][0],  field);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  AssertionFailedError      [CONTEXT]      if  (offset  >=  12)  {  offset  -=  12;  }  roundUp  =  offset  >  6;  offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);      [BUGGY]  int  max  =  val.getMaximum(fields[i][0],  field);  [BUGGY]        offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }  if  (offset  !=  0)  {  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	731	731	1	replace	int  max  =  val.getMaximum(fields[i][0],  field);	  int    max    =    val.getMaximum(fields[i][0],    min);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	32	None	replace
