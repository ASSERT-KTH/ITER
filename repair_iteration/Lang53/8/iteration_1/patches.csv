bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.DATE,  round);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  Date  value  =  val.get(Calendar.DATE,  round);  [BUGGY]    if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.DATE,  round);	      Date    value    =    val.get(Calendar.DATE);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
2	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.DATE)+  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  Date  value  =  val.get(Calendar.DATE)+  1;  [BUGGY]    if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.DATE)+  1;	      Date    value    =    val.get(Calendar.DATE);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
3	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.DAY_OF_MONTH);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  Date  value  =  val.get(Calendar.DAY_OF_MONTH);  [BUGGY]    if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.DAY_OF_MONTH);	      Date    value    =    val.get(Calendar.DATE);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
4	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.DATE),  round);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  Date  value  =  val.get(Calendar.DATE),  round);  [BUGGY]    if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.DATE),  round);	      Date    value    =    val.get(Calendar.DATE);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
5	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.SECOND,  round);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  Date  value  =  val.get(Calendar.SECOND,  round);  [BUGGY]    if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.SECOND,  round);	      Date    value    =    val.get(Calendar.SECOND);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
6	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.SECOND)+  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  Date  value  =  val.get(Calendar.SECOND)+  1;  [BUGGY]    if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.SECOND)+  1;	      Date    value    =    val.get(Calendar.SECOND);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
7	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.SECOND  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  Date  value  =  val.get(Calendar.SECOND  +  1);  [BUGGY]    if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.SECOND  +  1);	      Date    value    =    val.get(Calendar.SECOND);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
8	[BUG]  [BUGGY]  val.set(field,  Calendar.YEAR);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  val.set(field,  Calendar.YEAR);  [BUGGY]    if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(field,  Calendar.YEAR);	      val.set(Calendar.YEAR,    field);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
9	[BUG]  [BUGGY]  val.set(Calendar.YEAR,  round);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  val.set(Calendar.YEAR,  round);  [BUGGY]    if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(Calendar.YEAR,  round);	      val.set(Calendar.YEAR,    field);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
10	[BUG]  [BUGGY]  if  (val.get(Calendar.YEAR)  ==  1000)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  if  (val.get(Calendar.YEAR)  ==  1000)  {  [BUGGY]    throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	if  (val.get(Calendar.YEAR)  ==  1000)  {	  if    (val.get(Calendar.YEAR)    ==    280000000)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
11	[BUG]  [BUGGY]  if  (val.get(Calendar.YEAR)  ==  310000000)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  if  (val.get(Calendar.YEAR)  ==  310000000)  {  [BUGGY]    throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	if  (val.get(Calendar.YEAR)  ==  310000000)  {	  if    (val.get(Calendar.YEAR)    ==    280000000)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
12	[BUG]  [BUGGY]  if  (val.get(Calendar.YEAR)  ==  1)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  if  (val.get(Calendar.YEAR)  ==  1)  {  [BUGGY]    throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	if  (val.get(Calendar.YEAR)  ==  1)  {	  if    (val.get(Calendar.YEAR)    ==    280000000)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
13	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR,  round);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR,  round);  [BUGGY]    if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	int[][]  fields  =  val.get(Calendar.YEAR,  round);	      int[][]    fields    =    val.get(Calendar.YEAR);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
14	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR,  field);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR,  field);  [BUGGY]    if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	int[][]  fields  =  val.get(Calendar.YEAR,  field);	      int[][]    fields    =    val.get(Calendar.YEAR);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
15	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.MONTH);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  int[][]  fields  =  val.get(Calendar.MONTH);  [BUGGY]    if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	int[][]  fields  =  val.get(Calendar.MONTH);	      int[][]    fields    =    val.get(Calendar.YEAR);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
16	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR  +  1);  [BUGGY]    if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	int[][]  fields  =  val.get(Calendar.YEAR  +  1);	      int[][]    fields    =    val.get(Calendar.YEAR);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
17	[BUG]  [BUGGY]  Date  date  =  val.get(Calendar.DATE,  round);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  Date  date  =  val.get(Calendar.DATE,  round);  [BUGGY]    if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  date  =  val.get(Calendar.DATE,  round);	      Date    date    =    val.get(Calendar.DATE);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
18	[BUG]  [BUGGY]  Date  date  =  val.get(Calendar.DATE,  field);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  Date  date  =  val.get(Calendar.DATE,  field);  [BUGGY]    if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  date  =  val.get(Calendar.DATE,  field);	      Date    date    =    val.get(Calendar.DATE);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
19	[BUG]  [BUGGY]  Date  date  =  val.get(Calendar.DATE),  round);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  Date  date  =  val.get(Calendar.DATE),  round);  [BUGGY]    if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  date  =  val.get(Calendar.DATE),  round);	      Date    date    =    val.get(Calendar.DATE);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
20	[BUG]  [BUGGY]  Date  date  =  val.get(Calendar.DATE)+  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  Date  date  =  val.get(Calendar.DATE)+  1;  [BUGGY]    if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  date  =  val.get(Calendar.DATE)+  1;	      Date    date    =    val.get(Calendar.DATE);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
21	[BUG]  [BUGGY]  val.set(Calendar.MONTH,  field,  round  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  val.set(Calendar.MONTH,  field,  round  +  1);  [BUGGY]    if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(Calendar.MONTH,  field,  round  +  1);	      val.set(Calendar.MONTH,    field,    round);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
22	[BUG]  [BUGGY]  val.set(Calendar.MONTH,  field,  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  val.set(Calendar.MONTH,  field,  1);  [BUGGY]    if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(Calendar.MONTH,  field,  1);	      val.set(Calendar.MONTH,    field,    round);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
23	[BUG]  [BUGGY]  val.set(Calendar.MONTH,  field,  round  -  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  val.set(Calendar.MONTH,  field,  round  -  1);  [BUGGY]    if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(Calendar.MONTH,  field,  round  -  1);	      val.set(Calendar.MONTH,    field,    round);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
24	[BUG]  [BUGGY]  val.set(Calendar.MONTH,  field,  0,  round);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  val.set(Calendar.MONTH,  field,  0,  round);  [BUGGY]    if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(Calendar.MONTH,  field,  0,  round);	      val.set(Calendar.MONTH,    field,    round);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
25	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.YEAR,  round);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  Date  value  =  val.get(Calendar.YEAR,  round);  [BUGGY]    if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.YEAR,  round);	      Date    value    =    val.get(Calendar.YEAR);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
26	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.MONTH);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  Date  value  =  val.get(Calendar.MONTH);  [BUGGY]    if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.MONTH);	      Date    value    =    val.get(Calendar.YEAR);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
27	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.YEAR  +  1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  Date  value  =  val.get(Calendar.YEAR  +  1);  [BUGGY]    if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.YEAR  +  1);	      Date    value    =    val.get(Calendar.YEAR);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
28	[BUG]  [BUGGY]  if  (val.get(Calendar.YEAR)>  10000000)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  if  (val.get(Calendar.YEAR)>  10000000)  {  [BUGGY]    throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	if  (val.get(Calendar.YEAR)>  10000000)  {	  if    (val.get(Calendar.YEAR)>    310000000)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
29	[BUG]  [BUGGY]  if  (val.get(Calendar.YEAR)>  1000000)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  if  (val.get(Calendar.YEAR)>  1000000)  {  [BUGGY]    throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	if  (val.get(Calendar.YEAR)>  1000000)  {	  if    (val.get(Calendar.YEAR)>    310000000)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
30	[BUG]  [BUGGY]  if  (val.get(Calendar.YEAR)>  100000)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  if  (val.get(Calendar.YEAR)>  100000)  {  [BUGGY]    throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	if  (val.get(Calendar.YEAR)>  100000)  {	  if    (val.get(Calendar.YEAR)>    310000000)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
31	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND,  round);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND,  round);  [BUGGY]    if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	int[][]  fields  =  val.get(Calendar.SECOND,  round);	      int[][]    fields    =    val.get(Calendar.SECOND);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
32	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND)+  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND)+  1;  [BUGGY]    if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	int[][]  fields  =  val.get(Calendar.SECOND)+  1;	      int[][]    fields    =    val.get(Calendar.SECOND);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
33	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND  +  1);  [BUGGY]    if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	int[][]  fields  =  val.get(Calendar.SECOND  +  1);	      int[][]    fields    =    val.get(Calendar.SECOND);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
34	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND,  field);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND,  field);  [BUGGY]    if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	int[][]  fields  =  val.get(Calendar.SECOND,  field);	      int[][]    fields    =    val.get(Calendar.SECOND);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
35	[BUG]  [BUGGY]  val.set(Calendar.MILLISECOND,  field);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  val.set(Calendar.MILLISECOND,  field);  [BUGGY]    if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(Calendar.MILLISECOND,  field);	      val.set(Calendar.MILLISECOND,    round);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
36	[BUG]  [BUGGY]  val.set(field,  round);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  val.set(field,  round);  [BUGGY]    if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(field,  round);	      val.set(Calendar.MILLISECOND,    round);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
37	[BUG]  [BUGGY]  val.set(0,  round);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  val.set(0,  round);  [BUGGY]    if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(0,  round);	      val.set(Calendar.MILLISECOND,    round);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
38	[BUG]  [BUGGY]  if(val.get(Calendar.YEAR)>  2800000000)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  if(val.get(Calendar.YEAR)>  2800000000)  {  [BUGGY]    throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	if(val.get(Calendar.YEAR)>  2800000000)  {	  if(val.get(Calendar.YEAR)!=    280000000)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
39	[BUG]  [BUGGY]  Date  value  =  val.getTime();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  Date  value  =  val.getTime();  [BUGGY]    throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.getTime();	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
40	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.MILLISECOND);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  Date  value  =  val.get(Calendar.MILLISECOND);  [BUGGY]    throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.MILLISECOND);	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
41	[BUG]  [BUGGY]  int[][]  fields  =  val.getCalendarFields();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  int[][]  fields  =  val.getCalendarFields();  [BUGGY]    throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	int[][]  fields  =  val.getCalendarFields();	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
42	[BUG]  [BUGGY]  val.set(Calendar.YEAR,  field,  round  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  val.set(Calendar.YEAR,  field,  round  +  1);  [BUGGY]    if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(Calendar.YEAR,  field,  round  +  1);	      val.set(Calendar.YEAR,    field,    round);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
43	[BUG]  [BUGGY]  val.set(Calendar.YEAR,  field,  round  -  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  val.set(Calendar.YEAR,  field,  round  -  1);  [BUGGY]    if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(Calendar.YEAR,  field,  round  -  1);	      val.set(Calendar.YEAR,    field,    round);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
44	[BUG]  [BUGGY]  val.set(Calendar.YEAR,  field,  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  val.set(Calendar.YEAR,  field,  1);  [BUGGY]    if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(Calendar.YEAR,  field,  1);	      val.set(Calendar.YEAR,    field,    round);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
45	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.DATE,  field);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  Date  value  =  val.get(Calendar.DATE,  field);  [BUGGY]    if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.DATE,  field);	      Date    value    =    val.get(Calendar.DATE);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
46	[BUG]  [BUGGY]  if  (val.get(Calendar.YEAR)  ==  10000000)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  if  (val.get(Calendar.YEAR)  ==  10000000)  {  [BUGGY]    throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	if  (val.get(Calendar.YEAR)  ==  10000000)  {	  if    (val.get(Calendar.YEAR)    ==    280000000)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
47	[BUG]  [BUGGY]  if(val.get(Calendar.YEAR)!=  1000)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  if(val.get(Calendar.YEAR)!=  1000)  {  [BUGGY]    throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	if(val.get(Calendar.YEAR)!=  1000)  {	  if(val.get(Calendar.YEAR)!=    280000000)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
48	[BUG]  [BUGGY]  if  (val.get(Calendar.YEAR)>  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  if  (val.get(Calendar.YEAR)>  0)  {  [BUGGY]    throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	if  (val.get(Calendar.YEAR)>  0)  {	  if    (val.get(Calendar.YEAR)>    310000000)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
49	[BUG]  [BUGGY]  if  (val.get(Calendar.YEAR)>  300000000)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  if  (val.get(Calendar.YEAR)>  300000000)  {  [BUGGY]    throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	if  (val.get(Calendar.YEAR)>  300000000)  {	  if    (val.get(Calendar.YEAR)>    310000000)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
50	[BUG]  [BUGGY]  val.set(Calendar.MONTH,  field,  3);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  val.set(Calendar.MONTH,  field,  3);  [BUGGY]    if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(Calendar.MONTH,  field,  3);	      val.set(Calendar.MONTH,    field,    round);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
51	[BUG]  [BUGGY]  val.set(Calendar.MONTH,  field,  2);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  val.set(Calendar.MONTH,  field,  2);  [BUGGY]    if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(Calendar.MONTH,  field,  2);	      val.set(Calendar.MONTH,    field,    round);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
52	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.YEAR)+  1;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  Date  value  =  val.get(Calendar.YEAR)+  1;  [BUGGY]    if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.YEAR)+  1;	      Date    value    =    val.get(Calendar.YEAR);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
53	[BUG]  [BUGGY]  val.set(Calendar.YEAR,  field  +  1);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  val.set(Calendar.YEAR,  field  +  1);  [BUGGY]    if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(Calendar.YEAR,  field  +  1);	      val.set(Calendar.YEAR,    field);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
54	[BUG]  [BUGGY]  val.set(Calendar.YEAR,  field  -  1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  val.set(Calendar.YEAR,  field  -  1);  [BUGGY]    if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(Calendar.YEAR,  field  -  1);	      val.set(Calendar.YEAR,    field);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
55	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR)+  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR)+  1;  [BUGGY]    if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	int[][]  fields  =  val.get(Calendar.YEAR)+  1;	      int[][]    fields    =    val.get(Calendar.YEAR);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
56	[BUG]  [BUGGY]  val.set(Calendar.YEAR,  field,  3);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  val.set(Calendar.YEAR,  field,  3);  [BUGGY]    if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(Calendar.YEAR,  field,  3);	      val.set(Calendar.YEAR,    field,    round);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
57	[BUG]  [BUGGY]  val.setTime(new  Date(field));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  val.setTime(new  Date(field));  [BUGGY]    throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.setTime(new  Date(field));	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
58	[BUG]  [BUGGY]  val.set(Calendar.MILLISECOND,  round  -  1);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  val.set(Calendar.MILLISECOND,  round  -  1);  [BUGGY]    if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(Calendar.MILLISECOND,  round  -  1);	      val.set(Calendar.MILLISECOND,    round);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
59	[BUG]  [BUGGY]  val.set(Calendar.MILLISECOND,  this.field);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {    [BUGGY]  val.set(Calendar.MILLISECOND,  this.field);  [BUGGY]    if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(   "Calendar  value  too  large  for  accurate  calculations   ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(Calendar.MILLISECOND,  this.field);	      val.set(Calendar.MILLISECOND,    round);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
